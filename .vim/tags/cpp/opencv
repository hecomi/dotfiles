!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** A;$/;"	m	class:cv::LevMarqSparse
A	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<double> A;$/;"	m	class:cv::LogPolar_Adjacent
ABSOLUTE_LOSS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon295
ADAPTIVE_THRESH_GAUSSIAN_C	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { ADAPTIVE_THRESH_MEAN_C=0, ADAPTIVE_THRESH_GAUSSIAN_C=1 };$/;"	e	enum:cv::__anon236
ADAPTIVE_THRESH_MEAN_C	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { ADAPTIVE_THRESH_MEAN_C=0, ADAPTIVE_THRESH_GAUSSIAN_C=1 };$/;"	e	enum:cv::__anon236
ADD_FAILURE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ADD_FAILURE(/;"	d
ADD_FAILURE_AT	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ADD_FAILURE_AT(/;"	d
AFFINE	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    AFFINE = 3$/;"	e	enum:cv::videostab::MotionModel
ALLOC_PAGE_LOCKED	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon183
ALLOC_WRITE_COMBINED	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon183
ALLOC_ZEROCOPY	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon183
ALL_BORDER_MODES	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define ALL_BORDER_MODES /;"	d
ALL_BORDER_TYPES	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ALL_BORDER_TYPES /;"	d
ALL_CHANNELS	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ALL_CHANNELS /;"	d
ALL_DEPTH	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ALL_DEPTH /;"	d
ALL_DEVICES	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ALL_DEVICES /;"	d
ALL_INTERPOLATIONS	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define ALL_INTERPOLATIONS /;"	d
ALL_TYPES	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ALL_TYPES /;"	d
ALPHA_ATOP	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_ATOP_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon184
ALPHA_IN	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_IN_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_OUT	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_OUT_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_OVER	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_OVER_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_PLUS	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_PLUS_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon184
ALPHA_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon184
ALPHA_XOR	/usr/local/include/opencv2/gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon184
ALPHA_XOR_PREMUL	/usr/local/include/opencv2/gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon184
ANGLE_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        ANGLE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
ANGLE_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        ANGLE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
ANGLE_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                ANGLE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
ANN_MLP_TrainParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvANN_MLP_TrainParams ANN_MLP_TrainParams;$/;"	t	namespace:cv
ARRAY_BUFFER	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        ARRAY_BUFFER         = 0x8892, \/\/!< The buffer will be used as a source for vertex data$/;"	e	enum:cv::ogl::Buffer::Target
ARRAY_BUFFER	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        ARRAY_BUFFER = 0x8892,  \/\/ buffer will use for OpenGL arrays (vertices, colors, normals, etc)$/;"	e	enum:cv::GlBuffer::Usage
ASSERT_ANY_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_ANY_THROW(/;"	d
ASSERT_DEATH	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_DEATH(/;"	d
ASSERT_DEATH_IF_SUPPORTED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_DEATH_IF_SUPPORTED(/;"	d
ASSERT_DEBUG_DEATH	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define ASSERT_DEBUG_DEATH(/;"	d
ASSERT_DOUBLE_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_DOUBLE_EQ(/;"	d
ASSERT_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_EQ(/;"	d
ASSERT_EXIT	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_EXIT(/;"	d
ASSERT_FALSE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_FALSE(/;"	d
ASSERT_FLOAT_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_FLOAT_EQ(/;"	d
ASSERT_GE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_GE(/;"	d
ASSERT_GT	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_GT(/;"	d
ASSERT_HRESULT_FAILED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_HRESULT_FAILED(/;"	d
ASSERT_HRESULT_SUCCEEDED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_HRESULT_SUCCEEDED(/;"	d
ASSERT_KEYPOINTS_EQ	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_KEYPOINTS_EQ(/;"	d
ASSERT_LE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_LE(/;"	d
ASSERT_LT	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_LT(/;"	d
ASSERT_MAT_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_MAT_NEAR(/;"	d
ASSERT_MAT_SIMILAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_MAT_SIMILAR(/;"	d
ASSERT_NE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define ASSERT_NE(/;"	d
ASSERT_NEAR	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_NEAR(/;"	d
ASSERT_NO_FATAL_FAILURE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_NO_FATAL_FAILURE(/;"	d
ASSERT_NO_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_NO_THROW(/;"	d
ASSERT_POINT2_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_POINT2_NEAR(/;"	d
ASSERT_POINT3_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_POINT3_NEAR(/;"	d
ASSERT_PRED1	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED1(/;"	d
ASSERT_PRED2	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED2(/;"	d
ASSERT_PRED3	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED3(/;"	d
ASSERT_PRED4	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED4(/;"	d
ASSERT_PRED5	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED5(/;"	d
ASSERT_PRED_FORMAT1	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED_FORMAT1(/;"	d
ASSERT_PRED_FORMAT2	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED_FORMAT2(/;"	d
ASSERT_PRED_FORMAT3	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED_FORMAT3(/;"	d
ASSERT_PRED_FORMAT4	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED_FORMAT4(/;"	d
ASSERT_PRED_FORMAT5	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_PRED_FORMAT5(/;"	d
ASSERT_SCALAR_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define ASSERT_SCALAR_NEAR(/;"	d
ASSERT_STRCASEEQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_STRCASEEQ(/;"	d
ASSERT_STRCASENE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_STRCASENE(/;"	d
ASSERT_STREQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_STREQ(/;"	d
ASSERT_STRNE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_STRNE(/;"	d
ASSERT_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_THROW(/;"	d
ASSERT_TRUE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define ASSERT_TRUE(/;"	d
AUTOTUNED	/usr/local/include/opencv2/flann/defines.h	/^    AUTOTUNED = 255$/;"	e	enum:cvflann::flann_algorithm_t
Abort	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void Abort() { abort(); }$/;"	f	namespace:std::tr1::posix
AbortReason	/usr/local/include/opencv2/ts/ts_gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
Access	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    enum Access$/;"	g	class:cv::ogl::Buffer
Accumulator	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS Accumulator$/;"	s	namespace:cv
Accumulator	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cv
Accumulator	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cv
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS Accumulator$/;"	s	namespace:cv::ocl
Accumulator	/usr/local/include/opencv2/ocl/ocl.hpp	/^        template<> struct Accumulator<char>$/;"	s	namespace:cv::ocl
Accumulator	/usr/local/include/opencv2/ocl/ocl.hpp	/^        template<> struct Accumulator<short>$/;"	s	namespace:cv::ocl
Accumulator	/usr/local/include/opencv2/ocl/ocl.hpp	/^        template<> struct Accumulator<unsigned char>$/;"	s	namespace:cv::ocl
Accumulator	/usr/local/include/opencv2/ocl/ocl.hpp	/^        template<> struct Accumulator<unsigned short>$/;"	s	namespace:cv::ocl
AddBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void AddBlob(CvBlob* pB)$/;"	f	class:CvBlobSeq
AddFormat	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    void AddFormat(const char* str){strcat(m_pElemFormat,str);}$/;"	f	class:CvBlobSeq
AddGlobalTestEnvironment	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddParameterType	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddParameterType	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddParameterType	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddRef	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddTestCaseInstantiation	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestName	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPattern	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AdjusterAdapter	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS AdjusterAdapter: public FeatureDetector$/;"	c	namespace:cv
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
All	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int** All;$/;"	m	struct:CvCliqueFinder
Allocate	/usr/local/include/opencv2/core/wimage.hpp	/^inline void WImageBuffer<T>::Allocate(int width, int height, int nchannels)$/;"	f	class:cv::WImageBuffer
Allocate	/usr/local/include/opencv2/core/wimage.hpp	/^inline void WImageBufferC<T, C>::Allocate(int width, int height)$/;"	f	class:cv::WImageBufferC
Allocator	/usr/local/include/opencv2/core/core.hpp	/^    explicit Allocator() {}$/;"	f	class:cv::Allocator
Allocator	/usr/local/include/opencv2/core/core.hpp	/^    explicit Allocator(Allocator const&) {}$/;"	f	class:cv::Allocator
Allocator	/usr/local/include/opencv2/core/core.hpp	/^    explicit Allocator(Allocator<U> const&) {}$/;"	f	class:cv::Allocator
Allocator	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Allocator$/;"	c	namespace:cv
AlmostEquals	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlwaysFalse	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AppendMessage	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AreaFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ AreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::gpu::device::AreaFilter
AreaFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^    template <typename Ptr2D> struct AreaFilter$/;"	s	namespace:cv::gpu::device
ArrayAwareFind	/usr/local/include/opencv2/ts/ts_gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	/usr/local/include/opencv2/ts/ts_gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
ArrayTest	/usr/local/include/opencv2/ts/ts.hpp	/^class CV_EXPORTS ArrayTest : public BaseTest$/;"	c	namespace:cvtest
Arrays	/usr/local/include/opencv2/core/opengl_interop.hpp	/^class CV_EXPORTS Arrays$/;"	c	namespace:cv::ogl
AssertHeld	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	/usr/local/include/opencv2/ts/ts_gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	/usr/local/include/opencv2/ts/ts_gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertPred1Helper	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertTypeEq	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit AssertionResult(bool success) : success_(success) {}$/;"	f	class:testing::AssertionResult
AssertionResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AutoBuffer	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::AutoBuffer()$/;"	f	class:cv::AutoBuffer
AutoBuffer	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::AutoBuffer(size_t _size)$/;"	f	class:cv::AutoBuffer
AutotunedIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^    AutotunedIndex(const Matrix<ElementType>& inputData, const IndexParams& params = AutotunedIndexParams(), Distance d = Distance()) :$/;"	f	class:cvflann::AutotunedIndex
AutotunedIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^class AutotunedIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
AutotunedIndexParams	/usr/local/include/opencv2/flann/autotuned_index.h	/^    AutotunedIndexParams(float target_precision = 0.8, float build_weight = 0.01, float memory_weight = 0, float sample_fraction = 0.1)$/;"	f	struct:cvflann::AutotunedIndexParams
AutotunedIndexParams	/usr/local/include/opencv2/flann/autotuned_index.h	/^struct AutotunedIndexParams : public IndexParams$/;"	s	namespace:cvflann
AutotunedIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS AutotunedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
AvgBitrate	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       AvgBitrate;      \/\/    NVVE_AVG_BITRATE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
B	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** B;$/;"	m	class:cv::LevMarqSparse
B2Y	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            B2Y        = 1868,$/;"	e	enum:cv::gpu::device::color_detail::__anon67
BACKPROP	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon296
BAND	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon334
BASIC_PRESET	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon9
BASIC_PRESET	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon186
BASIC_PRESET	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::ocl::StereoBM_OCL::__anon316
BFMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W BFMatcher : public DescriptorMatcher$/;"	c	namespace:cv
BFMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BFMatcher_GPU(int norm = NORM_L2) : BruteForceMatcher_GPU_base(norm == NORM_L1 ? L1Dist : norm == NORM_L2 ? L2Dist : HammingDist) {}$/;"	f	class:cv::gpu::BFMatcher_GPU
BFMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BFMatcher_GPU : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BFRAME	/usr/local/include/opencv2/gpu/gpu.hpp	/^            BFRAME = 3$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
BGR	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon327
BGRA	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon327
BLOCKSIZE	/usr/local/include/opencv2/flann/allocator.h	/^const  size_t     BLOCKSIZE=8192;$/;"	m	namespace:cvflann
BLOCK_SIZE	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            BLOCK_SIZE = 256$/;"	e	enum:cv::gpu::device::color_detail::__anon67
BOOST	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { BOOST = 0 };$/;"	e	enum:cv::CascadeClassifier::__anon303
BORDER_CONSTANT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { BORDER_REPLICATE=IPL_BORDER_REPLICATE, BORDER_CONSTANT=IPL_BORDER_CONSTANT,$/;"	e	enum:cv::__anon228
BORDER_DEFAULT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_DEFAULT=BORDER_REFLECT_101, BORDER_ISOLATED=16 };$/;"	e	enum:cv::__anon228
BORDER_ISOLATED	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_DEFAULT=BORDER_REFLECT_101, BORDER_ISOLATED=16 };$/;"	e	enum:cv::__anon228
BORDER_REFLECT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_REFLECT=IPL_BORDER_REFLECT, BORDER_WRAP=IPL_BORDER_WRAP,$/;"	e	enum:cv::__anon228
BORDER_REFLECT101	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_REFLECT_101=IPL_BORDER_REFLECT_101, BORDER_REFLECT101=BORDER_REFLECT_101,$/;"	e	enum:cv::__anon228
BORDER_REFLECT_101	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_REFLECT_101=IPL_BORDER_REFLECT_101, BORDER_REFLECT101=BORDER_REFLECT_101,$/;"	e	enum:cv::__anon228
BORDER_REPLICATE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { BORDER_REPLICATE=IPL_BORDER_REPLICATE, BORDER_CONSTANT=IPL_BORDER_CONSTANT,$/;"	e	enum:cv::__anon228
BORDER_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const int BORDER_SIZE = 16;$/;"	m	class:cv::CalonderDescriptorExtractor
BORDER_TRANSPARENT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_TRANSPARENT=IPL_BORDER_TRANSPARENT,$/;"	e	enum:cv::__anon228
BORDER_WRAP	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       BORDER_REFLECT=IPL_BORDER_REFLECT, BORDER_WRAP=IPL_BORDER_WRAP,$/;"	e	enum:cv::__anon228
BOWImgDescriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS BOWImgDescriptorExtractor$/;"	c	namespace:cv
BOWKMeansTrainer	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS BOWKMeansTrainer : public BOWTrainer$/;"	c	namespace:cv
BOWMSCTrainer	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS BOWMSCTrainer: public BOWTrainer {$/;"	c	namespace:cv::of2
BOWTrainer	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS BOWTrainer$/;"	c	namespace:cv
BRISK	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W BRISK : public Feature2D$/;"	c	namespace:cv
BackgroundSubtractor	/usr/local/include/opencv2/video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractor : public Algorithm$/;"	c	namespace:cv
BackgroundSubtractorGMG	/usr/local/include/opencv2/video/background_segm.hpp	/^class CV_EXPORTS BackgroundSubtractorGMG: public cv::BackgroundSubtractor$/;"	c	namespace:cv
BackgroundSubtractorMOG	/usr/local/include/opencv2/video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractorMOG : public BackgroundSubtractor$/;"	c	namespace:cv
BackgroundSubtractorMOG2	/usr/local/include/opencv2/video/background_segm.hpp	/^class CV_EXPORTS BackgroundSubtractorMOG2 : public BackgroundSubtractor$/;"	c	namespace:cv
BadArgTest	/usr/local/include/opencv2/ts/ts.hpp	/^class CV_EXPORTS BadArgTest : public BaseTest$/;"	c	namespace:cvtest
Ballot	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^        static __forceinline__ __device__ int Ballot(int predicate)$/;"	f	struct:cv::gpu::device::Emulation
BaseColumnFilter	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS BaseColumnFilter$/;"	c	namespace:cv
BaseColumnFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    BaseColumnFilter_GPU(int ksize_, int anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseColumnFilter_GPU
BaseColumnFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BaseColumnFilter_GPU$/;"	c	namespace:cv::gpu
BaseColumnFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            BaseColumnFilter_GPU(int ksize_, int anchor_, int bordertype_) : ksize(ksize_), anchor(anchor_), bordertype(bordertype_) {}$/;"	f	class:cv::ocl::BaseColumnFilter_GPU
BaseColumnFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BaseColumnFilter_GPU$/;"	c	namespace:cv::ocl
BaseFilter	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS BaseFilter$/;"	c	namespace:cv
BaseFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    BaseFilter_GPU(const Size& ksize_, const Point& anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseFilter_GPU
BaseFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BaseFilter_GPU$/;"	c	namespace:cv::gpu
BaseFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            BaseFilter_GPU(const Size &ksize_, const Point &anchor_, const int &borderType_)$/;"	f	class:cv::ocl::BaseFilter_GPU
BaseFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BaseFilter_GPU$/;"	c	namespace:cv::ocl
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseKeypoint	/usr/local/include/opencv2/legacy/legacy.hpp	/^    BaseKeypoint()$/;"	f	struct:cv::BaseKeypoint
BaseKeypoint	/usr/local/include/opencv2/legacy/legacy.hpp	/^    BaseKeypoint(int _x, int _y, IplImage* _image)$/;"	f	struct:cv::BaseKeypoint
BaseKeypoint	/usr/local/include/opencv2/legacy/legacy.hpp	/^struct CV_EXPORTS BaseKeypoint$/;"	s	namespace:cv
BaseRowFilter	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS BaseRowFilter$/;"	c	namespace:cv
BaseRowFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    BaseRowFilter_GPU(int ksize_, int anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseRowFilter_GPU
BaseRowFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BaseRowFilter_GPU$/;"	c	namespace:cv::gpu
BaseRowFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            BaseRowFilter_GPU(int ksize_, int anchor_, int bordertype_) : ksize(ksize_), anchor(anchor_), bordertype(bordertype_) {}$/;"	f	class:cv::ocl::BaseRowFilter_GPU
BaseRowFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BaseRowFilter_GPU$/;"	c	namespace:cv::ocl
BaseTest	/usr/local/include/opencv2/ts/ts.hpp	/^class CV_EXPORTS BaseTest$/;"	c	namespace:cvtest
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef T BaseType;$/;"	t	class:cv::WImage
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBuffer
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBufferC
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageC
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageView
BaseType	/usr/local/include/opencv2/core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageViewC
BasicNarrowIoManip	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BestOf2NearestMatcher	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS BestOf2NearestMatcher : public FeaturesMatcher$/;"	c	namespace:cv::detail
BiggestInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BinOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<double, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<double, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<float, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<float, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T1, typename T2> struct BinOpTraits$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<double, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<float, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinaryReadWriteTraits	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <typename T1, typename T2, typename D, int shift> struct BinaryReadWriteTraits$/;"	s	namespace:cv::gpu::device::transform_detail
Bind	/usr/local/include/opencv2/ts/ts_gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Blender	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^class CV_EXPORTS Blender$/;"	c	namespace:cv::detail
Block	/usr/local/include/opencv2/gpu/device/block.hpp	/^    struct Block$/;"	s	namespace:cv::gpu::device
BlockScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ BlockScan() {}$/;"	f	struct:cv::gpu::device::BlockScan
BlockScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ BlockScan(const BlockScan& other) { (void)other; }$/;"	f	struct:cv::gpu::device::BlockScan
BlockScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    template <ScanKind Kind , typename T, typename Sc, typename F> struct BlockScan$/;"	s	namespace:cv::gpu::device
BlockedRange	/usr/local/include/opencv2/core/internal.hpp	/^    typedef tbb::blocked_range<int> BlockedRange;$/;"	t	namespace:cv
BlocksGainCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    BlocksGainCompensator(int bl_width = 32, int bl_height = 32)$/;"	f	class:cv::detail::BlocksGainCompensator
BlocksGainCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS BlocksGainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
Bool	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
Boost	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvBoost Boost;$/;"	t	namespace:cv
BoostParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvBoostParams BoostParams;$/;"	t	namespace:cv
BoostTree	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvBoostTree BoostTree;$/;"	t	namespace:cv
BorderConst	/usr/local/include/opencv2/core/types_c.h	/^    int  BorderConst[4];    \/* Ditto.                                 *\/$/;"	m	struct:_IplImage
BorderMode	/usr/local/include/opencv2/core/types_c.h	/^    int  BorderMode[4];     \/* Ignored by OpenCV.                     *\/$/;"	m	struct:_IplImage
BorderReader	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& ptr_, const B& b_) : ptr(ptr_), b(b_) {}$/;"	f	struct:cv::gpu::device::BorderReader
BorderReader	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& src_, const BrdConstant<D>& b) :$/;"	f	struct:cv::gpu::device::BorderReader
BorderReader	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename Ptr2D, typename B> struct BorderReader$/;"	s	namespace:cv::gpu::device
BorderReader	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename Ptr2D, typename D> struct BorderReader< Ptr2D, BrdConstant<D> >$/;"	s	namespace:cv::gpu::device
BoundingBox	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef std::vector<Interval> BoundingBox;$/;"	t	class:cvflann::KDTreeSingleIndex
Branch	/usr/local/include/opencv2/flann/kdtree_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeIndex
Branch	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::HierarchicalClusteringIndex
BranchSt	/usr/local/include/opencv2/flann/kdtree_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeIndex
BranchSt	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	/usr/local/include/opencv2/flann/kmeans_index.h	/^    typedef BranchStruct<KMeansNodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KMeansIndex
BranchStruct	/usr/local/include/opencv2/flann/result_set.h	/^    BranchStruct() {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	/usr/local/include/opencv2/flann/result_set.h	/^    BranchStruct(const T& aNode, DistanceType dist) : node(aNode), mindist(dist) {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	/usr/local/include/opencv2/flann/result_set.h	/^struct BranchStruct$/;"	s	namespace:cvflann
BrdColConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColConstant(int height_, const D& val_ = VecTraits<D>::all(0)) : height(height_), val(val_) {}$/;"	f	struct:cv::gpu::device::BrdColConstant
BrdColConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColConstant$/;"	s	namespace:cv::gpu::device
BrdColReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect
BrdColReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect
BrdColReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect$/;"	s	namespace:cv::gpu::device
BrdColReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect101(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect101
BrdColReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect101(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect101
BrdColReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect101$/;"	s	namespace:cv::gpu::device
BrdColReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReplicate(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReplicate
BrdColReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReplicate(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReplicate
BrdColReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReplicate$/;"	s	namespace:cv::gpu::device
BrdColWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColWrap(int height_) : height(height_) {}$/;"	f	struct:cv::gpu::device::BrdColWrap
BrdColWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColWrap(int height_, U) : height(height_) {}$/;"	f	struct:cv::gpu::device::BrdColWrap
BrdColWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColWrap$/;"	s	namespace:cv::gpu::device
BrdConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdConstant(int height_, int width_, const D& val_ = VecTraits<D>::all(0)) : height(height_), width(width_), val(val_)$/;"	f	struct:cv::gpu::device::BrdConstant
BrdConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdConstant$/;"	s	namespace:cv::gpu::device
BrdReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect
BrdReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect
BrdReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReflect$/;"	s	namespace:cv::gpu::device
BrdReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect101(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect101
BrdReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect101(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect101
BrdReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReflect101$/;"	s	namespace:cv::gpu::device
BrdReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReplicate(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReplicate
BrdReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReplicate(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReplicate
BrdReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReplicate$/;"	s	namespace:cv::gpu::device
BrdRowConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowConstant(int width_, const D& val_ = VecTraits<D>::all(0)) : width(width_), val(val_) {}$/;"	f	struct:cv::gpu::device::BrdRowConstant
BrdRowConstant	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowConstant$/;"	s	namespace:cv::gpu::device
BrdRowReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect
BrdRowReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect
BrdRowReflect	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect$/;"	s	namespace:cv::gpu::device
BrdRowReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect101(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect101
BrdRowReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect101(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect101
BrdRowReflect101	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect101$/;"	s	namespace:cv::gpu::device
BrdRowReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReplicate(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReplicate
BrdRowReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReplicate(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReplicate
BrdRowReplicate	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReplicate$/;"	s	namespace:cv::gpu::device
BrdRowWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowWrap(int width_) : width(width_) {}$/;"	f	struct:cv::gpu::device::BrdRowWrap
BrdRowWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowWrap(int width_, U) : width(width_) {}$/;"	f	struct:cv::gpu::device::BrdRowWrap
BrdRowWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowWrap$/;"	s	namespace:cv::gpu::device
BrdWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_) :$/;"	f	struct:cv::gpu::device::BrdWrap
BrdWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_, U) :$/;"	f	struct:cv::gpu::device::BrdWrap
BrdWrap	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdWrap$/;"	s	namespace:cv::gpu::device
BriefDescriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS BriefDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
BriskLongPair	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct BriskLongPair{$/;"	s	class:cv::BRISK
BriskPatternPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct BriskPatternPoint{$/;"	s	class:cv::BRISK
BriskShortPair	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct BriskShortPair{$/;"	s	class:cv::BRISK
BroxOpticalFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^    BroxOpticalFlow(float alpha_, float gamma_, float scale_factor_, int inner_iterations_, int outer_iterations_, int solver_iterations_) :$/;"	f	class:cv::gpu::BroxOpticalFlow
BroxOpticalFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BroxOpticalFlow$/;"	c	namespace:cv::gpu
BruteForceMatcher	/usr/local/include/opencv2/legacy/legacy.hpp	/^    BruteForceMatcher( Distance d = Distance() ) : BFMatcher(Distance::normType, false) {(void)d;}$/;"	f	class:cv::BruteForceMatcher
BruteForceMatcher	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS BruteForceMatcher : public BFMatcher$/;"	c	namespace:cv
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(HammingDist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(L1Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(L2Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(Hamming \/*d*\/) : BruteForceMatcher_GPU_base(HammingDist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(L1<T> \/*d*\/) : BruteForceMatcher_GPU_base(L1Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(L2<T> \/*d*\/) : BruteForceMatcher_GPU_base(L2Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU;$/;"	m	namespace:cv::gpu	typeref:class:cv::gpu::CV_EXPORTS
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU< L1<T> > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU< L2<T> > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^template <> class CV_EXPORTS BruteForceMatcher_GPU< Hamming > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU_base	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(HammingDist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(L1Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(L2Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(Hamming \/*d*\/) : BruteForceMatcher_OCL_base(HammingDist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(L1<T> \/*d*\/) : BruteForceMatcher_OCL_base(L1Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(L2<T> \/*d*\/) : BruteForceMatcher_OCL_base(L2Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL< L1<T> > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL< L2<T> > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^        template <> class CV_EXPORTS BruteForceMatcher_OCL< Hamming > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL_base	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
Bucket	/usr/local/include/opencv2/flann/lsh_table.h	/^typedef std::vector<FeatureIndex> Bucket;$/;"	t	namespace:cvflann::lsh
BucketKey	/usr/local/include/opencv2/flann/lsh_table.h	/^typedef unsigned int BucketKey;$/;"	t	namespace:cvflann::lsh
BucketsSpace	/usr/local/include/opencv2/flann/lsh_table.h	/^    typedef std::unordered_map<BucketKey, Bucket> BucketsSpace;$/;"	t	class:cvflann::lsh::LshTable
BucketsSpeed	/usr/local/include/opencv2/flann/lsh_table.h	/^    typedef std::vector<Bucket> BucketsSpeed;$/;"	t	class:cvflann::lsh::LshTable
Buffer	/usr/local/include/opencv2/core/opengl_interop.hpp	/^class CV_EXPORTS Buffer$/;"	c	namespace:cv::ogl
BundleAdjustCallback	/usr/local/include/opencv2/contrib/contrib.hpp	/^    typedef bool (*BundleAdjustCallback)(int iteration, double norm_error, void* user_data);$/;"	t	namespace:cv
BundleAdjusterBase	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    BundleAdjusterBase(int num_params_per_cam, int num_errs_per_measurement)$/;"	f	class:cv::detail::BundleAdjusterBase
BundleAdjusterBase	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterBase : public Estimator$/;"	c	namespace:cv::detail
BundleAdjusterRay	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    BundleAdjusterRay() : BundleAdjusterBase(4, 3) {}$/;"	f	class:cv::detail::BundleAdjusterRay
BundleAdjusterRay	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterRay : public BundleAdjusterBase$/;"	c	namespace:cv::detail
BundleAdjusterReproj	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    BundleAdjusterReproj() : BundleAdjusterBase(7, 2) {}$/;"	f	class:cv::detail::BundleAdjusterReproj
BundleAdjusterReproj	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterReproj : public BundleAdjusterBase$/;"	c	namespace:cv::detail
ButtonCallback	/usr/local/include/opencv2/highgui/highgui.hpp	/^typedef void (CV_CDECL *ButtonCallback)(int state, void* userdata);$/;"	t	namespace:cv
ByRef	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
C	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams
C	/usr/local/include/opencv2/ml/ml.hpp	/^    double C[2];  \/\/ C[0] == Cn, C[1] == Cp$/;"	m	class:CvSVMSolver
C	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
CALC_J	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon2
CALIB_CB_ADAPTIVE_THRESH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^enum { CALIB_CB_ADAPTIVE_THRESH = 1, CALIB_CB_NORMALIZE_IMAGE = 2,$/;"	e	enum:cv::__anon5
CALIB_CB_ASYMMETRIC_GRID	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^enum { CALIB_CB_SYMMETRIC_GRID = 1, CALIB_CB_ASYMMETRIC_GRID = 2,$/;"	e	enum:cv::__anon6
CALIB_CB_CLUSTERING	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^       CALIB_CB_CLUSTERING = 4 };$/;"	e	enum:cv::__anon6
CALIB_CB_FAST_CHECK	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^       CALIB_CB_FILTER_QUADS = 4, CALIB_CB_FAST_CHECK = 8 };$/;"	e	enum:cv::__anon5
CALIB_CB_FILTER_QUADS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^       CALIB_CB_FILTER_QUADS = 4, CALIB_CB_FAST_CHECK = 8 };$/;"	e	enum:cv::__anon5
CALIB_CB_NORMALIZE_IMAGE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^enum { CALIB_CB_ADAPTIVE_THRESH = 1, CALIB_CB_NORMALIZE_IMAGE = 2,$/;"	e	enum:cv::__anon5
CALIB_CB_SYMMETRIC_GRID	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^enum { CALIB_CB_SYMMETRIC_GRID = 1, CALIB_CB_ASYMMETRIC_GRID = 2,$/;"	e	enum:cv::__anon6
CALIB_FIX_ASPECT_RATIO	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_ASPECT_RATIO = CV_CALIB_FIX_ASPECT_RATIO,$/;"	e	enum:cv::__anon7
CALIB_FIX_FOCAL_LENGTH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_FOCAL_LENGTH = CV_CALIB_FIX_FOCAL_LENGTH,$/;"	e	enum:cv::__anon7
CALIB_FIX_INTRINSIC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_INTRINSIC = CV_CALIB_FIX_INTRINSIC,$/;"	e	enum:cv::__anon7
CALIB_FIX_K1	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K1 = CV_CALIB_FIX_K1,$/;"	e	enum:cv::__anon7
CALIB_FIX_K2	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K2 = CV_CALIB_FIX_K2,$/;"	e	enum:cv::__anon7
CALIB_FIX_K3	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K3 = CV_CALIB_FIX_K3,$/;"	e	enum:cv::__anon7
CALIB_FIX_K4	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K4 = CV_CALIB_FIX_K4,$/;"	e	enum:cv::__anon7
CALIB_FIX_K5	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K5 = CV_CALIB_FIX_K5,$/;"	e	enum:cv::__anon7
CALIB_FIX_K6	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_K6 = CV_CALIB_FIX_K6,$/;"	e	enum:cv::__anon7
CALIB_FIX_PRINCIPAL_POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_FIX_PRINCIPAL_POINT = CV_CALIB_FIX_PRINCIPAL_POINT,$/;"	e	enum:cv::__anon7
CALIB_RATIONAL_MODEL	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_RATIONAL_MODEL = CV_CALIB_RATIONAL_MODEL,$/;"	e	enum:cv::__anon7
CALIB_SAME_FOCAL_LENGTH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_SAME_FOCAL_LENGTH = CV_CALIB_SAME_FOCAL_LENGTH,$/;"	e	enum:cv::__anon7
CALIB_USE_INTRINSIC_GUESS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_USE_INTRINSIC_GUESS = CV_CALIB_USE_INTRINSIC_GUESS,$/;"	e	enum:cv::__anon7
CALIB_ZERO_DISPARITY	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_ZERO_DISPARITY = CV_CALIB_ZERO_DISPARITY$/;"	e	enum:cv::__anon7
CALIB_ZERO_TANGENT_DIST	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CALIB_ZERO_TANGENT_DIST = CV_CALIB_ZERO_TANGENT_DIST,$/;"	e	enum:cv::__anon7
CASCADE_DO_CANNY_PRUNING	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CASCADE_DO_CANNY_PRUNING=1,$/;"	e	enum:cv::__anon302
CASCADE_DO_ROUGH_SEARCH	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CASCADE_DO_ROUGH_SEARCH=8$/;"	e	enum:cv::__anon302
CASCADE_FIND_BIGGEST_OBJECT	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CASCADE_FIND_BIGGEST_OBJECT=4,$/;"	e	enum:cv::__anon302
CASCADE_SCALE_IMAGE	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CASCADE_SCALE_IMAGE=2,$/;"	e	enum:cv::__anon302
CENTERS_GONZALES	/usr/local/include/opencv2/flann/defines.h	/^    CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_KMEANSPP	/usr/local/include/opencv2/flann/defines.h	/^    CENTERS_KMEANSPP = 2$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_RANDOM	/usr/local/include/opencv2/flann/defines.h	/^    CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
CHAIN_APPROX_NONE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CHAIN_APPROX_NONE=CV_CHAIN_APPROX_NONE,$/;"	e	enum:cv::__anon245
CHAIN_APPROX_SIMPLE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CHAIN_APPROX_SIMPLE=CV_CHAIN_APPROX_SIMPLE,$/;"	e	enum:cv::__anon245
CHAIN_APPROX_TC89_KCOS	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CHAIN_APPROX_TC89_KCOS=CV_CHAIN_APPROX_TC89_KCOS$/;"	e	enum:cv::__anon245
CHAIN_APPROX_TC89_L1	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CHAIN_APPROX_TC89_L1=CV_CHAIN_APPROX_TC89_L1,$/;"	e	enum:cv::__anon245
CHECK_ERR	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon2
CHECK_ERROR	/usr/local/include/opencv2/flann/hdf5.h	/^#define CHECK_ERROR(/;"	d
CHOW_LIU	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        CHOW_LIU = 8,$/;"	e	enum:cv::of2::FabMap::__anon25
CLAHE	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS CLAHE : public cv::CLAHE$/;"	c	namespace:cv::gpu
CLAHE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS CLAHE : public Algorithm$/;"	c	namespace:cv
CLIQUE_END	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CLIQUE_END /;"	d
CLIQUE_FOUND	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CLIQUE_FOUND /;"	d
CLIQUE_TIME_OFF	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CLIQUE_TIME_OFF /;"	d
CL_DOUBLE	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum {CL_DOUBLE, CL_UNIFIED_MEM};$/;"	e	enum:cv::ocl::Context::__anon309
CL_UNIFIED_MEM	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum {CL_DOUBLE, CL_UNIFIED_MEM};$/;"	e	enum:cv::ocl::Context::__anon309
CMP_EQ	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
CMP_GE	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
CMP_GT	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
CMP_LE	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
CMP_LT	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
CMP_NE	/usr/local/include/opencv2/core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon28
COEF	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
COLOR	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLORMAP_AUTUMN	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_AUTUMN = 0,$/;"	e	enum:cv::__anon21
COLORMAP_BONE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_BONE = 1,$/;"	e	enum:cv::__anon21
COLORMAP_COOL	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_COOL = 8,$/;"	e	enum:cv::__anon21
COLORMAP_HOT	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_HOT = 11$/;"	e	enum:cv::__anon21
COLORMAP_HSV	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_HSV = 9,$/;"	e	enum:cv::__anon21
COLORMAP_JET	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_JET = 2,$/;"	e	enum:cv::__anon21
COLORMAP_OCEAN	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_OCEAN = 5,$/;"	e	enum:cv::__anon21
COLORMAP_PINK	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_PINK = 10,$/;"	e	enum:cv::__anon21
COLORMAP_RAINBOW	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_RAINBOW = 4,$/;"	e	enum:cv::__anon21
COLORMAP_SPRING	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_SPRING = 7,$/;"	e	enum:cv::__anon21
COLORMAP_SUMMER	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_SUMMER = 6,$/;"	e	enum:cv::__anon21
COLORMAP_WINTER	/usr/local/include/opencv2/contrib/contrib.hpp	/^        COLORMAP_WINTER = 3,$/;"	e	enum:cv::__anon21
COLOR_BGR2BGR555	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2BGR555  =22,$/;"	e	enum:cv::__anon242
COLOR_BGR2BGR565	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2BGR565  =12,$/;"	e	enum:cv::__anon242
COLOR_BGR2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2BGRA    =0,$/;"	e	enum:cv::__anon242
COLOR_BGR2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2GRAY    =6,$/;"	e	enum:cv::__anon242
COLOR_BGR2HLS	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2HLS     =52,$/;"	e	enum:cv::__anon242
COLOR_BGR2HLS_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2HLS_FULL = 68,$/;"	e	enum:cv::__anon242
COLOR_BGR2HSV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2HSV     =40,$/;"	e	enum:cv::__anon242
COLOR_BGR2HSV_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2HSV_FULL = 66,$/;"	e	enum:cv::__anon242
COLOR_BGR2Lab	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2Lab     =44,$/;"	e	enum:cv::__anon242
COLOR_BGR2Luv	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2Luv     =50,$/;"	e	enum:cv::__anon242
COLOR_BGR2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2RGB     =4,$/;"	e	enum:cv::__anon242
COLOR_BGR2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2RGBA    =2,$/;"	e	enum:cv::__anon242
COLOR_BGR2XYZ	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2XYZ     =32,$/;"	e	enum:cv::__anon242
COLOR_BGR2YCrCb	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2YCrCb   =36,$/;"	e	enum:cv::__anon242
COLOR_BGR2YUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2YUV      = 82,$/;"	e	enum:cv::__anon242
COLOR_BGR2YUV_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2YUV_I420 = 128,$/;"	e	enum:cv::__anon242
COLOR_BGR2YUV_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2YUV_IYUV = COLOR_BGR2YUV_I420,$/;"	e	enum:cv::__anon242
COLOR_BGR2YUV_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR2YUV_YV12  = 132,$/;"	e	enum:cv::__anon242
COLOR_BGR5552BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5552BGR  =24,$/;"	e	enum:cv::__anon242
COLOR_BGR5552BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5552BGRA =28,$/;"	e	enum:cv::__anon242
COLOR_BGR5552GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5552GRAY =31,$/;"	e	enum:cv::__anon242
COLOR_BGR5552RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5552RGB  =25,$/;"	e	enum:cv::__anon242
COLOR_BGR5552RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5552RGBA =29,$/;"	e	enum:cv::__anon242
COLOR_BGR5652BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5652BGR  =14,$/;"	e	enum:cv::__anon242
COLOR_BGR5652BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5652BGRA =18,$/;"	e	enum:cv::__anon242
COLOR_BGR5652GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5652GRAY =21,$/;"	e	enum:cv::__anon242
COLOR_BGR5652RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5652RGB  =15,$/;"	e	enum:cv::__anon242
COLOR_BGR5652RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGR5652RGBA =19,$/;"	e	enum:cv::__anon242
COLOR_BGRA2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR    =1,$/;"	e	enum:cv::__anon242
COLOR_BGRA2BGR555	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR555 =26,$/;"	e	enum:cv::__anon242
COLOR_BGRA2BGR565	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR565 =16,$/;"	e	enum:cv::__anon242
COLOR_BGRA2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2GRAY   =10,$/;"	e	enum:cv::__anon242
COLOR_BGRA2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2RGB    =COLOR_RGBA2BGR,$/;"	e	enum:cv::__anon242
COLOR_BGRA2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2RGBA   =5,$/;"	e	enum:cv::__anon242
COLOR_BGRA2YUV_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2YUV_I420 = 130,$/;"	e	enum:cv::__anon242
COLOR_BGRA2YUV_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2YUV_IYUV = COLOR_BGRA2YUV_I420,$/;"	e	enum:cv::__anon242
COLOR_BGRA2YUV_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BGRA2YUV_YV12 = 134,$/;"	e	enum:cv::__anon242
COLOR_BayerBG2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerBG2BGR =46,$/;"	e	enum:cv::__anon242
COLOR_BayerBG2BGR_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerBG2BGR_MHT = 256,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerBG2BGR_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerBG2BGR_VNG =62,$/;"	e	enum:cv::__anon242
COLOR_BayerBG2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerBG2GRAY = 86,$/;"	e	enum:cv::__anon242
COLOR_BayerBG2GRAY_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerBG2GRAY_MHT = 260,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerBG2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerBG2RGB =COLOR_BayerRG2BGR,$/;"	e	enum:cv::__anon242
COLOR_BayerBG2RGB_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerBG2RGB_MHT = COLOR_BayerRG2BGR_MHT,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerBG2RGB_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerBG2RGB_VNG =COLOR_BayerRG2BGR_VNG,$/;"	e	enum:cv::__anon242
COLOR_BayerGB2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGB2BGR =47,$/;"	e	enum:cv::__anon242
COLOR_BayerGB2BGR_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGB2BGR_MHT = 257,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGB2BGR_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGB2BGR_VNG =63,$/;"	e	enum:cv::__anon242
COLOR_BayerGB2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGB2GRAY = 87,$/;"	e	enum:cv::__anon242
COLOR_BayerGB2GRAY_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGB2GRAY_MHT = 261,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGB2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGB2RGB =COLOR_BayerGR2BGR,$/;"	e	enum:cv::__anon242
COLOR_BayerGB2RGB_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGB2RGB_MHT = COLOR_BayerGR2BGR_MHT,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGB2RGB_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGB2RGB_VNG =COLOR_BayerGR2BGR_VNG,$/;"	e	enum:cv::__anon242
COLOR_BayerGR2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGR2BGR =49,$/;"	e	enum:cv::__anon242
COLOR_BayerGR2BGR_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGR2BGR_MHT = 259,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGR2BGR_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGR2BGR_VNG =65,$/;"	e	enum:cv::__anon242
COLOR_BayerGR2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGR2GRAY = 89,$/;"	e	enum:cv::__anon242
COLOR_BayerGR2GRAY_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGR2GRAY_MHT = 263$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGR2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGR2RGB =COLOR_BayerGB2BGR,$/;"	e	enum:cv::__anon242
COLOR_BayerGR2RGB_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerGR2RGB_MHT = COLOR_BayerGB2BGR_MHT,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerGR2RGB_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerGR2RGB_VNG =COLOR_BayerGB2BGR_VNG,$/;"	e	enum:cv::__anon242
COLOR_BayerRG2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerRG2BGR =48,$/;"	e	enum:cv::__anon242
COLOR_BayerRG2BGR_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerRG2BGR_MHT = 258,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerRG2BGR_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerRG2BGR_VNG =64,$/;"	e	enum:cv::__anon242
COLOR_BayerRG2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerRG2GRAY = 88,$/;"	e	enum:cv::__anon242
COLOR_BayerRG2GRAY_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerRG2GRAY_MHT = 262,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerRG2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerRG2RGB =COLOR_BayerBG2BGR,$/;"	e	enum:cv::__anon242
COLOR_BayerRG2RGB_MHT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    COLOR_BayerRG2RGB_MHT = COLOR_BayerBG2BGR_MHT,$/;"	e	enum:cv::gpu::__anon185
COLOR_BayerRG2RGB_VNG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_BayerRG2RGB_VNG =COLOR_BayerBG2BGR_VNG,$/;"	e	enum:cv::__anon242
COLOR_COLORCVT_MAX	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_COLORCVT_MAX  = 135$/;"	e	enum:cv::__anon242
COLOR_GRAD	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLOR_GRAY2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR    =8,$/;"	e	enum:cv::__anon242
COLOR_GRAY2BGR555	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR555 =30,$/;"	e	enum:cv::__anon242
COLOR_GRAY2BGR565	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR565 =20,$/;"	e	enum:cv::__anon242
COLOR_GRAY2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2BGRA   =9,$/;"	e	enum:cv::__anon242
COLOR_GRAY2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2RGB    =COLOR_GRAY2BGR,$/;"	e	enum:cv::__anon242
COLOR_GRAY2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_GRAY2RGBA   =COLOR_GRAY2BGRA,$/;"	e	enum:cv::__anon242
COLOR_HLS2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HLS2BGR     =60,$/;"	e	enum:cv::__anon242
COLOR_HLS2BGR_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HLS2BGR_FULL = 72,$/;"	e	enum:cv::__anon242
COLOR_HLS2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HLS2RGB     =61,$/;"	e	enum:cv::__anon242
COLOR_HLS2RGB_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HLS2RGB_FULL = 73,$/;"	e	enum:cv::__anon242
COLOR_HSV2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HSV2BGR     =54,$/;"	e	enum:cv::__anon242
COLOR_HSV2BGR_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HSV2BGR_FULL = 70,$/;"	e	enum:cv::__anon242
COLOR_HSV2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HSV2RGB     =55,$/;"	e	enum:cv::__anon242
COLOR_HSV2RGB_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_HSV2RGB_FULL = 71,$/;"	e	enum:cv::__anon242
COLOR_LBGR2Lab	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_LBGR2Lab     = 74,$/;"	e	enum:cv::__anon242
COLOR_LBGR2Luv	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_LBGR2Luv     = 76,$/;"	e	enum:cv::__anon242
COLOR_LRGB2Lab	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_LRGB2Lab     = 75,$/;"	e	enum:cv::__anon242
COLOR_LRGB2Luv	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_LRGB2Luv     = 77,$/;"	e	enum:cv::__anon242
COLOR_Lab2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Lab2BGR     =56,$/;"	e	enum:cv::__anon242
COLOR_Lab2LBGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Lab2LBGR     = 78,$/;"	e	enum:cv::__anon242
COLOR_Lab2LRGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Lab2LRGB     = 79,$/;"	e	enum:cv::__anon242
COLOR_Lab2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Lab2RGB     =57,$/;"	e	enum:cv::__anon242
COLOR_Luv2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Luv2BGR     =58,$/;"	e	enum:cv::__anon242
COLOR_Luv2LBGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Luv2LBGR     = 80,$/;"	e	enum:cv::__anon242
COLOR_Luv2LRGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Luv2LRGB     = 81,$/;"	e	enum:cv::__anon242
COLOR_Luv2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_Luv2RGB     =59,$/;"	e	enum:cv::__anon242
COLOR_RGB2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2BGR     =COLOR_BGR2RGB,$/;"	e	enum:cv::__anon242
COLOR_RGB2BGR555	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2BGR555  =23,$/;"	e	enum:cv::__anon242
COLOR_RGB2BGR565	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2BGR565  =13,$/;"	e	enum:cv::__anon242
COLOR_RGB2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2BGRA    =COLOR_BGR2RGBA,$/;"	e	enum:cv::__anon242
COLOR_RGB2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2GRAY    =7,$/;"	e	enum:cv::__anon242
COLOR_RGB2HLS	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2HLS     =53,$/;"	e	enum:cv::__anon242
COLOR_RGB2HLS_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2HLS_FULL = 69,$/;"	e	enum:cv::__anon242
COLOR_RGB2HSV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2HSV     =41,$/;"	e	enum:cv::__anon242
COLOR_RGB2HSV_FULL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2HSV_FULL = 67,$/;"	e	enum:cv::__anon242
COLOR_RGB2Lab	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2Lab     =45,$/;"	e	enum:cv::__anon242
COLOR_RGB2Luv	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2Luv     =51,$/;"	e	enum:cv::__anon242
COLOR_RGB2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2RGBA    =COLOR_BGR2BGRA,$/;"	e	enum:cv::__anon242
COLOR_RGB2XYZ	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2XYZ     =33,$/;"	e	enum:cv::__anon242
COLOR_RGB2YCrCb	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2YCrCb   =37,$/;"	e	enum:cv::__anon242
COLOR_RGB2YUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2YUV      = 83,$/;"	e	enum:cv::__anon242
COLOR_RGB2YUV_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2YUV_I420 = 127,$/;"	e	enum:cv::__anon242
COLOR_RGB2YUV_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2YUV_IYUV = COLOR_RGB2YUV_I420,$/;"	e	enum:cv::__anon242
COLOR_RGB2YUV_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGB2YUV_YV12  = 131,$/;"	e	enum:cv::__anon242
COLOR_RGBA2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR    =3,$/;"	e	enum:cv::__anon242
COLOR_RGBA2BGR555	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR555 =27,$/;"	e	enum:cv::__anon242
COLOR_RGBA2BGR565	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR565 =17,$/;"	e	enum:cv::__anon242
COLOR_RGBA2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2BGRA   =COLOR_BGRA2RGBA,$/;"	e	enum:cv::__anon242
COLOR_RGBA2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2GRAY   =11,$/;"	e	enum:cv::__anon242
COLOR_RGBA2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2RGB    =COLOR_BGRA2BGR,$/;"	e	enum:cv::__anon242
COLOR_RGBA2YUV_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2YUV_I420 = 129,$/;"	e	enum:cv::__anon242
COLOR_RGBA2YUV_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2YUV_IYUV = COLOR_RGBA2YUV_I420,$/;"	e	enum:cv::__anon242
COLOR_RGBA2YUV_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2YUV_YV12 = 133,$/;"	e	enum:cv::__anon242
COLOR_RGBA2mRGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_RGBA2mRGBA = 125,$/;"	e	enum:cv::__anon242
COLOR_XYZ2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_XYZ2BGR     =34,$/;"	e	enum:cv::__anon242
COLOR_XYZ2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_XYZ2RGB     =35,$/;"	e	enum:cv::__anon242
COLOR_YCrCb2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YCrCb2BGR   =38,$/;"	e	enum:cv::__anon242
COLOR_YCrCb2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YCrCb2RGB   =39,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR      = 84,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_IYUV,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_IYUV = 105,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_NV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_NV12 = 95,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_NV21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_NV21 = 97,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_UYNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_UYVY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_UYVY = 112,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_Y422	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_YUNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_YUY2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUY2 = 120,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_YUYV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YV12 = 103,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGRA_YVYU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YVYU = 122,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_I420 = COLOR_YUV2BGR_IYUV,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_IYUV = 101,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_NV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_NV12 = 91,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_NV21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_NV21 = 93,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_UYNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_UYVY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_UYVY = 108,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_Y422	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_YUNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_YUY2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUY2 = 116,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_YUYV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YV12 = 99,$/;"	e	enum:cv::__anon242
COLOR_YUV2BGR_YVYU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YVYU = 118,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_420 = 106,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_NV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_NV21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_UYNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_UYVY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_UYVY = 123,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_Y422	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_YUNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_YUY2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUY2 = 124,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_YUYV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV2GRAY_YVYU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB      = 85,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_IYUV,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_IYUV = 104,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_NV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_NV12 = 94,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_NV21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_NV21 = 96,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_UYNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_UYVY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_UYVY = 111,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_Y422	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_YUNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_YUY2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUY2 = 119,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_YUYV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YV12 = 102,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGBA_YVYU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YVYU = 121,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_I420	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_I420 = COLOR_YUV2RGB_IYUV,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_IYUV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_IYUV = 100,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_NV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_NV12 = 90,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_NV21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_NV21 = 92,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_UYNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_UYVY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_UYVY = 107,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_Y422	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_YUNV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_YUY2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUY2 = 115,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_YUYV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_YV12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YV12 = 98,$/;"	e	enum:cv::__anon242
COLOR_YUV2RGB_YVYU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YVYU = 117,$/;"	e	enum:cv::__anon242
COLOR_YUV420p2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420p2BGR = COLOR_YUV2BGR_YV12,$/;"	e	enum:cv::__anon242
COLOR_YUV420p2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420p2BGRA = COLOR_YUV2BGRA_YV12,$/;"	e	enum:cv::__anon242
COLOR_YUV420p2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420p2GRAY = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV420p2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420p2RGB = COLOR_YUV2RGB_YV12,$/;"	e	enum:cv::__anon242
COLOR_YUV420p2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420p2RGBA = COLOR_YUV2RGBA_YV12,$/;"	e	enum:cv::__anon242
COLOR_YUV420sp2BGR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420sp2BGR = COLOR_YUV2BGR_NV21,$/;"	e	enum:cv::__anon242
COLOR_YUV420sp2BGRA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420sp2BGRA = COLOR_YUV2BGRA_NV21,$/;"	e	enum:cv::__anon242
COLOR_YUV420sp2GRAY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420sp2GRAY = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon242
COLOR_YUV420sp2RGB	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420sp2RGB = COLOR_YUV2RGB_NV21,$/;"	e	enum:cv::__anon242
COLOR_YUV420sp2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_YUV420sp2RGBA = COLOR_YUV2RGBA_NV21,$/;"	e	enum:cv::__anon242
COLOR_mRGBA2RGBA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    COLOR_mRGBA2RGBA = 126,$/;"	e	enum:cv::__anon242
COMPOSITE	/usr/local/include/opencv2/flann/defines.h	/^    COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
COMPRESSION_NONE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        COMPRESSION_NONE = 0,$/;"	e	enum:cv::FernClassifier::__anon282
COMPRESSION_PCA	/usr/local/include/opencv2/legacy/legacy.hpp	/^        COMPRESSION_PCA = 2,$/;"	e	enum:cv::FernClassifier::__anon282
COMPRESSION_RANDOM_PROJ	/usr/local/include/opencv2/legacy/legacy.hpp	/^        COMPRESSION_RANDOM_PROJ = 1,$/;"	e	enum:cv::FernClassifier::__anon282
CONSOLE	/usr/local/include/opencv2/ts/ts.hpp	/^        CONSOLE=1 << CONSOLE_IDX,$/;"	e	enum:cvtest::TS::__anon328
CONSOLE_IDX	/usr/local/include/opencv2/ts/ts.hpp	/^        CONSOLE_IDX=3,$/;"	e	enum:cvtest::TS::__anon328
COST_COLOR	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::__anon325
COST_COLOR_GRAD	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::__anon325
COV_MAT_DEFAULT	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon288
COV_MAT_DIAGONAL	/usr/local/include/opencv2/legacy/legacy.hpp	/^           COV_MAT_DIAGONAL =cv::EM::COV_MAT_DIAGONAL,$/;"	e	enum:CvEM::__anon280
COV_MAT_DIAGONAL	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon288
COV_MAT_GENERIC	/usr/local/include/opencv2/legacy/legacy.hpp	/^           COV_MAT_GENERIC  =cv::EM::COV_MAT_GENERIC };$/;"	e	enum:CvEM::__anon280
COV_MAT_GENERIC	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon288
COV_MAT_SPHERICAL	/usr/local/include/opencv2/legacy/legacy.hpp	/^    enum { COV_MAT_SPHERICAL=cv::EM::COV_MAT_SPHERICAL,$/;"	e	enum:CvEM::__anon280
COV_MAT_SPHERICAL	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon288
CP	/usr/local/include/opencv2/video/tracking.hpp	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman
CPU_HAS_NEON_FEATURE	/usr/local/include/opencv2/core/internal.hpp	/^#  define CPU_HAS_NEON_FEATURE /;"	d
CPU_SANITY_CHECK	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define CPU_SANITY_CHECK(/;"	d
CS	/usr/local/include/opencv2/flann/defines.h	/^    CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
CSIyx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat CSIyx;$/;"	m	class:cv::LogPolar_Interp
CSIyx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat CSIyx;$/;"	m	class:cv::LogPolar_Overlapping
CSV	/usr/local/include/opencv2/ts/ts.hpp	/^        CSV=1 << CSV_IDX,$/;"	e	enum:cvtest::TS::__anon328
CSV_IDX	/usr/local/include/opencv2/ts/ts.hpp	/^        CSV_IDX=2,$/;"	e	enum:cvtest::TS::__anon328
CVAPI	/usr/local/include/opencv2/core/types_c.h	/^#  define CVAPI(/;"	d
CVAUX_STR	/usr/local/include/opencv2/core/version.hpp	/^#define CVAUX_STR(/;"	d
CVAUX_STR_EXP	/usr/local/include/opencv2/core/version.hpp	/^#define CVAUX_STR_EXP(/;"	d
CVCL_DEVICE_TYPE_ACCELERATOR	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_ACCELERATOR = (1 << 3),$/;"	e	enum:cv::ocl::__anon308
CVCL_DEVICE_TYPE_ALL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_ALL         = 0xFFFFFFFF$/;"	e	enum:cv::ocl::__anon308
CVCL_DEVICE_TYPE_CPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_CPU         = (1 << 1),$/;"	e	enum:cv::ocl::__anon308
CVCL_DEVICE_TYPE_DEFAULT	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_DEFAULT     = (1 << 0),$/;"	e	enum:cv::ocl::__anon308
CVCL_DEVICE_TYPE_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_GPU         = (1 << 2),$/;"	e	enum:cv::ocl::__anon308
CVStatus	/usr/local/include/opencv2/core/types_c.h	/^typedef int CVStatus;$/;"	t
CV_16S	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16S /;"	d
CV_16SC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16SC(/;"	d
CV_16SC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16SC1 /;"	d
CV_16SC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16SC2 /;"	d
CV_16SC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16SC3 /;"	d
CV_16SC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16SC4 /;"	d
CV_16U	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16U /;"	d
CV_16UC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16UC(/;"	d
CV_16UC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16UC1 /;"	d
CV_16UC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16UC2 /;"	d
CV_16UC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16UC3 /;"	d
CV_16UC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_16UC4 /;"	d
CV_1F	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_1F /;"	d
CV_32F	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32F /;"	d
CV_32FC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32FC(/;"	d
CV_32FC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32FC1 /;"	d
CV_32FC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32FC2 /;"	d
CV_32FC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32FC3 /;"	d
CV_32FC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32FC4 /;"	d
CV_32S	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32S /;"	d
CV_32SC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32SC(/;"	d
CV_32SC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32SC1 /;"	d
CV_32SC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32SC2 /;"	d
CV_32SC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32SC3 /;"	d
CV_32SC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_32SC4 /;"	d
CV_64F	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64F /;"	d
CV_64FC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64FC(/;"	d
CV_64FC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64FC1 /;"	d
CV_64FC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64FC2 /;"	d
CV_64FC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64FC3 /;"	d
CV_64FC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_64FC4 /;"	d
CV_8S	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8S /;"	d
CV_8SC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8SC(/;"	d
CV_8SC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8SC1 /;"	d
CV_8SC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8SC2 /;"	d
CV_8SC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8SC3 /;"	d
CV_8SC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8SC4 /;"	d
CV_8U	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8U /;"	d
CV_8UC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8UC(/;"	d
CV_8UC1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8UC1 /;"	d
CV_8UC2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8UC2 /;"	d
CV_8UC3	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8UC3 /;"	d
CV_8UC4	/usr/local/include/opencv2/core/types_c.h	/^#define CV_8UC4 /;"	d
CV_AA	/usr/local/include/opencv2/core/core_c.h	/^#define CV_AA /;"	d
CV_ADAPTIVE_THRESH_GAUSSIAN_C	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_GAUSSIAN_C  =1$/;"	e	enum:__anon267
CV_ADAPTIVE_THRESH_MEAN_C	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_MEAN_C  =0,$/;"	e	enum:__anon267
CV_ADD	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ADD(/;"	d
CV_AND	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_AND(/;"	d
CV_ANDN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ANDN(/;"	d
CV_ARE_CNS_EQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ARE_CNS_EQ(/;"	d
CV_ARE_DEPTHS_EQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ARE_DEPTHS_EQ(/;"	d
CV_ARE_SIZES_EQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ARE_SIZES_EQ(/;"	d
CV_ARE_TYPES_EQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ARE_TYPES_EQ(/;"	d
CV_ARRAY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_ARRAY /;"	d
CV_ASSERT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ASSERT(/;"	d
CV_AUTOSTEP	/usr/local/include/opencv2/core/core_c.h	/^#define CV_AUTOSTEP /;"	d
CV_AUTO_STEP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_AUTO_STEP /;"	d
CV_AVX	/usr/local/include/opencv2/core/internal.hpp	/^#    define CV_AVX /;"	d
CV_AVX	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_AVX /;"	d
CV_Assert	/usr/local/include/opencv2/core/core.hpp	/^#define CV_Assert(/;"	d
CV_BACK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_BACK /;"	d
CV_BADARG_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADARG_ERR               = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADCHANNELS_ERR          = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADCOEF_ERR              =  -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADCONVERGENCE_ERR       = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADDEPTH_ERR             = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADFACTOR_ERR            =  -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADFLAG_ERR              =  -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADHEADER_ERR            = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADMEMBLOCK_ERR          = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADPOINT_ERR             =  -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADRANGE_ERR             = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADROI_ERR               = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADSCALE_ERR             =  -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADSIZE_ERR              =  -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_BADSTEP_ERR              = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BGFG_FGD_ALPHA_1	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_ALPHA_1 /;"	d
CV_BGFG_FGD_ALPHA_2	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_ALPHA_2 /;"	d
CV_BGFG_FGD_ALPHA_3	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_ALPHA_3 /;"	d
CV_BGFG_FGD_BG_UPDATE_TRESH	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_BG_UPDATE_TRESH /;"	d
CV_BGFG_FGD_DELTA	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_DELTA /;"	d
CV_BGFG_FGD_LC	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_LC /;"	d
CV_BGFG_FGD_LCC	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_LCC /;"	d
CV_BGFG_FGD_MINAREA	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_MINAREA /;"	d
CV_BGFG_FGD_N1C	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_N1C /;"	d
CV_BGFG_FGD_N1CC	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_N1CC /;"	d
CV_BGFG_FGD_N2C	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_N2C /;"	d
CV_BGFG_FGD_N2CC	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_N2CC /;"	d
CV_BGFG_FGD_T	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_BGFG_FGD_T /;"	d
CV_BGFG_MOG_BACKGROUND_THRESHOLD	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_BACKGROUND_THRESHOLD /;"	d
CV_BGFG_MOG_MAX_NGAUSSIANS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_MAX_NGAUSSIANS /;"	d
CV_BGFG_MOG_MINAREA	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_MINAREA /;"	d
CV_BGFG_MOG_NCOLORS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_NCOLORS /;"	d
CV_BGFG_MOG_NGAUSSIANS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_NGAUSSIANS /;"	d
CV_BGFG_MOG_SIGMA_INIT	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_SIGMA_INIT /;"	d
CV_BGFG_MOG_STD_THRESHOLD	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_STD_THRESHOLD /;"	d
CV_BGFG_MOG_WEIGHT_INIT	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_WEIGHT_INIT /;"	d
CV_BGFG_MOG_WINDOW_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BGFG_MOG_WINDOW_SIZE /;"	d
CV_BGR2BGR555	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2BGR555  =22,$/;"	e	enum:__anon251
CV_BGR2BGR565	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2BGR565  =12,$/;"	e	enum:__anon251
CV_BGR2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2BGRA    =0,$/;"	e	enum:__anon251
CV_BGR2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2GRAY    =6,$/;"	e	enum:__anon251
CV_BGR2HLS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2HLS     =52,$/;"	e	enum:__anon251
CV_BGR2HLS_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2HLS_FULL = 68,$/;"	e	enum:__anon251
CV_BGR2HSV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2HSV     =40,$/;"	e	enum:__anon251
CV_BGR2HSV_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2HSV_FULL = 66,$/;"	e	enum:__anon251
CV_BGR2Lab	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2Lab     =44,$/;"	e	enum:__anon251
CV_BGR2Luv	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2Luv     =50,$/;"	e	enum:__anon251
CV_BGR2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2RGB     =4,$/;"	e	enum:__anon251
CV_BGR2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2RGBA    =2,$/;"	e	enum:__anon251
CV_BGR2XYZ	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2XYZ     =32,$/;"	e	enum:__anon251
CV_BGR2YCrCb	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2YCrCb   =36,$/;"	e	enum:__anon251
CV_BGR2YUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2YUV      = 82,$/;"	e	enum:__anon251
CV_BGR2YUV_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2YUV_I420 = 128,$/;"	e	enum:__anon251
CV_BGR2YUV_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2YUV_IYUV = CV_BGR2YUV_I420,$/;"	e	enum:__anon251
CV_BGR2YUV_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR2YUV_YV12  = 132,$/;"	e	enum:__anon251
CV_BGR5552BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5552BGR  =24,$/;"	e	enum:__anon251
CV_BGR5552BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5552BGRA =28,$/;"	e	enum:__anon251
CV_BGR5552GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5552GRAY =31,$/;"	e	enum:__anon251
CV_BGR5552RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5552RGB  =25,$/;"	e	enum:__anon251
CV_BGR5552RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5552RGBA =29,$/;"	e	enum:__anon251
CV_BGR5652BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5652BGR  =14,$/;"	e	enum:__anon251
CV_BGR5652BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5652BGRA =18,$/;"	e	enum:__anon251
CV_BGR5652GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5652GRAY =21,$/;"	e	enum:__anon251
CV_BGR5652RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5652RGB  =15,$/;"	e	enum:__anon251
CV_BGR5652RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGR5652RGBA =19,$/;"	e	enum:__anon251
CV_BGRA2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2BGR    =1,$/;"	e	enum:__anon251
CV_BGRA2BGR555	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2BGR555 =26,$/;"	e	enum:__anon251
CV_BGRA2BGR565	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2BGR565 =16,$/;"	e	enum:__anon251
CV_BGRA2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2GRAY   =10,$/;"	e	enum:__anon251
CV_BGRA2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2RGB    =CV_RGBA2BGR,$/;"	e	enum:__anon251
CV_BGRA2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2RGBA   =5,$/;"	e	enum:__anon251
CV_BGRA2YUV_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2YUV_I420 = 130,$/;"	e	enum:__anon251
CV_BGRA2YUV_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2YUV_IYUV = CV_BGRA2YUV_I420,$/;"	e	enum:__anon251
CV_BGRA2YUV_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BGRA2YUV_YV12 = 134,$/;"	e	enum:__anon251
CV_BG_MODEL_FGD	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BG_MODEL_FGD	/;"	d
CV_BG_MODEL_FGD_SIMPLE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BG_MODEL_FGD_SIMPLE	/;"	d
CV_BG_MODEL_MOG	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BG_MODEL_MOG	/;"	d
CV_BG_STAT_MODEL_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_BG_STAT_MODEL_FIELDS(/;"	d
CV_BIG_INT	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_BIG_INT(/;"	d
CV_BIG_UINT	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_BIG_UINT(/;"	d
CV_BILATERAL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BILATERAL =4$/;"	e	enum:__anon248
CV_BLOB_CENTER	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_CENTER(/;"	d
CV_BLOB_ID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_ID(/;"	d
CV_BLOB_MINH	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_MINH /;"	d
CV_BLOB_MINW	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_MINW /;"	d
CV_BLOB_RECT	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_RECT(/;"	d
CV_BLOB_RX	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_RX(/;"	d
CV_BLOB_RY	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_RY(/;"	d
CV_BLOB_WX	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_WX(/;"	d
CV_BLOB_WY	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_WY(/;"	d
CV_BLOB_X	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_X(/;"	d
CV_BLOB_Y	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BLOB_Y(/;"	d
CV_BLUR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BLUR  =1,$/;"	e	enum:__anon248
CV_BLUR_NO_SCALE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BLUR_NO_SCALE =0,$/;"	e	enum:__anon248
CV_BT_HIST_TYPE_H	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BT_HIST_TYPE_H /;"	d
CV_BT_HIST_TYPE_MG	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BT_HIST_TYPE_MG /;"	d
CV_BT_HIST_TYPE_MG2	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BT_HIST_TYPE_MG2 /;"	d
CV_BT_HIST_TYPE_S	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_BT_HIST_TYPE_S /;"	d
CV_BadAlign	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadAlign=                  -21, \/**\/$/;"	e	enum:__anon45
CV_BadAlphaChannel	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadAlphaChannel=           -18, \/**\/$/;"	e	enum:__anon45
CV_BadCOI	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadCOI=                    -24, \/**\/$/;"	e	enum:__anon45
CV_BadCallBack	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadCallBack=               -22, \/**\/$/;"	e	enum:__anon45
CV_BadDataPtr	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadDataPtr=                -12, \/**\/$/;"	e	enum:__anon45
CV_BadDepth	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadDepth=                  -17, \/**\/$/;"	e	enum:__anon45
CV_BadImageSize	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadImageSize=              -10, \/* image size is invalid           *\/$/;"	e	enum:__anon45
CV_BadModelOrChSeq	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadModelOrChSeq=           -14, \/**\/$/;"	e	enum:__anon45
CV_BadNumChannel1U	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadNumChannel1U=           -16, \/**\/$/;"	e	enum:__anon45
CV_BadNumChannels	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadNumChannels=            -15, \/**\/$/;"	e	enum:__anon45
CV_BadOffset	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadOffset=                 -11, \/* offset is invalid               *\/$/;"	e	enum:__anon45
CV_BadOrder	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadOrder=                  -19, \/**\/$/;"	e	enum:__anon45
CV_BadOrigin	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadOrigin=                 -20, \/**\/$/;"	e	enum:__anon45
CV_BadROISize	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadROISize=                -25, \/**\/$/;"	e	enum:__anon45
CV_BadStep	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadStep=                   -13, \/**\/$/;"	e	enum:__anon45
CV_BadTileSize	/usr/local/include/opencv2/core/types_c.h	/^ CV_BadTileSize=               -23, \/**\/$/;"	e	enum:__anon45
CV_BayerBG2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerBG2BGR =46,$/;"	e	enum:__anon251
CV_BayerBG2BGR_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerBG2BGR_VNG =62,$/;"	e	enum:__anon251
CV_BayerBG2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerBG2GRAY = 86,$/;"	e	enum:__anon251
CV_BayerBG2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerBG2RGB =CV_BayerRG2BGR,$/;"	e	enum:__anon251
CV_BayerBG2RGB_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerBG2RGB_VNG =CV_BayerRG2BGR_VNG,$/;"	e	enum:__anon251
CV_BayerGB2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGB2BGR =47,$/;"	e	enum:__anon251
CV_BayerGB2BGR_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGB2BGR_VNG =63,$/;"	e	enum:__anon251
CV_BayerGB2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGB2GRAY = 87,$/;"	e	enum:__anon251
CV_BayerGB2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGB2RGB =CV_BayerGR2BGR,$/;"	e	enum:__anon251
CV_BayerGB2RGB_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGB2RGB_VNG =CV_BayerGR2BGR_VNG,$/;"	e	enum:__anon251
CV_BayerGR2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGR2BGR =49,$/;"	e	enum:__anon251
CV_BayerGR2BGR_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGR2BGR_VNG =65,$/;"	e	enum:__anon251
CV_BayerGR2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGR2GRAY = 89,$/;"	e	enum:__anon251
CV_BayerGR2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGR2RGB =CV_BayerGB2BGR,$/;"	e	enum:__anon251
CV_BayerGR2RGB_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerGR2RGB_VNG =CV_BayerGB2BGR_VNG,$/;"	e	enum:__anon251
CV_BayerRG2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerRG2BGR =48,$/;"	e	enum:__anon251
CV_BayerRG2BGR_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerRG2BGR_VNG =64,$/;"	e	enum:__anon251
CV_BayerRG2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerRG2GRAY = 88,$/;"	e	enum:__anon251
CV_BayerRG2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerRG2RGB =CV_BayerBG2BGR,$/;"	e	enum:__anon251
CV_BayerRG2RGB_VNG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_BayerRG2RGB_VNG =CV_BayerBG2BGR_VNG,$/;"	e	enum:__anon251
CV_C	/usr/local/include/opencv2/core/core_c.h	/^#define CV_C /;"	d
CV_CALIB_CB_ADAPTIVE_THRESH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_CB_ADAPTIVE_THRESH /;"	d
CV_CALIB_CB_FAST_CHECK	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_CB_FAST_CHECK /;"	d
CV_CALIB_CB_FILTER_QUADS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_CB_FILTER_QUADS /;"	d
CV_CALIB_CB_NORMALIZE_IMAGE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_CB_NORMALIZE_IMAGE /;"	d
CV_CALIB_ETALON_CHECKERBOARD	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_CALIB_ETALON_CHECKERBOARD = CV_CALIB_ETALON_CHESSBOARD$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_CHESSBOARD	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_CALIB_ETALON_CHESSBOARD = 0,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_USER	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_CALIB_ETALON_USER = -1,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_FIX_ASPECT_RATIO	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_ASPECT_RATIO /;"	d
CV_CALIB_FIX_FOCAL_LENGTH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_FOCAL_LENGTH /;"	d
CV_CALIB_FIX_INTRINSIC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_INTRINSIC /;"	d
CV_CALIB_FIX_K1	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K1 /;"	d
CV_CALIB_FIX_K2	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K2 /;"	d
CV_CALIB_FIX_K3	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K3 /;"	d
CV_CALIB_FIX_K4	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K4 /;"	d
CV_CALIB_FIX_K5	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K5 /;"	d
CV_CALIB_FIX_K6	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_K6 /;"	d
CV_CALIB_FIX_PRINCIPAL_POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_FIX_PRINCIPAL_POINT /;"	d
CV_CALIB_RATIONAL_MODEL	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_RATIONAL_MODEL /;"	d
CV_CALIB_SAME_FOCAL_LENGTH	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_SAME_FOCAL_LENGTH /;"	d
CV_CALIB_USE_INTRINSIC_GUESS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_USE_INTRINSIC_GUESS /;"	d
CV_CALIB_ZERO_DISPARITY	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_ZERO_DISPARITY /;"	d
CV_CALIB_ZERO_TANGENT_DIST	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_CALIB_ZERO_TANGENT_DIST /;"	d
CV_CALL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CALL(/;"	d
CV_CAMERA_TO_WARP	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_CAMERA_TO_WARP /;"	d
CV_CANNY_L2_GRADIENT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CANNY_L2_GRADIENT  =(1 << 31)$/;"	e	enum:__anon269
CV_CAP_ANDROID	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID  =1000,  \/\/ Android$/;"	e	enum:__anon219
CV_CAP_ANDROID_ANTIBANDING_50HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_50HZ = 0,$/;"	e	enum:__anon227
CV_CAP_ANDROID_ANTIBANDING_60HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_60HZ,$/;"	e	enum:__anon227
CV_CAP_ANDROID_ANTIBANDING_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_AUTO,$/;"	e	enum:__anon227
CV_CAP_ANDROID_ANTIBANDING_OFF	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_OFF$/;"	e	enum:__anon227
CV_CAP_ANDROID_COLOR_FRAME	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME = CV_CAP_ANDROID_COLOR_FRAME_BGR,$/;"	e	enum:__anon223
CV_CAP_ANDROID_COLOR_FRAME_BGR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_BGR = 0, \/\/BGR$/;"	e	enum:__anon223
CV_CAP_ANDROID_COLOR_FRAME_BGRA	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_BGRA = 3,$/;"	e	enum:__anon223
CV_CAP_ANDROID_COLOR_FRAME_RGB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_RGB = 2,$/;"	e	enum:__anon223
CV_CAP_ANDROID_COLOR_FRAME_RGBA	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_RGBA = 4$/;"	e	enum:__anon223
CV_CAP_ANDROID_FLASH_MODE_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_AUTO = 0,$/;"	e	enum:__anon224
CV_CAP_ANDROID_FLASH_MODE_OFF	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_OFF,$/;"	e	enum:__anon224
CV_CAP_ANDROID_FLASH_MODE_ON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_ON,$/;"	e	enum:__anon224
CV_CAP_ANDROID_FLASH_MODE_RED_EYE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_RED_EYE,$/;"	e	enum:__anon224
CV_CAP_ANDROID_FLASH_MODE_TORCH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_TORCH$/;"	e	enum:__anon224
CV_CAP_ANDROID_FOCUS_MODE_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_AUTO = 0,$/;"	e	enum:__anon225
CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO,$/;"	e	enum:__anon225
CV_CAP_ANDROID_FOCUS_MODE_EDOF	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_EDOF,$/;"	e	enum:__anon225
CV_CAP_ANDROID_FOCUS_MODE_FIXED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_FIXED,$/;"	e	enum:__anon225
CV_CAP_ANDROID_FOCUS_MODE_INFINITY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_INFINITY,$/;"	e	enum:__anon225
CV_CAP_ANDROID_FOCUS_MODE_MACRO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_MACRO$/;"	e	enum:__anon225
CV_CAP_ANDROID_GREY_FRAME	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_GREY_FRAME  = 1,  \/\/Y$/;"	e	enum:__anon223
CV_CAP_ANDROID_WHITE_BALANCE_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_AUTO = 0,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_SHADE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_SHADE,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT,$/;"	e	enum:__anon226
CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT$/;"	e	enum:__anon226
CV_CAP_ANY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_ANY      =0,     \/\/ autodetect$/;"	e	enum:__anon219
CV_CAP_AVFOUNDATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_AVFOUNDATION = 1200,  \/\/ AVFoundation framework for iOS (OS X Lion will have the same API)$/;"	e	enum:__anon219
CV_CAP_CMU1394	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_CMU1394  =300,$/;"	e	enum:__anon219
CV_CAP_DC1394	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_DC1394   =300,$/;"	e	enum:__anon219
CV_CAP_DSHOW	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_DSHOW    =700,   \/\/ DirectShow (via videoInput)$/;"	e	enum:__anon219
CV_CAP_FIREWARE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_FIREWARE =300,   \/\/ IEEE 1394 drivers$/;"	e	enum:__anon219
CV_CAP_FIREWIRE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_FIREWIRE =300,$/;"	e	enum:__anon219
CV_CAP_GIGANETIX	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_GIGANETIX = 1300  \/\/ Smartek Giganetix GigEVisionSDK$/;"	e	enum:__anon219
CV_CAP_GSTREAMER_QUEUE_LENGTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_GSTREAMER_QUEUE_LENGTH   = 200, \/\/ default is 1$/;"	e	enum:__anon220
CV_CAP_IEEE1394	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_IEEE1394 =300,$/;"	e	enum:__anon219
CV_CAP_MIL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_MIL      =100,   \/\/ MIL proprietary drivers$/;"	e	enum:__anon219
CV_CAP_MSMF	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_MSMF     =1400,  \/\/ Microsoft Media Foundation (via videoInput)$/;"	e	enum:__anon219
CV_CAP_OPENNI	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI   =900,   \/\/ OpenNI (for Kinect)$/;"	e	enum:__anon219
CV_CAP_OPENNI_ASUS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_ASUS =910,   \/\/ OpenNI (for Asus Xtion)$/;"	e	enum:__anon219
CV_CAP_OPENNI_BGR_IMAGE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_BGR_IMAGE                 = 5,$/;"	e	enum:__anon221
CV_CAP_OPENNI_DEPTH_GENERATOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR = 1 << 31,$/;"	e	enum:__anon220
CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE        = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE,$/;"	e	enum:__anon220
CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH,$/;"	e	enum:__anon220
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION,$/;"	e	enum:__anon220
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION,$/;"	e	enum:__anon220
CV_CAP_OPENNI_DEPTH_MAP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_MAP                 = 0, \/\/ Depth values in mm (CV_16UC1)$/;"	e	enum:__anon221
CV_CAP_OPENNI_DISPARITY_MAP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP             = 2, \/\/ Disparity in pixels (CV_8UC1)$/;"	e	enum:__anon221
CV_CAP_OPENNI_DISPARITY_MAP_32F	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP_32F         = 3, \/\/ Disparity in pixels (CV_32FC1)$/;"	e	enum:__anon221
CV_CAP_OPENNI_GENERATORS_MASK	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_GENERATORS_MASK = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR,$/;"	e	enum:__anon220
CV_CAP_OPENNI_GRAY_IMAGE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_GRAY_IMAGE                = 6$/;"	e	enum:__anon221
CV_CAP_OPENNI_IMAGE_GENERATOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR = 1 << 30,$/;"	e	enum:__anon220
CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE     = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE,$/;"	e	enum:__anon220
CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT         = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT,$/;"	e	enum:__anon220
CV_CAP_OPENNI_POINT_CLOUD_MAP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_POINT_CLOUD_MAP           = 1, \/\/ XYZ in meters (CV_32FC3)$/;"	e	enum:__anon221
CV_CAP_OPENNI_QVGA_30HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_QVGA_30HZ    = 3,$/;"	e	enum:__anon222
CV_CAP_OPENNI_QVGA_60HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_QVGA_60HZ    = 4$/;"	e	enum:__anon222
CV_CAP_OPENNI_SXGA_15HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_SXGA_15HZ    = 1,$/;"	e	enum:__anon222
CV_CAP_OPENNI_SXGA_30HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_SXGA_30HZ    = 2,$/;"	e	enum:__anon222
CV_CAP_OPENNI_VALID_DEPTH_MASK	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_VALID_DEPTH_MASK          = 4, \/\/ CV_8UC1$/;"	e	enum:__anon221
CV_CAP_OPENNI_VGA_30HZ	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_OPENNI_VGA_30HZ     = 0,$/;"	e	enum:__anon222
CV_CAP_PROP_ANDROID_ANTIBANDING	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_ANTIBANDING = 8004,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FLASH_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FLASH_MODE = 8001,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FOCAL_LENGTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCAL_LENGTH = 8005,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR = 8008,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR = 8006,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL = 8007,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_FOCUS_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_MODE = 8002,$/;"	e	enum:__anon220
CV_CAP_PROP_ANDROID_WHITE_BALANCE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_WHITE_BALANCE = 8003,$/;"	e	enum:__anon220
CV_CAP_PROP_AUTOGRAB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_AUTOGRAB      =1024, \/\/ property for highgui class CvCapture_Android only$/;"	e	enum:__anon220
CV_CAP_PROP_AUTO_EXPOSURE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_AUTO_EXPOSURE =21, \/\/ exposure control done by camera,$/;"	e	enum:__anon220
CV_CAP_PROP_BACKLIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_BACKLIGHT     =32,$/;"	e	enum:__anon220
CV_CAP_PROP_BRIGHTNESS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_BRIGHTNESS    =10,$/;"	e	enum:__anon220
CV_CAP_PROP_CONTRAST	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_CONTRAST      =11,$/;"	e	enum:__anon220
CV_CAP_PROP_CONVERT_RGB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_CONVERT_RGB   =16,$/;"	e	enum:__anon220
CV_CAP_PROP_DC1394_MODE_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_AUTO = -2,$/;"	e	enum:__anon220
CV_CAP_PROP_DC1394_MODE_MANUAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_MANUAL = -3, \/\/set automatically when a value of the feature is set by the user$/;"	e	enum:__anon220
CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1,$/;"	e	enum:__anon220
CV_CAP_PROP_DC1394_OFF	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_OFF         = -4,  \/\/turn the feature off (not controlled manually nor automatically)$/;"	e	enum:__anon220
CV_CAP_PROP_EXPOSURE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_EXPOSURE      =15,$/;"	e	enum:__anon220
CV_CAP_PROP_FOCUS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FOCUS         =28,$/;"	e	enum:__anon220
CV_CAP_PROP_FORMAT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FORMAT         =8,$/;"	e	enum:__anon220
CV_CAP_PROP_FOURCC	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FOURCC         =6,$/;"	e	enum:__anon220
CV_CAP_PROP_FPS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FPS            =5,$/;"	e	enum:__anon220
CV_CAP_PROP_FRAME_COUNT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_COUNT    =7,$/;"	e	enum:__anon220
CV_CAP_PROP_FRAME_HEIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_HEIGHT   =4,$/;"	e	enum:__anon220
CV_CAP_PROP_FRAME_WIDTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_WIDTH    =3,$/;"	e	enum:__anon220
CV_CAP_PROP_GAIN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GAIN          =14,$/;"	e	enum:__anon220
CV_CAP_PROP_GAMMA	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GAMMA         =22,$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX = 10004,$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_OFFSET_X	/usr/local/include/opencv2/highgui/highgui_c.h	/^    ,CV_CAP_PROP_GIGA_FRAME_OFFSET_X = 10001,$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_OFFSET_Y	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_OFFSET_Y = 10002,$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005,$/;"	e	enum:__anon220
CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX = 10003,$/;"	e	enum:__anon220
CV_CAP_PROP_GUID	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_GUID          =29,$/;"	e	enum:__anon220
CV_CAP_PROP_HUE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_HUE           =13,$/;"	e	enum:__anon220
CV_CAP_PROP_IOS_DEVICE_EXPOSURE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_EXPOSURE = 9002,$/;"	e	enum:__anon220
CV_CAP_PROP_IOS_DEVICE_FLASH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FLASH = 9003,$/;"	e	enum:__anon220
CV_CAP_PROP_IOS_DEVICE_FOCUS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FOCUS = 9001,$/;"	e	enum:__anon220
CV_CAP_PROP_IOS_DEVICE_TORCH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_TORCH = 9005$/;"	e	enum:__anon220
CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004,$/;"	e	enum:__anon220
CV_CAP_PROP_IRIS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_IRIS          =36,$/;"	e	enum:__anon220
CV_CAP_PROP_ISO_SPEED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ISO_SPEED     =30,$/;"	e	enum:__anon220
CV_CAP_PROP_MAX_DC1394	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_MAX_DC1394    =31,$/;"	e	enum:__anon220
CV_CAP_PROP_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_MODE           =9,$/;"	e	enum:__anon220
CV_CAP_PROP_MONOCROME	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_MONOCROME     =19,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_BASELINE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_BASELINE        = 102, \/\/ in mm$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_CIRCLE_BUFFER	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_CIRCLE_BUFFER     = 107,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_FOCAL_LENGTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_FOCAL_LENGTH    = 103, \/\/ in pixels$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH = 101, \/\/ in mm$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_GENERATOR_PRESENT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_GENERATOR_PRESENT = 109,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE   = 106,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_MAX_TIME_DURATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_MAX_TIME_DURATION = 108,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_OUTPUT_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_OUTPUT_MODE     = 100,$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_REGISTRATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION    = 104, \/\/ flag$/;"	e	enum:__anon220
CV_CAP_PROP_OPENNI_REGISTRATION_ON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION_ON = CV_CAP_PROP_OPENNI_REGISTRATION, \/\/ flag that synchronizes the remapping depth map to image map$/;"	e	enum:__anon220
CV_CAP_PROP_PAN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_PAN           =33,$/;"	e	enum:__anon220
CV_CAP_PROP_POS_AVI_RATIO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_POS_AVI_RATIO  =2,$/;"	e	enum:__anon220
CV_CAP_PROP_POS_FRAMES	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_POS_FRAMES     =1,$/;"	e	enum:__anon220
CV_CAP_PROP_POS_MSEC	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_POS_MSEC       =0,$/;"	e	enum:__anon220
CV_CAP_PROP_PREVIEW_FORMAT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_PREVIEW_FORMAT=1026, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon220
CV_CAP_PROP_PVAPI_MULTICASTIP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_PVAPI_MULTICASTIP   = 300, \/\/ ip for anable multicast master mode. 0 for disable multicast$/;"	e	enum:__anon220
CV_CAP_PROP_RECTIFICATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_RECTIFICATION =18,$/;"	e	enum:__anon220
CV_CAP_PROP_ROLL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ROLL          =35,$/;"	e	enum:__anon220
CV_CAP_PROP_SATURATION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_SATURATION    =12,$/;"	e	enum:__anon220
CV_CAP_PROP_SETTINGS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_SETTINGS      =37,$/;"	e	enum:__anon220
CV_CAP_PROP_SHARPNESS	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_SHARPNESS     =20,$/;"	e	enum:__anon220
CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING=1025, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon220
CV_CAP_PROP_TEMPERATURE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_TEMPERATURE   =23,$/;"	e	enum:__anon220
CV_CAP_PROP_TILT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_TILT          =34,$/;"	e	enum:__anon220
CV_CAP_PROP_TRIGGER	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_TRIGGER       =24,$/;"	e	enum:__anon220
CV_CAP_PROP_TRIGGER_DELAY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_TRIGGER_DELAY =25,$/;"	e	enum:__anon220
CV_CAP_PROP_WHITE_BALANCE_BLUE_U	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_BLUE_U =17,$/;"	e	enum:__anon220
CV_CAP_PROP_WHITE_BALANCE_RED_V	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_RED_V =26,$/;"	e	enum:__anon220
CV_CAP_PROP_XI_AEAG	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AEAG          = 415,      \/\/ Automatic exposure\/gain$/;"	e	enum:__anon220
CV_CAP_PROP_XI_AEAG_LEVEL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AEAG_LEVEL    = 419,       \/\/ Average intensity of output signal AEAG should achieve(in %)$/;"	e	enum:__anon220
CV_CAP_PROP_XI_AE_MAX_LIMIT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AE_MAX_LIMIT  = 417,      \/\/ Maximum limit of exposure in AEAG procedure$/;"	e	enum:__anon220
CV_CAP_PROP_XI_AG_MAX_LIMIT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AG_MAX_LIMIT  = 418,      \/\/ Maximum limit of gain in AEAG procedure$/;"	e	enum:__anon220
CV_CAP_PROP_XI_AUTO_WB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AUTO_WB       = 414,      \/\/ Automatic white balance$/;"	e	enum:__anon220
CV_CAP_PROP_XI_DATA_FORMAT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_DATA_FORMAT   = 401,       \/\/ Output data format.$/;"	e	enum:__anon220
CV_CAP_PROP_XI_DOWNSAMPLING	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_DOWNSAMPLING  = 400,      \/\/ Change image resolution by binning or skipping.$/;"	e	enum:__anon220
CV_CAP_PROP_XI_EXP_PRIORITY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_EXP_PRIORITY  = 416,      \/\/ Exposure priority (0.5 - exposure 50%, gain 50%).$/;"	e	enum:__anon220
CV_CAP_PROP_XI_GPI_LEVEL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_LEVEL     = 408,      \/\/ Get general purpose level$/;"	e	enum:__anon220
CV_CAP_PROP_XI_GPI_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_MODE      = 407,      \/\/ Set general purpose input mode$/;"	e	enum:__anon220
CV_CAP_PROP_XI_GPI_SELECTOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_SELECTOR  = 406,      \/\/ Selects general purpose input$/;"	e	enum:__anon220
CV_CAP_PROP_XI_GPO_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPO_MODE      = 410,      \/\/ Set general purpose output mode$/;"	e	enum:__anon220
CV_CAP_PROP_XI_GPO_SELECTOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPO_SELECTOR  = 409,      \/\/ Selects general purpose output$/;"	e	enum:__anon220
CV_CAP_PROP_XI_LED_MODE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_LED_MODE      = 412,      \/\/ Define camera signalling LED functionality$/;"	e	enum:__anon220
CV_CAP_PROP_XI_LED_SELECTOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_LED_SELECTOR  = 411,      \/\/ Selects camera signalling LED$/;"	e	enum:__anon220
CV_CAP_PROP_XI_MANUAL_WB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_MANUAL_WB     = 413,      \/\/ Calculates White Balance(must be called during acquisition)$/;"	e	enum:__anon220
CV_CAP_PROP_XI_OFFSET_X	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_OFFSET_X      = 402,      \/\/ Horizontal offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon220
CV_CAP_PROP_XI_OFFSET_Y	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_OFFSET_Y      = 403,      \/\/ Vertical offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon220
CV_CAP_PROP_XI_TIMEOUT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TIMEOUT       = 420,       \/\/ Image capture timeout in milliseconds$/;"	e	enum:__anon220
CV_CAP_PROP_XI_TRG_SOFTWARE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TRG_SOFTWARE  = 405,      \/\/ Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.$/;"	e	enum:__anon220
CV_CAP_PROP_XI_TRG_SOURCE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TRG_SOURCE    = 404,      \/\/ Defines source of trigger.$/;"	e	enum:__anon220
CV_CAP_PROP_ZOOM	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PROP_ZOOM          =27,$/;"	e	enum:__anon220
CV_CAP_PVAPI	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_PVAPI    =800,   \/\/ PvAPI, Prosilica GigE SDK$/;"	e	enum:__anon219
CV_CAP_QT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_QT       =500,   \/\/ QuickTime$/;"	e	enum:__anon219
CV_CAP_STEREO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_STEREO   =400,   \/\/ TYZX proprietary drivers$/;"	e	enum:__anon219
CV_CAP_TYZX	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_TYZX     =400,$/;"	e	enum:__anon219
CV_CAP_UNICAP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_UNICAP   =600,   \/\/ Unicap drivers$/;"	e	enum:__anon219
CV_CAP_V4L	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_V4L      =200,$/;"	e	enum:__anon219
CV_CAP_V4L2	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_V4L2     =200,$/;"	e	enum:__anon219
CV_CAP_VFW	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_VFW      =200,   \/\/ platform native$/;"	e	enum:__anon219
CV_CAP_XIAPI	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CAP_XIAPI    =1100,   \/\/ XIMEA Camera API$/;"	e	enum:__anon219
CV_CARRAY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CARRAY(/;"	d
CV_CAST_16S	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_16S(/;"	d
CV_CAST_16U	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_16U(/;"	d
CV_CAST_32F	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_32F(/;"	d
CV_CAST_32S	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_32S(/;"	d
CV_CAST_64F	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_64F(/;"	d
CV_CAST_64S	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_64S(/;"	d
CV_CAST_8S	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_8S(/;"	d
CV_CAST_8U	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_CAST_8U(/;"	d
CV_CDECL	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_CDECL /;"	d
CV_CDECL	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_CDECL$/;"	d
CV_CHAIN_APPROX_NONE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CHAIN_APPROX_NONE=1,$/;"	e	enum:__anon258
CV_CHAIN_APPROX_SIMPLE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CHAIN_APPROX_SIMPLE=2,$/;"	e	enum:__anon258
CV_CHAIN_APPROX_TC89_KCOS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_KCOS=4,$/;"	e	enum:__anon258
CV_CHAIN_APPROX_TC89_L1	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_L1=3,$/;"	e	enum:__anon258
CV_CHAIN_CODE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CHAIN_CODE=0,$/;"	e	enum:__anon258
CV_CHECK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CHECK(/;"	d
CV_CHECKBOX	/usr/local/include/opencv2/highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon212
CV_CHECK_NANS	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_CHECK_NANS(/;"	d
CV_CHECK_QUIET	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_CHECK_QUIET /;"	d
CV_CHECK_RANGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_CHECK_RANGE /;"	d
CV_CHOLESKY	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CHOLESKY /;"	d
CV_CLOCKWISE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CLOCKWISE         =1,$/;"	e	enum:__anon261
CV_CMP	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_CMP(/;"	d
CV_CMP_EQ	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_EQ /;"	d
CV_CMP_GE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_GE /;"	d
CV_CMP_GT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_GT /;"	d
CV_CMP_LE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_LE /;"	d
CV_CMP_LT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_LT /;"	d
CV_CMP_NE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CMP_NE /;"	d
CV_CN_MAX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CN_MAX /;"	d
CV_CN_SHIFT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CN_SHIFT /;"	d
CV_COLORCVT_MAX	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COLORCVT_MAX  = 135$/;"	e	enum:__anon251
CV_COL_SAMPLE	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_COL_SAMPLE /;"	d
CV_COMP_BHATTACHARYYA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COMP_BHATTACHARYYA =3,$/;"	e	enum:__anon262
CV_COMP_CHISQR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COMP_CHISQR        =1,$/;"	e	enum:__anon262
CV_COMP_CORREL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COMP_CORREL        =0,$/;"	e	enum:__anon262
CV_COMP_HELLINGER	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COMP_HELLINGER     =CV_COMP_BHATTACHARYYA$/;"	e	enum:__anon262
CV_COMP_INTERSECT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COMP_INTERSECT     =2,$/;"	e	enum:__anon262
CV_CONTOURS_MATCH_I1	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I1  =1,$/;"	e	enum:__anon260
CV_CONTOURS_MATCH_I2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I2  =2,$/;"	e	enum:__anon260
CV_CONTOURS_MATCH_I3	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I3  =3$/;"	e	enum:__anon260
CV_CONTOUR_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CONTOUR_FIELDS(/;"	d
CV_CONTOUR_TREES_MATCH_I1	/usr/local/include/opencv2/legacy/legacy.hpp	/^enum { CV_CONTOUR_TREES_MATCH_I1 = 1 };$/;"	e	enum:__anon278
CV_COUNT	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_COUNT /;"	d
CV_COUNTER_CLOCKWISE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_COUNTER_CLOCKWISE =2$/;"	e	enum:__anon261
CV_COUNT_OBS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_COUNT_OBS(/;"	d
CV_COVAR_COLS	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_COLS /;"	d
CV_COVAR_NORMAL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_NORMAL /;"	d
CV_COVAR_ROWS	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_ROWS /;"	d
CV_COVAR_SCALE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_SCALE /;"	d
CV_COVAR_SCRAMBLED	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_SCRAMBLED /;"	d
CV_COVAR_USE_AVG	/usr/local/include/opencv2/core/core_c.h	/^#define CV_COVAR_USE_AVG /;"	d
CV_CPU_AVX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_AVX /;"	d
CV_CPU_MMX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_MMX /;"	d
CV_CPU_NONE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_NONE /;"	d
CV_CPU_POPCNT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_POPCNT /;"	d
CV_CPU_SSE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSE /;"	d
CV_CPU_SSE2	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSE2 /;"	d
CV_CPU_SSE3	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSE3 /;"	d
CV_CPU_SSE4_1	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSE4_1 /;"	d
CV_CPU_SSE4_2	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSE4_2 /;"	d
CV_CPU_SSSE3	/usr/local/include/opencv2/core/core_c.h	/^#define CV_CPU_SSSE3 /;"	d
CV_CURRENT_INT	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_CURRENT_INT(/;"	d
CV_CURRENT_POINT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CURRENT_POINT(/;"	d
CV_CUSTOM_CARRAY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_CUSTOM_CARRAY(/;"	d
CV_CVTIMG_FLIP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CVTIMG_FLIP      =1,$/;"	e	enum:__anon218
CV_CVTIMG_SWAP_RB	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_CVTIMG_SWAP_RB   =2$/;"	e	enum:__anon218
CV_CheckGlError	/usr/local/include/opencv2/core/internal.hpp	/^    #define CV_CheckGlError(/;"	d
CV_DBG_BREAK	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_DBG_BREAK(/;"	d
CV_DECL_ALIGNED	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_DECL_ALIGNED(/;"	d
CV_DEFAULT	/usr/local/include/opencv2/core/types_c.h	/^#    define CV_DEFAULT(/;"	d
CV_DEFAULT_IMAGE_ROW_ALIGN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_DEFAULT_IMAGE_ROW_ALIGN /;"	d
CV_DEFAULT_MAT_ROW_ALIGN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_DEFAULT_MAT_ROW_ALIGN /;"	d
CV_DEPTH_MAX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_DEPTH_MAX /;"	d
CV_DESCALE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_DESCALE(/;"	d
CV_DESCALE	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        #define CV_DESCALE(/;"	d
CV_DESCALE	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^    #undef CV_DESCALE$/;"	d
CV_DIFF	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DIFF /;"	d
CV_DIFF_C	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DIFF_C /;"	d
CV_DIFF_L1	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DIFF_L1 /;"	d
CV_DIFF_L2	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DIFF_L2 /;"	d
CV_DIM	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_DIM(/;"	d
CV_DISPARITY_BIRCHFIELD	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_DISPARITY_BIRCHFIELD /;"	d
CV_DIST_C	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_C       =3,   \/* distance = max(|x1-x2|,|y1-y2|) *\/$/;"	e	enum:__anon265
CV_DIST_FAIR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_FAIR    =5,   \/* distance = c^2(|x|\/c-log(1+|x|\/c)), c = 1.3998 *\/$/;"	e	enum:__anon265
CV_DIST_HUBER	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_HUBER   =7    \/* distance = |x|<c ? x^2\/2 : c(|x|-c\/2), c=1.345 *\/$/;"	e	enum:__anon265
CV_DIST_L1	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_L1      =1,   \/* distance = |x1-x2| + |y1-y2| *\/$/;"	e	enum:__anon265
CV_DIST_L12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_L12     =4,   \/* L1-L2 metric: distance = 2(sqrt(1+x*x\/2) - 1)) *\/$/;"	e	enum:__anon265
CV_DIST_L2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_L2      =2,   \/* the simple euclidean distance *\/$/;"	e	enum:__anon265
CV_DIST_LABEL_CCOMP	/usr/local/include/opencv2/imgproc/types_c.h	/^  CV_DIST_LABEL_CCOMP = 0,$/;"	e	enum:__anon264
CV_DIST_LABEL_PIXEL	/usr/local/include/opencv2/imgproc/types_c.h	/^  CV_DIST_LABEL_PIXEL = 1$/;"	e	enum:__anon264
CV_DIST_MASK_3	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_MASK_3   =3,$/;"	e	enum:__anon263
CV_DIST_MASK_5	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_MASK_5   =5,$/;"	e	enum:__anon263
CV_DIST_MASK_PRECISE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_MASK_PRECISE =0$/;"	e	enum:__anon263
CV_DIST_USER	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_USER    =-1,  \/* User defined distance *\/$/;"	e	enum:__anon265
CV_DIST_WELSCH	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_DIST_WELSCH  =6,   \/* distance = c^2\/2(1-exp(-(x\/c)^2)), c = 2.9846 *\/$/;"	e	enum:__anon265
CV_DIV_BY_ZERO_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_DIV_BY_ZERO_ERR          =  -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DLL	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_DLL$/;"	d
CV_DOMINANT_IPAN	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_DOMINANT_IPAN /;"	d
CV_DTREE_CAT_DIR	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_DTREE_CAT_DIR(/;"	d
CV_DXT_FORWARD	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_FORWARD /;"	d
CV_DXT_INVERSE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_INVERSE /;"	d
CV_DXT_INVERSE_SCALE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_INVERSE_SCALE /;"	d
CV_DXT_INV_SCALE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_INV_SCALE /;"	d
CV_DXT_MUL_CONJ	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_MUL_CONJ /;"	d
CV_DXT_ROWS	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_ROWS /;"	d
CV_DXT_SCALE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_DXT_SCALE /;"	d
CV_DbgAssert	/usr/local/include/opencv2/core/core.hpp	/^#define CV_DbgAssert(/;"	d
CV_EIGOBJ_BOTH_CALLBACK	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_EIGOBJ_BOTH_CALLBACK /;"	d
CV_EIGOBJ_INPUT_CALLBACK	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_EIGOBJ_INPUT_CALLBACK /;"	d
CV_EIGOBJ_NO_CALLBACK	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_EIGOBJ_NO_CALLBACK /;"	d
CV_EIGOBJ_OUTPUT_CALLBACK	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_EIGOBJ_OUTPUT_CALLBACK /;"	d
CV_ELEM_SIZE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ELEM_SIZE(/;"	d
CV_ELEM_SIZE1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ELEM_SIZE1(/;"	d
CV_EMPTY	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_EMPTY$/;"	d
CV_ENABLE_UNROLLED	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_ENABLE_UNROLLED /;"	d
CV_ENUM	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define CV_ENUM(/;"	d
CV_EPNP	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_EPNP = 1, \/\/ F.Moreno-Noguer, V.Lepetit and P.Fua "EPnP: Efficient Perspective-n-Point Camera Pose Estimation"$/;"	e	enum:__anon1
CV_EQ	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_EQ(/;"	d
CV_ERROR	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ERROR(/;"	d
CV_ERROR_FROM_CODE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ERROR_FROM_CODE(/;"	d
CV_EVENT_FLAG_ALTKEY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_ALTKEY    =32$/;"	e	enum:__anon215
CV_EVENT_FLAG_CTRLKEY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:__anon215
CV_EVENT_FLAG_LBUTTON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:__anon215
CV_EVENT_FLAG_MBUTTON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:__anon215
CV_EVENT_FLAG_RBUTTON	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:__anon215
CV_EVENT_FLAG_SHIFTKEY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:__anon215
CV_EVENT_LBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:__anon214
CV_EVENT_LBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDOWN    =1,$/;"	e	enum:__anon214
CV_EVENT_LBUTTONUP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_LBUTTONUP      =4,$/;"	e	enum:__anon214
CV_EVENT_MBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDBLCLK  =9$/;"	e	enum:__anon214
CV_EVENT_MBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDOWN    =3,$/;"	e	enum:__anon214
CV_EVENT_MBUTTONUP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_MBUTTONUP      =6,$/;"	e	enum:__anon214
CV_EVENT_MOUSEMOVE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_MOUSEMOVE      =0,$/;"	e	enum:__anon214
CV_EVENT_RBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:__anon214
CV_EVENT_RBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDOWN    =2,$/;"	e	enum:__anon214
CV_EVENT_RBUTTONUP	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_EVENT_RBUTTONUP      =5,$/;"	e	enum:__anon214
CV_EXPORTS	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_EXPORTS /;"	d
CV_EXPORTS	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_EXPORTS$/;"	d
CV_EXPORTS_AS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_EXPORTS_AS(/;"	d
CV_EXPORTS_W	/usr/local/include/opencv2/core/types_c.h	/^#define CV_EXPORTS_W /;"	d
CV_EXPORTS_W_MAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_EXPORTS_W_MAP /;"	d
CV_EXPORTS_W_SIMPLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_EXPORTS_W_SIMPLE /;"	d
CV_EXTERN_C	/usr/local/include/opencv2/core/types_c.h	/^#    define CV_EXTERN_C /;"	d
CV_EXTERN_C	/usr/local/include/opencv2/core/types_c.h	/^#    define CV_EXTERN_C$/;"	d
CV_EXTERN_C_FUNCPTR	/usr/local/include/opencv2/core/types_c.h	/^#    define CV_EXTERN_C_FUNCPTR(/;"	d
CV_ErrModeLeaf	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ErrModeLeaf /;"	d
CV_ErrModeParent	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ErrModeParent /;"	d
CV_ErrModeSilent	/usr/local/include/opencv2/core/core_c.h	/^#define CV_ErrModeSilent /;"	d
CV_Error	/usr/local/include/opencv2/core/core.hpp	/^#define CV_Error(/;"	d
CV_Error_	/usr/local/include/opencv2/core/core.hpp	/^#define CV_Error_(/;"	d
CV_FACE_ELEMENTS	/usr/local/include/opencv2/legacy/legacy.hpp	/^enum CV_FACE_ELEMENTS$/;"	g
CV_FACE_LEFT_EYE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_FACE_LEFT_EYE = 1,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_MOUTH	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_FACE_MOUTH = 0,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_RIGHT_EYE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_FACE_RIGHT_EYE = 2$/;"	e	enum:CV_FACE_ELEMENTS
CV_FILLED	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FILLED /;"	d
CV_FIRST_VORONOIEDGE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_FIRST_VORONOIEDGE2D(/;"	d
CV_FLAGS	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define CV_FLAGS(/;"	d
CV_FLOODFILL_FIXED_RANGE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_FLOODFILL_FIXED_RANGE =(1 << 16),$/;"	e	enum:__anon268
CV_FLOODFILL_MASK_ONLY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_FLOODFILL_MASK_ONLY   =(1 << 17)$/;"	e	enum:__anon268
CV_FLT_TO_FIX	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_FLT_TO_FIX(/;"	d
CV_FM_7POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_7POINT /;"	d
CV_FM_8POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_8POINT /;"	d
CV_FM_LMEDS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_LMEDS /;"	d
CV_FM_LMEDS_ONLY	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_LMEDS_ONLY /;"	d
CV_FM_RANSAC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_RANSAC /;"	d
CV_FM_RANSAC_ONLY	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_FM_RANSAC_ONLY /;"	d
CV_FONT_BLACK	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_FONT_BLACK           = 87 \/\/QFont::Black$/;"	e	enum:__anon210
CV_FONT_BOLD	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_FONT_BOLD            = 75,\/\/QFont::Bold,$/;"	e	enum:__anon210
CV_FONT_DEMIBOLD	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_FONT_DEMIBOLD        = 63,\/\/QFont::DemiBold,$/;"	e	enum:__anon210
CV_FONT_HERSHEY_COMPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_COMPLEX /;"	d
CV_FONT_HERSHEY_COMPLEX_SMALL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_COMPLEX_SMALL /;"	d
CV_FONT_HERSHEY_DUPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_DUPLEX /;"	d
CV_FONT_HERSHEY_PLAIN	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_PLAIN /;"	d
CV_FONT_HERSHEY_SCRIPT_COMPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_SCRIPT_COMPLEX /;"	d
CV_FONT_HERSHEY_SCRIPT_SIMPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_SCRIPT_SIMPLEX /;"	d
CV_FONT_HERSHEY_SIMPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_SIMPLEX /;"	d
CV_FONT_HERSHEY_TRIPLEX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_HERSHEY_TRIPLEX /;"	d
CV_FONT_ITALIC	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_ITALIC /;"	d
CV_FONT_LIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^enum {  CV_FONT_LIGHT           = 25,\/\/QFont::Light,$/;"	e	enum:__anon210
CV_FONT_NORMAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_FONT_NORMAL          = 50,\/\/QFont::Normal,$/;"	e	enum:__anon210
CV_FONT_VECTOR0	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FONT_VECTOR0 /;"	d
CV_FOURCC	/usr/local/include/opencv2/highgui/highgui_c.h	/^CV_INLINE int CV_FOURCC(char c1, char c2, char c3, char c4)$/;"	f
CV_FOURCC_DEFAULT	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define CV_FOURCC_DEFAULT /;"	d
CV_FOURCC_PROMPT	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define CV_FOURCC_PROMPT /;"	d
CV_FRONT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FRONT /;"	d
CV_FUNCNAME	/usr/local/include/opencv2/core/core_c.h	/^#define CV_FUNCNAME(/;"	d
CV_GAUSSIAN	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GAUSSIAN  =2,$/;"	e	enum:__anon248
CV_GAUSSIAN_5x5	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GAUSSIAN_5x5 = 7$/;"	e	enum:__anon249
CV_GE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_GE(/;"	d
CV_GEMM_A_T	/usr/local/include/opencv2/core/core_c.h	/^#define CV_GEMM_A_T /;"	d
CV_GEMM_B_T	/usr/local/include/opencv2/core/core_c.h	/^#define CV_GEMM_B_T /;"	d
CV_GEMM_C_T	/usr/local/include/opencv2/core/core_c.h	/^#define CV_GEMM_C_T /;"	d
CV_GET_CURRENT	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_GET_CURRENT(/;"	d
CV_GET_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_GET_SEQ_ELEM(/;"	d
CV_GLCMDESC_CLUSTERSHADE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CLUSTERSHADE /;"	d
CV_GLCMDESC_CLUSTERTENDENCY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CLUSTERTENDENCY /;"	d
CV_GLCMDESC_CONTRAST	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CONTRAST /;"	d
CV_GLCMDESC_CORRELATION	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CORRELATION /;"	d
CV_GLCMDESC_CORRELATIONINFO1	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CORRELATIONINFO1 /;"	d
CV_GLCMDESC_CORRELATIONINFO2	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_CORRELATIONINFO2 /;"	d
CV_GLCMDESC_ENERGY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_ENERGY /;"	d
CV_GLCMDESC_ENTROPY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_ENTROPY /;"	d
CV_GLCMDESC_HOMOGENITY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_HOMOGENITY /;"	d
CV_GLCMDESC_MAXIMUMPROBABILITY	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_MAXIMUMPROBABILITY /;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST /;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWTRIPLENEST	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_OPTIMIZATION_ALLOWTRIPLENEST /;"	d
CV_GLCMDESC_OPTIMIZATION_HISTOGRAM	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCMDESC_OPTIMIZATION_HISTOGRAM /;"	d
CV_GLCM_ALL	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_ALL /;"	d
CV_GLCM_DESC	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_DESC /;"	d
CV_GLCM_GLCM	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_GLCM /;"	d
CV_GLCM_OPTIMIZATION_HISTOGRAM	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_OPTIMIZATION_HISTOGRAM /;"	d
CV_GLCM_OPTIMIZATION_LUT	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_OPTIMIZATION_LUT /;"	d
CV_GLCM_OPTIMIZATION_NONE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_GLCM_OPTIMIZATION_NONE /;"	d
CV_GRAPH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_GRAPH /;"	d
CV_GRAPH_ALL_ITEMS	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_ALL_ITEMS /;"	d
CV_GRAPH_ANY_EDGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_ANY_EDGE /;"	d
CV_GRAPH_BACKTRACKING	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_BACKTRACKING /;"	d
CV_GRAPH_BACK_EDGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_BACK_EDGE /;"	d
CV_GRAPH_CROSS_EDGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_CROSS_EDGE /;"	d
CV_GRAPH_EDGE_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_GRAPH_EDGE_FIELDS(/;"	d
CV_GRAPH_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_GRAPH_FIELDS(/;"	d
CV_GRAPH_FLAG_ORIENTED	/usr/local/include/opencv2/core/types_c.h	/^#define CV_GRAPH_FLAG_ORIENTED /;"	d
CV_GRAPH_FORWARD_EDGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_FORWARD_EDGE /;"	d
CV_GRAPH_FORWARD_EDGE_FLAG	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_FORWARD_EDGE_FLAG /;"	d
CV_GRAPH_ITEM_VISITED_FLAG	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_ITEM_VISITED_FLAG /;"	d
CV_GRAPH_NEW_TREE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_NEW_TREE /;"	d
CV_GRAPH_OVER	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_OVER /;"	d
CV_GRAPH_SEARCH_TREE_NODE_FLAG	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_SEARCH_TREE_NODE_FLAG /;"	d
CV_GRAPH_TREE_EDGE	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_TREE_EDGE /;"	d
CV_GRAPH_VERTEX	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_GRAPH_VERTEX /;"	d
CV_GRAPH_VERTEX_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_GRAPH_VERTEX_FIELDS(/;"	d
CV_GRAPH_WEIGHTED_EDGE_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_GRAPH_WEIGHTED_EDGE_FIELDS(/;"	d
CV_GRAPH_WEIGHTED_VERTEX_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_GRAPH_WEIGHTED_VERTEX_FIELDS(/;"	d
CV_GRAY2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2BGR    =8,$/;"	e	enum:__anon251
CV_GRAY2BGR555	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2BGR555 =30,$/;"	e	enum:__anon251
CV_GRAY2BGR565	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2BGR565 =20,$/;"	e	enum:__anon251
CV_GRAY2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2BGRA   =9,$/;"	e	enum:__anon251
CV_GRAY2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2RGB    =CV_GRAY2BGR,$/;"	e	enum:__anon251
CV_GRAY2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_GRAY2RGBA   =CV_GRAY2BGRA,$/;"	e	enum:__anon251
CV_GT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_GT(/;"	d
CV_GUI_EXPANDED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_GUI_EXPANDED         = 0x00000000, \/\/status bar and tool bar$/;"	e	enum:__anon213
CV_GUI_NORMAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_GUI_NORMAL           = 0x00000010, \/\/old fashious way$/;"	e	enum:__anon213
CV_GpuApiCallError	/usr/local/include/opencv2/core/types_c.h	/^ CV_GpuApiCallError=           -217,$/;"	e	enum:__anon45
CV_GpuNotSupported	/usr/local/include/opencv2/core/types_c.h	/^ CV_GpuNotSupported=           -216,$/;"	e	enum:__anon45
CV_HAAR_DO_CANNY_PRUNING	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_DO_CANNY_PRUNING /;"	d
CV_HAAR_DO_ROUGH_SEARCH	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_DO_ROUGH_SEARCH /;"	d
CV_HAAR_FEATURE_MAX	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_FEATURE_MAX /;"	d
CV_HAAR_FIND_BIGGEST_OBJECT	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_FIND_BIGGEST_OBJECT /;"	d
CV_HAAR_MAGIC_VAL	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_MAGIC_VAL /;"	d
CV_HAAR_SCALE_IMAGE	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_HAAR_SCALE_IMAGE /;"	d
CV_HARDWARE_MAX_FEATURE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_HARDWARE_MAX_FEATURE /;"	d
CV_HAVE_ALLOCA	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_HAVE_ALLOCA /;"	d
CV_HIST_ARRAY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_ARRAY /;"	d
CV_HIST_HAS_RANGES	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_HAS_RANGES(/;"	d
CV_HIST_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_MAGIC_VAL /;"	d
CV_HIST_RANGES_FLAG	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_RANGES_FLAG /;"	d
CV_HIST_SPARSE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_SPARSE /;"	d
CV_HIST_TREE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_TREE /;"	d
CV_HIST_UNIFORM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_UNIFORM /;"	d
CV_HIST_UNIFORM_FLAG	/usr/local/include/opencv2/core/types_c.h	/^#define CV_HIST_UNIFORM_FLAG /;"	d
CV_HLS2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HLS2BGR     =60,$/;"	e	enum:__anon251
CV_HLS2BGR_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HLS2BGR_FULL = 72,$/;"	e	enum:__anon251
CV_HLS2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HLS2RGB     =61,$/;"	e	enum:__anon251
CV_HLS2RGB_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HLS2RGB_FULL = 73,$/;"	e	enum:__anon251
CV_HOUGH_GRADIENT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HOUGH_GRADIENT =3$/;"	e	enum:__anon270
CV_HOUGH_MULTI_SCALE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HOUGH_MULTI_SCALE =2,$/;"	e	enum:__anon270
CV_HOUGH_PROBABILISTIC	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HOUGH_PROBABILISTIC =1,$/;"	e	enum:__anon270
CV_HOUGH_STANDARD	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HOUGH_STANDARD =0,$/;"	e	enum:__anon270
CV_HSV2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HSV2BGR     =54,$/;"	e	enum:__anon251
CV_HSV2BGR_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HSV2BGR_FULL = 70,$/;"	e	enum:__anon251
CV_HSV2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HSV2RGB     =55,$/;"	e	enum:__anon251
CV_HSV2RGB_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_HSV2RGB_FULL = 71,$/;"	e	enum:__anon251
CV_HeaderIsNull	/usr/local/include/opencv2/core/types_c.h	/^ CV_HeaderIsNull=               -9,  \/* image header is NULL            *\/$/;"	e	enum:__anon45
CV_IABS	/usr/local/include/opencv2/core/types_c.h	/^#  define  CV_IABS(/;"	d
CV_ICC	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_ICC /;"	d
CV_IDP_BIRCHFIELD_PARAM1	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_IDP_BIRCHFIELD_PARAM1 /;"	d
CV_IDP_BIRCHFIELD_PARAM2	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_IDP_BIRCHFIELD_PARAM2 /;"	d
CV_IDP_BIRCHFIELD_PARAM3	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_IDP_BIRCHFIELD_PARAM3 /;"	d
CV_IDP_BIRCHFIELD_PARAM4	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_IDP_BIRCHFIELD_PARAM4 /;"	d
CV_IDP_BIRCHFIELD_PARAM5	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_IDP_BIRCHFIELD_PARAM5 /;"	d
CV_IMAGE_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IMAGE_ELEM(/;"	d
CV_IMAX	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_IMAX(/;"	d
CV_IMIN	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_IMIN(/;"	d
CV_IMPL	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_IMPL /;"	d
CV_IMPLEMENT_QSORT	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_IMPLEMENT_QSORT(/;"	d
CV_IMPLEMENT_QSORT_EX	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_IMPLEMENT_QSORT_EX(/;"	d
CV_IMWRITE_JPEG_QUALITY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_JPEG_QUALITY =1,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_BILEVEL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_BILEVEL =18,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_COMPRESSION	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_COMPRESSION =16,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY =17,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY_DEFAULT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_DEFAULT =0,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY_FILTERED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FILTERED =1,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY_FIXED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FIXED =4,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =2,$/;"	e	enum:__anon217
CV_IMWRITE_PNG_STRATEGY_RLE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_RLE =3,$/;"	e	enum:__anon217
CV_IMWRITE_PXM_BINARY	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_IMWRITE_PXM_BINARY =32$/;"	e	enum:__anon217
CV_INIT_3X3_DELTAS	/usr/local/include/opencv2/imgproc/types_c.h	/^#define  CV_INIT_3X3_DELTAS(/;"	d
CV_INIT_ALGORITHM	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_INIT_ALGORITHM(/;"	d
CV_INIT_FUNC_TAB	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_INIT_FUNC_TAB(/;"	d
CV_INIT_PIXEL_POS	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_INIT_PIXEL_POS(/;"	d
CV_INLINE	/usr/local/include/opencv2/core/types_c.h	/^#    define CV_INLINE /;"	d
CV_INPAINT_NS	/usr/local/include/opencv2/photo/photo_c.h	/^    CV_INPAINT_NS      =0,$/;"	e	enum:__anon322
CV_INPAINT_TELEA	/usr/local/include/opencv2/photo/photo_c.h	/^    CV_INPAINT_TELEA   =1$/;"	e	enum:__anon322
CV_INPLACE_NOT_SUPPORTED_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_INPLACE_NOT_SUPPORTED_ERR= -112,$/;"	e	enum:CvStatus
CV_INTER_AREA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_INTER_AREA      =3,$/;"	e	enum:__anon252
CV_INTER_CUBIC	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_INTER_CUBIC     =2,$/;"	e	enum:__anon252
CV_INTER_LANCZOS4	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_INTER_LANCZOS4  =4$/;"	e	enum:__anon252
CV_INTER_LINEAR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_INTER_LINEAR    =1,$/;"	e	enum:__anon252
CV_INTER_NN	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_INTER_NN        =0,$/;"	e	enum:__anon252
CV_IN_OUT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IN_OUT$/;"	d
CV_IS_CONT_MAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_CONT_MAT /;"	d
CV_IS_GRAPH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_GRAPH(/;"	d
CV_IS_GRAPH_EDGE_VISITED	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_IS_GRAPH_EDGE_VISITED(/;"	d
CV_IS_GRAPH_ORIENTED	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_GRAPH_ORIENTED(/;"	d
CV_IS_GRAPH_VERTEX_VISITED	/usr/local/include/opencv2/core/core_c.h	/^#define  CV_IS_GRAPH_VERTEX_VISITED(/;"	d
CV_IS_HAAR_CLASSIFIER	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_IS_HAAR_CLASSIFIER(/;"	d
CV_IS_HIST	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_HIST(/;"	d
CV_IS_IMAGE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_IMAGE(/;"	d
CV_IS_IMAGE_HDR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_IMAGE_HDR(/;"	d
CV_IS_MASK_ARR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MASK_ARR(/;"	d
CV_IS_MAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MAT(/;"	d
CV_IS_MATND	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MATND(/;"	d
CV_IS_MATND_HDR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MATND_HDR(/;"	d
CV_IS_MAT_CONST	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MAT_CONST(/;"	d
CV_IS_MAT_CONT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MAT_CONT(/;"	d
CV_IS_MAT_HDR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MAT_HDR(/;"	d
CV_IS_MAT_HDR_Z	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_MAT_HDR_Z(/;"	d
CV_IS_ROW_SAMPLE	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_IS_ROW_SAMPLE(/;"	d
CV_IS_SEQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ(/;"	d
CV_IS_SEQ_CHAIN	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CHAIN(/;"	d
CV_IS_SEQ_CHAIN_CONTOUR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CHAIN_CONTOUR(/;"	d
CV_IS_SEQ_CLOSED	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CLOSED(/;"	d
CV_IS_SEQ_CONTOUR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CONTOUR(/;"	d
CV_IS_SEQ_CONVEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CONVEX(/;"	d
CV_IS_SEQ_CURVE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_CURVE(/;"	d
CV_IS_SEQ_HOLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_HOLE(/;"	d
CV_IS_SEQ_INDEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_INDEX(/;"	d
CV_IS_SEQ_POINT_SET	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_POINT_SET(/;"	d
CV_IS_SEQ_POINT_SUBSET	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_POINT_SUBSET(/;"	d
CV_IS_SEQ_POLYGON	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_POLYGON(/;"	d
CV_IS_SEQ_POLYGON_TREE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_POLYGON_TREE(/;"	d
CV_IS_SEQ_POLYLINE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_POLYLINE(/;"	d
CV_IS_SEQ_SIMPLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SEQ_SIMPLE(/;"	d
CV_IS_SET	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SET(/;"	d
CV_IS_SET_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SET_ELEM(/;"	d
CV_IS_SET_ELEM_EXISTS	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_IS_SET_ELEM_EXISTS /;"	d
CV_IS_SPARSE_HIST	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SPARSE_HIST(/;"	d
CV_IS_SPARSE_MAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SPARSE_MAT(/;"	d
CV_IS_SPARSE_MAT_HDR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SPARSE_MAT_HDR(/;"	d
CV_IS_STORAGE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_STORAGE(/;"	d
CV_IS_SUBDIV2D	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SUBDIV2D(/;"	d
CV_IS_SUBMAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_SUBMAT(/;"	d
CV_IS_UNIFORM_HIST	/usr/local/include/opencv2/core/types_c.h	/^#define CV_IS_UNIFORM_HIST(/;"	d
CV_ITERATIVE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_ITERATIVE = 0,$/;"	e	enum:__anon1
CV_KMEANS_USE_INITIAL_LABELS	/usr/local/include/opencv2/core/core_c.h	/^#define CV_KMEANS_USE_INITIAL_LABELS /;"	d
CV_L1	/usr/local/include/opencv2/core/core_c.h	/^#define CV_L1 /;"	d
CV_L2	/usr/local/include/opencv2/core/core_c.h	/^#define CV_L2 /;"	d
CV_LAST_VORONOIEDGE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_LAST_VORONOIEDGE2D(/;"	d
CV_LBGR2Lab	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_LBGR2Lab     = 74,$/;"	e	enum:__anon251
CV_LBGR2Luv	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_LBGR2Luv     = 76,$/;"	e	enum:__anon251
CV_LE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_LE(/;"	d
CV_LEE_AUTO	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_AUTO = -1,$/;"	e	enum:CvLeeParameters
CV_LEE_DOUBLE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_DOUBLE = 2,$/;"	e	enum:CvLeeParameters
CV_LEE_ERODE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_ERODE = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_FLOAT	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_FLOAT = 1,$/;"	e	enum:CvLeeParameters
CV_LEE_INT	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_INT = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_NON	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_NON = 2$/;"	e	enum:CvLeeParameters
CV_LEE_ZOOM	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_LEE_ZOOM = 1,$/;"	e	enum:CvLeeParameters
CV_LINK_RUNS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_LINK_RUNS=5$/;"	e	enum:__anon258
CV_LKFLOW_GET_MIN_EIGENVALS	/usr/local/include/opencv2/video/tracking.hpp	/^#define  CV_LKFLOW_GET_MIN_EIGENVALS /;"	d
CV_LKFLOW_INITIAL_GUESSES	/usr/local/include/opencv2/video/tracking.hpp	/^#define  CV_LKFLOW_INITIAL_GUESSES /;"	d
CV_LKFLOW_PYR_A_READY	/usr/local/include/opencv2/video/tracking.hpp	/^#define  CV_LKFLOW_PYR_A_READY /;"	d
CV_LKFLOW_PYR_B_READY	/usr/local/include/opencv2/video/tracking.hpp	/^#define  CV_LKFLOW_PYR_B_READY /;"	d
CV_LMEDS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_LMEDS /;"	d
CV_LOAD_IMAGE_ANYCOLOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_LOAD_IMAGE_ANYCOLOR   =4$/;"	e	enum:__anon216
CV_LOAD_IMAGE_ANYDEPTH	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_LOAD_IMAGE_ANYDEPTH   =2,$/;"	e	enum:__anon216
CV_LOAD_IMAGE_COLOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_LOAD_IMAGE_COLOR      =1,$/;"	e	enum:__anon216
CV_LOAD_IMAGE_GRAYSCALE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_LOAD_IMAGE_GRAYSCALE  =0,$/;"	e	enum:__anon216
CV_LOAD_IMAGE_UNCHANGED	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_LOAD_IMAGE_UNCHANGED  =-1,$/;"	e	enum:__anon216
CV_LOG2	/usr/local/include/opencv2/core/types_c.h	/^#define CV_LOG2 /;"	d
CV_LOG2PI	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_LOG2PI /;"	d
CV_LRGB2Lab	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_LRGB2Lab     = 75,$/;"	e	enum:__anon251
CV_LRGB2Luv	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_LRGB2Luv     = 77,$/;"	e	enum:__anon251
CV_LT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_LT(/;"	d
CV_LU	/usr/local/include/opencv2/core/core_c.h	/^#define CV_LU /;"	d
CV_Lab2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Lab2BGR     =56,$/;"	e	enum:__anon251
CV_Lab2LBGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Lab2LBGR     = 78,$/;"	e	enum:__anon251
CV_Lab2LRGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Lab2LRGB     = 79,$/;"	e	enum:__anon251
CV_Lab2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Lab2RGB     =57,$/;"	e	enum:__anon251
CV_Luv2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Luv2BGR     =58,$/;"	e	enum:__anon251
CV_Luv2LBGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Luv2LBGR     = 80,$/;"	e	enum:__anon251
CV_Luv2LRGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Luv2LRGB     = 81,$/;"	e	enum:__anon251
CV_Luv2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_Luv2RGB     =59,$/;"	e	enum:__anon251
CV_MAGIC_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAGIC_MASK /;"	d
CV_MAJOR_VERSION	/usr/local/include/opencv2/core/version.hpp	/^#define CV_MAJOR_VERSION /;"	d
CV_MAKETYPE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAKETYPE(/;"	d
CV_MAKE_STR	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAKE_STR(/;"	d
CV_MAKE_TYPE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAKE_TYPE /;"	d
CV_MALLOC_ALIGN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MALLOC_ALIGN /;"	d
CV_MAT32F	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT32F      = CV_32FC1,$/;"	e	enum:__anon272
CV_MAT3x1_32F	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT3x1_32F  = CV_32FC1,$/;"	e	enum:__anon272
CV_MAT3x1_64D	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT3x1_64D  = CV_64FC1,$/;"	e	enum:__anon272
CV_MAT3x3_32F	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT3x3_32F  = CV_32FC1,$/;"	e	enum:__anon272
CV_MAT3x3_64D	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT3x3_64D  = CV_64FC1,$/;"	e	enum:__anon272
CV_MAT4x1_32F	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT4x1_32F  = CV_32FC1,$/;"	e	enum:__anon272
CV_MAT4x1_64D	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT4x1_64D  = CV_64FC1,$/;"	e	enum:__anon272
CV_MAT4x4_32F	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT4x4_32F  = CV_32FC1,$/;"	e	enum:__anon272
CV_MAT4x4_64D	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT4x4_64D  = CV_64FC1$/;"	e	enum:__anon272
CV_MAT64D	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_MAT64D      = CV_64FC1,$/;"	e	enum:__anon272
CV_MATND_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MATND_MAGIC_VAL /;"	d
CV_MAT_CN	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_CN(/;"	d
CV_MAT_CN_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_CN_MASK /;"	d
CV_MAT_CONT_FLAG	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_CONT_FLAG /;"	d
CV_MAT_CONT_FLAG_SHIFT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_CONT_FLAG_SHIFT /;"	d
CV_MAT_DEPTH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_DEPTH(/;"	d
CV_MAT_DEPTH_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_DEPTH_MASK /;"	d
CV_MAT_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_ELEM(/;"	d
CV_MAT_ELEM_PTR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_ELEM_PTR(/;"	d
CV_MAT_ELEM_PTR_FAST	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_ELEM_PTR_FAST(/;"	d
CV_MAT_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_MAGIC_VAL /;"	d
CV_MAT_TYPE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_TYPE(/;"	d
CV_MAT_TYPE_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAT_TYPE_MASK /;"	d
CV_MAX_ALLOC_SIZE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAX_ALLOC_SIZE /;"	d
CV_MAX_ARR	/usr/local/include/opencv2/core/core_c.h	/^#define CV_MAX_ARR /;"	d
CV_MAX_DIM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAX_DIM /;"	d
CV_MAX_DIM_HEAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_MAX_DIM_HEAP /;"	d
CV_MAX_INLINE_MAT_OP_SIZE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAX_INLINE_MAT_OP_SIZE /;"	d
CV_MAX_LOCAL_MAT_SIZE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAX_LOCAL_MAT_SIZE /;"	d
CV_MAX_LOCAL_SIZE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAX_LOCAL_SIZE /;"	d
CV_MAX_SOBEL_KSIZE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MAX_SOBEL_KSIZE =7$/;"	e	enum:__anon250
CV_MAX_STRLEN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MAX_STRLEN /;"	d
CV_MEDIAN	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MEDIAN =3,$/;"	e	enum:__anon248
CV_MINMAX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_MINMAX /;"	d
CV_MINOR_VERSION	/usr/local/include/opencv2/core/version.hpp	/^#define CV_MINOR_VERSION /;"	d
CV_MOP_BLACKHAT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_BLACKHAT     =6$/;"	e	enum:__anon255
CV_MOP_CLOSE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_CLOSE        =3,$/;"	e	enum:__anon255
CV_MOP_DILATE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_DILATE       =1,$/;"	e	enum:__anon255
CV_MOP_ERODE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_ERODE        =0,$/;"	e	enum:__anon255
CV_MOP_GRADIENT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_GRADIENT     =4,$/;"	e	enum:__anon255
CV_MOP_OPEN	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_OPEN         =2,$/;"	e	enum:__anon255
CV_MOP_TOPHAT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_MOP_TOPHAT       =5,$/;"	e	enum:__anon255
CV_MOVE_DOWN	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_DOWN(/;"	d
CV_MOVE_DOWN_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_DOWN_WRAP(/;"	d
CV_MOVE_LD	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LD(/;"	d
CV_MOVE_LD_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LD_WRAP(/;"	d
CV_MOVE_LEFT	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LEFT(/;"	d
CV_MOVE_LEFT_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LEFT_WRAP(/;"	d
CV_MOVE_LU	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LU(/;"	d
CV_MOVE_LU_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_LU_WRAP(/;"	d
CV_MOVE_PARAM	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_PARAM(/;"	d
CV_MOVE_PARAM_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_PARAM_WRAP(/;"	d
CV_MOVE_RD	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RD(/;"	d
CV_MOVE_RD_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RD_WRAP(/;"	d
CV_MOVE_RIGHT	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RIGHT(/;"	d
CV_MOVE_RIGHT_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RIGHT_WRAP(/;"	d
CV_MOVE_RU	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RU(/;"	d
CV_MOVE_RU_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_RU_WRAP(/;"	d
CV_MOVE_TO	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_TO(/;"	d
CV_MOVE_UP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_UP(/;"	d
CV_MOVE_UP_WRAP	/usr/local/include/opencv2/legacy/compat.hpp	/^#define CV_MOVE_UP_WRAP(/;"	d
CV_MUL	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_MUL(/;"	d
CV_MaskIsTiled	/usr/local/include/opencv2/core/types_c.h	/^ CV_MaskIsTiled=               -26, \/**\/$/;"	e	enum:__anon45
CV_NE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_NE(/;"	d
CV_NEG_INF	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_NEG_INF /;"	d
CV_NEON	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_NEON /;"	d
CV_NEXT_AROUND_DST	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_NEXT_AROUND_DST   = 0x22,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_LEFT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_ORG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_RIGHT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:CvNextEdgeType
CV_NEXT_GRAPH_EDGE	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_NEXT_GRAPH_EDGE(/;"	d
CV_NEXT_LINE_POINT	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NEXT_LINE_POINT(/;"	d
CV_NEXT_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NEXT_SEQ_ELEM(/;"	d
CV_NEXT_VORONOIEDGE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_NEXT_VORONOIEDGE2D(/;"	d
CV_NEXT_VORONOISITE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_NEXT_VORONOISITE2D(/;"	d
CV_NODE_EMPTY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_EMPTY /;"	d
CV_NODE_FLOAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_FLOAT /;"	d
CV_NODE_FLOW	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_FLOW /;"	d
CV_NODE_HAS_NAME	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_HAS_NAME(/;"	d
CV_NODE_IDX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IDX(/;"	d
CV_NODE_INT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_INT /;"	d
CV_NODE_INTEGER	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_INTEGER /;"	d
CV_NODE_IS_COLLECTION	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_COLLECTION(/;"	d
CV_NODE_IS_EMPTY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_EMPTY(/;"	d
CV_NODE_IS_FLOW	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_FLOW(/;"	d
CV_NODE_IS_INT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_INT(/;"	d
CV_NODE_IS_MAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_MAP(/;"	d
CV_NODE_IS_REAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_REAL(/;"	d
CV_NODE_IS_SEQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_SEQ(/;"	d
CV_NODE_IS_STRING	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_STRING(/;"	d
CV_NODE_IS_USER	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_IS_USER(/;"	d
CV_NODE_MAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_MAP /;"	d
CV_NODE_NAMED	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_NAMED /;"	d
CV_NODE_NONE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_NONE /;"	d
CV_NODE_REAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_REAL /;"	d
CV_NODE_REF	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_REF /;"	d
CV_NODE_SEQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_SEQ /;"	d
CV_NODE_SEQ_IS_SIMPLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_SEQ_IS_SIMPLE(/;"	d
CV_NODE_SEQ_SIMPLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_SEQ_SIMPLE /;"	d
CV_NODE_STR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_STR /;"	d
CV_NODE_STRING	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_STRING /;"	d
CV_NODE_TYPE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_TYPE(/;"	d
CV_NODE_TYPE_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_TYPE_MASK /;"	d
CV_NODE_USER	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_USER /;"	d
CV_NODE_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_NODE_VAL(/;"	d
CV_NOISE_GAUSSIAN	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_NOISE_GAUSSIAN /;"	d
CV_NOISE_NONE	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_NOISE_NONE /;"	d
CV_NOISE_SALT_AND_PEPPER	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_NOISE_SALT_AND_PEPPER /;"	d
CV_NOISE_SPECKLE	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_NOISE_SPECKLE /;"	d
CV_NOISE_UNIFORM	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define CV_NOISE_UNIFORM /;"	d
CV_NONZERO	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_NONZERO(/;"	d
CV_NONZERO_FLT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_NONZERO_FLT(/;"	d
CV_NOP	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_NOP(/;"	d
CV_NORMAL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NORMAL /;"	d
CV_NORM_MASK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NORM_MASK /;"	d
CV_NOTDEFINED_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_NOTDEFINED_ERR           = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_NOTFOUND_ERR             = -110,$/;"	e	enum:CvStatus
CV_NOTHROW	/usr/local/include/opencv2/core/internal.hpp	/^#define CV_NOTHROW /;"	d
CV_NOT_WEIGHTED	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_NOT_WEIGHTED,$/;"	e	enum:CvGraphWeightType
CV_NO_CN_CHECK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NO_CN_CHECK /;"	d
CV_NO_DEPTH_CHECK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NO_DEPTH_CHECK /;"	d
CV_NO_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_NO_ERR                   =   0,$/;"	e	enum:CvStatus
CV_NO_SIZE_CHECK	/usr/local/include/opencv2/core/core_c.h	/^#define CV_NO_SIZE_CHECK /;"	d
CV_NULLPTR_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_NULLPTR_ERR              =  -2,$/;"	e	enum:CvStatus
CV_NUM_FACE_ELEMENTS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_NUM_FACE_ELEMENTS /;"	d
CV_OK	/usr/local/include/opencv2/core/internal.hpp	/^    CV_OK                       =   CV_NO_ERR$/;"	e	enum:CvStatus
CV_OR	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_OR(/;"	d
CV_ORIENTED_GRAPH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_ORIENTED_GRAPH /;"	d
CV_ORIGIN_BL	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ORIGIN_BL /;"	d
CV_ORIGIN_TL	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ORIGIN_TL /;"	d
CV_ORN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ORN(/;"	d
CV_OUT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_OUT$/;"	d
CV_OUTOFMEM_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_OUTOFMEM_ERR             =  -3,$/;"	e	enum:CvStatus
CV_OpenGlApiCallError	/usr/local/include/opencv2/core/types_c.h	/^ CV_OpenGlApiCallError=        -219$/;"	e	enum:__anon45
CV_OpenGlNotSupported	/usr/local/include/opencv2/core/types_c.h	/^ CV_OpenGlNotSupported=        -218,$/;"	e	enum:__anon45
CV_P3P	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_P3P = 2 \/\/ X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang; "Complete Solution Classification for the Perspective-Three-Point Problem"$/;"	e	enum:__anon1
CV_PASTE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_PASTE(/;"	d
CV_PASTE2	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_PASTE2(/;"	d
CV_PCA_DATA_AS_COL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_PCA_DATA_AS_COL /;"	d
CV_PCA_DATA_AS_ROW	/usr/local/include/opencv2/core/core_c.h	/^#define CV_PCA_DATA_AS_ROW /;"	d
CV_PCA_USE_AVG	/usr/local/include/opencv2/core/core_c.h	/^#define CV_PCA_USE_AVG /;"	d
CV_PERF_TEST_MAIN	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define CV_PERF_TEST_MAIN(/;"	d
CV_PI	/usr/local/include/opencv2/core/types_c.h	/^#define CV_PI /;"	d
CV_PI	/usr/local/include/opencv2/gpu/device/common.hpp	/^    #define CV_PI /;"	d
CV_PI_F	/usr/local/include/opencv2/gpu/device/common.hpp	/^        #define CV_PI_F /;"	d
CV_POLY_APPROX_DP	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_POLY_APPROX_DP = 0$/;"	e	enum:__anon259
CV_PORTION	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_PORTION /;"	d
CV_POS_INF	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_POS_INF /;"	d
CV_PREV_AROUND_DST	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PREV_AROUND_DST   = 0x33,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_LEFT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_ORG	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PREV_AROUND_ORG   = 0x11,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_RIGHT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PREV_AROUND_RIGHT = 0x02$/;"	e	enum:CvNextEdgeType
CV_PREV_INT	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_PREV_INT(/;"	d
CV_PREV_POINT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_PREV_POINT(/;"	d
CV_PREV_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_PREV_SEQ_ELEM(/;"	d
CV_PREV_VORONOIEDGE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_PREV_VORONOIEDGE2D(/;"	d
CV_PREV_VORONOISITE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_PREV_VORONOISITE2D(/;"	d
CV_PROP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_PROP$/;"	d
CV_PROP_RW	/usr/local/include/opencv2/core/types_c.h	/^#define CV_PROP_RW$/;"	d
CV_PTLOC_ERROR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PTLOC_ERROR = -2,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_INSIDE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PTLOC_INSIDE = 0,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_ON_EDGE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PTLOC_ON_EDGE = 2$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_OUTSIDE_RECT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_VERTEX	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_PTLOC_VERTEX = 1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PUSH_BUTTON	/usr/local/include/opencv2/highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon212
CV_QR	/usr/local/include/opencv2/core/core_c.h	/^#define CV_QR /;"	d
CV_QUADEDGE2D_FIELDS	/usr/local/include/opencv2/imgproc/types_c.h	/^#define CV_QUADEDGE2D_FIELDS(/;"	d
CV_RADIOBOX	/usr/local/include/opencv2/highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon212
CV_RAND_NORMAL	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RAND_NORMAL /;"	d
CV_RAND_UNI	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RAND_UNI /;"	d
CV_RANSAC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_RANSAC /;"	d
CV_READ_CHAIN_POINT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_READ_CHAIN_POINT(/;"	d
CV_READ_EDGE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_READ_EDGE(/;"	d
CV_READ_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_READ_SEQ_ELEM(/;"	d
CV_REDUCE_AVG	/usr/local/include/opencv2/core/core_c.h	/^#define CV_REDUCE_AVG /;"	d
CV_REDUCE_MAX	/usr/local/include/opencv2/core/core_c.h	/^#define CV_REDUCE_MAX /;"	d
CV_REDUCE_MIN	/usr/local/include/opencv2/core/core_c.h	/^#define CV_REDUCE_MIN /;"	d
CV_REDUCE_SUM	/usr/local/include/opencv2/core/core_c.h	/^#define CV_REDUCE_SUM /;"	d
CV_RELATIVE	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RELATIVE /;"	d
CV_RELATIVE_C	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RELATIVE_C /;"	d
CV_RELATIVE_L1	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RELATIVE_L1 /;"	d
CV_RELATIVE_L2	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RELATIVE_L2 /;"	d
CV_RETR_CCOMP	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RETR_CCOMP=2,$/;"	e	enum:__anon257
CV_RETR_EXTERNAL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RETR_EXTERNAL=0,$/;"	e	enum:__anon257
CV_RETR_FLOODFILL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RETR_FLOODFILL=4$/;"	e	enum:__anon257
CV_RETR_LIST	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RETR_LIST=1,$/;"	e	enum:__anon257
CV_RETR_TREE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RETR_TREE=3,$/;"	e	enum:__anon257
CV_REV_READ_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_REV_READ_SEQ_ELEM(/;"	d
CV_RGB	/usr/local/include/opencv2/core/core_c.h	/^#define CV_RGB(/;"	d
CV_RGB2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2BGR     =CV_BGR2RGB,$/;"	e	enum:__anon251
CV_RGB2BGR555	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2BGR555  =23,$/;"	e	enum:__anon251
CV_RGB2BGR565	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2BGR565  =13,$/;"	e	enum:__anon251
CV_RGB2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2BGRA    =CV_BGR2RGBA,$/;"	e	enum:__anon251
CV_RGB2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2GRAY    =7,$/;"	e	enum:__anon251
CV_RGB2HLS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2HLS     =53,$/;"	e	enum:__anon251
CV_RGB2HLS_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2HLS_FULL = 69,$/;"	e	enum:__anon251
CV_RGB2HSV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2HSV     =41,$/;"	e	enum:__anon251
CV_RGB2HSV_FULL	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2HSV_FULL = 67,$/;"	e	enum:__anon251
CV_RGB2Lab	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2Lab     =45,$/;"	e	enum:__anon251
CV_RGB2Luv	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2Luv     =51,$/;"	e	enum:__anon251
CV_RGB2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2RGBA    =CV_BGR2BGRA,$/;"	e	enum:__anon251
CV_RGB2XYZ	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2XYZ     =33,$/;"	e	enum:__anon251
CV_RGB2YCrCb	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2YCrCb   =37,$/;"	e	enum:__anon251
CV_RGB2YUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2YUV      = 83,$/;"	e	enum:__anon251
CV_RGB2YUV_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2YUV_I420 = 127,$/;"	e	enum:__anon251
CV_RGB2YUV_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2YUV_IYUV = CV_RGB2YUV_I420,$/;"	e	enum:__anon251
CV_RGB2YUV_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGB2YUV_YV12  = 131,$/;"	e	enum:__anon251
CV_RGBA2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2BGR    =3,$/;"	e	enum:__anon251
CV_RGBA2BGR555	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2BGR555 =27,$/;"	e	enum:__anon251
CV_RGBA2BGR565	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2BGR565 =17,$/;"	e	enum:__anon251
CV_RGBA2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2BGRA   =CV_BGRA2RGBA,$/;"	e	enum:__anon251
CV_RGBA2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2GRAY   =11,$/;"	e	enum:__anon251
CV_RGBA2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2RGB    =CV_BGRA2BGR,$/;"	e	enum:__anon251
CV_RGBA2YUV_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2YUV_I420 = 129,$/;"	e	enum:__anon251
CV_RGBA2YUV_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2YUV_IYUV = CV_RGBA2YUV_I420,$/;"	e	enum:__anon251
CV_RGBA2YUV_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2YUV_YV12 = 133,$/;"	e	enum:__anon251
CV_RGBA2mRGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_RGBA2mRGBA = 125,$/;"	e	enum:__anon251
CV_RNG_COEFF	/usr/local/include/opencv2/core/types_c.h	/^#define CV_RNG_COEFF /;"	d
CV_RODRIGUES_M2V	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_RODRIGUES_M2V = 0,$/;"	e	enum:__anon275
CV_RODRIGUES_V2M	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_RODRIGUES_V2M = 1$/;"	e	enum:__anon275
CV_ROW_SAMPLE	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_ROW_SAMPLE /;"	d
CV_SCHARR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_SCHARR =-1,$/;"	e	enum:__anon250
CV_SEQUENCE_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQUENCE_FIELDS(/;"	d
CV_SEQ_CHAIN	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_CHAIN /;"	d
CV_SEQ_CHAIN_CONTOUR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_CHAIN_CONTOUR /;"	d
CV_SEQ_CONNECTED_COMP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_CONNECTED_COMP /;"	d
CV_SEQ_CONTOUR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_CONTOUR /;"	d
CV_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_SEQ_ELEM(/;"	d
CV_SEQ_ELTYPE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE(/;"	d
CV_SEQ_ELTYPE_BITS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_BITS /;"	d
CV_SEQ_ELTYPE_CODE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_CODE /;"	d
CV_SEQ_ELTYPE_CONNECTED_COMP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_CONNECTED_COMP /;"	d
CV_SEQ_ELTYPE_GENERIC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_GENERIC /;"	d
CV_SEQ_ELTYPE_GRAPH_EDGE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_GRAPH_EDGE /;"	d
CV_SEQ_ELTYPE_GRAPH_VERTEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_GRAPH_VERTEX /;"	d
CV_SEQ_ELTYPE_INDEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_INDEX /;"	d
CV_SEQ_ELTYPE_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_MASK /;"	d
CV_SEQ_ELTYPE_POINT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_POINT /;"	d
CV_SEQ_ELTYPE_POINT3D	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_POINT3D /;"	d
CV_SEQ_ELTYPE_PPOINT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_PPOINT /;"	d
CV_SEQ_ELTYPE_PTR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_PTR /;"	d
CV_SEQ_ELTYPE_TRIAN_ATR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_ELTYPE_TRIAN_ATR /;"	d
CV_SEQ_FLAG_CLOSED	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_FLAG_CLOSED /;"	d
CV_SEQ_FLAG_CONVEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_FLAG_CONVEX /;"	d
CV_SEQ_FLAG_HOLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_FLAG_HOLE /;"	d
CV_SEQ_FLAG_SHIFT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_FLAG_SHIFT /;"	d
CV_SEQ_FLAG_SIMPLE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_FLAG_SIMPLE /;"	d
CV_SEQ_INDEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_INDEX /;"	d
CV_SEQ_KIND	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND(/;"	d
CV_SEQ_KIND_BIN_TREE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_BIN_TREE /;"	d
CV_SEQ_KIND_BITS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_BITS /;"	d
CV_SEQ_KIND_CURVE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_CURVE /;"	d
CV_SEQ_KIND_GENERIC	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_GENERIC /;"	d
CV_SEQ_KIND_GRAPH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_GRAPH /;"	d
CV_SEQ_KIND_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_MASK /;"	d
CV_SEQ_KIND_SUBDIV2D	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_KIND_SUBDIV2D /;"	d
CV_SEQ_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_MAGIC_VAL /;"	d
CV_SEQ_POINT3D_SET	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_POINT3D_SET /;"	d
CV_SEQ_POINT_SET	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_POINT_SET /;"	d
CV_SEQ_POLYGON	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_POLYGON /;"	d
CV_SEQ_POLYGON_TREE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_POLYGON_TREE /;"	d
CV_SEQ_POLYLINE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_POLYLINE /;"	d
CV_SEQ_READER_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_READER_FIELDS(/;"	d
CV_SEQ_SIMPLE_POLYGON	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_SIMPLE_POLYGON /;"	d
CV_SEQ_WRITER_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SEQ_WRITER_FIELDS(/;"	d
CV_SET_ELEM_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SET_ELEM_FIELDS(/;"	d
CV_SET_ELEM_FREE_FLAG	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SET_ELEM_FREE_FLAG /;"	d
CV_SET_ELEM_IDX_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SET_ELEM_IDX_MASK /;"	d
CV_SET_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SET_FIELDS(/;"	d
CV_SET_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SET_MAGIC_VAL /;"	d
CV_SHAPE_CROSS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_SHAPE_CROSS     =1,$/;"	e	enum:__anon254
CV_SHAPE_CUSTOM	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_SHAPE_CUSTOM    =100$/;"	e	enum:__anon254
CV_SHAPE_ELLIPSE	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_SHAPE_ELLIPSE   =2,$/;"	e	enum:__anon254
CV_SHAPE_RECT	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_SHAPE_RECT      =0,$/;"	e	enum:__anon254
CV_SHIFT_DOWN	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_DOWN = 10,$/;"	e	enum:__anon274
CV_SHIFT_LD	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_LD = 9,$/;"	e	enum:__anon274
CV_SHIFT_LEFT	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_LEFT = 1,$/;"	e	enum:__anon274
CV_SHIFT_LU	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_LU = 5,$/;"	e	enum:__anon274
CV_SHIFT_NONE	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_NONE = 2,$/;"	e	enum:__anon274
CV_SHIFT_RD	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_RD = 11$/;"	e	enum:__anon274
CV_SHIFT_RIGHT	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_RIGHT = 3,$/;"	e	enum:__anon274
CV_SHIFT_RU	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_RU = 7,$/;"	e	enum:__anon274
CV_SHIFT_UP	/usr/local/include/opencv2/legacy/compat.hpp	/^    CV_SHIFT_UP = 6,$/;"	e	enum:__anon274
CV_SIGN	/usr/local/include/opencv2/core/types_c.h	/^#define  CV_SIGN(/;"	d
CV_SIZEOF_FLOAT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SIZEOF_FLOAT /;"	d
CV_SIZEOF_SHORT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SIZEOF_SHORT /;"	d
CV_SORT_ASCENDING	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SORT_ASCENDING /;"	d
CV_SORT_DESCENDING	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SORT_DESCENDING /;"	d
CV_SORT_EVERY_COLUMN	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SORT_EVERY_COLUMN /;"	d
CV_SORT_EVERY_ROW	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SORT_EVERY_ROW /;"	d
CV_SPARSE_HASH_RATIO	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SPARSE_HASH_RATIO /;"	d
CV_SPARSE_HASH_SIZE0	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SPARSE_HASH_SIZE0 /;"	d
CV_SPARSE_MAT_BLOCK	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SPARSE_MAT_BLOCK /;"	d
CV_SPARSE_MAT_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SPARSE_MAT_MAGIC_VAL /;"	d
CV_SQR	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SQR(/;"	d
CV_SSE	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSE /;"	d
CV_SSE2	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSE2 /;"	d
CV_SSE3	/usr/local/include/opencv2/core/internal.hpp	/^#    define CV_SSE3 /;"	d
CV_SSE3	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSE3 /;"	d
CV_SSE4_1	/usr/local/include/opencv2/core/internal.hpp	/^#    define CV_SSE4_1 /;"	d
CV_SSE4_1	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSE4_1 /;"	d
CV_SSE4_2	/usr/local/include/opencv2/core/internal.hpp	/^#    define CV_SSE4_2 /;"	d
CV_SSE4_2	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSE4_2 /;"	d
CV_SSSE3	/usr/local/include/opencv2/core/internal.hpp	/^#    define CV_SSSE3 /;"	d
CV_SSSE3	/usr/local/include/opencv2/core/internal.hpp	/^#  define CV_SSSE3 /;"	d
CV_STDCALL	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_STDCALL /;"	d
CV_STDCALL	/usr/local/include/opencv2/core/types_c.h	/^#  define CV_STDCALL$/;"	d
CV_STEREO_BM_BASIC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_STEREO_BM_BASIC /;"	d
CV_STEREO_BM_FISH_EYE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_STEREO_BM_FISH_EYE /;"	d
CV_STEREO_BM_NARROW	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_STEREO_BM_NARROW /;"	d
CV_STEREO_BM_NORMALIZED_RESPONSE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_STEREO_BM_NORMALIZED_RESPONSE /;"	d
CV_STEREO_BM_XSOBEL	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define CV_STEREO_BM_XSOBEL /;"	d
CV_STEREO_GC_OCCLUDED	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_STEREO_GC_OCCLUDED /;"	d
CV_STORAGE_APPEND	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_APPEND /;"	d
CV_STORAGE_BLOCK_SIZE	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_STORAGE_BLOCK_SIZE /;"	d
CV_STORAGE_FORMAT_AUTO	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_FORMAT_AUTO /;"	d
CV_STORAGE_FORMAT_MASK	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_FORMAT_MASK /;"	d
CV_STORAGE_FORMAT_XML	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_FORMAT_XML /;"	d
CV_STORAGE_FORMAT_YAML	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_FORMAT_YAML /;"	d
CV_STORAGE_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_MAGIC_VAL /;"	d
CV_STORAGE_MEMORY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_MEMORY /;"	d
CV_STORAGE_READ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_READ /;"	d
CV_STORAGE_WRITE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_WRITE /;"	d
CV_STORAGE_WRITE_BINARY	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_WRITE_BINARY /;"	d
CV_STORAGE_WRITE_TEXT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_STORAGE_WRITE_TEXT /;"	d
CV_STRUCT_ALIGN	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_STRUCT_ALIGN /;"	d
CV_STUB_STEP	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_STUB_STEP /;"	d
CV_STYLE_ITALIC	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_STYLE_ITALIC         = 1,\/\/QFont::StyleItalic,$/;"	e	enum:__anon211
CV_STYLE_NORMAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^enum {  CV_STYLE_NORMAL         = 0,\/\/QFont::StyleNormal,$/;"	e	enum:__anon211
CV_STYLE_OBLIQUE	/usr/local/include/opencv2/highgui/highgui_c.h	/^        CV_STYLE_OBLIQUE        = 2 \/\/QFont::StyleOblique$/;"	e	enum:__anon211
CV_SUB	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_SUB(/;"	d
CV_SUBDIV2D_FIELDS	/usr/local/include/opencv2/imgproc/types_c.h	/^#define CV_SUBDIV2D_FIELDS(/;"	d
CV_SUBDIV2D_NEXT_EDGE	/usr/local/include/opencv2/imgproc/types_c.h	/^#define  CV_SUBDIV2D_NEXT_EDGE(/;"	d
CV_SUBDIV2D_POINT_FIELDS	/usr/local/include/opencv2/imgproc/types_c.h	/^#define CV_SUBDIV2D_POINT_FIELDS(/;"	d
CV_SUBDIV2D_VIRTUAL_POINT_FLAG	/usr/local/include/opencv2/imgproc/types_c.h	/^#define CV_SUBDIV2D_VIRTUAL_POINT_FLAG /;"	d
CV_SUBMAT_FLAG	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SUBMAT_FLAG /;"	d
CV_SUBMAT_FLAG_SHIFT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SUBMAT_FLAG_SHIFT /;"	d
CV_SUBMINOR_VERSION	/usr/local/include/opencv2/core/version.hpp	/^#define CV_SUBMINOR_VERSION /;"	d
CV_SVD	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SVD /;"	d
CV_SVD_MODIFY_A	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SVD_MODIFY_A /;"	d
CV_SVD_SYM	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SVD_SYM /;"	d
CV_SVD_U_T	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SVD_U_T /;"	d
CV_SVD_V_T	/usr/local/include/opencv2/core/core_c.h	/^#define CV_SVD_V_T /;"	d
CV_SWAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_SWAP(/;"	d
CV_StsAssert	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsAssert=                 -215, \/* assertion failed *\/$/;"	e	enum:__anon45
CV_StsAutoTrace	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsAutoTrace=               -8,  \/* tracing                         *\/$/;"	e	enum:__anon45
CV_StsBackTrace	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBackTrace=               -1,  \/* pseudo error for back trace     *\/$/;"	e	enum:__anon45
CV_StsBadArg	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadArg=                  -5,  \/* function arg\/param is bad       *\/$/;"	e	enum:__anon45
CV_StsBadFlag	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadFlag=                -206, \/* flag is wrong or not supported *\/$/;"	e	enum:__anon45
CV_StsBadFunc	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadFunc=                 -6,  \/* unsupported function            *\/$/;"	e	enum:__anon45
CV_StsBadMask	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadMask=                -208, \/* bad format of mask (neither 8uC1 nor 8sC1)*\/$/;"	e	enum:__anon45
CV_StsBadMemBlock	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadMemBlock=            -214, \/* an allocated block has been corrupted *\/$/;"	e	enum:__anon45
CV_StsBadPoint	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadPoint=               -207, \/* bad CvPoint *\/$/;"	e	enum:__anon45
CV_StsBadSize	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsBadSize=                -201, \/* the input\/output structure size is incorrect  *\/$/;"	e	enum:__anon45
CV_StsDivByZero	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsDivByZero=              -202, \/* division by zero *\/$/;"	e	enum:__anon45
CV_StsError	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsError=                   -2,  \/* unknown \/unspecified error      *\/$/;"	e	enum:__anon45
CV_StsFilterOffsetErr	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsFilterOffsetErr=        -31, \/* incorrect filter ofset value *\/$/;"	e	enum:__anon45
CV_StsFilterStructContentErr	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsFilterStructContentErr= -29, \/* incorr. filter structure content *\/$/;"	e	enum:__anon45
CV_StsInplaceNotSupported	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsInplaceNotSupported=    -203, \/* in-place operation is not supported *\/$/;"	e	enum:__anon45
CV_StsInternal	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsInternal=                -3,  \/* internal error (bad state)      *\/$/;"	e	enum:__anon45
CV_StsKernelStructContentErr	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsKernelStructContentErr= -30, \/* incorr. transform kernel content *\/$/;"	e	enum:__anon45
CV_StsNoConv	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsNoConv=                  -7,  \/* iter. didn't converge           *\/$/;"	e	enum:__anon45
CV_StsNoMem	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsNoMem=                   -4,  \/* insufficient memory             *\/$/;"	e	enum:__anon45
CV_StsNotImplemented	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsNotImplemented=         -213, \/* the requested function\/feature is not implemented *\/$/;"	e	enum:__anon45
CV_StsNullPtr	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsNullPtr=                -27, \/* null pointer *\/$/;"	e	enum:__anon45
CV_StsObjectNotFound	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsObjectNotFound=         -204, \/* request can't be completed *\/$/;"	e	enum:__anon45
CV_StsOk	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsOk=                       0,  \/* everithing is ok                *\/$/;"	e	enum:__anon45
CV_StsOutOfRange	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsOutOfRange=             -211, \/* some of parameters are out of range *\/$/;"	e	enum:__anon45
CV_StsParseError	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsParseError=             -212, \/* invalid syntax\/structure of the parsed file *\/$/;"	e	enum:__anon45
CV_StsUnmatchedFormats	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsUnmatchedFormats=       -205, \/* formats of input\/output arrays differ *\/$/;"	e	enum:__anon45
CV_StsUnmatchedSizes	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsUnmatchedSizes=         -209, \/* sizes of input\/output structures do not match *\/$/;"	e	enum:__anon45
CV_StsUnsupportedFormat	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsUnsupportedFormat=      -210, \/* the data format\/type is not supported by the function*\/$/;"	e	enum:__anon45
CV_StsVecLengthErr	/usr/local/include/opencv2/core/types_c.h	/^ CV_StsVecLengthErr=           -28, \/* incorrect vector length *\/$/;"	e	enum:__anon45
CV_TERMCRIT_EPS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TERMCRIT_EPS /;"	d
CV_TERMCRIT_ITER	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TERMCRIT_ITER /;"	d
CV_TERMCRIT_NUMBER	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TERMCRIT_NUMBER /;"	d
CV_TEST_ERROR	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TEST_ERROR /;"	d
CV_TEST_MAIN	/usr/local/include/opencv2/ts/ts.hpp	/^#define CV_TEST_MAIN(/;"	d
CV_THRESH_BINARY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_BINARY      =0,  \/* value = value > threshold ? max_value : 0       *\/$/;"	e	enum:__anon266
CV_THRESH_BINARY_INV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_BINARY_INV  =1,  \/* value = value > threshold ? 0 : max_value       *\/$/;"	e	enum:__anon266
CV_THRESH_MASK	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_MASK        =7,$/;"	e	enum:__anon266
CV_THRESH_OTSU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_OTSU        =8  \/* use Otsu algorithm to choose the optimal threshold value;$/;"	e	enum:__anon266
CV_THRESH_TOZERO	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_TOZERO      =3,  \/* value = value > threshold ? value : 0           *\/$/;"	e	enum:__anon266
CV_THRESH_TOZERO_INV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_TOZERO_INV  =4,  \/* value = value > threshold ? 0 : value           *\/$/;"	e	enum:__anon266
CV_THRESH_TRUNC	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_THRESH_TRUNC       =2,  \/* value = value > threshold ? threshold : value   *\/$/;"	e	enum:__anon266
CV_TM_CCOEFF	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_CCOEFF        =4,$/;"	e	enum:__anon256
CV_TM_CCOEFF_NORMED	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_CCOEFF_NORMED =5$/;"	e	enum:__anon256
CV_TM_CCORR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_CCORR         =2,$/;"	e	enum:__anon256
CV_TM_CCORR_NORMED	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_CCORR_NORMED  =3,$/;"	e	enum:__anon256
CV_TM_SQDIFF	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_SQDIFF        =0,$/;"	e	enum:__anon256
CV_TM_SQDIFF_NORMED	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_TM_SQDIFF_NORMED =1,$/;"	e	enum:__anon256
CV_TOGGLE_DBL	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_TOGGLE_DBL(/;"	d
CV_TOGGLE_FLT	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_TOGGLE_FLT(/;"	d
CV_TRAIN_ERROR	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TRAIN_ERROR /;"	d
CV_TREE_NODE_FIELDS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TREE_NODE_FIELDS(/;"	d
CV_TS_CONCENTRIC_SPHERES	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TS_CONCENTRIC_SPHERES /;"	d
CV_TURN_ON_IPL_COMPATIBILITY	/usr/local/include/opencv2/core/core_c.h	/^#define CV_TURN_ON_IPL_COMPATIBILITY(/;"	d
CV_TWIN_VORONOISITE2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_TWIN_VORONOISITE2D(/;"	d
CV_TYPE_NAME_GRAPH	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_GRAPH /;"	d
CV_TYPE_NAME_HAAR	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define CV_TYPE_NAME_HAAR /;"	d
CV_TYPE_NAME_IMAGE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_IMAGE /;"	d
CV_TYPE_NAME_MAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_MAT /;"	d
CV_TYPE_NAME_MATND	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_MATND /;"	d
CV_TYPE_NAME_ML_ANN_MLP	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_ANN_MLP /;"	d
CV_TYPE_NAME_ML_BOOSTING	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_BOOSTING /;"	d
CV_TYPE_NAME_ML_CNN	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_CNN /;"	d
CV_TYPE_NAME_ML_EM	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_EM /;"	d
CV_TYPE_NAME_ML_ERTREES	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_ERTREES /;"	d
CV_TYPE_NAME_ML_GBT	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_GBT /;"	d
CV_TYPE_NAME_ML_KNN	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_KNN /;"	d
CV_TYPE_NAME_ML_NBAYES	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_NBAYES /;"	d
CV_TYPE_NAME_ML_RTREES	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_RTREES /;"	d
CV_TYPE_NAME_ML_SVM	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_SVM /;"	d
CV_TYPE_NAME_ML_TREE	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_TYPE_NAME_ML_TREE /;"	d
CV_TYPE_NAME_SEQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_SEQ /;"	d
CV_TYPE_NAME_SEQ_TREE	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_SEQ_TREE /;"	d
CV_TYPE_NAME_SPARSE_MAT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_TYPE_NAME_SPARSE_MAT /;"	d
CV_TYZX_COLOR	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_TYZX_COLOR   =402,$/;"	e	enum:__anon219
CV_TYZX_LEFT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_TYZX_LEFT    =400,$/;"	e	enum:__anon219
CV_TYZX_RIGHT	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_TYZX_RIGHT   =401,$/;"	e	enum:__anon219
CV_TYZX_Z	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_TYZX_Z       =403,$/;"	e	enum:__anon219
CV_UNDEF_SC_PARAM	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_UNDEF_SC_PARAM /;"	d
CV_UNMATCHED_FORMATS_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNMATCHED_FORMATS_ERR    = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNMATCHED_ROI_ERR        = -111,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_CHANNELS_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNSUPPORTED_COI_ERR      = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNSUPPORTED_DEPTH_ERR    = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	/usr/local/include/opencv2/core/internal.hpp	/^    CV_UNSUPPORTED_FORMAT_ERR   = -100,$/;"	e	enum:CvStatus
CV_USRTYPE1	/usr/local/include/opencv2/core/types_c.h	/^#define CV_USRTYPE1 /;"	d
CV_VALUE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define  CV_VALUE /;"	d
CV_VAR_CATEGORICAL	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_VAR_CATEGORICAL /;"	d
CV_VAR_NUMERICAL	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_VAR_NUMERICAL /;"	d
CV_VAR_ORDERED	/usr/local/include/opencv2/ml/ml.hpp	/^#define CV_VAR_ORDERED /;"	d
CV_VERSION	/usr/local/include/opencv2/core/version.hpp	/^#  define CV_VERSION /;"	d
CV_VERSION_EPOCH	/usr/local/include/opencv2/core/version.hpp	/^#define CV_VERSION_EPOCH /;"	d
CV_VERSION_MAJOR	/usr/local/include/opencv2/core/version.hpp	/^#define CV_VERSION_MAJOR /;"	d
CV_VERSION_MINOR	/usr/local/include/opencv2/core/version.hpp	/^#define CV_VERSION_MINOR /;"	d
CV_VERSION_REVISION	/usr/local/include/opencv2/core/version.hpp	/^#define CV_VERSION_REVISION /;"	d
CV_VORONOIDIAGRAM2D_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOIDIAGRAM2D_FIELDS(/;"	d
CV_VORONOIEDGE2D_BEGINNODE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOIEDGE2D_BEGINNODE(/;"	d
CV_VORONOIEDGE2D_ENDNODE	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOIEDGE2D_ENDNODE(/;"	d
CV_VORONOIEDGE2D_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOIEDGE2D_FIELDS(/;"	d
CV_VORONOINODE2D_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOINODE2D_FIELDS(/;"	d
CV_VORONOISITE2D_FIELDS	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_VORONOISITE2D_FIELDS(/;"	d
CV_WARP_FILL_OUTLIERS	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_WARP_FILL_OUTLIERS =8,$/;"	e	enum:__anon253
CV_WARP_INVERSE_MAP	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_WARP_INVERSE_MAP  =16$/;"	e	enum:__anon253
CV_WARP_TO_CAMERA	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define CV_WARP_TO_CAMERA /;"	d
CV_WEIGHTED_ALL	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_WEIGHTED_ALL$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_EDGE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_WEIGHTED_EDGE,$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_VTX	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_WEIGHTED_VTX,$/;"	e	enum:CvGraphWeightType
CV_WHOLE_ARR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WHOLE_ARR /;"	d
CV_WHOLE_SEQ	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WHOLE_SEQ /;"	d
CV_WHOLE_SEQ_END_INDEX	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WHOLE_SEQ_END_INDEX /;"	d
CV_WINDOW_AUTOSIZE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_AUTOSIZE     = 0x00000001, \/\/the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:__anon213
CV_WINDOW_FREERATIO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_FREERATIO    = 0x00000100,\/\/the image expends as much as it can (no ratio constraint)$/;"	e	enum:__anon213
CV_WINDOW_FULLSCREEN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_FULLSCREEN   = 1,\/\/change the window to fullscreen$/;"	e	enum:__anon213
CV_WINDOW_KEEPRATIO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_KEEPRATIO    = 0x00000000\/\/the ration image is respected.$/;"	e	enum:__anon213
CV_WINDOW_NORMAL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_NORMAL       = 0x00000000, \/\/the user can resize the window (no constraint)  \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:__anon213
CV_WINDOW_OPENGL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WINDOW_OPENGL       = 0x00001000, \/\/window with opengl support$/;"	e	enum:__anon213
CV_WND_PROP_ASPECTRATIO	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WND_PROP_ASPECTRATIO= 2, \/\/to change\/get window's aspectratio property$/;"	e	enum:__anon213
CV_WND_PROP_AUTOSIZE	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WND_PROP_AUTOSIZE   = 1, \/\/to change\/get window's autosize property$/;"	e	enum:__anon213
CV_WND_PROP_FULLSCREEN	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WND_PROP_FULLSCREEN = 0, \/\/to change\/get window's fullscreen property$/;"	e	enum:__anon213
CV_WND_PROP_OPENGL	/usr/local/include/opencv2/highgui/highgui_c.h	/^    CV_WND_PROP_OPENGL     = 3, \/\/to change\/get window's opengl support$/;"	e	enum:__anon213
CV_WRAP	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WRAP$/;"	d
CV_WRAP_AS	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WRAP_AS(/;"	d
CV_WRAP_DEFAULT	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WRAP_DEFAULT(/;"	d
CV_WRITE_SEQ_ELEM	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WRITE_SEQ_ELEM(/;"	d
CV_WRITE_SEQ_ELEM_VAR	/usr/local/include/opencv2/core/types_c.h	/^#define CV_WRITE_SEQ_ELEM_VAR(/;"	d
CV_XADD	/usr/local/include/opencv2/core/operations.hpp	/^        #define CV_XADD(/;"	d
CV_XADD	/usr/local/include/opencv2/core/operations.hpp	/^      #define CV_XADD /;"	d
CV_XADD	/usr/local/include/opencv2/core/operations.hpp	/^  #define CV_XADD /;"	d
CV_XADD	/usr/local/include/opencv2/core/operations.hpp	/^  #define CV_XADD(/;"	d
CV_XOR	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_XOR(/;"	d
CV_XYZ2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_XYZ2BGR     =34,$/;"	e	enum:__anon251
CV_XYZ2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_XYZ2RGB     =35,$/;"	e	enum:__anon251
CV_YCrCb2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YCrCb2BGR   =38,$/;"	e	enum:__anon251
CV_YCrCb2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YCrCb2RGB   =39,$/;"	e	enum:__anon251
CV_YUV2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR      = 84,$/;"	e	enum:__anon251
CV_YUV2BGRA_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_I420 = CV_YUV2BGRA_IYUV,$/;"	e	enum:__anon251
CV_YUV2BGRA_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_IYUV = 105,$/;"	e	enum:__anon251
CV_YUV2BGRA_NV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_NV12 = 95,$/;"	e	enum:__anon251
CV_YUV2BGRA_NV21	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_NV21 = 97,$/;"	e	enum:__anon251
CV_YUV2BGRA_UYNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_UYNV = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon251
CV_YUV2BGRA_UYVY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_UYVY = 112,$/;"	e	enum:__anon251
CV_YUV2BGRA_Y422	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_Y422 = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon251
CV_YUV2BGRA_YUNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_YUNV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon251
CV_YUV2BGRA_YUY2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_YUY2 = 120,$/;"	e	enum:__anon251
CV_YUV2BGRA_YUYV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_YUYV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon251
CV_YUV2BGRA_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_YV12 = 103,$/;"	e	enum:__anon251
CV_YUV2BGRA_YVYU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGRA_YVYU = 122,$/;"	e	enum:__anon251
CV_YUV2BGR_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_I420 = CV_YUV2BGR_IYUV,$/;"	e	enum:__anon251
CV_YUV2BGR_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_IYUV = 101,$/;"	e	enum:__anon251
CV_YUV2BGR_NV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_NV12 = 91,$/;"	e	enum:__anon251
CV_YUV2BGR_NV21	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_NV21 = 93,$/;"	e	enum:__anon251
CV_YUV2BGR_UYNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_UYNV = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon251
CV_YUV2BGR_UYVY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_UYVY = 108,$/;"	e	enum:__anon251
CV_YUV2BGR_Y422	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_Y422 = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon251
CV_YUV2BGR_YUNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_YUNV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon251
CV_YUV2BGR_YUY2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_YUY2 = 116,$/;"	e	enum:__anon251
CV_YUV2BGR_YUYV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_YUYV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon251
CV_YUV2BGR_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_YV12 = 99,$/;"	e	enum:__anon251
CV_YUV2BGR_YVYU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2BGR_YVYU = 118,$/;"	e	enum:__anon251
CV_YUV2GRAY_420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_420 = 106,$/;"	e	enum:__anon251
CV_YUV2GRAY_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_I420 = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV2GRAY_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_IYUV = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV2GRAY_NV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_NV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV2GRAY_NV21	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_NV21 = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV2GRAY_UYNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_UYNV = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon251
CV_YUV2GRAY_UYVY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_UYVY = 123,$/;"	e	enum:__anon251
CV_YUV2GRAY_Y422	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_Y422 = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon251
CV_YUV2GRAY_YUNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_YUNV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon251
CV_YUV2GRAY_YUY2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_YUY2 = 124,$/;"	e	enum:__anon251
CV_YUV2GRAY_YUYV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_YUYV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon251
CV_YUV2GRAY_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_YV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV2GRAY_YVYU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2GRAY_YVYU = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon251
CV_YUV2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB      = 85,$/;"	e	enum:__anon251
CV_YUV2RGBA_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_I420 = CV_YUV2RGBA_IYUV,$/;"	e	enum:__anon251
CV_YUV2RGBA_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_IYUV = 104,$/;"	e	enum:__anon251
CV_YUV2RGBA_NV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_NV12 = 94,$/;"	e	enum:__anon251
CV_YUV2RGBA_NV21	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_NV21 = 96,$/;"	e	enum:__anon251
CV_YUV2RGBA_UYNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_UYNV = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon251
CV_YUV2RGBA_UYVY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_UYVY = 111,$/;"	e	enum:__anon251
CV_YUV2RGBA_Y422	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_Y422 = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon251
CV_YUV2RGBA_YUNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_YUNV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon251
CV_YUV2RGBA_YUY2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_YUY2 = 119,$/;"	e	enum:__anon251
CV_YUV2RGBA_YUYV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_YUYV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon251
CV_YUV2RGBA_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_YV12 = 102,$/;"	e	enum:__anon251
CV_YUV2RGBA_YVYU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGBA_YVYU = 121,$/;"	e	enum:__anon251
CV_YUV2RGB_I420	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_I420 = CV_YUV2RGB_IYUV,$/;"	e	enum:__anon251
CV_YUV2RGB_IYUV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_IYUV = 100,$/;"	e	enum:__anon251
CV_YUV2RGB_NV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_NV12 = 90,$/;"	e	enum:__anon251
CV_YUV2RGB_NV21	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_NV21 = 92,$/;"	e	enum:__anon251
CV_YUV2RGB_UYNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_UYNV = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon251
CV_YUV2RGB_UYVY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_UYVY = 107,$/;"	e	enum:__anon251
CV_YUV2RGB_Y422	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_Y422 = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon251
CV_YUV2RGB_YUNV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_YUNV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon251
CV_YUV2RGB_YUY2	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_YUY2 = 115,$/;"	e	enum:__anon251
CV_YUV2RGB_YUYV	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_YUYV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon251
CV_YUV2RGB_YV12	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_YV12 = 98,$/;"	e	enum:__anon251
CV_YUV2RGB_YVYU	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV2RGB_YVYU = 117,$/;"	e	enum:__anon251
CV_YUV420p2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420p2BGR = CV_YUV2BGR_YV12,$/;"	e	enum:__anon251
CV_YUV420p2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420p2BGRA = CV_YUV2BGRA_YV12,$/;"	e	enum:__anon251
CV_YUV420p2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420p2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV420p2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420p2RGB = CV_YUV2RGB_YV12,$/;"	e	enum:__anon251
CV_YUV420p2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420p2RGBA = CV_YUV2RGBA_YV12,$/;"	e	enum:__anon251
CV_YUV420sp2BGR	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420sp2BGR = CV_YUV2BGR_NV21,$/;"	e	enum:__anon251
CV_YUV420sp2BGRA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420sp2BGRA = CV_YUV2BGRA_NV21,$/;"	e	enum:__anon251
CV_YUV420sp2GRAY	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420sp2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon251
CV_YUV420sp2RGB	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420sp2RGB = CV_YUV2RGB_NV21,$/;"	e	enum:__anon251
CV_YUV420sp2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_YUV420sp2RGBA = CV_YUV2RGBA_NV21,$/;"	e	enum:__anon251
CV_ZERO_OBJ	/usr/local/include/opencv2/core/internal.hpp	/^#define  CV_ZERO_OBJ(/;"	d
CV_mRGBA2RGBA	/usr/local/include/opencv2/imgproc/types_c.h	/^    CV_mRGBA2RGBA = 126,$/;"	e	enum:__anon251
CYCLE_O	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {CYCLE_O, CYCLE_V};$/;"	e	enum:cv::StereoVar::__anon18
CYCLE_V	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {CYCLE_O, CYCLE_V};$/;"	e	enum:cv::StereoVar::__anon18
C_SVC	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon285
Calc	/usr/local/include/opencv2/ml/ml.hpp	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel
CalcRho	/usr/local/include/opencv2/ml/ml.hpp	/^    typedef void (CvSVMSolver::*CalcRho)( double& rho, double& r );$/;"	t	class:CvSVMSolver
CalculateEndIndex	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
CalonderDescriptorExtractor	/usr/local/include/opencv2/legacy/legacy.hpp	/^CalonderDescriptorExtractor<T>::CalonderDescriptorExtractor(const std::string& classifier_file)$/;"	f	class:cv::CalonderDescriptorExtractor
CalonderDescriptorExtractor	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CalonderDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
CameraParams	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^struct CV_EXPORTS CameraParams$/;"	s	namespace:cv::detail
Candidate	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  struct Candidate$/;"	s	class:cv::linemod::QuantizedPyramid
Candidate	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^inline QuantizedPyramid::Candidate::Candidate(int x, int y, int label, float _score) : f(x, y, label), score(_score) {}$/;"	f	class:cv::linemod::QuantizedPyramid::Candidate
CannyBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    CannyBuf() {}$/;"	f	struct:cv::gpu::CannyBuf
CannyBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    explicit CannyBuf(const Size& image_size, int apperture_size = 3) {create(image_size, apperture_size);}$/;"	f	struct:cv::gpu::CannyBuf
CannyBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct CV_EXPORTS CannyBuf$/;"	s	namespace:cv::gpu
CannyBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            CannyBuf() : counter(NULL) {}$/;"	f	struct:cv::ocl::CannyBuf
CannyBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            explicit CannyBuf(const Size &image_size, int apperture_size = 3) : counter(NULL)$/;"	f	struct:cv::ocl::CannyBuf
CannyBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS CannyBuf$/;"	s	namespace:cv::ocl
CannyBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS CannyBuf;$/;"	m	namespace:cv::ocl	typeref:struct:cv::ocl::CV_EXPORTS
CartesianProductGenerator10	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	/usr/local/include/opencv2/ts/ts_gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	/usr/local/include/opencv2/ts/ts_gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	/usr/local/include/opencv2/ts/ts_gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CascadeClassifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS_W CascadeClassifier$/;"	c	namespace:cv
CascadeClassifier_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS CascadeClassifier_GPU$/;"	c	namespace:cv::gpu
Center	/usr/local/include/opencv2/features2d/features2d.hpp	/^  struct CV_EXPORTS Center$/;"	s	class:cv::SimpleBlobDetector
ChDir	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
ChannelSize	/usr/local/include/opencv2/core/wimage.hpp	/^    int ChannelSize() const {return sizeof(T); }  \/\/ number of bytes per channel$/;"	f	class:cv::WImage
Channels	/usr/local/include/opencv2/core/wimage.hpp	/^    int Channels() const {return C; }$/;"	f	class:cv::WImageC
Channels	/usr/local/include/opencv2/core/wimage.hpp	/^    int Channels() const {return image_->nChannels; }$/;"	f	class:cv::WImage
CheckedDowncastToActualType	/usr/local/include/opencv2/ts/ts_gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
ChiSquareDistance	/usr/local/include/opencv2/flann/dist.h	/^struct ChiSquareDistance$/;"	s	namespace:cvflann
ChowLiuTree	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS ChowLiuTree {$/;"	c	namespace:cv::of2
ChromaFormat	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum ChromaFormat$/;"	g	class:cv::gpu::VideoReader_GPU
Clear	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobSeq
ClearStat	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       ClearStat;       \/\/    NVVE_CLEAR_STAT,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ClearTestCaseResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CloneFrom	/usr/local/include/opencv2/core/wimage.hpp	/^    void CloneFrom(const WImage<T>& src) {$/;"	f	class:cv::WImageBuffer
CloneFrom	/usr/local/include/opencv2/core/wimage.hpp	/^    void CloneFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageBufferC
Close	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
ClosePoints	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        ClosePoints(int minDist) : minDist_(minDist) {}$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
ClosePoints	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    class ClosePoints$/;"	c	class:cv::detail::DpSeamFinder
CmpHelperEQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
Codec	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum Codec$/;"	g	class:cv::gpu::VideoReader_GPU
ColorAverageInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS ColorAverageInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ColorChannel	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<> struct ColorChannel<float>$/;"	s	namespace:cv::gpu::device::color_detail
ColorChannel	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<typename T> struct ColorChannel$/;"	s	namespace:cv::gpu::device::color_detail
ColorGradient	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS ColorGradient : public Modality$/;"	c	namespace:cv::linemod
ColorInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    ColorInpainter(int method = INPAINT_TELEA, double _radius = 2.)$/;"	f	class:cv::videostab::ColorInpainter
ColorInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS ColorInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
Compare	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompareT	/usr/local/include/opencv2/flann/heap.h	/^    struct CompareT$/;"	s	class:cvflann::Heap
CompileAssertTypesEqual	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
Complex	/usr/local/include/opencv2/core/core.hpp	/^#undef Complex$/;"	d
Complex	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp>::Complex( _Tp _re, _Tp _im ) : re(_re), im(_im) {}$/;"	f	class:cv::Complex
Complex	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp>::Complex() : re(0), im(0) {}$/;"	f	class:cv::Complex
ComponentState	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum ComponentState$/;"	g	class:cv::detail::DpSeamFinder
CompositeIndex	/usr/local/include/opencv2/flann/composite_index.h	/^    CompositeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = CompositeIndexParams(),$/;"	f	class:cvflann::CompositeIndex
CompositeIndex	/usr/local/include/opencv2/flann/composite_index.h	/^class CompositeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
CompositeIndexParams	/usr/local/include/opencv2/flann/composite_index.h	/^    CompositeIndexParams(int trees = 4, int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::CompositeIndexParams
CompositeIndexParams	/usr/local/include/opencv2/flann/composite_index.h	/^struct CompositeIndexParams : public IndexParams$/;"	s	namespace:cvflann
CompositeIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS CompositeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
CompressedRectilinearPortraitProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^   CompressedRectilinearPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearPortraitWarper : public RotationWarperBase<CompressedRectilinearPortraitProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearPortraitWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^    CompressedRectilinearPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class CompressedRectilinearPortraitWarper: public WarperCreator$/;"	c	namespace:cv
CompressedRectilinearProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    CompressedRectilinearWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearWarper
CompressedRectilinearWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearWarper : public RotationWarperBase<CompressedRectilinearProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^    CompressedRectilinearWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearWarper
CompressedRectilinearWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class CompressedRectilinearWarper: public WarperCreator$/;"	c	namespace:cv
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ConcurrentDoubleVector	/usr/local/include/opencv2/core/internal.hpp	/^    typedef tbb::concurrent_vector<double> ConcurrentDoubleVector;$/;"	t	namespace:cv
ConcurrentRectVector	/usr/local/include/opencv2/core/internal.hpp	/^    typedef tbb::concurrent_vector<Rect> ConcurrentRectVector;$/;"	t	namespace:cv
ConsistentMosaicInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS ConsistentMosaicInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ConstCharPtr	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ContainerType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
Context	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS Context$/;"	c	namespace:cv::ocl
ConvolveBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct CV_EXPORTS ConvolveBuf$/;"	s	namespace:cv::gpu
CopyArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyFrom	/usr/local/include/opencv2/core/wimage.hpp	/^    void CopyFrom(const WImage<T>& src) { cvCopy(src.Ipl(), image_); }$/;"	f	class:cv::WImage
CopyFrom	/usr/local/include/opencv2/core/wimage.hpp	/^    void CopyFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageC
CostData	/usr/local/include/opencv2/flann/autotuned_index.h	/^    struct CostData$/;"	s	class:cvflann::AutotunedIndex
CostFunction	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	g	class:cv::detail::DpSeamFinder
CreateKey	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreatorNotFound	/usr/local/include/opencv2/flann/object_factory.h	/^class CreatorNotFound$/;"	c	namespace:cvflann
Csr	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<int> Csr;$/;"	m	class:cv::LogPolar_Overlapping
Csri	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat Csri;$/;"	m	class:cv::LogPolar_Interp
Csri	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat Csri;$/;"	m	class:cv::LogPolar_Overlapping
CubicFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ CubicFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::CubicFilter
CubicFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^    template <typename Ptr2D> struct CubicFilter$/;"	s	namespace:cv::gpu::device
CudaMem	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS CudaMem$/;"	c	namespace:cv::gpu
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Cv1DObsInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef CvImgObsInfo Cv1DObsInfo;$/;"	t
Cv32suf	/usr/local/include/opencv2/core/types_c.h	/^Cv32suf;$/;"	t	typeref:union:Cv32suf
Cv32suf	/usr/local/include/opencv2/core/types_c.h	/^typedef union Cv32suf$/;"	u
Cv3dTracker2dTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct Cv3dTracker2dTrackedObject$/;"	s
Cv3dTracker2dTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^} Cv3dTracker2dTrackedObject;$/;"	t	typeref:struct:Cv3dTracker2dTrackedObject
Cv3dTrackerCameraInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct Cv3dTrackerCameraInfo$/;"	s
Cv3dTrackerCameraInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^} Cv3dTrackerCameraInfo;$/;"	t	typeref:struct:Cv3dTrackerCameraInfo
Cv3dTrackerCameraIntrinsics	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct Cv3dTrackerCameraIntrinsics$/;"	s
Cv3dTrackerCameraIntrinsics	/usr/local/include/opencv2/legacy/legacy.hpp	/^} Cv3dTrackerCameraIntrinsics;$/;"	t	typeref:struct:Cv3dTrackerCameraIntrinsics
Cv3dTrackerTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct Cv3dTrackerTrackedObject$/;"	s
Cv3dTrackerTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^} Cv3dTrackerTrackedObject;$/;"	t	typeref:struct:Cv3dTrackerTrackedObject
Cv64suf	/usr/local/include/opencv2/core/types_c.h	/^Cv64suf;$/;"	t	typeref:union:Cv64suf
Cv64suf	/usr/local/include/opencv2/core/types_c.h	/^typedef union Cv64suf$/;"	u
CvANN_MLP	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvANN_MLP : public CvStatModel$/;"	c
CvANN_MLP_TrainParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvANN_MLP_TrainParams$/;"	s
CvAdaptiveSkinDetector	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvAdaptiveSkinDetector$/;"	c
CvAdaptiveThreshMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvAdaptiveThreshMethod;$/;"	t
CvAffinePose	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CvAffinePose$/;"	c	namespace:cv
CvAllocFunc	/usr/local/include/opencv2/core/core_c.h	/^typedef void* (CV_CDECL *CvAllocFunc)(size_t size, void* userdata);$/;"	t
CvArr	/usr/local/include/opencv2/core/types_c.h	/^typedef void CvArr;$/;"	t
CvAttrList	/usr/local/include/opencv2/core/types_c.h	/^CvAttrList;$/;"	t	typeref:struct:CvAttrList
CvAttrList	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvAttrList$/;"	s
CvAvgComp	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvAvgComp$/;"	s
CvAvgComp	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvAvgComp;$/;"	t	typeref:struct:CvAvgComp
CvBGCodeBookElem	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGCodeBookElem$/;"	s
CvBGCodeBookElem	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGCodeBookElem;$/;"	t	typeref:struct:CvBGCodeBookElem
CvBGCodeBookModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGCodeBookModel$/;"	s
CvBGCodeBookModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGCodeBookModel;$/;"	t	typeref:struct:CvBGCodeBookModel
CvBGPixelCCStatTable	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGPixelCCStatTable$/;"	s
CvBGPixelCCStatTable	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGPixelCCStatTable;$/;"	t	typeref:struct:CvBGPixelCCStatTable
CvBGPixelCStatTable	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGPixelCStatTable$/;"	s
CvBGPixelCStatTable	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGPixelCStatTable;$/;"	t	typeref:struct:CvBGPixelCStatTable
CvBGPixelStat	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGPixelStat$/;"	s
CvBGPixelStat	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGPixelStat;$/;"	t	typeref:struct:CvBGPixelStat
CvBGStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvBGStatModel$/;"	s
CvBGStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvBGStatModel;$/;"	t	typeref:struct:CvBGStatModel
CvBigFuncTable	/usr/local/include/opencv2/core/internal.hpp	/^typedef struct CvBigFuncTable$/;"	s
CvBigFuncTable	/usr/local/include/opencv2/core/internal.hpp	/^} CvBigFuncTable;$/;"	t	typeref:struct:CvBigFuncTable
CvBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvBlob$/;"	s
CvBlobDetector	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobDetector(){SetTypeName("BlobDetector");};$/;"	f	class:CvBlobDetector
CvBlobDetector	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobDetector: public CvVSModule$/;"	c
CvBlobSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobSeq(int BlobSize = sizeof(CvBlob))$/;"	f	class:CvBlobSeq
CvBlobSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobSeq$/;"	c
CvBlobTrack	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvBlobTrack$/;"	s
CvBlobTrackAnalysis	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackAnalysis(){SetTypeName("BlobTrackAnalysis");};$/;"	f	class:CvBlobTrackAnalysis
CvBlobTrackAnalysis	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysis: public CvVSModule$/;"	c
CvBlobTrackAnalysisHeight	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisHeight: public CvBlobTrackAnalysis$/;"	c
CvBlobTrackAnalysisOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisOne$/;"	c
CvBlobTrackFVGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackFVGen(){SetTypeName("BlobTrackFVGen");};$/;"	f	class:CvBlobTrackFVGen
CvBlobTrackFVGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackFVGen : public CvVSModule$/;"	c
CvBlobTrackGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackGen(){SetTypeName("BlobTrackGen");};$/;"	f	class:CvBlobTrackGen
CvBlobTrackGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackGen: public CvVSModule$/;"	c
CvBlobTrackPostProc	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackPostProc(){SetTypeName("BlobTrackPostProc");};$/;"	f	class:CvBlobTrackPostProc
CvBlobTrackPostProc	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackPostProc: public CvVSModule$/;"	c
CvBlobTrackPostProcOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackPostProcOne(){SetTypeName("BlobTrackPostOne");};$/;"	f	class:CvBlobTrackPostProcOne
CvBlobTrackPostProcOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackPostProcOne: public CvVSModule$/;"	c
CvBlobTrackPredictor	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackPredictor(){SetTypeName("BlobTrackPredictor");};$/;"	f	class:CvBlobTrackPredictor
CvBlobTrackPredictor	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CvBlobTrackPredictor: public CvVSModule$/;"	c
CvBlobTrackSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackSeq$/;"	c
CvBlobTracker	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTracker: public CvVSModule$/;"	c
CvBlobTrackerAuto	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackerAuto(){SetTypeName("BlobTrackerAuto");};$/;"	f	class:CvBlobTrackerAuto
CvBlobTrackerAuto	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackerAuto: public CvVSModule$/;"	c
CvBlobTrackerAutoParam1	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvBlobTrackerAutoParam1$/;"	s
CvBlobTrackerOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackerOne : public CvVSModule$/;"	c
CvBlobTrackerParamLH	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvBlobTrackerParamLH$/;"	s
CvBlobTrackerParamMS	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvBlobTrackerParamMS$/;"	s
CvBool	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef unsigned char CvBool;$/;"	t
CvBoost	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvBoost : public CvStatModel$/;"	c
CvBoostParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvBoostParams : public CvDTreeParams$/;"	s
CvBoostTree	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS CvBoostTree: public CvDTree$/;"	c
CvBox2D	/usr/local/include/opencv2/core/types_c.h	/^CvBox2D;$/;"	t	typeref:struct:CvBox2D
CvBox2D	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvBox2D$/;"	s
CvBox2D32f	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef CvBox2D  CvBox2D32f;$/;"	t
CvButtonCallback	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef void (CV_CDECL *CvButtonCallback)(int state, void* userdata);$/;"	t
CvCalibEtalonType	/usr/local/include/opencv2/legacy/legacy.hpp	/^CvCalibEtalonType;$/;"	t	typeref:enum:CvCalibEtalonType
CvCalibEtalonType	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef enum CvCalibEtalonType$/;"	g
CvCalibFilter	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CvCalibFilter$/;"	c
CvCallback	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef int (CV_CDECL * CvCallback)(int index, void* buffer, void* user_data);$/;"	t
CvCamShiftTracker	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CvCamShiftTracker$/;"	c
CvCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvCamera$/;"	s
CvCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvCamera;$/;"	t	typeref:struct:CvCamera
CvCapture	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvChain	/usr/local/include/opencv2/core/types_c.h	/^CvChain;$/;"	t	typeref:struct:CvChain
CvChain	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvChain$/;"	s
CvChainApproxMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvChainApproxMethod;$/;"	t
CvChainPtReader	/usr/local/include/opencv2/imgproc/types_c.h	/^CvChainPtReader;$/;"	t	typeref:struct:CvChainPtReader
CvChainPtReader	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvChainPtReader$/;"	s
CvCliqueFinder	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvCliqueFinder$/;"	s
CvCliqueFinder	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvCliqueFinder;$/;"	t	typeref:struct:CvCliqueFinder
CvCloneFunc	/usr/local/include/opencv2/core/types_c.h	/^typedef void* (CV_CDECL *CvCloneFunc)( const void* struct_ptr );$/;"	t
CvCmpFunc	/usr/local/include/opencv2/core/core_c.h	/^typedef int (CV_CDECL* CvCmpFunc)(const void* a, const void* b, void* userdata );$/;"	t
CvCoeffType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvCoeffType;$/;"	t
CvCompareMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvCompareMethod;$/;"	t
CvConDensation	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvConDensation$/;"	s
CvConDensation	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvConDensation;$/;"	t	typeref:struct:CvConDensation
CvConnectedComp	/usr/local/include/opencv2/imgproc/types_c.h	/^CvConnectedComp;$/;"	t	typeref:struct:CvConnectedComp
CvConnectedComp	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvConnectedComp$/;"	s
CvContour	/usr/local/include/opencv2/core/types_c.h	/^CvContour;$/;"	t	typeref:struct:CvContour
CvContour	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvContour$/;"	s
CvContourOrientation	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvContourOrientation$/;"	s
CvContourOrientation	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvContourOrientation;$/;"	t	typeref:struct:CvContourOrientation
CvContourRetrievalMode	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvContourRetrievalMode;$/;"	t
CvContourScanner	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct _CvContourScanner* CvContourScanner;$/;"	t	typeref:struct:_CvContourScanner
CvContourTree	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvContourTree$/;"	s
CvContourTree	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvContourTree;$/;"	t	typeref:struct:CvContourTree
CvContourTreesMatchMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvContourTreesMatchMethod;$/;"	t
CvContoursMatchMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvContoursMatchMethod;$/;"	t
CvConvexityDefect	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvConvexityDefect$/;"	s
CvConvexityDefect	/usr/local/include/opencv2/imgproc/types_c.h	/^} CvConvexityDefect;$/;"	t	typeref:struct:CvConvexityDefect
CvDTree	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvDTree : public CvStatModel$/;"	c
CvDTreeNode	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvDTreeNode$/;"	s
CvDTreeParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvDTreeParams$/;"	s
CvDTreeSplit	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvDTreeSplit$/;"	s
CvDTreeTrainData	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS CvDTreeTrainData$/;"	s
CvDataMatrixCode	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct CV_EXPORTS CvDataMatrixCode {$/;"	s
CvDefParam	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvDefParam$/;"	s
CvDetectedBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CV_EXPORTS CvDetectedBlob : public CvBlob$/;"	s
CvDisMaskType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvDisMaskType;$/;"	t
CvDisType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvDisType;$/;"	t
CvDistanceFunction	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef float (CV_CDECL * CvDistanceFunction)( const float* a, const float* b, void* user_param );$/;"	t
CvDrawShape	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvDrawShape$/;"	s
CvEHMM	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvEHMM$/;"	s
CvEHMM	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvEHMM;$/;"	t	typeref:struct:CvEHMM
CvEHMMState	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvEHMMState$/;"	s
CvEHMMState	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvEHMMState;$/;"	t	typeref:struct:CvEHMMState
CvEM	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS_W CvEM : public CvStatModel$/;"	c
CvEMParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^struct CV_EXPORTS_W_MAP CvEMParams$/;"	s
CvERTreeTrainData	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS CvERTreeTrainData : public CvDTreeTrainData$/;"	s
CvERTrees	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvERTrees : public CvRTrees$/;"	c
CvElementShape	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvElementShape;$/;"	t
CvErrorCallback	/usr/local/include/opencv2/core/core_c.h	/^typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,$/;"	t
CvFGDStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvFGDStatModel$/;"	s
CvFGDStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvFGDStatModel;$/;"	t	typeref:struct:CvFGDStatModel
CvFGDStatModelParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvFGDStatModelParams$/;"	s
CvFGDStatModelParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvFGDStatModelParams;$/;"	t	typeref:struct:CvFGDStatModelParams
CvFGDetector	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvFGDetector : public CvVSModule$/;"	c
CvFace	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvFace$/;"	s
CvFaceData	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvFaceData;$/;"	t	typeref:struct:CvFace
CvFaceTracker	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvFaceTracker CvFaceTracker;$/;"	t	typeref:struct:CvFaceTracker
CvFeatureTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^class CV_EXPORTS CvFeatureTracker$/;"	c	namespace:cv
CvFeatureTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams(int featureType = 0, int windowSize = 0)$/;"	f	struct:cv::CvFeatureTrackerParams
CvFeatureTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvFeatureTrackerParams$/;"	s	namespace:cv
CvFileNode	/usr/local/include/opencv2/core/types_c.h	/^CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvFileNode$/;"	s
CvFileNodeHash	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvGenericHash CvFileNodeHash;$/;"	t	typeref:struct:CvGenericHash
CvFileStorage	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFont	/usr/local/include/opencv2/core/core_c.h	/^CvFont;$/;"	t	typeref:struct:CvFont
CvFont	/usr/local/include/opencv2/core/core_c.h	/^typedef struct CvFont$/;"	s
CvFontFace	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvFontFace;$/;"	t
CvForestERTree	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS CvForestERTree : public CvForestTree$/;"	c
CvForestTree	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS CvForestTree: public CvDTree$/;"	c
CvFreeFunc	/usr/local/include/opencv2/core/core_c.h	/^typedef int (CV_CDECL *CvFreeFunc)(void* pptr, void* userdata);$/;"	t
CvFuncTable	/usr/local/include/opencv2/core/internal.hpp	/^CvFuncTable;$/;"	t	typeref:struct:CvFuncTable
CvFuncTable	/usr/local/include/opencv2/core/internal.hpp	/^typedef struct CvFuncTable$/;"	s
CvFuzzyController	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyController {$/;"	c
CvFuzzyCurve	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyCurve {$/;"	c
CvFuzzyFunction	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyFunction {$/;"	c
CvFuzzyMeanShiftTracker	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyMeanShiftTracker$/;"	c
CvFuzzyPoint	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyPoint {$/;"	c
CvFuzzyRule	/usr/local/include/opencv2/contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyRule {$/;"	c
CvGBTrees	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvGBTrees : public CvStatModel$/;"	c
CvGBTreesParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvGBTreesParams : public CvDTreeParams$/;"	s
CvGLCM	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGLCM CvGLCM;$/;"	t	typeref:struct:CvGLCM
CvGaussBGModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGaussBGModel$/;"	s
CvGaussBGModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGaussBGModel;$/;"	t	typeref:struct:CvGaussBGModel
CvGaussBGPoint	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGaussBGPoint$/;"	s
CvGaussBGPoint	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGaussBGPoint;$/;"	t	typeref:struct:CvGaussBGPoint
CvGaussBGStatModelParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGaussBGStatModelParams$/;"	s
CvGaussBGStatModelParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^}CvGaussBGStatModelParams;$/;"	t	typeref:struct:CvGaussBGStatModelParams
CvGaussBGValues	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGaussBGValues$/;"	s
CvGaussBGValues	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGaussBGValues;$/;"	t	typeref:struct:CvGaussBGValues
CvGraph	/usr/local/include/opencv2/core/types_c.h	/^CvGraph;$/;"	t	typeref:struct:CvGraph
CvGraph	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvGraph$/;"	s
CvGraphEdge	/usr/local/include/opencv2/core/types_c.h	/^CvGraphEdge;$/;"	t	typeref:struct:CvGraphEdge
CvGraphEdge	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvGraphEdge$/;"	s
CvGraphScanner	/usr/local/include/opencv2/core/core_c.h	/^CvGraphScanner;$/;"	t	typeref:struct:CvGraphScanner
CvGraphScanner	/usr/local/include/opencv2/core/core_c.h	/^typedef struct CvGraphScanner$/;"	s
CvGraphVtx	/usr/local/include/opencv2/core/types_c.h	/^CvGraphVtx;$/;"	t	typeref:struct:CvGraphVtx
CvGraphVtx	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvGraphVtx$/;"	s
CvGraphVtx2D	/usr/local/include/opencv2/core/types_c.h	/^CvGraphVtx2D;$/;"	t	typeref:struct:CvGraphVtx2D
CvGraphVtx2D	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvGraphVtx2D$/;"	s
CvGraphWeightType	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef enum CvGraphWeightType$/;"	g
CvGraphWeightType	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGraphWeightType;$/;"	t	typeref:enum:CvGraphWeightType
CvGraphWeightedEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGraphWeightedEdge$/;"	s
CvGraphWeightedEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGraphWeightedEdge;$/;"	t	typeref:struct:CvGraphWeightedEdge
CvGraphWeightedVtx	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvGraphWeightedVtx$/;"	s
CvGraphWeightedVtx	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvGraphWeightedVtx;$/;"	t	typeref:struct:CvGraphWeightedVtx
CvHaarClassifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvHaarClassifier$/;"	s
CvHaarClassifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvHaarClassifier;$/;"	t	typeref:struct:CvHaarClassifier
CvHaarClassifierCascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvHaarClassifierCascade$/;"	s
CvHaarClassifierCascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarFeature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvHaarFeature$/;"	s
CvHaarFeature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvHaarFeature;$/;"	t	typeref:struct:CvHaarFeature
CvHaarStageClassifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvHaarStageClassifier$/;"	s
CvHaarStageClassifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvHaarStageClassifier;$/;"	t	typeref:struct:CvHaarStageClassifier
CvHidHaarClassifierCascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvHidHaarClassifierCascade CvHidHaarClassifierCascade;$/;"	t	typeref:struct:CvHidHaarClassifierCascade
CvHistType	/usr/local/include/opencv2/core/types_c.h	/^typedef int CvHistType;$/;"	t
CvHistogram	/usr/local/include/opencv2/core/types_c.h	/^CvHistogram;$/;"	t	typeref:struct:CvHistogram
CvHistogram	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvHistogram$/;"	s
CvHuMoments	/usr/local/include/opencv2/imgproc/types_c.h	/^CvHuMoments;$/;"	t	typeref:struct:CvHuMoments
CvHuMoments	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvHuMoments$/;"	s
CvHybridTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^class CV_EXPORTS CvHybridTracker$/;"	c	namespace:cv
CvHybridTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvHybridTrackerParams$/;"	s	namespace:cv
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( CvFileStorage* fs, const char* mapname, const char* imgname ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( CvFileStorage* fs, const char* seqname, int idx ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( CvSize _size, int _depth, int _channels )$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( IplImage* img ) : image(img)$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( const CvImage& img ) : image(img.image), refcount(img.refcount)$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage( const char* filename, const char* imgname=0, int color=-1 ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage() : image(0), refcount(0) {}$/;"	f	class:CvImage
CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CvImage$/;"	c
CvImageDrawer	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvImageDrawer() : m_image(0) {}$/;"	f	class:CvImageDrawer
CvImageDrawer	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvImageDrawer$/;"	c
CvImgObsInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvImgObsInfo$/;"	s
CvImgObsInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvImgObsInfo;\/*struct for 1 image*\/$/;"	t	typeref:struct:CvImgObsInfo
CvInput	/usr/local/include/opencv2/legacy/legacy.hpp	/^CvInput;$/;"	t	typeref:union:__anon276
CvIsInstanceFunc	/usr/local/include/opencv2/core/types_c.h	/^typedef int (CV_CDECL *CvIsInstanceFunc)( const void* struct_ptr );$/;"	t
CvKNearest	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvKNearest : public CvStatModel$/;"	c
CvKalman	/usr/local/include/opencv2/video/tracking.hpp	/^typedef struct CvKalman$/;"	s
CvKalman	/usr/local/include/opencv2/video/tracking.hpp	/^} CvKalman;$/;"	t	typeref:struct:CvKalman
CvLCMEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvLCMEdge$/;"	s
CvLCMEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvLCMEdge;$/;"	t	typeref:struct:CvLCMEdge
CvLCMNode	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvLCMNode$/;"	s
CvLCMNode	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvLCMNode;$/;"	t	typeref:struct:CvLCMNode
CvLSHOperations	/usr/local/include/opencv2/legacy/legacy.hpp	/^struct CvLSHOperations$/;"	s
CvLSVMFilterObject	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvLSVMFilterObject{$/;"	s
CvLSVMFilterObject	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvLSVMFilterObject;$/;"	t	typeref:struct:CvLSVMFilterObject
CvLSVMFilterPosition	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvLSVMFilterPosition$/;"	s
CvLSVMFilterPosition	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvLSVMFilterPosition;$/;"	t	typeref:struct:CvLSVMFilterPosition
CvLatentSvmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CvLatentSvmDetector;$/;"	t	typeref:struct:CvLatentSvmDetector
CvLatentSvmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvLatentSvmDetector$/;"	s
CvLeeParameters	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef enum CvLeeParameters$/;"	g
CvLeeParameters	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvLeeParameters;$/;"	t	typeref:enum:CvLeeParameters
CvLevMarq	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^class CV_EXPORTS CvLevMarq$/;"	c
CvLineIterator	/usr/local/include/opencv2/core/types_c.h	/^CvLineIterator;$/;"	t	typeref:struct:CvLineIterator
CvLineIterator	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvLineIterator$/;"	s
CvMLData	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS CvMLData$/;"	c
CvMSERParams	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvMSERParams$/;"	s
CvMSERParams	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvMSERParams;$/;"	t	typeref:struct:CvMSERParams
CvMat	/usr/local/include/opencv2/core/types_c.h	/^CvMat;$/;"	t	typeref:struct:CvMat
CvMat	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvMat$/;"	s
CvMatArray	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef CvMat CvMatArray;$/;"	t
CvMatND	/usr/local/include/opencv2/core/types_c.h	/^CvMatND;$/;"	t	typeref:struct:CvMatND
CvMatND	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvMatND$/;"	s
CvMatType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvMatType;$/;"	t
CvMatr32f	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef float*   CvMatr32f;$/;"	t
CvMatr64d	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef double*  CvMatr64d;$/;"	t
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( CvFileStorage* fs, const char* mapname, const char* matname ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( CvFileStorage* fs, const char* seqname, int idx ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( CvMat* m )$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( const CvMatrix& m )$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( const char* filename, const char* matname=0, int color=-1 ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type )$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type, CvMat* hdr,$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type, void* _data, int _step=CV_AUTOSTEP )$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix() : matrix(0) {}$/;"	f	class:CvMatrix
CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS CvMatrix$/;"	c
CvMatrix3	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvMatrix3$/;"	s
CvMatrix3	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvMatrix3;$/;"	t	typeref:struct:CvMatrix3
CvMeanShiftTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^class CV_EXPORTS CvMeanShiftTracker$/;"	c	namespace:cv
CvMeanShiftTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvMeanShiftTrackerParams$/;"	s	namespace:cv
CvMemBlock	/usr/local/include/opencv2/core/types_c.h	/^CvMemBlock;$/;"	t	typeref:struct:CvMemBlock
CvMemBlock	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvMemBlock$/;"	s
CvMemStorage	/usr/local/include/opencv2/core/types_c.h	/^CvMemStorage;$/;"	t	typeref:struct:CvMemStorage
CvMemStorage	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvMemStorage$/;"	s
CvMemStoragePos	/usr/local/include/opencv2/core/types_c.h	/^CvMemStoragePos;$/;"	t	typeref:struct:CvMemStoragePos
CvMemStoragePos	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvMemStoragePos$/;"	s
CvModule	/usr/local/include/opencv2/core/core_c.h	/^struct CV_EXPORTS CvModule$/;"	s
CvModuleInfo	/usr/local/include/opencv2/core/types_c.h	/^CvModuleInfo;$/;"	t	typeref:struct:CvModuleInfo
CvModuleInfo	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvModuleInfo$/;"	s
CvMoments	/usr/local/include/opencv2/imgproc/types_c.h	/^CvMoments;$/;"	t	typeref:struct:CvMoments
CvMoments	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvMoments$/;"	s
CvMorphOp	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvMorphOp;$/;"	t
CvMotionModel	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMotionModel()$/;"	f	struct:cv::CvMotionModel
CvMotionModel	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvMotionModel$/;"	s	namespace:cv
CvMouseCallback	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
CvNArrayIterator	/usr/local/include/opencv2/core/core_c.h	/^CvNArrayIterator;$/;"	t	typeref:struct:CvNArrayIterator
CvNArrayIterator	/usr/local/include/opencv2/core/core_c.h	/^typedef struct CvNArrayIterator$/;"	s
CvNextEdgeType	/usr/local/include/opencv2/imgproc/types_c.h	/^CvNextEdgeType;$/;"	t	typeref:enum:CvNextEdgeType
CvNextEdgeType	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef enum CvNextEdgeType$/;"	g
CvNormalBayesClassifier	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvNormalBayesClassifier : public CvStatModel$/;"	c
CvObjectDetection	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^typedef struct CvObjectDetection$/;"	s
CvObjectDetection	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^} CvObjectDetection;$/;"	t	typeref:struct:CvObjectDetection
CvObjectDetector	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvObjectDetector$/;"	c
CvOpenGlDrawCallback	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef void (CV_CDECL *CvOpenGlDrawCallback)(void* userdata);$/;"	t
CvOpenGlFuncTab	/usr/local/include/opencv2/core/internal.hpp	/^class CV_EXPORTS CvOpenGlFuncTab$/;"	c
CvPOSITObject	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^typedef struct CvPOSITObject CvPOSITObject;$/;"	t	typeref:struct:CvPOSITObject
CvPair16u32s	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvPair16u32s$/;"	s
CvParamGrid	/usr/local/include/opencv2/ml/ml.hpp	/^    CvParamGrid()$/;"	f	struct:CvParamGrid
CvParamGrid	/usr/local/include/opencv2/ml/ml.hpp	/^inline CvParamGrid::CvParamGrid( double _min_val, double _max_val, double _log_step )$/;"	f	class:CvParamGrid
CvParamGrid	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvParamGrid$/;"	s
CvPixelPosition32f	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvPixelPosition32f;$/;"	t	typeref:struct:_CvPixelPosition32f
CvPixelPosition8s	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvPixelPosition8s;$/;"	t	typeref:struct:_CvPixelPosition8s
CvPixelPosition8u	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvPixelPosition8u;$/;"	t	typeref:struct:_CvPixelPosition8u
CvPluginFuncInfo	/usr/local/include/opencv2/core/types_c.h	/^CvPluginFuncInfo;$/;"	t	typeref:struct:CvPluginFuncInfo
CvPluginFuncInfo	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPluginFuncInfo$/;"	s
CvPoint	/usr/local/include/opencv2/core/types_c.h	/^CvPoint;$/;"	t	typeref:struct:CvPoint
CvPoint	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPoint$/;"	s
CvPoint2D32f	/usr/local/include/opencv2/core/types_c.h	/^CvPoint2D32f;$/;"	t	typeref:struct:CvPoint2D32f
CvPoint2D32f	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPoint2D32f$/;"	s
CvPoint2D64d	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef CvPoint2D64f CvPoint2D64d;$/;"	t
CvPoint2D64f	/usr/local/include/opencv2/core/types_c.h	/^CvPoint2D64f;$/;"	t	typeref:struct:CvPoint2D64f
CvPoint2D64f	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPoint2D64f$/;"	s
CvPoint2DSeq	/usr/local/include/opencv2/core/types_c.h	/^typedef CvContour CvPoint2DSeq;$/;"	t
CvPoint3D32f	/usr/local/include/opencv2/core/types_c.h	/^CvPoint3D32f;$/;"	t	typeref:struct:CvPoint3D32f
CvPoint3D32f	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPoint3D32f$/;"	s
CvPoint3D64d	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef CvPoint3D64f CvPoint3D64d;$/;"	t
CvPoint3D64f	/usr/local/include/opencv2/core/types_c.h	/^CvPoint3D64f;$/;"	t	typeref:struct:CvPoint3D64f
CvPoint3D64f	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvPoint3D64f$/;"	s
CvPolyApproxMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvPolyApproxMethod;$/;"	t
CvProb	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvProb$/;"	c
CvQuadEdge2D	/usr/local/include/opencv2/imgproc/types_c.h	/^CvQuadEdge2D;$/;"	t	typeref:struct:CvQuadEdge2D
CvQuadEdge2D	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvQuadEdge2D$/;"	s
CvRNG	/usr/local/include/opencv2/core/types_c.h	/^typedef uint64 CvRNG;$/;"	t
CvRTParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvRTParams : public CvDTreeParams$/;"	s
CvRTrees	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvRTrees : public CvStatModel$/;"	c
CvRandState	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvRandState$/;"	s
CvRandState	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvRandState;$/;"	t	typeref:struct:CvRandState
CvReadFunc	/usr/local/include/opencv2/core/types_c.h	/^typedef void* (CV_CDECL *CvReadFunc)( CvFileStorage* storage, CvFileNode* node );$/;"	t
CvRect	/usr/local/include/opencv2/core/types_c.h	/^CvRect;$/;"	t	typeref:struct:CvRect
CvRect	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvRect$/;"	s
CvReleaseBGStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef void (CV_CDECL * CvReleaseBGStatModel)( struct CvBGStatModel** bg_model );$/;"	t
CvReleaseFunc	/usr/local/include/opencv2/core/types_c.h	/^typedef void (CV_CDECL *CvReleaseFunc)( void** struct_dblptr );$/;"	t
CvRodriguesType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvRodriguesType;$/;"	t
CvSURFParams	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvSURFParams$/;"	s
CvSURFParams	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvSURFParams;$/;"	t	typeref:struct:CvSURFParams
CvSURFPoint	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvSURFPoint$/;"	s
CvSURFPoint	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvSURFPoint;$/;"	t	typeref:struct:CvSURFPoint
CvSVM	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvSVM : public CvStatModel$/;"	c
CvSVMDecisionFunc	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvSVMDecisionFunc$/;"	s
CvSVMKernel	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS CvSVMKernel$/;"	s
CvSVMKernelRow	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvSVMKernelRow$/;"	s
CvSVMParams	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvSVMParams$/;"	s
CvSVMSolutionInfo	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvSVMSolutionInfo$/;"	s
CvSVMSolver	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS CvSVMSolver$/;"	c
CvScalar	/usr/local/include/opencv2/core/types_c.h	/^CvScalar;$/;"	t	typeref:struct:CvScalar
CvScalar	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvScalar$/;"	s
CvSeq	/usr/local/include/opencv2/core/types_c.h	/^CvSeq;$/;"	t	typeref:struct:CvSeq
CvSeq	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSeq$/;"	s
CvSeqBlock	/usr/local/include/opencv2/core/types_c.h	/^CvSeqBlock;$/;"	t	typeref:struct:CvSeqBlock
CvSeqBlock	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSeqBlock$/;"	s
CvSeqReader	/usr/local/include/opencv2/core/types_c.h	/^CvSeqReader;$/;"	t	typeref:struct:CvSeqReader
CvSeqReader	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSeqReader$/;"	s
CvSeqWriter	/usr/local/include/opencv2/core/types_c.h	/^CvSeqWriter;$/;"	t	typeref:struct:CvSeqWriter
CvSeqWriter	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSeqWriter$/;"	s
CvSet	/usr/local/include/opencv2/core/types_c.h	/^CvSet;$/;"	t	typeref:struct:CvSet
CvSet	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSet$/;"	s
CvSetElem	/usr/local/include/opencv2/core/types_c.h	/^CvSetElem;$/;"	t	typeref:struct:CvSetElem
CvSetElem	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSetElem$/;"	s
CvSize	/usr/local/include/opencv2/core/types_c.h	/^CvSize;$/;"	t	typeref:struct:CvSize
CvSize	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSize$/;"	s
CvSize2D32f	/usr/local/include/opencv2/core/types_c.h	/^CvSize2D32f;$/;"	t	typeref:struct:CvSize2D32f
CvSize2D32f	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSize2D32f$/;"	s
CvSlice	/usr/local/include/opencv2/core/types_c.h	/^CvSlice;$/;"	t	typeref:struct:CvSlice
CvSlice	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSlice$/;"	s
CvSparseMat	/usr/local/include/opencv2/core/types_c.h	/^CvSparseMat;$/;"	t	typeref:struct:CvSparseMat
CvSparseMat	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSparseMat$/;"	s
CvSparseMatIterator	/usr/local/include/opencv2/core/types_c.h	/^CvSparseMatIterator;$/;"	t	typeref:struct:CvSparseMatIterator
CvSparseMatIterator	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSparseMatIterator$/;"	s
CvSparseNode	/usr/local/include/opencv2/core/types_c.h	/^CvSparseNode;$/;"	t	typeref:struct:CvSparseNode
CvSparseNode	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvSparseNode$/;"	s
CvStarDetectorParams	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvStarDetectorParams$/;"	s
CvStarDetectorParams	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvStarDetectorParams;$/;"	t	typeref:struct:CvStarDetectorParams
CvStarKeypoint	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct CvStarKeypoint$/;"	s
CvStarKeypoint	/usr/local/include/opencv2/legacy/compat.hpp	/^} CvStarKeypoint;$/;"	t	typeref:struct:CvStarKeypoint
CvStatModel	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W CvStatModel$/;"	c
CvStatus	/usr/local/include/opencv2/core/internal.hpp	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	/usr/local/include/opencv2/core/internal.hpp	/^typedef enum CvStatus$/;"	g
CvStereoBMState	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^typedef struct CvStereoBMState$/;"	s
CvStereoBMState	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^} CvStereoBMState;$/;"	t	typeref:struct:CvStereoBMState
CvStereoCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvStereoCamera$/;"	s
CvStereoCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvStereoCamera;$/;"	t	typeref:struct:CvStereoCamera
CvStereoGCState	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvStereoGCState$/;"	s
CvStereoGCState	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvStereoGCState;$/;"	t	typeref:struct:CvStereoGCState
CvStereoLineCoeff	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvStereoLineCoeff$/;"	s
CvStereoLineCoeff	/usr/local/include/opencv2/legacy/legacy.hpp	/^}CvStereoLineCoeff;$/;"	t	typeref:struct:CvStereoLineCoeff
CvString	/usr/local/include/opencv2/core/types_c.h	/^CvString;$/;"	t	typeref:struct:CvString
CvString	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvString$/;"	s
CvStringHashNode	/usr/local/include/opencv2/core/types_c.h	/^CvStringHashNode;$/;"	t	typeref:struct:CvStringHashNode
CvStringHashNode	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvStringHashNode$/;"	s
CvSubdiv2D	/usr/local/include/opencv2/imgproc/types_c.h	/^CvSubdiv2D;$/;"	t	typeref:struct:CvSubdiv2D
CvSubdiv2D	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvSubdiv2D$/;"	s
CvSubdiv2DEdge	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef size_t CvSubdiv2DEdge;$/;"	t
CvSubdiv2DPoint	/usr/local/include/opencv2/imgproc/types_c.h	/^CvSubdiv2DPoint;$/;"	t	typeref:struct:CvSubdiv2DPoint
CvSubdiv2DPoint	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef struct CvSubdiv2DPoint$/;"	s
CvSubdiv2DPointLocation	/usr/local/include/opencv2/imgproc/types_c.h	/^CvSubdiv2DPointLocation;$/;"	t	typeref:enum:CvSubdiv2DPointLocation
CvSubdiv2DPointLocation	/usr/local/include/opencv2/imgproc/types_c.h	/^typedef enum CvSubdiv2DPointLocation$/;"	g
CvTemplMatchMethod	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvTemplMatchMethod;$/;"	t
CvTermCriteria	/usr/local/include/opencv2/core/types_c.h	/^CvTermCriteria;$/;"	t	typeref:struct:CvTermCriteria
CvTermCriteria	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvTermCriteria$/;"	s
CvTestSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^typedef void CvTestSeq;$/;"	t
CvThreshType	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef int CvThreshType;$/;"	t
CvTrackbarCallback	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback)(int pos);$/;"	t
CvTrackbarCallback2	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback2)(int pos, void* userdata);$/;"	t
CvTracksTimePos	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^struct CvTracksTimePos$/;"	s
CvTrainTestSplit	/usr/local/include/opencv2/ml/ml.hpp	/^struct CV_EXPORTS CvTrainTestSplit$/;"	s
CvTreeNodeIterator	/usr/local/include/opencv2/core/core_c.h	/^CvTreeNodeIterator;$/;"	t	typeref:struct:CvTreeNodeIterator
CvTreeNodeIterator	/usr/local/include/opencv2/core/core_c.h	/^typedef struct CvTreeNodeIterator$/;"	s
CvType	/usr/local/include/opencv2/core/core_c.h	/^struct CV_EXPORTS CvType$/;"	s
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	s	namespace:cv::flann
CvType	/usr/local/include/opencv2/flann/flann.hpp	/^template <typename T> struct CvType {};$/;"	s	namespace:cv::flann
CvTypeInfo	/usr/local/include/opencv2/core/types_c.h	/^CvTypeInfo;$/;"	t	typeref:struct:CvTypeInfo
CvTypeInfo	/usr/local/include/opencv2/core/types_c.h	/^typedef struct CvTypeInfo$/;"	s
CvUpdateBGStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef int (CV_CDECL * CvUpdateBGStatModel)( IplImage* curr_frame, struct CvBGStatModel* bg_model,$/;"	t
CvVSModule	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^class CV_EXPORTS CvVSModule$/;"	c
CvVect32f	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef float*   CvVect32f;$/;"	t
CvVect64d	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef double*  CvVect64d;$/;"	t
CvVectors	/usr/local/include/opencv2/ml/ml.hpp	/^struct CvVectors$/;"	s
CvVideoWriter	/usr/local/include/opencv2/highgui/highgui_c.h	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvVoronoiDiagram2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvVoronoiDiagram2D$/;"	s
CvVoronoiDiagram2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvVoronoiDiagram2D;$/;"	t	typeref:struct:CvVoronoiDiagram2D
CvVoronoiEdge2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvVoronoiEdge2D$/;"	s
CvVoronoiEdge2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvVoronoiEdge2D;$/;"	t	typeref:struct:CvVoronoiEdge2D
CvVoronoiNode2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvVoronoiNode2D$/;"	s
CvVoronoiNode2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvVoronoiNode2D;$/;"	t	typeref:struct:CvVoronoiNode2D
CvVoronoiSite2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef struct CvVoronoiSite2D$/;"	s
CvVoronoiSite2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^} CvVoronoiSite2D;$/;"	t	typeref:struct:CvVoronoiSite2D
CvWriteFunc	/usr/local/include/opencv2/core/types_c.h	/^typedef void (CV_CDECL *CvWriteFunc)( CvFileStorage* storage, const char* name,$/;"	t
Cv_iplAllocateImageData	/usr/local/include/opencv2/core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplAllocateImageData)(IplImage*,int,int);$/;"	t
Cv_iplCloneImage	/usr/local/include/opencv2/core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCloneImage)(const IplImage*);$/;"	t
Cv_iplCreateImageHeader	/usr/local/include/opencv2/core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCreateImageHeader)$/;"	t
Cv_iplCreateROI	/usr/local/include/opencv2/core/core_c.h	/^typedef IplROI* (CV_STDCALL* Cv_iplCreateROI)(int,int,int,int,int);$/;"	t
Cv_iplDeallocate	/usr/local/include/opencv2/core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplDeallocate)(IplImage*,int);$/;"	t
CvtColorInfo	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^        CvtColorInfo() {}$/;"	f	struct:perf::CvtColorInfo
CvtColorInfo	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^        explicit CvtColorInfo(int scn_, int dcn_, int code_) : scn(scn_), dcn(dcn_), code(code_) {}$/;"	f	struct:perf::CvtColorInfo
CvtColorInfo	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    struct CvtColorInfo$/;"	s	namespace:perf
CylindricalPortraitProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CylindricalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    CylindricalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalPortraitWarper
CylindricalPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalPortraitWarper : public RotationWarperBase<CylindricalPortraitProjector>$/;"	c	namespace:cv::detail
CylindricalProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS CylindricalProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    CylindricalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalWarper
CylindricalWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarper : public RotationWarperBase<CylindricalProjector>$/;"	c	namespace:cv::detail
CylindricalWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class CylindricalWarper: public WarperCreator$/;"	c	namespace:cv
CylindricalWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    CylindricalWarperGpu(float scale) : CylindricalWarper(scale) {}$/;"	f	class:cv::detail::CylindricalWarperGpu
CylindricalWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarperGpu : public CylindricalWarper$/;"	c	namespace:cv::detail
CylindricalWarperGpu	/usr/local/include/opencv2/stitching/warpers.hpp	/^class CylindricalWarperGpu: public WarperCreator$/;"	c	namespace:cv
DCT_INVERSE	/usr/local/include/opencv2/core/core.hpp	/^    DCT_INVERSE = DFT_INVERSE, DCT_ROWS=DFT_ROWS };$/;"	e	enum:cv::__anon30
DCT_ROWS	/usr/local/include/opencv2/core/core.hpp	/^    DCT_INVERSE = DFT_INVERSE, DCT_ROWS=DFT_ROWS };$/;"	e	enum:cv::__anon30
DECOMP_CHOLESKY	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DECOMP_EIG	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DECOMP_LU	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DECOMP_NORMAL	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DECOMP_QR	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DECOMP_SVD	/usr/local/include/opencv2/core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon26
DEFAULT	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum{ DEFAULT = 0, \/\/ Output image matrix will be created (Mat::create),$/;"	e	enum:cv::DrawMatchesFlags::__anon63
DEFAULT	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon294
DEFAULT_COMPRESSION_METHOD	/usr/local/include/opencv2/legacy/legacy.hpp	/^        DEFAULT_COMPRESSION_METHOD = COMPRESSION_NONE$/;"	e	enum:cv::FernClassifier::__anon282
DEFAULT_DEPTH	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const int DEFAULT_DEPTH = 9;$/;"	m	class:cv::RandomizedTree
DEFAULT_FAST_THRESHOLD	/usr/local/include/opencv2/gpu/gpu.hpp	/^        DEFAULT_FAST_THRESHOLD = 20$/;"	e	enum:cv::gpu::ORB_GPU::__anon203
DEFAULT_ITERS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_ITERS    = 8   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon192
DEFAULT_ITERS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_ITERS  = 1 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon197
DEFAULT_ITERS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_ITERS  = 5  };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon189
DEFAULT_ITERS	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_ITERS  = 5  };$/;"	e	enum:cv::ocl::StereoBeliefPropagation::__anon319
DEFAULT_LARGE_SIZE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum { DEFAULT_SMALL_SIZE = 5, DEFAULT_LARGE_SIZE = 41,$/;"	e	enum:cv::SelfSimDescriptor::__anon16
DEFAULT_LEVELS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_LEVELS   = 4   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon193
DEFAULT_LEVELS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_LEVELS = 5  };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon190
DEFAULT_LEVELS	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_LEVELS = 5  };$/;"	e	enum:cv::ocl::StereoBeliefPropagation::__anon320
DEFAULT_MAX_ITERS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::EM::__anon289
DEFAULT_NCLUSTERS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::EM::__anon289
DEFAULT_NDISP	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NDISP    = 128 };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon191
DEFAULT_NDISP	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NDISP  = 64 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon195
DEFAULT_NDISP	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NDISP  = 64 };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon188
DEFAULT_NDISP	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon187
DEFAULT_NDISP	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_NDISP  = 64 };$/;"	e	enum:cv::ocl::StereoBeliefPropagation::__anon318
DEFAULT_NDISP	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::ocl::StereoBM_OCL::__anon317
DEFAULT_NLEVELS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NLEVELS = 64 };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon199
DEFAULT_NLEVELS	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { DEFAULT_NLEVELS=64 };$/;"	e	enum:cv::HOGDescriptor::__anon306
DEFAULT_NLEVELS	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_NLEVELS = 64 };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon311
DEFAULT_NR_PLANE	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NR_PLANE = 4   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon194
DEFAULT_NUM_ANGLES	/usr/local/include/opencv2/contrib/contrib.hpp	/^            DEFAULT_NUM_ANGLES = 20, DEFAULT_START_DISTANCE_BUCKET = 3,$/;"	e	enum:cv::SelfSimDescriptor::__anon16
DEFAULT_NUM_DISTANCE_BUCKETS	/usr/local/include/opencv2/contrib/contrib.hpp	/^            DEFAULT_NUM_DISTANCE_BUCKETS = 7 };$/;"	e	enum:cv::SelfSimDescriptor::__anon16
DEFAULT_NUM_QUANT_BITS	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const size_t DEFAULT_NUM_QUANT_BITS = 4;$/;"	m	class:cv::RTreeClassifier
DEFAULT_RADIUS	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_RADIUS = 3 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon196
DEFAULT_REDUCED_NUM_DIM	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const size_t DEFAULT_REDUCED_NUM_DIM = 176;$/;"	m	class:cv::RandomizedTree
DEFAULT_SIGNATURE_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        DEFAULT_SIGNATURE_SIZE = 176,$/;"	e	enum:cv::FernClassifier::__anon282
DEFAULT_SMALL_SIZE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum { DEFAULT_SMALL_SIZE = 5, DEFAULT_LARGE_SIZE = 41,$/;"	e	enum:cv::SelfSimDescriptor::__anon16
DEFAULT_START_DISTANCE_BUCKET	/usr/local/include/opencv2/contrib/contrib.hpp	/^            DEFAULT_NUM_ANGLES = 20, DEFAULT_START_DISTANCE_BUCKET = 3,$/;"	e	enum:cv::SelfSimDescriptor::__anon16
DEFAULT_STRUCTS	/usr/local/include/opencv2/legacy/legacy.hpp	/^        DEFAULT_STRUCTS = 50,$/;"	e	enum:cv::FernClassifier::__anon282
DEFAULT_STRUCT_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        DEFAULT_STRUCT_SIZE = 9,$/;"	e	enum:cv::FernClassifier::__anon282
DEFAULT_TREES	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const int DEFAULT_TREES = 48;$/;"	m	class:cv::RTreeClassifier
DEFAULT_VIEWS	/usr/local/include/opencv2/legacy/legacy.hpp	/^        DEFAULT_VIEWS = 5000,$/;"	e	enum:cv::FernClassifier::__anon282
DEFAULT_VIEWS	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const int DEFAULT_VIEWS = 5000;$/;"	m	class:cv::RandomizedTree
DEFAULT_WINSZ	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon187
DEFAULT_WINSZ	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::ocl::StereoBM_OCL::__anon317
DEFAULT_WIN_SIGMA	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DEFAULT_WIN_SIGMA = -1 };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon198
DEFAULT_WIN_SIGMA	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DEFAULT_WIN_SIGMA = -1 };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon310
DEF_PARAM_TEST	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define DEF_PARAM_TEST(/;"	d
DEF_PARAM_TEST_1	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define DEF_PARAM_TEST_1(/;"	d
DEGREE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
DEPTH_COMPONENT	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        DEPTH_COMPONENT = 0x1902, \/\/!< Depth$/;"	e	enum:cv::ogl::Texture2D::Format
DEPTH_PAIRS	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define DEPTH_PAIRS /;"	d
DESCR_FORMAT_COL_BY_COL	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon200
DESCR_FORMAT_COL_BY_COL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon312
DESCR_FORMAT_ROW_BY_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon200
DESCR_FORMAT_ROW_BY_ROW	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon312
DEVIANCE_LOSS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon295
DEVICE_MEM_AHP	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_AHP,         \/\/alloc host pointer$/;"	e	enum:cv::ocl::DevMemType
DEVICE_MEM_CHP	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_CHP,         \/\/copy host pointer$/;"	e	enum:cv::ocl::DevMemType
DEVICE_MEM_DEFAULT	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_DEFAULT = 0,$/;"	e	enum:cv::ocl::DevMemType
DEVICE_MEM_PM	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_PM           \/\/persistent memory$/;"	e	enum:cv::ocl::DevMemType
DEVICE_MEM_R_ONLY	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_R_ONLY,$/;"	e	enum:cv::ocl::DevMemRW
DEVICE_MEM_R_W	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_R_W = 0,$/;"	e	enum:cv::ocl::DevMemRW
DEVICE_MEM_UHP	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_UHP,         \/\/use host pointer$/;"	e	enum:cv::ocl::DevMemType
DEVICE_MEM_W_ONLY	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DEVICE_MEM_W_ONLY$/;"	e	enum:cv::ocl::DevMemRW
DFT_COMPLEX_OUTPUT	/usr/local/include/opencv2/core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon30
DFT_INVERSE	/usr/local/include/opencv2/core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon30
DFT_REAL_OUTPUT	/usr/local/include/opencv2/core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon30
DFT_ROWS	/usr/local/include/opencv2/core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon30
DFT_SCALE	/usr/local/include/opencv2/core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon30
DIFFERENT_SIZES	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define DIFFERENT_SIZES /;"	d
DIMode	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       DIMode;          \/\/    NVVE_SET_DEINTERLACE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DIRECT_INVERSE	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define DIRECT_INVERSE /;"	d
DISCRETE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon293
DISP_SCALE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DISP_SHIFT=4, DISP_SCALE = (1<<DISP_SHIFT) };$/;"	e	enum:cv::StereoSGBM::__anon10
DISP_SHIFT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DISP_SHIFT=4, DISP_SCALE = (1<<DISP_SHIFT) };$/;"	e	enum:cv::StereoSGBM::__anon10
DIST_LABEL_CCOMP	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    DIST_LABEL_CCOMP = 0,$/;"	e	enum:cv::__anon240
DIST_LABEL_PIXEL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    DIST_LABEL_PIXEL = 1$/;"	e	enum:cv::__anon240
DMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_WRAP DMatch( int _queryIdx, int _trainIdx, float _distance ) :$/;"	f	struct:cv::DMatch
DMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_WRAP DMatch( int _queryIdx, int _trainIdx, int _imgIdx, float _distance ) :$/;"	f	struct:cv::DMatch
DMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_WRAP DMatch() : queryIdx(-1), trainIdx(-1), imgIdx(-1), distance(FLT_MAX) {}$/;"	f	struct:cv::DMatch
DMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS_W_SIMPLE DMatch$/;"	s	namespace:cv
DONE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon2
DO_CANNY_PRUNING	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { DO_CANNY_PRUNING = 1, SCALE_IMAGE = 2,$/;"	e	enum:cv::CascadeClassifier::__anon304
DO_ROUGH_SEARCH	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^           FIND_BIGGEST_OBJECT = 4, DO_ROUGH_SEARCH = 8 };$/;"	e	enum:cv::CascadeClassifier::__anon304
DP	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int DP;$/;"	m	struct:CvConDensation
DP	/usr/local/include/opencv2/video/tracking.hpp	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman
DRAW_OVER_OUTIMG	/usr/local/include/opencv2/features2d/features2d.hpp	/^          DRAW_OVER_OUTIMG = 1, \/\/ Output image matrix will not be created (Mat::create).$/;"	e	enum:cv::DrawMatchesFlags::__anon63
DRAW_RICH_KEYPOINTS	/usr/local/include/opencv2/features2d/features2d.hpp	/^          DRAW_RICH_KEYPOINTS = 4 \/\/ For each keypoint the circle around keypoint with keypoint size and$/;"	e	enum:cv::DrawMatchesFlags::__anon63
DTree	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        struct CV_EXPORTS DTree$/;"	s	class:cv::CascadeClassifier::Data
DTreeNode	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        struct CV_EXPORTS DTreeNode$/;"	s	class:cv::CascadeClassifier::Data
DTreeParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvDTreeParams DTreeParams;$/;"	t	namespace:cv
DXY	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        DXY() : dist(0), x(0), y(0) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        DXY(float _dist, int _x, int _y) : dist(_dist), x(_x), y(_y) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    struct DXY$/;"	s	class:cv::videostab::FastMarchingMethod
DYNAMIC_PARALLELISM	/usr/local/include/opencv2/core/gpumat.hpp	/^        DYNAMIC_PARALLELISM = FEATURE_SET_COMPUTE_35$/;"	e	enum:cv::gpu::FeatureSet
Data	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    class Data$/;"	c	class:cv::CascadeClassifier
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS DataDepth {};$/;"	c	namespace:cv
DataDepth	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	c	namespace:cv
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype {};$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	s	namespace:cvflann
Datatype	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	s	namespace:cvflann
DeathTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeblockMode	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       DeblockMode;     \/\/    NVVE_DEBLOCK_MODE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DeblurerBase	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    DeblurerBase() : radius_(0), frames_(0), motions_(0) {}$/;"	f	class:cv::videostab::DeblurerBase
DeblurerBase	/usr/local/include/opencv2/videostab/deblurring.hpp	/^class CV_EXPORTS DeblurerBase$/;"	c	namespace:cv::videostab
DecisionTree	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvDTree DecisionTree;$/;"	t	namespace:cv
DefaultBinaryShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <typename T1, typename T2, typename D> struct DefaultBinaryShift$/;"	s	namespace:cv::gpu::device::functional_detail
DefaultDeathTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultPrintNonContainerTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultRngAuto	/usr/local/include/opencv2/ts/ts.hpp	/^    DefaultRngAuto() : old_state(cv::theRNG().state) { cv::theRNG().state = (uint64)-1; }$/;"	f	struct:cvtest::DefaultRngAuto
DefaultRngAuto	/usr/local/include/opencv2/ts/ts.hpp	/^struct CV_EXPORTS DefaultRngAuto$/;"	s	namespace:cvtest
DefaultTransformFunctorTraits	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Func> struct DefaultTransformFunctorTraits$/;"	s	namespace:cv::gpu::device
DefaultTransformShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Func> struct DefaultTransformShift$/;"	s	namespace:cv::gpu::device
DefaultUnaryShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <typename T, typename D> struct DefaultUnaryShift$/;"	s	namespace:cv::gpu::device::functional_detail
DelBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void DelBlob(int BlobIndex)$/;"	f	class:CvBlobSeq
DelBlobByID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void DelBlobByID(int BlobID)$/;"	f	class:CvBlobSeq
DeleteSelf_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
DenseFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS DenseFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
DenseOpticalFlow	/usr/local/include/opencv2/video/tracking.hpp	/^class CV_EXPORTS DenseOpticalFlow : public Algorithm$/;"	c	namespace:cv
DenseOpticalFlowExt	/usr/local/include/opencv2/superres/optical_flow.hpp	/^        class CV_EXPORTS DenseOpticalFlowExt : public cv::Algorithm$/;"	c	namespace:cv::superres
DensePyrLkOptFlowEstimatorGpu	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^class CV_EXPORTS DensePyrLkOptFlowEstimatorGpu$/;"	c	namespace:cv::videostab
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<double>::Depth() const {return IPL_DEPTH_64F; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<float>::Depth() const {return IPL_DEPTH_32F; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<int>::Depth() const {return IPL_DEPTH_32S; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<short>::Depth() const {return IPL_DEPTH_16S; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<signed char>::Depth() const {return IPL_DEPTH_8S; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<uchar>::Depth() const {return IPL_DEPTH_8U; }$/;"	f	class:cv::WImage
Depth	/usr/local/include/opencv2/core/wimage.hpp	/^inline int WImage<ushort>::Depth() const {return IPL_DEPTH_16U; }$/;"	f	class:cv::WImage
DepthNormal	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS DepthNormal : public Modality$/;"	c	namespace:cv::linemod
DescriptionPair	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct DescriptionPair$/;"	s	class:cv::FREAK
DescriptorCollection	/usr/local/include/opencv2/features2d/features2d.hpp	/^    class CV_EXPORTS DescriptorCollection$/;"	c	class:cv::DescriptorMatcher
DescriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W DescriptorExtractor : public virtual Algorithm$/;"	c	namespace:cv
DescriptorMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W DescriptorMatcher : public Algorithm$/;"	c	namespace:cv
DetectionBasedTracker	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^class DetectionBasedTracker$/;"	c
DetectionROI	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct DetectionROI$/;"	s	namespace:cv
Detector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS Detector$/;"	c	namespace:cv::linemod
DevMem2D	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef DevMem2Db DevMem2D;$/;"	t	namespace:cv::gpu
DevMem2D_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            DevMem2D_() {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            DevMem2D_(int rows_, int cols_, T* data_, size_t step_) : PtrStepSz<T>(rows_, cols_, data_, step_) {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            explicit __CV_GPU_DEPR_BEFORE__ DevMem2D_(const DevMem2D_<U>& d) : PtrStepSz<T>(d.rows, d.cols, (T*)d.data, d.step) {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template <typename T> struct __CV_GPU_DEPR_BEFORE__ DevMem2D_ : public PtrStepSz<T>$/;"	s	namespace:cv::gpu
DevMem2Db	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef DevMem2D_<unsigned char> DevMem2Db;$/;"	t	namespace:cv::gpu
DevMem2Df	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef DevMem2D_<float> DevMem2Df;$/;"	t	namespace:cv::gpu
DevMem2Di	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef DevMem2D_<int> DevMem2Di;$/;"	t	namespace:cv::gpu
DevMemRW	/usr/local/include/opencv2/ocl/ocl.hpp	/^        enum DevMemRW$/;"	g	namespace:cv::ocl
DevMemType	/usr/local/include/opencv2/ocl/ocl.hpp	/^        enum DevMemType$/;"	g	namespace:cv::ocl
DevPtr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ DevPtr() : data(0) {}$/;"	f	struct:cv::gpu::DevPtr
DevPtr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ DevPtr(T* data_) : data(data_) {}$/;"	f	struct:cv::gpu::DevPtr
DevPtr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template<typename T> struct DevPtr$/;"	s	namespace:cv::gpu
DeviceInfo	/usr/local/include/opencv2/core/gpumat.hpp	/^        DeviceInfo() : device_id_(getDevice()) { query(); }$/;"	f	class:cv::gpu::DeviceInfo
DeviceInfo	/usr/local/include/opencv2/core/gpumat.hpp	/^        DeviceInfo(int device_id) : device_id_(device_id) { query(); }$/;"	f	class:cv::gpu::DeviceInfo
DeviceInfo	/usr/local/include/opencv2/core/gpumat.hpp	/^    class CV_EXPORTS DeviceInfo$/;"	c	namespace:cv::gpu
DeviceManager	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    class CV_EXPORTS DeviceManager$/;"	c	namespace:cvtest
DeviceName	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<string> DeviceName;$/;"	m	class:cv::ocl::Info
Directory	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS Directory$/;"	c	namespace:cv
DisableCabac	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       DisableCabac;    \/\/    NVVE_DISABLE_CABAC,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DisableSPSPPS	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       DisableSPSPPS;   \/\/    NVVE_DISABLE_SPS_PPS$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DisjointSets	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    DisjointSets(int elem_count = 0) { createOneElemSets(elem_count); }$/;"	f	class:cv::detail::DisjointSets
DisjointSets	/usr/local/include/opencv2/stitching/detail/util.hpp	/^class CV_EXPORTS DisjointSets$/;"	c	namespace:cv::detail
DisparityBilateralFilter	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS DisparityBilateralFilter$/;"	c	namespace:cv::gpu
Dispatcher	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <unsigned int N> struct Dispatcher$/;"	s	namespace:cv::gpu::device::reduce_detail
Dispatcher	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct Dispatcher$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
DistIndex	/usr/local/include/opencv2/flann/result_set.h	/^        DistIndex(DistanceType dist, unsigned int index) :$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
DistIndex	/usr/local/include/opencv2/flann/result_set.h	/^    struct DistIndex$/;"	s	class:cvflann::UniqueResultSet
DistIndex	/usr/local/include/opencv2/flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::KNNUniqueResultSet
DistIndex	/usr/local/include/opencv2/flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::RadiusUniqueResultSet
DistType	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	g	class:cv::gpu::BruteForceMatcher_GPU_base
DistType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	g	class:cv::ocl::BruteForceMatcher_OCL_base
DistanceBetweenSignAndMagnitudeNumbers	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DistanceType	/usr/local/include/opencv2/flann/autotuned_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::AutotunedIndex
DistanceType	/usr/local/include/opencv2/flann/composite_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::CompositeIndex
DistanceType	/usr/local/include/opencv2/flann/flann.hpp	/^        typedef typename Distance::ResultType DistanceType;$/;"	t	class:cv::flann::GenericIndex
DistanceType	/usr/local/include/opencv2/flann/flann.hpp	/^        typedef typename L2<T>::ResultType DistanceType;$/;"	t	class:cv::flann::Index_
DistanceType	/usr/local/include/opencv2/flann/flann_base.hpp	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::Index
DistanceType	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
DistanceType	/usr/local/include/opencv2/flann/kdtree_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeIndex
DistanceType	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeSingleIndex
DistanceType	/usr/local/include/opencv2/flann/kmeans_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KMeansIndex
DistanceType	/usr/local/include/opencv2/flann/linear_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LinearIndex
DistanceType	/usr/local/include/opencv2/flann/lsh_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LshIndex
DistanceType	/usr/local/include/opencv2/flann/nn_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::NNIndex
Double	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    double              Double;$/;"	m	struct:CvDefParam
Double	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DownCast_	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DpSeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS DpSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
DrawMatchesFlags	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS DrawMatchesFlags$/;"	s	namespace:cv
Dx_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat Dx_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
Dy_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat Dy_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
DynamMatr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation
DynamMatr	/usr/local/include/opencv2/video/tracking.hpp	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman
DynamicAdaptedFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS DynamicAdaptedFeatureDetector: public FeatureDetector$/;"	c	namespace:cv
DynamicBitset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    DynamicBitset()$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    DynamicBitset(size_t sz)$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^class DynamicBitset$/;"	c	namespace:cvflann
DynamicBitset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^typedef boost::dynamic_bitset<> DynamicBitset;$/;"	t
DynamicGOP	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       DynamicGOP;      \/\/    NVVE_DYNAMIC_GOP,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DynamicSharedMem	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^    template<> struct DynamicSharedMem<double>$/;"	s	namespace:cv::gpu::device
DynamicSharedMem	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^    template<class T> struct DynamicSharedMem$/;"	s	namespace:cv::gpu::device
ELEMENT_ARRAY_BUFFER	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        ELEMENT_ARRAY_BUFFER = 0x8893, \/\/!< The buffer will be used for indices (in glDrawElements, for example)$/;"	e	enum:cv::ogl::Buffer::Target
ELLIPSE	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon271
EM	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon22
EM	/usr/local/include/opencv2/ml/ml.hpp	/^class CV_EXPORTS_W EM : public Algorithm$/;"	c	namespace:cv
EMParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef CvEMParams EMParams;$/;"	t	namespace:cv
ENABLE_LOG	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define ENABLE_LOG /;"	d
EPNP	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    EPNP=CV_EPNP,$/;"	e	enum:cv::__anon4
EPS_SVR	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon285
ERROR_ABSOLUTE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    ERROR_ABSOLUTE = 0,$/;"	e	enum:perf::ERROR_TYPE
ERROR_RELATIVE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    ERROR_RELATIVE = 1$/;"	e	enum:perf::ERROR_TYPE
ERROR_TYPE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^enum ERROR_TYPE$/;"	g	namespace:perf
ERR_NEED_MORE_IMGS	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	e	enum:cv::Stitcher::Status
ERTree	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvForestERTree ERTree;$/;"	t	namespace:cv
ERTreeTRainData	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvERTreeTrainData ERTreeTRainData;$/;"	t	namespace:cv
ERTrees	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvERTrees ERTrees;$/;"	t	namespace:cv
ETAyx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat ETAyx;$/;"	m	class:cv::LogPolar_Interp
ETAyx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat ETAyx;$/;"	m	class:cv::LogPolar_Overlapping
EUCLIDEAN	/usr/local/include/opencv2/flann/defines.h	/^    EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
EVENT_FLAG_ALTKEY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_ALTKEY    =32$/;"	e	enum:cv::__anon207
EVENT_FLAG_CTRLKEY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:cv::__anon207
EVENT_FLAG_LBUTTON	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:cv::__anon207
EVENT_FLAG_MBUTTON	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:cv::__anon207
EVENT_FLAG_RBUTTON	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:cv::__anon207
EVENT_FLAG_SHIFTKEY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:cv::__anon207
EVENT_LBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:cv::__anon206
EVENT_LBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_LBUTTONDOWN    =1,$/;"	e	enum:cv::__anon206
EVENT_LBUTTONUP	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_LBUTTONUP      =4,$/;"	e	enum:cv::__anon206
EVENT_MBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_MBUTTONDBLCLK  =9$/;"	e	enum:cv::__anon206
EVENT_MBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_MBUTTONDOWN    =3,$/;"	e	enum:cv::__anon206
EVENT_MBUTTONUP	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_MBUTTONUP      =6,$/;"	e	enum:cv::__anon206
EVENT_MOUSEMOVE	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_MOUSEMOVE      =0,$/;"	e	enum:cv::__anon206
EVENT_RBUTTONDBLCLK	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:cv::__anon206
EVENT_RBUTTONDOWN	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_RBUTTONDOWN    =2,$/;"	e	enum:cv::__anon206
EVENT_RBUTTONUP	/usr/local/include/opencv2/highgui/highgui.hpp	/^    EVENT_RBUTTONUP      =5,$/;"	e	enum:cv::__anon206
EXCLUSIVE	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::gpu::device::ScanKind
EXECUTE_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXIT	/usr/local/include/opencv2/core/internal.hpp	/^#define EXIT /;"	d
EXPECT_ANY_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_ANY_THROW(/;"	d
EXPECT_DEATH	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define EXPECT_DEATH(/;"	d
EXPECT_DEATH_IF_SUPPORTED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define EXPECT_DEATH_IF_SUPPORTED(/;"	d
EXPECT_DEBUG_DEATH	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define EXPECT_DEBUG_DEATH(/;"	d
EXPECT_DOUBLE_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_DOUBLE_EQ(/;"	d
EXPECT_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_EQ(/;"	d
EXPECT_EXIT	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define EXPECT_EXIT(/;"	d
EXPECT_FALSE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_FALSE(/;"	d
EXPECT_FLOAT_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_FLOAT_EQ(/;"	d
EXPECT_GE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_GE(/;"	d
EXPECT_GT	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_GT(/;"	d
EXPECT_HRESULT_FAILED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define EXPECT_HRESULT_FAILED(/;"	d
EXPECT_HRESULT_SUCCEEDED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define EXPECT_HRESULT_SUCCEEDED(/;"	d
EXPECT_LE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_LE(/;"	d
EXPECT_LT	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_LT(/;"	d
EXPECT_MAT_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define EXPECT_MAT_NEAR(/;"	d
EXPECT_MAT_SIMILAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define EXPECT_MAT_SIMILAR(/;"	d
EXPECT_NE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_NE(/;"	d
EXPECT_NEAR	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_NEAR(/;"	d
EXPECT_NO_FATAL_FAILURE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_NO_FATAL_FAILURE(/;"	d
EXPECT_NO_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_NO_THROW(/;"	d
EXPECT_POINT2_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define EXPECT_POINT2_NEAR(/;"	d
EXPECT_POINT3_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define EXPECT_POINT3_NEAR(/;"	d
EXPECT_PRED1	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED1(/;"	d
EXPECT_PRED2	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED2(/;"	d
EXPECT_PRED3	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED3(/;"	d
EXPECT_PRED4	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED4(/;"	d
EXPECT_PRED5	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED5(/;"	d
EXPECT_PRED_FORMAT1	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED_FORMAT1(/;"	d
EXPECT_PRED_FORMAT2	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED_FORMAT2(/;"	d
EXPECT_PRED_FORMAT3	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED_FORMAT3(/;"	d
EXPECT_PRED_FORMAT4	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED_FORMAT4(/;"	d
EXPECT_PRED_FORMAT5	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_PRED_FORMAT5(/;"	d
EXPECT_SCALAR_NEAR	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define EXPECT_SCALAR_NEAR(/;"	d
EXPECT_STRCASEEQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_STRCASEEQ(/;"	d
EXPECT_STRCASENE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_STRCASENE(/;"	d
EXPECT_STREQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_STREQ(/;"	d
EXPECT_STRNE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_STRNE(/;"	d
EXPECT_THROW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_THROW(/;"	d
EXPECT_TRUE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define EXPECT_TRUE(/;"	d
ElementType	/usr/local/include/opencv2/flann/autotuned_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::AutotunedIndex
ElementType	/usr/local/include/opencv2/flann/composite_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::CompositeIndex
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::ChiSquareDistance
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming2
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HellingerDistance
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HistIntersectionDistance
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::KL_Divergence
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L1
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2_Simple
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MaxDistance
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MinkowskiDistance
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef unsigned char ElementType;$/;"	t	struct:cvflann::HammingLUT
ElementType	/usr/local/include/opencv2/flann/dist.h	/^    typedef unsigned char ElementType;$/;"	t	struct:cvflann::HammingLUT2
ElementType	/usr/local/include/opencv2/flann/flann.hpp	/^        typedef typename Distance::ElementType ElementType;$/;"	t	class:cv::flann::GenericIndex
ElementType	/usr/local/include/opencv2/flann/flann.hpp	/^        typedef typename L2<T>::ElementType ElementType;$/;"	t	class:cv::flann::Index_
ElementType	/usr/local/include/opencv2/flann/flann_base.hpp	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::Index
ElementType	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
ElementType	/usr/local/include/opencv2/flann/kdtree_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeIndex
ElementType	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeSingleIndex
ElementType	/usr/local/include/opencv2/flann/kmeans_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KMeansIndex
ElementType	/usr/local/include/opencv2/flann/linear_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LinearIndex
ElementType	/usr/local/include/opencv2/flann/lsh_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LshIndex
ElementType	/usr/local/include/opencv2/flann/nn_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::NNIndex
EmptyMeshException	/usr/local/include/opencv2/contrib/contrib.hpp	/^        struct EmptyMeshException {};$/;"	s	class:cv::Mesh3D
EmptyTestEventListener	/usr/local/include/opencv2/ts/ts_gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
Emulation	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^    struct Emulation$/;"	s	namespace:cv::gpu::device
EnableIf	/usr/local/include/opencv2/ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
EncoderCallBack	/usr/local/include/opencv2/gpu/gpu.hpp	/^    class CV_EXPORTS EncoderCallBack$/;"	c	class:cv::gpu::VideoWriter_GPU
EncoderParams	/usr/local/include/opencv2/gpu/gpu.hpp	/^    struct CV_EXPORTS EncoderParams$/;"	s	class:cv::gpu::VideoWriter_GPU
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
Environment	/usr/local/include/opencv2/ts/ts_gtest.h	/^class Environment {$/;"	c	namespace:testing
EqHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
ErrorCallback	/usr/local/include/opencv2/core/core.hpp	/^typedef int (CV_CDECL *ErrorCallback)( int status, const char* func_name,$/;"	t	namespace:cv
Estimator	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS Estimator$/;"	c	namespace:cv::detail
Exception	/usr/local/include/opencv2/core/core.hpp	/^class CV_EXPORTS Exception : public std::exception$/;"	c	namespace:cv
ExitedWithCode	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExpectationMaximization	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef CvEM ExpectationMaximization;$/;"	t	namespace:cv
ExposureCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS ExposureCompensator$/;"	c	namespace:cv::detail
FAIL	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define FAIL(/;"	d
FAIL_ARITHM_EXCEPTION	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_ARITHM_EXCEPTION=-6,$/;"	e	enum:cvtest::TS::__anon329
FAIL_BAD_ACCURACY	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_BAD_ACCURACY=-12,$/;"	e	enum:cvtest::TS::__anon329
FAIL_BAD_ARG_CHECK	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_BAD_ARG_CHECK=-14,$/;"	e	enum:cvtest::TS::__anon329
FAIL_ERROR_IN_CALLED_FUNC	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_ERROR_IN_CALLED_FUNC=-3,$/;"	e	enum:cvtest::TS::__anon329
FAIL_EXCEPTION	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_EXCEPTION=-4,$/;"	e	enum:cvtest::TS::__anon329
FAIL_GENERIC	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_GENERIC=-1,$/;"	e	enum:cvtest::TS::__anon329
FAIL_HANG	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_HANG=-13,$/;"	e	enum:cvtest::TS::__anon329
FAIL_INVALID_OUTPUT	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_INVALID_OUTPUT=-10,$/;"	e	enum:cvtest::TS::__anon329
FAIL_INVALID_TEST_DATA	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_INVALID_TEST_DATA=-15,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MEMORY_CORRUPTION_BEGIN	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MEMORY_CORRUPTION_BEGIN=-7,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MEMORY_CORRUPTION_END	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MEMORY_CORRUPTION_END=-8,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MEMORY_EXCEPTION	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MEMORY_EXCEPTION=-5,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MEMORY_LEAK	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MEMORY_LEAK=-9,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MISMATCH	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MISMATCH=-11,$/;"	e	enum:cvtest::TS::__anon329
FAIL_MISSING_TEST_DATA	/usr/local/include/opencv2/ts/ts.hpp	/^        FAIL_MISSING_TEST_DATA=-2,$/;"	e	enum:cvtest::TS::__anon329
FAIL_NO_CPU	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define FAIL_NO_CPU(/;"	d
FALSE	/usr/local/include/opencv2/core/internal.hpp	/^#  define FALSE /;"	d
FAST_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FAST_GPU$/;"	c	namespace:cv::gpu
FAST_SCORE	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon55
FClose	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FEATHER	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon323
FEATURE_SET_COMPUTE_10	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_10 = 10,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_11	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_11 = 11,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_12	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_12 = 12,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_13	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_13 = 13,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_20	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_20 = 20,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_21	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_21 = 21,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_30	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_30 = 30,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_35	/usr/local/include/opencv2/core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_35 = 35,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SIZE	/usr/local/include/opencv2/gpu/gpu.hpp	/^    static const int FEATURE_SIZE = 7;$/;"	m	class:cv::gpu::FAST_GPU
FGDStatModel	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FGDStatModel$/;"	c	namespace:cv::gpu
FGTrainFrames	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int                     FGTrainFrames; \/* Number of frames needed for FG (foreground) detector to train.        *\/$/;"	m	struct:CvBlobTrackerAutoParam1
FIND_BIGGEST_OBJECT	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^           FIND_BIGGEST_OBJECT = 4, DO_ROUGH_SEARCH = 8 };$/;"	e	enum:cv::CascadeClassifier::__anon304
FIRST	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
FISH_EYE_PRESET	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon9
FLANNException	/usr/local/include/opencv2/flann/general.h	/^    FLANNException(const char* message) : std::runtime_error(message) { }$/;"	f	class:cvflann::FLANNException
FLANNException	/usr/local/include/opencv2/flann/general.h	/^    FLANNException(const std::string& message) : std::runtime_error(message) { }$/;"	f	class:cvflann::FLANNException
FLANNException	/usr/local/include/opencv2/flann/general.h	/^class FLANNException : public std::runtime_error$/;"	c	namespace:cvflann
FLANN_ARRAY_LEN	/usr/local/include/opencv2/flann/defines.h	/^#define FLANN_ARRAY_LEN(/;"	d
FLANN_ARRAY_LEN	/usr/local/include/opencv2/flann/defines.h	/^#undef FLANN_ARRAY_LEN$/;"	d
FLANN_CENTERS_GONZALES	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_KMEANSPP	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_CENTERS_KMEANSPP = 2,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_RANDOM	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CHECKS_AUTOTUNED	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_CHECKS_AUTOTUNED = -2$/;"	e	enum:cvflann::__anon64
FLANN_CHECKS_UNLIMITED	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_CHECKS_UNLIMITED = -1,$/;"	e	enum:cvflann::__anon64
FLANN_DEPRECATED	/usr/local/include/opencv2/flann/defines.h	/^#define FLANN_DEPRECATED /;"	d
FLANN_DEPRECATED	/usr/local/include/opencv2/flann/defines.h	/^#define FLANN_DEPRECATED$/;"	d
FLANN_DEPRECATED	/usr/local/include/opencv2/flann/defines.h	/^#undef FLANN_DEPRECATED$/;"	d
FLANN_DISTANCE_CHECK	/usr/local/include/opencv2/flann/flann.hpp	/^#define FLANN_DISTANCE_CHECK /;"	d
FLANN_DIST_CHI_SQUARE	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_CHI_SQUARE = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_CS	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_EUCLIDEAN	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HAMMING	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_HAMMING          = 9,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HELLINGER	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HIST_INTERSECT	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KL	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_KL                = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KULLBACK_LEIBLER	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_KULLBACK_LEIBLER  = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L1	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_L1 = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L2	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_L2 = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MANHATTAN	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MAX	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_MAX   = 4,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MINKOWSKI	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_DIST_MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
FLANN_EXPORT	/usr/local/include/opencv2/flann/defines.h	/^  #define FLANN_EXPORT /;"	d
FLANN_EXPORT	/usr/local/include/opencv2/flann/defines.h	/^  #define FLANN_EXPORT$/;"	d
FLANN_EXPORT	/usr/local/include/opencv2/flann/defines.h	/^ #define FLANN_EXPORT$/;"	d
FLANN_EXPORT	/usr/local/include/opencv2/flann/defines.h	/^#undef FLANN_EXPORT$/;"	d
FLANN_FLOAT32	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_FLOAT32 = 8,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_FLOAT64	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_FLOAT64 = 9$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INDEX_AUTOTUNED	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_AUTOTUNED = 255,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_COMPOSITE	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_HIERARCHICAL	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_HIERARCHICAL = 5,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE_SINGLE	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KMEANS	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LINEAR	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LSH	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_LSH = 6,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_SAVED	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INDEX_SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INT16	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INT16 = 1,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT32	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INT32 = 2,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT64	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INT64 = 3,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT8	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_INT8 = 0,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_LOG_ERROR	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_LOG_ERROR = 2,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_FATAL	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_LOG_FATAL = 1,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_INFO	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_LOG_INFO = 4$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_NONE	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_LOG_NONE = 0,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_WARN	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_LOG_WARN = 3,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_PLATFORM_32_BIT	/usr/local/include/opencv2/flann/defines.h	/^#define FLANN_PLATFORM_32_BIT$/;"	d
FLANN_PLATFORM_32_BIT	/usr/local/include/opencv2/flann/defines.h	/^#undef FLANN_PLATFORM_32_BIT$/;"	d
FLANN_PLATFORM_64_BIT	/usr/local/include/opencv2/flann/defines.h	/^#define FLANN_PLATFORM_64_BIT$/;"	d
FLANN_PLATFORM_64_BIT	/usr/local/include/opencv2/flann/defines.h	/^#undef FLANN_PLATFORM_64_BIT$/;"	d
FLANN_SIGNATURE_	/usr/local/include/opencv2/flann/saving.h	/^#define FLANN_SIGNATURE_ /;"	d
FLANN_SIGNATURE_	/usr/local/include/opencv2/flann/saving.h	/^#undef FLANN_SIGNATURE_$/;"	d
FLANN_UINT16	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_UINT16 = 5,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT32	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_UINT32 = 6,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT64	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_UINT64 = 7,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT8	/usr/local/include/opencv2/flann/defines.h	/^    FLANN_UINT8 = 4,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_USE_BOOST	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^#  define FLANN_USE_BOOST /;"	d
FLANN_VERSION_	/usr/local/include/opencv2/flann/config.h	/^#define FLANN_VERSION_ /;"	d
FLANN_VERSION_	/usr/local/include/opencv2/flann/config.h	/^#undef FLANN_VERSION_$/;"	d
FLOODFILL_FIXED_RANGE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { FLOODFILL_FIXED_RANGE = 1 << 16, FLOODFILL_MASK_ONLY = 1 << 17 };$/;"	e	enum:cv::__anon241
FLOODFILL_MASK_ONLY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { FLOODFILL_FIXED_RANGE = 1 << 16, FLOODFILL_MASK_ONLY = 1 << 17 };$/;"	e	enum:cv::__anon241
FM_7POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    FM_7POINT = CV_FM_7POINT, \/\/!< 7-point algorithm$/;"	e	enum:cv::__anon8
FM_8POINT	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    FM_8POINT = CV_FM_8POINT, \/\/!< 8-point algorithm$/;"	e	enum:cv::__anon8
FM_LMEDS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    FM_LMEDS = CV_FM_LMEDS,  \/\/!< least-median algorithm$/;"	e	enum:cv::__anon8
FM_RANSAC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    FM_RANSAC = CV_FM_RANSAC  \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon8
FOpen	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FREAK	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS FREAK : public DescriptorExtractor$/;"	c	namespace:cv
FRIEND_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define FRIEND_TEST(/;"	d
FReopen	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
FabMap	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap {$/;"	c	namespace:cv::of2
FabMap1	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap1: public FabMap {$/;"	c	namespace:cv::of2
FabMap2	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap2: public FabMap {$/;"	c	namespace:cv::of2
FabMapFBO	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS FabMapFBO: public FabMap {$/;"	c	namespace:cv::of2
FabMapLUT	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^class CV_EXPORTS FabMapLUT: public FabMap {$/;"	c	namespace:cv::of2
FaceRecognizer	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS_W FaceRecognizer : public Algorithm$/;"	c	namespace:cv
Failed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
False	/usr/local/include/opencv2/flann/dist.h	/^#undef False$/;"	d
False	/usr/local/include/opencv2/flann/dist.h	/^class False$/;"	c	namespace:cvflann
FarnebackOpticalFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^    FarnebackOpticalFlow()$/;"	f	class:cv::gpu::FarnebackOpticalFlow
FarnebackOpticalFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FarnebackOpticalFlow$/;"	c	namespace:cv::gpu
FastAdjuster	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS FastAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
FastFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W FastFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
FastMarchingMethod	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    FastMarchingMethod() : inf_(1e6f) {}$/;"	f	class:cv::videostab::FastMarchingMethod
FastMarchingMethod	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^class CV_EXPORTS FastMarchingMethod$/;"	c	namespace:cv::videostab
FastNonLocalMeansDenoising	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FastNonLocalMeansDenoising$/;"	c	namespace:cv::gpu
FastOpticalFlowBM	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FastOpticalFlowBM$/;"	c	namespace:cv::gpu
Fbd	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel
FeatherBlender	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^class CV_EXPORTS FeatherBlender : public Blender$/;"	c	namespace:cv::detail
FeatherBlender	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^inline FeatherBlender::FeatherBlender(float _sharpness) { setSharpness(_sharpness); }$/;"	f	class:cv::detail::FeatherBlender
Feature	/usr/local/include/opencv2/legacy/legacy.hpp	/^        Feature() : x1(0), y1(0), x2(0), y2(0) {}$/;"	f	struct:cv::FernClassifier::Feature
Feature	/usr/local/include/opencv2/legacy/legacy.hpp	/^        Feature(int _x1, int _y1, int _x2, int _y2)$/;"	f	struct:cv::FernClassifier::Feature
Feature	/usr/local/include/opencv2/legacy/legacy.hpp	/^    struct Feature$/;"	s	class:cv::FernClassifier
Feature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  Feature() : x(0), y(0), label(0) {}$/;"	f	struct:cv::linemod::Feature
Feature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^inline Feature::Feature(int _x, int _y, int _label) : x(_x), y(_y), label(_label) {}$/;"	f	class:cv::linemod::Feature
Feature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct CV_EXPORTS Feature$/;"	s	namespace:cv::linemod
Feature2D	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W Feature2D : public FeatureDetector, public DescriptorExtractor$/;"	c	namespace:cv
FeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W FeatureDetector : public virtual Algorithm$/;"	c	namespace:cv
FeatureEvaluator	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS FeatureEvaluator$/;"	c	namespace:cv
FeatureIndex	/usr/local/include/opencv2/flann/lsh_table.h	/^typedef uint32_t FeatureIndex;$/;"	t	namespace:cvflann::lsh
FeatureSet	/usr/local/include/opencv2/core/gpumat.hpp	/^    enum FeatureSet$/;"	g	namespace:cv::gpu
FeatureTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvFeatureTracker FeatureTracker;$/;"	t	namespace:cv
FeatureTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvFeatureTrackerParams FeatureTrackerParams;$/;"	t	namespace:cv
FeaturesFinder	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesFinder$/;"	c	namespace:cv::detail
FeaturesMatcher	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    FeaturesMatcher(bool is_thread_safe = false) : is_thread_safe_(is_thread_safe) {}$/;"	f	class:cv::detail::FeaturesMatcher
FeaturesMatcher	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesMatcher$/;"	c	namespace:cv::detail
FernClassifier	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS FernClassifier$/;"	c	namespace:cv
FernDescriptorMatch	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef FernDescriptorMatcher FernDescriptorMatch;$/;"	t	namespace:cv
FernDescriptorMatcher	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS FernDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
FileNo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileNode	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::FileNode() : fs(0), node(0) {}$/;"	f	class:cv::FileNode
FileNode	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::FileNode(const CvFileStorage* _fs, const CvFileNode* _node)$/;"	f	class:cv::FileNode
FileNode	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::FileNode(const FileNode& _node) : fs(_node.fs), node(_node.node) {}$/;"	f	class:cv::FileNode
FilePath	/usr/local/include/opencv2/ts/ts_gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	/usr/local/include/opencv2/ts/ts_gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit FilePath(const std::string& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FilterEngine	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS FilterEngine$/;"	c	namespace:cv
FilterEngine_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS FilterEngine_GPU$/;"	c	namespace:cv::gpu
FilterEngine_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS FilterEngine_GPU$/;"	c	namespace:cv::ocl
FisheyeProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS FisheyeProjector : ProjectorBase$/;"	s	namespace:cv::detail
FisheyeWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    FisheyeWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::FisheyeWarper
FisheyeWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS FisheyeWarper : public RotationWarperBase<FisheyeProjector>$/;"	c	namespace:cv::detail
FisheyeWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class FisheyeWarper : public WarperCreator$/;"	c	namespace:cv
FlannBasedMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W FlannBasedMatcher : public DescriptorMatcher$/;"	c	namespace:cv
Float	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float               Float;$/;"	m	struct:CvDefParam
Float	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatingPoint	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	/usr/local/include/opencv2/ts/ts_gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointUnion	/usr/local/include/opencv2/ts/ts_gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushInfoLog	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
For	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        struct For$/;"	s	namespace:cv::gpu::device::reduce_detail
For	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        struct For<N, N>$/;"	s	namespace:cv::gpu::device::reduce_detail
For	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        struct For$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
For	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        struct For<N, N>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
ForceGlob	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^        template <typename T> struct ForceGlob$/;"	s	namespace:cv::gpu::device
ForceIDR	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       ForceIDR;        \/\/    NVVE_FORCE_IDR,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ForceIntra	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       ForceIntra;      \/\/    NVVE_FORCE_INTRA,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ForestTree	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvForestTree ForestTree;$/;"	t	namespace:cv
Format	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    enum Format$/;"	g	class:cv::ogl::Texture2D
Format	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatForComparison	/usr/local/include/opencv2/ts/ts_gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	/usr/local/include/opencv2/ts/ts_gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	/usr/local/include/opencv2/ts/ts_gtest.h	/^std::string FormatForComparisonFailureMessage($/;"	f	namespace:testing::internal
FormatInfo	/usr/local/include/opencv2/gpu/gpu.hpp	/^    struct FormatInfo$/;"	s	class:cv::gpu::VideoReader_GPU
Formatted	/usr/local/include/opencv2/core/operations.hpp	/^struct CV_EXPORTS Formatted$/;"	s	namespace:cv
Formatter	/usr/local/include/opencv2/core/operations.hpp	/^class CV_EXPORTS Formatter$/;"	c	namespace:cv
FrameSource	/usr/local/include/opencv2/superres/superres.hpp	/^        class CV_EXPORTS FrameSource$/;"	c	namespace:cv::superres
Ftd	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel
FullMatch	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FuzzyResizer	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class FuzzyResizer$/;"	c	class:CvFuzzyMeanShiftTracker
G	/usr/local/include/opencv2/ml/ml.hpp	/^    double* G;$/;"	m	class:CvSVMSolver
G2Y	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            G2Y        = 9617,$/;"	e	enum:cv::gpu::device::color_detail::__anon67
GAIN	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon324
GAIN_BLOCKS	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon324
GAMMA	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
GAMMA_TAB_SIZE	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            GAMMA_TAB_SIZE = 1024,$/;"	e	enum:cv::gpu::device::color_detail::__anon68
GAUSSIAN	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon297
GC_BGD	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_BGD    = 0,  \/\/!< background$/;"	e	enum:cv::__anon238
GC_EVAL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_EVAL            = 2$/;"	e	enum:cv::__anon239
GC_FGD	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_FGD    = 1,  \/\/!< foreground$/;"	e	enum:cv::__anon238
GC_INIT_WITH_MASK	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_INIT_WITH_MASK  = 1,$/;"	e	enum:cv::__anon239
GC_INIT_WITH_RECT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_INIT_WITH_RECT  = 0,$/;"	e	enum:cv::__anon239
GC_PR_BGD	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_PR_BGD = 2,  \/\/!< most probably background$/;"	e	enum:cv::__anon238
GC_PR_FGD	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GC_PR_FGD = 3   \/\/!< most probably foreground$/;"	e	enum:cv::__anon238
GEMM_1_T	/usr/local/include/opencv2/core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon29
GEMM_2_T	/usr/local/include/opencv2/core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon29
GEMM_3_T	/usr/local/include/opencv2/core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon29
GENTLE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon293
GET_LOWER_QUANT_PERC	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static float GET_LOWER_QUANT_PERC() { return .03f; }$/;"	f	class:cv::RandomizedTree
GET_MAX_SCALE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static float GET_MAX_SCALE() { return 1.5f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_MIN_SCALE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static float GET_MIN_SCALE() { return 0.7f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_PARAM	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define GET_PARAM(/;"	d
GET_PARAM	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define GET_PARAM(/;"	d
GET_STEP_SCALE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static float GET_STEP_SCALE() { return 1.2f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_UPPER_QUANT_PERC	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static float GET_UPPER_QUANT_PERC() { return .92f; }$/;"	f	class:cv::RandomizedTree
GFTTDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS GFTTDetector : public FeatureDetector$/;"	c	namespace:cv
GHT_POSITION	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GHT_POSITION = 0,$/;"	e	enum:cv::__anon232
GHT_ROTATION	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GHT_ROTATION = 2$/;"	e	enum:cv::__anon232
GHT_SCALE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    GHT_SCALE = 1,$/;"	e	enum:cv::__anon232
GINI	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon294
GLOBAL_ATOMICS	/usr/local/include/opencv2/core/gpumat.hpp	/^        GLOBAL_ATOMICS = FEATURE_SET_COMPUTE_11,$/;"	e	enum:cv::gpu::FeatureSet
GMG_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS GMG_GPU$/;"	c	namespace:cv::gpu
GPU_CHANNELS_1_3	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define GPU_CHANNELS_1_3 /;"	d
GPU_CHANNELS_1_3_4	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define GPU_CHANNELS_1_3_4 /;"	d
GPU_SANITY_CHECK	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define GPU_SANITY_CHECK(/;"	d
GPU_TEST_P	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define GPU_TEST_P(/;"	d
GPU_TYPICAL_MAT_SIZES	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    #define GPU_TYPICAL_MAT_SIZES /;"	d
GSD_HUE_LT	/usr/local/include/opencv2/contrib/contrib.hpp	/^        GSD_HUE_LT = 3,$/;"	e	enum:CvAdaptiveSkinDetector::__anon11
GSD_HUE_UT	/usr/local/include/opencv2/contrib/contrib.hpp	/^        GSD_HUE_UT = 33,$/;"	e	enum:CvAdaptiveSkinDetector::__anon11
GSD_INTENSITY_LT	/usr/local/include/opencv2/contrib/contrib.hpp	/^        GSD_INTENSITY_LT = 15,$/;"	e	enum:CvAdaptiveSkinDetector::__anon11
GSD_INTENSITY_UT	/usr/local/include/opencv2/contrib/contrib.hpp	/^        GSD_INTENSITY_UT = 250$/;"	e	enum:CvAdaptiveSkinDetector::__anon11
GTEST_0_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_0_TUPLE_(/;"	d
GTEST_0_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_0_TUPLE_$/;"	d
GTEST_0_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_0_TYPENAMES_(/;"	d
GTEST_0_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_0_TYPENAMES_$/;"	d
GTEST_10_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_10_TUPLE_(/;"	d
GTEST_10_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_10_TUPLE_$/;"	d
GTEST_10_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_10_TYPENAMES_(/;"	d
GTEST_10_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_10_TYPENAMES_$/;"	d
GTEST_1_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_1_TUPLE_(/;"	d
GTEST_1_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_1_TUPLE_$/;"	d
GTEST_1_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_1_TYPENAMES_(/;"	d
GTEST_1_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_1_TYPENAMES_$/;"	d
GTEST_2_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_2_TUPLE_(/;"	d
GTEST_2_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_2_TUPLE_$/;"	d
GTEST_2_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_2_TYPENAMES_(/;"	d
GTEST_2_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_2_TYPENAMES_$/;"	d
GTEST_3_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_3_TUPLE_(/;"	d
GTEST_3_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_3_TUPLE_$/;"	d
GTEST_3_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_3_TYPENAMES_(/;"	d
GTEST_3_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_3_TYPENAMES_$/;"	d
GTEST_4_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_4_TUPLE_(/;"	d
GTEST_4_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_4_TUPLE_$/;"	d
GTEST_4_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_4_TYPENAMES_(/;"	d
GTEST_4_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_4_TYPENAMES_$/;"	d
GTEST_5_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_5_TUPLE_(/;"	d
GTEST_5_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_5_TUPLE_$/;"	d
GTEST_5_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_5_TYPENAMES_(/;"	d
GTEST_5_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_5_TYPENAMES_$/;"	d
GTEST_6_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_6_TUPLE_(/;"	d
GTEST_6_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_6_TUPLE_$/;"	d
GTEST_6_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_6_TYPENAMES_(/;"	d
GTEST_6_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_6_TYPENAMES_$/;"	d
GTEST_7_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_7_TUPLE_(/;"	d
GTEST_7_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_7_TUPLE_$/;"	d
GTEST_7_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_7_TYPENAMES_(/;"	d
GTEST_7_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_7_TYPENAMES_$/;"	d
GTEST_8_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_8_TUPLE_(/;"	d
GTEST_8_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_8_TUPLE_$/;"	d
GTEST_8_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_8_TYPENAMES_(/;"	d
GTEST_8_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_8_TYPENAMES_$/;"	d
GTEST_9_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_9_TUPLE_(/;"	d
GTEST_9_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_9_TUPLE_$/;"	d
GTEST_9_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_9_TYPENAMES_(/;"	d
GTEST_9_TYPENAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_9_TYPENAMES_$/;"	d
GTEST_ADD_REFERENCE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ADD_REFERENCE_(/;"	d
GTEST_ADD_REF_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ADD_REF_(/;"	d
GTEST_ADD_REF_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_ADD_REF_$/;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_AMBIGUOUS_ELSE_BLOCKER_$/;"	d
GTEST_API_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_API_ /;"	d
GTEST_API_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_API_$/;"	d
GTEST_ASSERT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_(/;"	d
GTEST_ASSERT_EQ	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_EQ(/;"	d
GTEST_ASSERT_GE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_GE(/;"	d
GTEST_ASSERT_GT	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_GT(/;"	d
GTEST_ASSERT_LE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_LE(/;"	d
GTEST_ASSERT_LT	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_LT(/;"	d
GTEST_ASSERT_NE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_ASSERT_NE(/;"	d
GTEST_ATTRIBUTE_UNUSED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_ATTRIBUTE_UNUSED_ /;"	d
GTEST_ATTRIBUTE_UNUSED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_BIND_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_BIND_(/;"	d
GTEST_BY_REF_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_BY_REF_(/;"	d
GTEST_BY_REF_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_BY_REF_$/;"	d
GTEST_CAN_COMPARE_NULL	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_CAN_COMPARE_NULL /;"	d
GTEST_CAN_STREAM_RESULTS_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_CAN_STREAM_RESULTS_ /;"	d
GTEST_CASE_NAMESPACE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_CASE_NAMESPACE_(/;"	d
GTEST_CHECK_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_CHECK_(/;"	d
GTEST_CHECK_POSIX_SUCCESS_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_CHECK_POSIX_SUCCESS_(/;"	d
GTEST_COMPILE_ASSERT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_COMPILE_ASSERT_(/;"	d
GTEST_CONCAT_TOKEN_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_CONCAT_TOKEN_(/;"	d
GTEST_CONCAT_TOKEN_IMPL_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_CONCAT_TOKEN_IMPL_(/;"	d
GTEST_DEATH_TEST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_DEATH_TEST_(/;"	d
GTEST_DECLARE_STATIC_MUTEX_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_DECLARE_STATIC_MUTEX_(/;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_DECLARE_TUPLE_AS_FRIEND_ /;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_DECLARE_TUPLE_AS_FRIEND_$/;"	d
GTEST_DECLARE_bool_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DECLARE_bool_(/;"	d
GTEST_DECLARE_int32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DECLARE_int32_(/;"	d
GTEST_DECLARE_string_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DECLARE_string_(/;"	d
GTEST_DEFINE_STATIC_MUTEX_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_DEFINE_STATIC_MUTEX_(/;"	d
GTEST_DEFINE_bool_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DEFINE_bool_(/;"	d
GTEST_DEFINE_int32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DEFINE_int32_(/;"	d
GTEST_DEFINE_string_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DEFINE_string_(/;"	d
GTEST_DEV_EMAIL_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DEV_EMAIL_ /;"	d
GTEST_DISALLOW_ASSIGN_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DISALLOW_ASSIGN_(/;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_DISALLOW_COPY_AND_ASSIGN_(/;"	d
GTEST_DONT_DEFINE_ASSERT_EQ	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_EQ /;"	d
GTEST_DONT_DEFINE_ASSERT_GE	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_GE /;"	d
GTEST_DONT_DEFINE_ASSERT_GT	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_GT /;"	d
GTEST_DONT_DEFINE_ASSERT_LE	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_LE /;"	d
GTEST_DONT_DEFINE_ASSERT_LT	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_LT /;"	d
GTEST_DONT_DEFINE_ASSERT_NE	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_ASSERT_NE /;"	d
GTEST_DONT_DEFINE_FAIL	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_FAIL /;"	d
GTEST_DONT_DEFINE_SUCCEED	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_SUCCEED /;"	d
GTEST_DONT_DEFINE_TEST	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_DONT_DEFINE_TEST /;"	d
GTEST_ELLIPSIS_NEEDS_POD_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_ELLIPSIS_NEEDS_POD_ /;"	d
GTEST_ENV_HAS_STD_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_ENV_HAS_STD_TUPLE_ /;"	d
GTEST_ENV_HAS_TR1_TUPLE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_ENV_HAS_TR1_TUPLE_ /;"	d
GTEST_ERROR	/usr/local/include/opencv2/ts/ts_gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_EXCLUSIVE_LOCK_REQUIRED_(/;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_EXECUTE_DEATH_TEST_STATEMENT_(/;"	d
GTEST_EXECUTE_STATEMENT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_EXECUTE_STATEMENT_(/;"	d
GTEST_FAIL	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FAIL(/;"	d
GTEST_FATAL	/usr/local/include/opencv2/ts/ts_gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FATAL_FAILURE_(/;"	d
GTEST_FLAG	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FLAG(/;"	d
GTEST_FLAG_PREFIX_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FLAG_PREFIX_ /;"	d
GTEST_FLAG_PREFIX_DASH_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FLAG_PREFIX_DASH_ /;"	d
GTEST_FLAG_PREFIX_UPPER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_FLAG_PREFIX_UPPER_ /;"	d
GTEST_GCC_VER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_GCC_VER_ /;"	d
GTEST_HAS_ALT_PATH_SEP_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_ALT_PATH_SEP_ /;"	d
GTEST_HAS_CLONE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#     define GTEST_HAS_CLONE /;"	d
GTEST_HAS_COMBINE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_COMBINE /;"	d
GTEST_HAS_CXXABI_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_CXXABI_H_ /;"	d
GTEST_HAS_DEATH_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_DEATH_TEST /;"	d
GTEST_HAS_EXCEPTIONS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_EXCEPTIONS /;"	d
GTEST_HAS_GLOBAL_STRING	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_GLOBAL_STRING /;"	d
GTEST_HAS_GLOBAL_WSTRING	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_GLOBAL_WSTRING /;"	d
GTEST_HAS_PARAM_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_HAS_PARAM_TEST /;"	d
GTEST_HAS_POSIX_RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_POSIX_RE /;"	d
GTEST_HAS_POSIX_RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_POSIX_RE /;"	d
GTEST_HAS_PTHREAD	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_PTHREAD /;"	d
GTEST_HAS_RTTI	/usr/local/include/opencv2/ts/ts_gtest.h	/^#    define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	/usr/local/include/opencv2/ts/ts_gtest.h	/^#   define GTEST_HAS_RTTI /;"	d
GTEST_HAS_RTTI	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_RTTI /;"	d
GTEST_HAS_SEH	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_SEH /;"	d
GTEST_HAS_STD_STRING	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_STD_STRING /;"	d
GTEST_HAS_STD_WSTRING	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_STD_WSTRING /;"	d
GTEST_HAS_STREAM_REDIRECTION	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_STREAM_REDIRECTION /;"	d
GTEST_HAS_TR1_TUPLE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_HAS_TR1_TUPLE /;"	d
GTEST_HAS_TR1_TUPLE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef  GTEST_HAS_TR1_TUPLE$/;"	d
GTEST_HAS_TR1_TUPLE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_TR1_TUPLE /;"	d
GTEST_HAS_TYPED_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_TYPED_TEST /;"	d
GTEST_HAS_TYPED_TEST_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_HAS_TYPED_TEST_P /;"	d
GTEST_IMPL_CMP_HELPER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_IMPL_CMP_HELPER_(/;"	d
GTEST_IMPL_CMP_HELPER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_IMPL_CMP_HELPER_$/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_$/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_IMPL_FORMAT_C_STRING_AS_STRING_(/;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_IMPL_FORMAT_C_STRING_AS_STRING_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_PROD_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_$/;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_$/;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_$/;"	d
GTEST_INFO	/usr/local/include/opencv2/ts/ts_gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_IS_NULL_LITERAL_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_IS_NULL_LITERAL_(/;"	d
GTEST_IS_THREADSAFE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_IS_THREADSAFE /;"	d
GTEST_LANG_CXX11	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_LANG_CXX11 /;"	d
GTEST_LINKED_AS_SHARED_LIBRARY	/usr/local/include/opencv2/ts/ts.hpp	/^#define GTEST_LINKED_AS_SHARED_LIBRARY /;"	d
GTEST_LOCK_EXCLUDED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_LOCK_EXCLUDED_(/;"	d
GTEST_LOG_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_LOG_(/;"	d
GTEST_MESSAGE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_MESSAGE_(/;"	d
GTEST_MESSAGE_AT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_MESSAGE_AT_(/;"	d
GTEST_MUST_USE_RESULT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_MUST_USE_RESULT_ /;"	d
GTEST_NAME_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_NAME_ /;"	d
GTEST_NEEDS_IS_POINTER_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_NEEDS_IS_POINTER_ /;"	d
GTEST_NONFATAL_FAILURE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_NONFATAL_FAILURE_(/;"	d
GTEST_NO_INLINE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_NO_INLINE_ /;"	d
GTEST_OS_AIX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_AIX /;"	d
GTEST_OS_AIX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_AIX$/;"	d
GTEST_OS_AIX	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_AIX /;"	d
GTEST_OS_CYGWIN	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_CYGWIN /;"	d
GTEST_OS_CYGWIN	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_CYGWIN$/;"	d
GTEST_OS_CYGWIN	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_CYGWIN /;"	d
GTEST_OS_HPUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_HPUX /;"	d
GTEST_OS_HPUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_HPUX$/;"	d
GTEST_OS_HPUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_HPUX /;"	d
GTEST_OS_IOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_OS_IOS /;"	d
GTEST_OS_IOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef GTEST_OS_IOS$/;"	d
GTEST_OS_IOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_IOS /;"	d
GTEST_OS_IOS_SIMULATOR	/usr/local/include/opencv2/ts/ts_gtest.h	/^#   define GTEST_OS_IOS_SIMULATOR /;"	d
GTEST_OS_IOS_SIMULATOR	/usr/local/include/opencv2/ts/ts_gtest.h	/^#   undef GTEST_OS_IOS_SIMULATOR$/;"	d
GTEST_OS_IOS_SIMULATOR	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_IOS_SIMULATOR /;"	d
GTEST_OS_LINUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_LINUX /;"	d
GTEST_OS_LINUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_LINUX$/;"	d
GTEST_OS_LINUX	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_LINUX /;"	d
GTEST_OS_LINUX_ANDROID	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_OS_LINUX_ANDROID /;"	d
GTEST_OS_LINUX_ANDROID	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef GTEST_OS_LINUX_ANDROID$/;"	d
GTEST_OS_LINUX_ANDROID	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_LINUX_ANDROID /;"	d
GTEST_OS_MAC	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_MAC /;"	d
GTEST_OS_MAC	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_MAC$/;"	d
GTEST_OS_MAC	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_MAC /;"	d
GTEST_OS_NACL	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_NACL /;"	d
GTEST_OS_NACL	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_NACL$/;"	d
GTEST_OS_NACL	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_NACL /;"	d
GTEST_OS_OPENBSD	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_OPENBSD /;"	d
GTEST_OS_OPENBSD	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_OPENBSD$/;"	d
GTEST_OS_OPENBSD	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_OPENBSD /;"	d
GTEST_OS_QNX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_QNX /;"	d
GTEST_OS_QNX	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_QNX$/;"	d
GTEST_OS_QNX	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_QNX /;"	d
GTEST_OS_SOLARIS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_SOLARIS /;"	d
GTEST_OS_SOLARIS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_SOLARIS$/;"	d
GTEST_OS_SOLARIS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_SOLARIS /;"	d
GTEST_OS_SYMBIAN	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_SYMBIAN /;"	d
GTEST_OS_SYMBIAN	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_SYMBIAN$/;"	d
GTEST_OS_SYMBIAN	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_SYMBIAN /;"	d
GTEST_OS_WINDOWS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_WINDOWS$/;"	d
GTEST_OS_WINDOWS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_WINDOWS /;"	d
GTEST_OS_WINDOWS_DESKTOP	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_DESKTOP	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef GTEST_OS_WINDOWS_DESKTOP$/;"	d
GTEST_OS_WINDOWS_DESKTOP	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_WINDOWS_DESKTOP /;"	d
GTEST_OS_WINDOWS_MINGW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_OS_WINDOWS_MINGW /;"	d
GTEST_OS_WINDOWS_MINGW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef GTEST_OS_WINDOWS_MINGW$/;"	d
GTEST_OS_WINDOWS_MINGW	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_WINDOWS_MINGW /;"	d
GTEST_OS_WINDOWS_MOBILE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_OS_WINDOWS_MOBILE /;"	d
GTEST_OS_WINDOWS_MOBILE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  undef GTEST_OS_WINDOWS_MOBILE$/;"	d
GTEST_OS_WINDOWS_MOBILE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_WINDOWS_MOBILE /;"	d
GTEST_OS_ZOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_OS_ZOS /;"	d
GTEST_OS_ZOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^# undef GTEST_OS_ZOS$/;"	d
GTEST_OS_ZOS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_OS_ZOS /;"	d
GTEST_PATH_SEP_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_PATH_SEP_ /;"	d
GTEST_PRED1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED1_(/;"	d
GTEST_PRED2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED2_(/;"	d
GTEST_PRED3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED3_(/;"	d
GTEST_PRED4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED4_(/;"	d
GTEST_PRED5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED5_(/;"	d
GTEST_PRED_FORMAT1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED_FORMAT1_(/;"	d
GTEST_PRED_FORMAT2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED_FORMAT2_(/;"	d
GTEST_PRED_FORMAT3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED_FORMAT3_(/;"	d
GTEST_PRED_FORMAT4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED_FORMAT4_(/;"	d
GTEST_PRED_FORMAT5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PRED_FORMAT5_(/;"	d
GTEST_PROJECT_URL_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_PROJECT_URL_ /;"	d
GTEST_REFERENCE_TO_CONST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_REFERENCE_TO_CONST_(/;"	d
GTEST_REGISTERED_TEST_NAMES_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_REGISTERED_TEST_NAMES_(/;"	d
GTEST_REMOVE_CONST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_REMOVE_CONST_(/;"	d
GTEST_REMOVE_REFERENCE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_REMOVE_REFERENCE_(/;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_REMOVE_REFERENCE_AND_CONST_(/;"	d
GTEST_SNPRINTF_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_SNPRINTF_(/;"	d
GTEST_SUCCEED	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_SUCCEED(/;"	d
GTEST_SUCCESS_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_SUCCESS_(/;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(/;"	d
GTEST_TEMPLATE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_TEMPLATE_ /;"	d
GTEST_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST(/;"	d
GTEST_TEST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_(/;"	d
GTEST_TEST_ANY_THROW_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_ANY_THROW_(/;"	d
GTEST_TEST_BOOLEAN_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_BOOLEAN_(/;"	d
GTEST_TEST_CLASS_NAME_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_CLASS_NAME_(/;"	d
GTEST_TEST_NO_FATAL_FAILURE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_NO_FATAL_FAILURE_(/;"	d
GTEST_TEST_NO_THROW_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_NO_THROW_(/;"	d
GTEST_TEST_THROW_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TEST_THROW_(/;"	d
GTEST_TUPLE_ELEMENT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_TUPLE_ELEMENT_(/;"	d
GTEST_TUPLE_ELEMENT_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#undef GTEST_TUPLE_ELEMENT_$/;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_TYPED_TEST_CASE_P_STATE_(/;"	d
GTEST_TYPE_PARAMS_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_TYPE_PARAMS_(/;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_UNSUPPORTED_DEATH_TEST_(/;"	d
GTEST_USES_POSIX_RE	/usr/local/include/opencv2/ts/ts.hpp	/^#  define GTEST_USES_POSIX_RE /;"	d
GTEST_USES_POSIX_RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_USES_POSIX_RE /;"	d
GTEST_USES_SIMPLE_RE	/usr/local/include/opencv2/ts/ts.hpp	/^#  define GTEST_USES_SIMPLE_RE /;"	d
GTEST_USES_SIMPLE_RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define GTEST_USES_SIMPLE_RE /;"	d
GTEST_USE_OWN_TR1_TUPLE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#  define GTEST_USE_OWN_TR1_TUPLE /;"	d
GTEST_WARNING	/usr/local/include/opencv2/ts/ts_gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define GTEST_WIDE_STRING_USES_UTF16_ /;"	d
GTestLog	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	/usr/local/include/opencv2/ts/ts_gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GTestStreamToHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void GTestStreamToHelper(std::ostream* os, const T& val) {$/;"	f
GainCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS GainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
GaussianMotionFilter	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    GaussianMotionFilter() : stdev_(-1.f) {}$/;"	f	class:cv::videostab::GaussianMotionFilter
GaussianMotionFilter	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^class CV_EXPORTS GaussianMotionFilter : public MotionFilterBase$/;"	c	namespace:cv::videostab
GeneralizedHough	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS GeneralizedHough : public Algorithm$/;"	c	namespace:cv
GeneralizedHough_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS GeneralizedHough_GPU : public Algorithm$/;"	c	namespace:cv::gpu
GeneratorCreationFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Generic	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <unsigned int N> struct Generic$/;"	s	namespace:cv::gpu::device::reduce_detail
Generic	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct Generic$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
GenericDescriptorMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef GenericDescriptorMatcher GenericDescriptorMatch;$/;"	t	namespace:cv
GenericDescriptorMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS GenericDescriptorMatcher$/;"	c	namespace:cv
GenericIndex	/usr/local/include/opencv2/flann/flann.hpp	/^GenericIndex<Distance>::GenericIndex(const Mat& dataset, const ::cvflann::IndexParams& params, Distance distance)$/;"	f	class:cv::flann::GenericIndex
GenericIndex	/usr/local/include/opencv2/flann/flann.hpp	/^class GenericIndex$/;"	c	namespace:cv::flann
GenericOptimized32	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <unsigned int N> struct GenericOptimized32$/;"	s	namespace:cv::gpu::device::reduce_detail
GenericOptimized32	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct GenericOptimized32$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
GetBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex)$/;"	f	class:CvBlobSeq
GetBlobByID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobSeq
GetBlobByID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobTrackPostProc
GetBlobNum	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual int GetBlobNum()$/;"	f	class:CvBlobSeq
GetCameraCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetCameraCount() const { return cameraCount; }$/;"	f	class:CvCalibFilter
GetConfidence	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual double GetConfidence(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/,$/;"	f	class:CvBlobTrackerOne
GetDescriptor	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const OneWayDescriptor* GetDescriptor(int desc_idx) const {return &m_descriptors[desc_idx];};$/;"	f	class:cv::OneWayDescriptorBase
GetDescriptorCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetDescriptorCount() const {return m_train_feature_count;};$/;"	f	class:cv::OneWayDescriptorBase
GetEnv	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetFGMask	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual IplImage*   GetFGMask(){return NULL;};$/;"	f	class:CvBlobTrackerAuto
GetFVVar	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual float*  GetFVVar(){return NULL;}; \/* Returns pointer to array of variation of values of FV, if returns 0 then FVVar does not exist. *\/$/;"	f	class:CvBlobTrackFVGen
GetImage	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    IplImage* GetImage() { return m_image; }$/;"	f	class:CvImageDrawer
GetInputPatchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize GetInputPatchSize() const$/;"	f	class:cv::OneWayDescriptor
GetLabeledFeatures	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const vector<KeyPoint>& GetLabeledFeatures() const {return m_train_features;};$/;"	f	class:cv::OneWayDescriptorObject
GetLabeledFeatures	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<KeyPoint>& GetLabeledFeatures() {return m_train_features;};$/;"	f	class:cv::OneWayDescriptorObject
GetLowPCA	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetLowPCA(CvMat** avg, CvMat** eigenvectors)$/;"	f	class:cv::OneWayDescriptorBase
GetObjectFeatureCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetObjectFeatureCount() const {return m_object_feature_count;};$/;"	f	class:cv::OneWayDescriptorObject
GetOrCreateValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetPCACoeffs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat** GetPCACoeffs() const {return m_pca_coeffs;}$/;"	f	class:cv::OneWayDescriptor
GetPCADimHigh	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetPCADimHigh() const {return m_pca_dim_high;};$/;"	f	class:cv::OneWayDescriptorBase
GetPCADimLow	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetPCADimLow() const {return m_pca_dim_low;};$/;"	f	class:cv::OneWayDescriptorBase
GetPCAFilename	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static string GetPCAFilename () { return "pca.yml"; }$/;"	f	class:cv::OneWayDescriptorBase
GetParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamType& GetParam() const { return *parameter_; }$/;"	f	class:testing::WithParamInterface
GetPatchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize GetPatchSize() const {return m_patch_size;};$/;"	f	class:cv::OneWayDescriptorBase
GetPatchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize GetPatchSize() const$/;"	f	class:cv::OneWayDescriptor
GetPoseCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetPoseCount() const {return m_pose_count;};$/;"	f	class:cv::OneWayDescriptorBase
GetPrefixUntilComma	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline std::string GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetPyrLevels	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int GetPyrLevels() const {return m_pyr_levels;};$/;"	f	class:cv::OneWayDescriptorBase
GetRow	/usr/local/include/opencv2/ml/ml.hpp	/^    typedef float* (CvSVMSolver::*GetRow)( int i, float* row, float* dst, bool existed );$/;"	t	class:CvSVMSolver
GetStateDesc	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual const char*   GetStateDesc(int \/*BlobID*\/){return NULL;};$/;"	f	class:CvBlobTrackAnalysis
GetStream	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetString	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string GetString() const {$/;"	f	class:testing::Message
GetTestCaseName	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <typename T> struct GetType<T&>$/;"	s	namespace:cv::gpu::device::reduce_detail
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <typename T> struct GetType<T*>$/;"	s	namespace:cv::gpu::device::reduce_detail
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::gpu::device::reduce_detail
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<T&>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<T*>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
GetType	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <typename T> struct GetType<volatile T*>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
GetTypeId	/usr/local/include/opencv2/ts/ts_gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	/usr/local/include/opencv2/ts/ts_gtest.h	/^std::string GetTypeName() {$/;"	f	namespace:testing::internal
GlArrays	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline GlArrays()$/;"	f	class:cv::GlArrays
GlArrays	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^class CV_EXPORTS GlArrays$/;"	c	namespace:cv
GlBuffer	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^class CV_EXPORTS GlBuffer$/;"	c	namespace:cv
GlCamera	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^class CV_EXPORTS GlCamera$/;"	c	namespace:cv
GlFont	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^class CV_EXPORTS GlFont$/;"	c	namespace:cv
GlTexture	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^class CV_EXPORTS GlTexture$/;"	c	namespace:cv
GoodFeaturesToTrackDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef GFTTDetector GoodFeaturesToTrackDetector;$/;"	t	namespace:cv
GoodFeaturesToTrackDetector_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS GoodFeaturesToTrackDetector_GPU$/;"	c	namespace:cv::gpu
GoodFeaturesToTrackDetector_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^inline GoodFeaturesToTrackDetector_GPU::GoodFeaturesToTrackDetector_GPU(int maxCorners_, double qualityLevel_, double minDistance_,$/;"	f	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    class CV_EXPORTS GpuMat$/;"	c	namespace:cv::gpu
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::GpuMat()$/;"	f	class:cv::gpu::GpuMat
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::GpuMat(Size size_, int type_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::GpuMat(Size size_, int type_, Scalar s_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::GpuMat(int rows_, int cols_, int type_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::GpuMat(int rows_, int cols_, int type_, Scalar s_)$/;"	f	class:cv::gpu::GpuMat
GpuPerf	/usr/local/include/opencv2/ts/ts_perf.hpp	/^class CV_EXPORTS GpuPerf$/;"	c	namespace:perf
GradientBoostingTreeParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvGBTreesParams GradientBoostingTreeParams;$/;"	t	namespace:cv
GradientBoostingTrees	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvGBTrees GradientBoostingTrees;$/;"	t	namespace:cv
Graph	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) cvReleaseLinearContorModelStorage(CvGraph** Graph);$/;"	v
Graph	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    Graph(int num_vertices = 0) { create(num_vertices); }$/;"	f	class:cv::detail::Graph
Graph	/usr/local/include/opencv2/stitching/detail/util.hpp	/^class CV_EXPORTS Graph$/;"	c	namespace:cv::detail
GraphCutSeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinder : public GraphCutSeamFinderBase, public SeamFinder$/;"	c	namespace:cv::detail
GraphCutSeamFinderBase	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderBase$/;"	c	namespace:cv::detail
GraphCutSeamFinderGpu	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    GraphCutSeamFinderGpu(int cost_type = COST_COLOR_GRAD, float terminal_cost = 10000.f,$/;"	f	class:cv::detail::GraphCutSeamFinderGpu
GraphCutSeamFinderGpu	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderGpu : public GraphCutSeamFinderBase, public PairwiseSeamFinder$/;"	c	namespace:cv::detail
GraphEdge	/usr/local/include/opencv2/stitching/detail/util.hpp	/^inline GraphEdge::GraphEdge(int _from, int _to, float _weight) : from(_from), to(_to), weight(_weight) {}$/;"	f	class:cv::detail::GraphEdge
GraphEdge	/usr/local/include/opencv2/stitching/detail/util.hpp	/^struct CV_EXPORTS GraphEdge$/;"	s	namespace:cv::detail
Gray	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon327
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB():unary_function<T, typename TypeVec<T, dcn>::vec_type>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB():unary_function<uchar, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB(const Gray2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB(const Gray2RGB& other_):unary_function<uchar, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <> struct Gray2RGB<uchar, 4> : unary_function<uchar, uint>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int dcn> struct Gray2RGB : unary_function<T, typename TypeVec<T, dcn>::vec_type>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB5x5():unary_function<uchar, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB5x5(const Gray2RGB5x5& other_):unary_function<uchar, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int green_bits> struct Gray2RGB5x5 : unary_function<uchar, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5Converter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<5>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5Converter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<6>$/;"	s	namespace:cv::gpu::device::color_detail
GreaterEq	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS GreaterEq$/;"	c	namespace:cv
GreaterEqIdx	/usr/local/include/opencv2/core/operations.hpp	/^    GreaterEqIdx( const _Tp* _arr ) : arr(_arr) {}$/;"	f	class:cv::GreaterEqIdx
GreaterEqIdx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS GreaterEqIdx$/;"	c	namespace:cv
GridAdaptedFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W GridAdaptedFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
H	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon23
H	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float *H;$/;"	m	struct:CvLSVMFilterObject
H	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Mat H;                              \/\/ Estimated homography$/;"	m	struct:cv::detail::MatchesInfo
H264	/usr/local/include/opencv2/gpu/gpu.hpp	/^        H264,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
H264_MVC	/usr/local/include/opencv2/gpu/gpu.hpp	/^        H264_MVC,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
H264_SVC	/usr/local/include/opencv2/gpu/gpu.hpp	/^        H264_SVC,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
HAAR	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon301
HARRIS_SCORE	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon55
HAVE_IPL	/usr/local/include/opencv2/core/types_c.h	/^#  define HAVE_IPL$/;"	d
HAVE_OPENCV_CALIB3D	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_CALIB3D$/;"	d
HAVE_OPENCV_CONTRIB	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_CONTRIB$/;"	d
HAVE_OPENCV_CORE	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_CORE$/;"	d
HAVE_OPENCV_FEATURES2D	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_FEATURES2D$/;"	d
HAVE_OPENCV_FLANN	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_FLANN$/;"	d
HAVE_OPENCV_GPU	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_GPU$/;"	d
HAVE_OPENCV_HIGHGUI	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_HIGHGUI$/;"	d
HAVE_OPENCV_IMGPROC	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_IMGPROC$/;"	d
HAVE_OPENCV_LEGACY	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_LEGACY$/;"	d
HAVE_OPENCV_ML	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_ML$/;"	d
HAVE_OPENCV_NONFREE	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_NONFREE$/;"	d
HAVE_OPENCV_OBJDETECT	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_OBJDETECT$/;"	d
HAVE_OPENCV_OCL	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_OCL$/;"	d
HAVE_OPENCV_PHOTO	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_PHOTO$/;"	d
HAVE_OPENCV_STITCHING	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_STITCHING$/;"	d
HAVE_OPENCV_SUPERRES	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_SUPERRES$/;"	d
HAVE_OPENCV_TS	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_TS$/;"	d
HAVE_OPENCV_VIDEO	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_VIDEO$/;"	d
HAVE_OPENCV_VIDEOSTAB	/usr/local/include/opencv2/opencv_modules.hpp	/^#define HAVE_OPENCV_VIDEOSTAB$/;"	d
HAVE_TBB	/usr/local/include/opencv2/core/internal.hpp	/^#    undef HAVE_TBB$/;"	d
HELLINGER	/usr/local/include/opencv2/flann/defines.h	/^    HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
HESSIAN_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        HESSIAN_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
HESSIAN_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                HESSIAN_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
HG_AUTOSIZE	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define HG_AUTOSIZE /;"	d
HIST_INTERSECT	/usr/local/include/opencv2/flann/defines.h	/^    HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB()$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB(const HLS2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB(const HLS2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HLS2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
HLS2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HLS2RGB$/;"	s	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HLS2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
HOG	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon301
HOGConfidence	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct CV_EXPORTS HOGConfidence$/;"	s	namespace:cv::gpu
HOGDescriptor	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct CV_EXPORTS HOGDescriptor$/;"	s	namespace:cv::gpu
HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor() : winSize(64,128), blockSize(16,16), blockStride(8,8),$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride,$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor(const String& filename)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    HOGDescriptor(const HOGDescriptor& d)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct CV_EXPORTS_W HOGDescriptor$/;"	s	namespace:cv
HOGDescriptor	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS HOGDescriptor$/;"	s	namespace:cv::ocl
HS	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon23
HSV	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon23
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB()$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB(const HSV2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB(const HSV2RGB& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HSV2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
HSV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HSV2RGB$/;"	s	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int HR, typename T> static __device__ void HSV2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HSV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HSV2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
HUBER_LOSS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon295
Hamming	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS Hamming$/;"	s	namespace:cv
Hamming	/usr/local/include/opencv2/flann/dist.h	/^struct Hamming$/;"	s	namespace:cvflann
Hamming	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS Hamming$/;"	s	namespace:cv::ocl
Hamming2	/usr/local/include/opencv2/flann/dist.h	/^struct Hamming2$/;"	s	namespace:cvflann
HammingDist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ HammingDist() : mySum(0) {}$/;"	f	struct:cv::gpu::device::HammingDist
HammingDist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    struct HammingDist$/;"	s	namespace:cv::gpu::device
HammingDist	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
HammingDist	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
HammingLUT	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef Hamming HammingLUT;$/;"	t	namespace:cv
HammingLUT	/usr/local/include/opencv2/flann/dist.h	/^struct HammingLUT$/;"	s	namespace:cvflann
HammingLUT2	/usr/local/include/opencv2/flann/dist.h	/^struct HammingLUT2$/;"	s	namespace:cvflann
HammingMultilevel	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<int cellsize> struct CV_EXPORTS HammingMultilevel$/;"	s	namespace:cv
HasFailure	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasNewFatalFailureHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
Hdr	/usr/local/include/opencv2/core/operations.hpp	/^        Hdr() : data(0), datastart(0), refcount(0), size(0), capacity(0) {};$/;"	f	struct:cv::Vector::Hdr
Hdr	/usr/local/include/opencv2/core/operations.hpp	/^    struct CV_EXPORTS Hdr$/;"	s	class:cv::Vector
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
Heap	/usr/local/include/opencv2/flann/heap.h	/^    Heap(int sz)$/;"	f	class:cvflann::Heap
Heap	/usr/local/include/opencv2/flann/heap.h	/^class Heap$/;"	c	namespace:cvflann
Height	/usr/local/include/opencv2/core/wimage.hpp	/^    int Height() const {return image_->height; }$/;"	f	class:cv::WImage
HellingerDistance	/usr/local/include/opencv2/flann/dist.h	/^struct HellingerDistance$/;"	s	namespace:cvflann
HierarchicalClusteringIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndex(const Matrix<ElementType>& inputData, const IndexParams& index_params = HierarchicalClusteringIndexParams(),$/;"	f	class:cvflann::HierarchicalClusteringIndex
HierarchicalClusteringIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^class HierarchicalClusteringIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
HierarchicalClusteringIndexParams	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndexParams(int branching = 32,$/;"	f	struct:cvflann::HierarchicalClusteringIndexParams
HierarchicalClusteringIndexParams	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^struct HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cvflann
HierarchicalClusteringIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cv::flann
HistIntersectionDistance	/usr/local/include/opencv2/flann/dist.h	/^struct HistIntersectionDistance$/;"	s	namespace:cvflann
HistType	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH
Histogram	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS Histogram$/;"	c	class:CvAdaptiveSkinDetector
HistogramSize	/usr/local/include/opencv2/contrib/contrib.hpp	/^            HistogramSize = (GSD_HUE_UT - GSD_HUE_LT + 1)$/;"	e	enum:CvAdaptiveSkinDetector::Histogram::__anon12
HomographyBasedEstimator	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    HomographyBasedEstimator(bool is_focals_estimated = false)$/;"	f	class:cv::detail::HomographyBasedEstimator
HomographyBasedEstimator	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS HomographyBasedEstimator : public Estimator$/;"	c	namespace:cv::detail
HoughCirclesBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct HoughCirclesBuf$/;"	s	namespace:cv::gpu
HoughLinesBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct HoughLinesBuf$/;"	s	namespace:cv::gpu
HybridTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvHybridTracker HybridTracker;$/;"	t	namespace:cv
HybridTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvHybridTrackerParams HybridTrackerParams;$/;"	t	namespace:cv
I0s	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> I0s;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1s	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> I1s;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1w_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat I1w_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1wx_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat I1wx_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1wy_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat I1wy_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1x_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat I1x_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
I1y_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat I1y_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
ID	/usr/local/include/opencv2/core/types_c.h	/^    int  ID;                \/* version (=0)*\/$/;"	m	struct:_IplImage
ID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     ID;  \/* blob ID         *\/$/;"	m	struct:CvBlob
IDENTITY	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon297
IDR_Period	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       IDR_Period;      \/\/    NVVE_IDR_PERIOD,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
IDenseOptFlowEstimator	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^class CV_EXPORTS IDenseOptFlowEstimator$/;"	c	namespace:cv::videostab
IFRAME	/usr/local/include/opencv2/gpu/gpu.hpp	/^            IFRAME = 1,$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
IFrameSource	/usr/local/include/opencv2/videostab/frame_source.hpp	/^class CV_EXPORTS IFrameSource$/;"	c	namespace:cv::videostab
IGlobalMotionEstimator	/usr/local/include/opencv2/videostab/global_motion.hpp	/^class CV_EXPORTS IGlobalMotionEstimator$/;"	c	namespace:cv::videostab
ILog	/usr/local/include/opencv2/videostab/log.hpp	/^class CV_EXPORTS ILog$/;"	c	namespace:cv::videostab
IMAGE_CHANNELS	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define IMAGE_CHANNELS /;"	d
IMPLEMENT_PARAM_CLASS	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define IMPLEMENT_PARAM_CLASS(/;"	d
IMREAD_ANYCOLOR	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMREAD_ANYCOLOR   =4$/;"	e	enum:cv::__anon208
IMREAD_ANYDEPTH	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMREAD_ANYDEPTH   =2,$/;"	e	enum:cv::__anon208
IMREAD_COLOR	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMREAD_COLOR      =1,$/;"	e	enum:cv::__anon208
IMREAD_GRAYSCALE	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMREAD_GRAYSCALE  =0,$/;"	e	enum:cv::__anon208
IMREAD_UNCHANGED	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMREAD_UNCHANGED  =-1,$/;"	e	enum:cv::__anon208
IMWRITE_JPEG_QUALITY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_JPEG_QUALITY =1,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_BILEVEL	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_BILEVEL =18,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_COMPRESSION	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_COMPRESSION =16,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY =17,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY_DEFAULT	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_DEFAULT =0,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY_FILTERED	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_FILTERED =1,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY_FIXED	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_FIXED =4,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =2,$/;"	e	enum:cv::__anon209
IMWRITE_PNG_STRATEGY_RLE	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_RLE =3,$/;"	e	enum:cv::__anon209
IMWRITE_PXM_BINARY	/usr/local/include/opencv2/highgui/highgui.hpp	/^    IMWRITE_PXM_BINARY =32$/;"	e	enum:cv::__anon209
IMatch	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    IMatch() :$/;"	f	struct:cv::of2::IMatch
IMatch	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    IMatch(int _queryIdx, int _imgIdx, double _likelihood, double _match) :$/;"	f	struct:cv::of2::IMatch
IMatch	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^struct CV_EXPORTS IMatch {$/;"	s	namespace:cv::of2
IMotionStabilizer	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^class CV_EXPORTS IMotionStabilizer$/;"	c	namespace:cv::videostab
INCLUSIVE	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::gpu::device::ScanKind
INPAINT_NS	/usr/local/include/opencv2/photo/photo.hpp	/^    INPAINT_NS=CV_INPAINT_NS, \/\/ Navier-Stokes algorithm$/;"	e	enum:cv::__anon321
INPAINT_TELEA	/usr/local/include/opencv2/photo/photo.hpp	/^    INPAINT_TELEA=CV_INPAINT_TELEA \/\/ A. Telea algorithm$/;"	e	enum:cv::__anon321
INPUT	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
INPUT_OUTPUT	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
INSIDE	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon334
INSTANTIATE_TEST_CASE_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define INSTANTIATE_TEST_CASE_P(/;"	d
INSTANTIATE_TYPED_TEST_CASE_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define INSTANTIATE_TYPED_TEST_CASE_P(/;"	d
INTERS	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERS_FIRST	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        INTERS_FIRST = INTERS | FIRST,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERS_SECOND	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        INTERS_SECOND = INTERS | SECOND$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTER_AREA	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_AREA=CV_INTER_AREA, \/\/!< area-based (or super) interpolation$/;"	e	enum:cv::__anon233
INTER_BITS	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_BITS=5, INTER_BITS2=INTER_BITS*2,$/;"	e	enum:cv::__anon234
INTER_BITS2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_BITS=5, INTER_BITS2=INTER_BITS*2,$/;"	e	enum:cv::__anon234
INTER_CUBIC	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_CUBIC=CV_INTER_CUBIC, \/\/!< bicubic interpolation$/;"	e	enum:cv::__anon233
INTER_LANCZOS4	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_LANCZOS4=CV_INTER_LANCZOS4, \/\/!< Lanczos interpolation over 8x8 neighborhood$/;"	e	enum:cv::__anon233
INTER_LINEAR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_LINEAR=CV_INTER_LINEAR, \/\/!< bilinear interpolation$/;"	e	enum:cv::__anon233
INTER_MAX	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_MAX=7,$/;"	e	enum:cv::__anon233
INTER_NEAREST	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_NEAREST=CV_INTER_NN, \/\/!< nearest neighbor interpolation$/;"	e	enum:cv::__anon233
INTER_TAB_SIZE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_TAB_SIZE=(1<<INTER_BITS),$/;"	e	enum:cv::__anon234
INTER_TAB_SIZE2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    INTER_TAB_SIZE2=INTER_TAB_SIZE*INTER_TAB_SIZE$/;"	e	enum:cv::__anon234
IPL2CV_DEPTH	/usr/local/include/opencv2/core/types_c.h	/^#define IPL2CV_DEPTH(/;"	d
IPL_ALIGN_16BYTES	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_16BYTES /;"	d
IPL_ALIGN_32BYTES	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_32BYTES /;"	d
IPL_ALIGN_4BYTES	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_4BYTES /;"	d
IPL_ALIGN_8BYTES	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_8BYTES /;"	d
IPL_ALIGN_DWORD	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_DWORD /;"	d
IPL_ALIGN_QWORD	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ALIGN_QWORD /;"	d
IPL_BORDER_CONSTANT	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_CONSTANT /;"	d
IPL_BORDER_REFLECT	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_REFLECT /;"	d
IPL_BORDER_REFLECT_101	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_REFLECT_101 /;"	d
IPL_BORDER_REPLICATE	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_REPLICATE /;"	d
IPL_BORDER_TRANSPARENT	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_TRANSPARENT /;"	d
IPL_BORDER_WRAP	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_BORDER_WRAP /;"	d
IPL_DATA_ORDER_PIXEL	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DATA_ORDER_PIXEL /;"	d
IPL_DATA_ORDER_PLANE	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DATA_ORDER_PLANE /;"	d
IPL_DEPTH_16S	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_16S /;"	d
IPL_DEPTH_16U	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_16U /;"	d
IPL_DEPTH_1U	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_1U /;"	d
IPL_DEPTH_32F	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_32F /;"	d
IPL_DEPTH_32S	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_32S /;"	d
IPL_DEPTH_64F	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_64F /;"	d
IPL_DEPTH_8S	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_8S /;"	d
IPL_DEPTH_8U	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_8U /;"	d
IPL_DEPTH_SIGN	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_DEPTH_SIGN /;"	d
IPL_GAUSSIAN_5x5	/usr/local/include/opencv2/legacy/compat.hpp	/^    IPL_GAUSSIAN_5x5 = 7$/;"	e	enum:__anon273
IPL_IMAGE_DATA	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_IMAGE_DATA /;"	d
IPL_IMAGE_HEADER	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_IMAGE_HEADER /;"	d
IPL_IMAGE_MAGIC_VAL	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_IMAGE_MAGIC_VAL /;"	d
IPL_IMAGE_ROI	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_IMAGE_ROI /;"	d
IPL_ORIGIN_BL	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ORIGIN_BL /;"	d
IPL_ORIGIN_TL	/usr/local/include/opencv2/core/types_c.h	/^#define IPL_ORIGIN_TL /;"	d
IPPI_CALL	/usr/local/include/opencv2/core/internal.hpp	/^#  define IPPI_CALL(/;"	d
ISparseOptFlowEstimator	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^class CV_EXPORTS ISparseOptFlowEstimator$/;"	c	namespace:cv::videostab
ITERATIVE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    ITERATIVE=CV_ITERATIVE,$/;"	e	enum:cv::__anon4
ImageData	/usr/local/include/opencv2/core/wimage.hpp	/^    T* ImageData() { return reinterpret_cast<T*>(image_->imageData); }$/;"	f	class:cv::WImage
ImageData	/usr/local/include/opencv2/core/wimage.hpp	/^    const T* ImageData() const {$/;"	f	class:cv::WImage
ImageFeatures	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^struct CV_EXPORTS ImageFeatures$/;"	s	namespace:cv::detail
ImagePairLess	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        ImagePairLess(const std::vector<Mat> &images, const std::vector<Point> &corners)$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
ImagePairLess	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    class ImagePairLess$/;"	c	class:cv::detail::DpSeamFinder
ImagePyramid	/usr/local/include/opencv2/gpu/gpu.hpp	/^    inline ImagePyramid() : nLayers_(0) {}$/;"	f	class:cv::gpu::ImagePyramid
ImagePyramid	/usr/local/include/opencv2/gpu/gpu.hpp	/^    inline ImagePyramid(const GpuMat& img, int nLayers, Stream& stream = Stream::Null())$/;"	f	class:cv::gpu::ImagePyramid
ImagePyramid	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS ImagePyramid$/;"	c	namespace:cv::gpu
ImplicitCast_	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitlyConvertible	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
Index	/usr/local/include/opencv2/flann/flann_base.hpp	/^    Index(const Matrix<ElementType>& features, const IndexParams& params, Distance distance = Distance() )$/;"	f	class:cvflann::Index
Index	/usr/local/include/opencv2/flann/flann_base.hpp	/^class Index : public NNIndex<Distance>$/;"	c	namespace:cvflann
Index	/usr/local/include/opencv2/flann/miniflann.hpp	/^class CV_EXPORTS_W Index$/;"	c	namespace:cv::flann
IndexHeader	/usr/local/include/opencv2/flann/saving.h	/^struct IndexHeader$/;"	s	namespace:cvflann
IndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS IndexParams$/;"	s	namespace:cv::flann
IndexParams	/usr/local/include/opencv2/flann/params.h	/^typedef std::map<std::string, any> IndexParams;$/;"	t	namespace:cvflann
Index_	/usr/local/include/opencv2/flann/flann.hpp	/^ Index_ {$/;"	c	namespace:cv::flann
Index_	/usr/local/include/opencv2/flann/flann.hpp	/^Index_<T>::Index_(const Mat& dataset, const ::cvflann::IndexParams& params)$/;"	f	class:cv::flann::Index_
Index_	/usr/local/include/opencv2/flann/flann.hpp	/^class FLANN_DEPRECATED Index_;$/;"	m	namespace:cv::flann	typeref:class:cv::flann::FLANN_DEPRECATED
Infinity	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Info	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS Info$/;"	c	namespace:cv::ocl
Init	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Init(const Element* array, size_t a_size, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
InnerParameters	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        struct InnerParameters$/;"	s	class:DetectionBasedTracker
InpainterBase	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    InpainterBase()$/;"	f	class:cv::videostab::InpainterBase
InpainterBase	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS InpainterBase$/;"	c	namespace:cv::videostab
InpaintingPipeline	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS InpaintingPipeline : public InpainterBase$/;"	c	namespace:cv::videostab
InstantiationContainer	/usr/local/include/opencv2/ts/ts_gtest.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam
Int	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int32	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int64	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
IntegerAreaFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ IntegerAreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::gpu::device::IntegerAreaFilter
IntegerAreaFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^    template <typename Ptr2D> struct IntegerAreaFilter$/;"	s	namespace:cv::gpu::device
InternalRunDeathTestFlag	/usr/local/include/opencv2/ts/ts_gtest.h	/^  InternalRunDeathTestFlag(const std::string& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	/usr/local/include/opencv2/ts/ts_gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
Interval	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    struct Interval$/;"	s	class:cvflann::KDTreeSingleIndex
Inverse	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        inline Inverse(bool val = false) : val_(val) {}$/;"	f	class:cvtest::Inverse
Inverse	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    class Inverse$/;"	c	namespace:cvtest
Ipl	/usr/local/include/opencv2/core/wimage.hpp	/^    IplImage* Ipl() {return image_; }$/;"	f	class:cv::WImage
Ipl	/usr/local/include/opencv2/core/wimage.hpp	/^    const IplImage* Ipl() const {return image_; }$/;"	f	class:cv::WImage
IplConvKernel	/usr/local/include/opencv2/core/types_c.h	/^IplConvKernel;$/;"	t	typeref:struct:_IplConvKernel
IplConvKernelFP	/usr/local/include/opencv2/core/types_c.h	/^IplConvKernelFP;$/;"	t	typeref:struct:_IplConvKernelFP
IplImage	/usr/local/include/opencv2/core/types_c.h	/^IplImage;$/;"	t	typeref:struct:_IplImage
IplMagno	/usr/local/include/opencv2/contrib/retina.hpp	/^            struct IplMagnoParameters IplMagno;$/;"	m	struct:cv::Retina::RetinaParameters	typeref:struct:cv::Retina::RetinaParameters::IplMagnoParameters
IplMagnoParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^               IplMagnoParameters():$/;"	f	struct:cv::Retina::RetinaParameters::IplMagnoParameters
IplMagnoParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^           struct IplMagnoParameters{ \/\/ Inner Plexiform Layer Magnocellular channel (IplMagno)$/;"	s	struct:cv::Retina::RetinaParameters
IplROI	/usr/local/include/opencv2/core/types_c.h	/^IplROI;$/;"	t	typeref:struct:_IplROI
IplTileInfo	/usr/local/include/opencv2/core/types_c.h	/^typedef struct _IplTileInfo IplTileInfo;$/;"	t	typeref:struct:_IplTileInfo
IsAProtocolMessage	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAlNum	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsBinaryFunction	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename F> struct IsBinaryFunction$/;"	s	namespace:cv::gpu::device
IsCalibrated	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool IsCalibrated() const { return isCalibrated; }$/;"	f	class:CvCalibFilter
IsContainer	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsEmpty	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool IsEmpty() const { return pathname_.empty(); }$/;"	f	class:testing::internal::FilePath
IsFloat	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsFloat	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsFloat	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsLower	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsNotContainer	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNull	/usr/local/include/opencv2/core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBuffer
IsNull	/usr/local/include/opencv2/core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBufferC
IsPowerOf2	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <unsigned int N> struct IsPowerOf2$/;"	s	namespace:cv::gpu::device::reduce_detail
IsPowerOf2	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct IsPowerOf2$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSimpleParameter	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^    template <typename T> struct IsSimpleParameter$/;"	s	namespace:cv::gpu::device
IsSpace	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsUnaryFunction	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename F> struct IsUnaryFunction$/;"	s	namespace:cv::gpu::device
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUpper	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsXDigit	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
IsXDigit	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:std::tr1
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
Ithreshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int Ithreshold;$/;"	m	struct:CvStereoGCState
J	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> J;$/;"	m	class:CvLevMarq
JPEG	/usr/local/include/opencv2/gpu/gpu.hpp	/^        JPEG,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Join	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
JtErr	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtErr;$/;"	m	class:CvLevMarq
JtJ	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJ;$/;"	m	class:CvLevMarq
JtJN	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJN;$/;"	m	class:CvLevMarq
JtJV	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJV;$/;"	m	class:CvLevMarq
JtJW	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJW;$/;"	m	class:CvLevMarq
JtJ_diag	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* JtJ_diag; \/\/diagonal of JtJ,  used to backup diagonal elements before augmentation$/;"	m	class:cv::LevMarqSparse
K	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
KALMAN_FILTER	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon22
KDTREE	/usr/local/include/opencv2/flann/defines.h	/^    KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
KDTREE_SINGLE	/usr/local/include/opencv2/flann/defines.h	/^    KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
KDTreeIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^    KDTreeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeIndexParams(),$/;"	f	class:cvflann::KDTreeIndex
KDTreeIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^class KDTreeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeIndexParams	/usr/local/include/opencv2/flann/kdtree_index.h	/^    KDTreeIndexParams(int trees = 4)$/;"	f	struct:cvflann::KDTreeIndexParams
KDTreeIndexParams	/usr/local/include/opencv2/flann/kdtree_index.h	/^struct KDTreeIndexParams : public IndexParams$/;"	s	namespace:cvflann
KDTreeIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS KDTreeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KDTreeSingleIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    KDTreeSingleIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeSingleIndexParams(),$/;"	f	class:cvflann::KDTreeSingleIndex
KDTreeSingleIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^class KDTreeSingleIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeSingleIndexParams	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    KDTreeSingleIndexParams(int leaf_max_size = 10, bool reorder = true, int dim = -1)$/;"	f	struct:cvflann::KDTreeSingleIndexParams
KDTreeSingleIndexParams	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^struct KDTreeSingleIndexParams : public IndexParams$/;"	s	namespace:cvflann
KERNEL_ASYMMETRICAL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon229
KERNEL_GENERAL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon229
KERNEL_INTEGER	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       KERNEL_SMOOTH=4, KERNEL_INTEGER=8 };$/;"	e	enum:cv::__anon229
KERNEL_SIZE	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const int KERNEL_SIZE = 9;$/;"	m	class:cv::BriefDescriptorExtractor
KERNEL_SMOOTH	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       KERNEL_SMOOTH=4, KERNEL_INTEGER=8 };$/;"	e	enum:cv::__anon229
KERNEL_SYMMETRICAL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon229
KL	/usr/local/include/opencv2/flann/defines.h	/^    KL         = 8,$/;"	e	enum:cvflann::flann_distance_t
KL_Divergence	/usr/local/include/opencv2/flann/dist.h	/^struct KL_Divergence$/;"	s	namespace:cvflann
KMEANS	/usr/local/include/opencv2/flann/defines.h	/^    KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
KMeansIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^    KMeansIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KMeansIndexParams(),$/;"	f	class:cvflann::KMeansIndex
KMeansIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^class KMeansIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KMeansIndexParams	/usr/local/include/opencv2/flann/kmeans_index.h	/^    KMeansIndexParams(int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::KMeansIndexParams
KMeansIndexParams	/usr/local/include/opencv2/flann/kmeans_index.h	/^struct KMeansIndexParams : public IndexParams$/;"	s	namespace:cvflann
KMeansIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS KMeansIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KMeansNode	/usr/local/include/opencv2/flann/kmeans_index.h	/^    struct KMeansNode$/;"	s	class:cvflann::KMeansIndex
KMeansNodePtr	/usr/local/include/opencv2/flann/kmeans_index.h	/^    typedef KMeansNode* KMeansNodePtr;$/;"	t	class:cvflann::KMeansIndex
KNNRadiusUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    KNNRadiusUniqueResultSet(unsigned int capacity, DistanceType radius)$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
KNNRadiusUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class KNNRadiusUniqueResultSet : public KNNUniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    KNNResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNResultSet
KNNResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class KNNResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNSimpleResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    KNNSimpleResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNSimpleResultSet
KNNSimpleResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class KNNSimpleResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    KNNUniqueResultSet(unsigned int capacity) : capacity_(capacity)$/;"	f	class:cvflann::KNNUniqueResultSet
KNNUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class KNNUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNOWN	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon334
KNearest	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvKNearest KNearest;$/;"	t	namespace:cv
KULLBACK_LEIBLER	/usr/local/include/opencv2/flann/defines.h	/^    KULLBACK_LEIBLER  = 8$/;"	e	enum:cvflann::flann_distance_t
KalmGainMatr	/usr/local/include/opencv2/video/tracking.hpp	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman
KalmanFilter	/usr/local/include/opencv2/video/tracking.hpp	/^class CV_EXPORTS_W KalmanFilter$/;"	c	namespace:cv
KeyPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_WRAP KeyPoint() : pt(0,0), size(0), angle(-1), response(0), octave(0), class_id(-1) {}$/;"	f	class:cv::KeyPoint
KeyPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_WRAP KeyPoint(float x, float y, float _size, float _angle=-1,$/;"	f	class:cv::KeyPoint
KeyPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^    KeyPoint(Point2f _pt, float _size, float _angle=-1,$/;"	f	class:cv::KeyPoint
KeyPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W_SIMPLE KeyPoint$/;"	c	namespace:cv
KeyPointCollection	/usr/local/include/opencv2/features2d/features2d.hpp	/^    class CV_EXPORTS KeyPointCollection$/;"	c	class:cv::GenericDescriptorMatcher
KeyPointsFilter	/usr/local/include/opencv2/features2d/features2d.hpp	/^    KeyPointsFilter(){}$/;"	f	class:cv::KeyPointsFilter
KeyPointsFilter	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS KeyPointsFilter$/;"	c	namespace:cv
KeypointGreater	/usr/local/include/opencv2/ts/ts_perf.hpp	/^struct CV_EXPORTS KeypointGreater$/;"	s	namespace:perf::comparators
KeypointLayout	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    enum KeypointLayout$/;"	g	class:cv::gpu::SURF_GPU
KeypointLayout	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            enum KeypointLayout$/;"	g	class:cv::ocl::SURF_OCL
KilledBySignal	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
L	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<vector<pixel> > L;$/;"	m	class:cv::LogPolar_Adjacent
L1	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS L1$/;"	s	namespace:cv
L1	/usr/local/include/opencv2/flann/dist.h	/^struct L1$/;"	s	namespace:cvflann
L1	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS L1$/;"	s	namespace:cv::ocl
L1Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0) {}$/;"	f	struct:cv::gpu::device::L1Dist
L1Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0.0f) {}$/;"	f	struct:cv::gpu::device::L1Dist
L1Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    template <> struct L1Dist<float>$/;"	s	namespace:cv::gpu::device
L1Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    template <typename T> struct L1Dist$/;"	s	namespace:cv::gpu::device
L1Dist	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
L1Dist	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
L2	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS L2$/;"	s	namespace:cv
L2	/usr/local/include/opencv2/flann/dist.h	/^struct L2$/;"	s	namespace:cvflann
L2	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS L2$/;"	s	namespace:cv::ocl
L2Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L2Dist() : mySum(0.0f) {}$/;"	f	struct:cv::gpu::device::L2Dist
L2Dist	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    struct L2Dist$/;"	s	namespace:cv::gpu::device
L2Dist	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
L2Dist	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
L2Hys	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { L2Hys=0 };$/;"	e	enum:cv::HOGDescriptor::__anon305
L2HysThreshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP double L2HysThreshold;$/;"	m	struct:cv::HOGDescriptor
L2_Simple	/usr/local/include/opencv2/flann/dist.h	/^struct L2_Simple$/;"	s	namespace:cvflann
LAB_CBRT_TAB_SIZE	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            LAB_CBRT_TAB_SIZE = 1024,$/;"	e	enum:cv::gpu::device::color_detail::__anon68
LAB_CBRT_TAB_SIZE_B	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            LAB_CBRT_TAB_SIZE_B = (256 * 3 \/ 2 * (1 << gamma_shift))$/;"	e	enum:cv::gpu::device::color_detail::__anon68
LAPLACIAN_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        LAPLACIAN_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
LAPLACIAN_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                LAPLACIAN_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
LBP	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon301
LDA	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LDA(InputArrayOfArrays src, InputArray labels,$/;"	f	class:cv::LDA
LDA	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LDA(const Mat& src, vector<int> labels,$/;"	f	class:cv::LDA
LDA	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LDA(int num_components = 0) :$/;"	f	class:cv::LDA
LDA	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS LDA$/;"	c	namespace:cv
LDetector	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS LDetector$/;"	c	namespace:cv
LINEAR	/usr/local/include/opencv2/flann/defines.h	/^    LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
LINEAR	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon286
LINEAR_SIMILARITY	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    LINEAR_SIMILARITY = 2,$/;"	e	enum:cv::videostab::MotionModel
LINES	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    LINES          = 0x0001,$/;"	e	enum:cv::ogl::__anon43
LINES	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        LINES          = 0x0001,$/;"	e	enum:cv::RenderMode::__anon44
LINE_LOOP	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    LINE_LOOP      = 0x0002,$/;"	e	enum:cv::ogl::__anon43
LINE_LOOP	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        LINE_LOOP      = 0x0002,$/;"	e	enum:cv::RenderMode::__anon44
LINE_STRIP	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    LINE_STRIP     = 0x0003,$/;"	e	enum:cv::ogl::__anon43
LINE_STRIP	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        LINE_STRIP     = 0x0003,$/;"	e	enum:cv::RenderMode::__anon44
LMEDS	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    LMEDS=CV_LMEDS, \/\/!< least-median algorithm$/;"	e	enum:cv::__anon3
LOCATION_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        LOCATION_ROW = 0,$/;"	e	enum:cv::gpu::FAST_GPU::__anon201
LOG	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define LOG(/;"	d
LOG	/usr/local/include/opencv2/ts/ts.hpp	/^        LOG=1 << LOG_IDX,$/;"	e	enum:cvtest::TS::__anon328
LOGD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#  define LOGD(/;"	d
LOGE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#  define LOGE(/;"	d
LOGI	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#  define LOGI(/;"	d
LOGIT	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon293
LOGLN	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define LOGLN(/;"	d
LOGLN_CHAT	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define LOGLN_CHAT(/;"	d
LOGW	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#  define LOGW(/;"	d
LOG_	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define LOG_(/;"	d
LOG_CHAT	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define LOG_CHAT(/;"	d
LOG_IDX	/usr/local/include/opencv2/ts/ts.hpp	/^        LOG_IDX=1,$/;"	e	enum:cvtest::TS::__anon328
LOG_METHOD	/usr/local/include/opencv2/flann/logger.h	/^#define LOG_METHOD(/;"	d
LOG_STITCHING_MSG	/usr/local/include/opencv2/stitching/detail/util.hpp	/^  #define LOG_STITCHING_MSG(/;"	d
LOG_WARP_SIZE	/usr/local/include/opencv2/gpu/device/warp.hpp	/^            LOG_WARP_SIZE = 5,$/;"	e	enum:cv::gpu::device::Warp::__anon182
LOW_PASS_FILTER	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon22
LSHSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(unsigned int) LSHSize(struct CvLSH* lsh);$/;"	f
Lab2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Lab2RGB() {}$/;"	f	struct:cv::gpu::device::color_detail::Lab2RGB
Lab2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Lab2RGB(const Lab2RGB& other_) {}$/;"	f	struct:cv::gpu::device::color_detail::Lab2RGB
Lab2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct Lab2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
Lab2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct Lab2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
Lab2RGBConvert_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void Lab2RGBConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
Lab2RGBConvert_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void Lab2RGBConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
LabCbrt_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ int LabCbrt_b(int i)$/;"	f	namespace:cv::gpu::device::color_detail
LatentSvmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS LatentSvmDetector$/;"	c	namespace:cv
Lc	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int Lc;  \/\/ Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.$/;"	m	struct:cv::gpu::FGDStatModel::Params
Lc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    Lc;			\/* Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.				*\/$/;"	m	struct:CvFGDStatModelParams
Lcc	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int Lcc;  \/\/ Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.$/;"	m	struct:cv::gpu::FGDStatModel::Params
Lcc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    Lcc;			\/* Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.			*\/$/;"	m	struct:CvFGDStatModelParams
LeftEyeRect	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace
LessThan	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS LessThan$/;"	c	namespace:cv
LessThanIdx	/usr/local/include/opencv2/core/operations.hpp	/^    LessThanIdx( const _Tp* _arr ) : arr(_arr) {}$/;"	f	class:cv::LessThanIdx
LessThanIdx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS LessThanIdx$/;"	c	namespace:cv
LevMarqSparse	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS LevMarqSparse {$/;"	c	namespace:cv
LinearFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ LinearFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::LinearFilter
LinearFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^    template <typename Ptr2D> struct LinearFilter$/;"	s	namespace:cv::gpu::device
LinearIndex	/usr/local/include/opencv2/flann/linear_index.h	/^    LinearIndex(const Matrix<ElementType>& inputData, const IndexParams& params = LinearIndexParams(),$/;"	f	class:cvflann::LinearIndex
LinearIndex	/usr/local/include/opencv2/flann/linear_index.h	/^class LinearIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LinearIndexParams	/usr/local/include/opencv2/flann/linear_index.h	/^    LinearIndexParams()$/;"	f	struct:cvflann::LinearIndexParams
LinearIndexParams	/usr/local/include/opencv2/flann/linear_index.h	/^struct LinearIndexParams : public IndexParams$/;"	s	namespace:cvflann
LinearIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS LinearIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LinearMemories	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  typedef std::vector<Mat> LinearMemories;$/;"	t	class:cv::linemod::Detector
LinearMemoryPyramid	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  typedef std::vector< std::vector<LinearMemories> > LinearMemoryPyramid;$/;"	t	class:cv::linemod::Detector
Load	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^            __device__ __forceinline__ static void Load(const T* ptr, int offset, T& val)  { val = ptr[offset];  }$/;"	f	struct:cv::gpu::device::ForceGlob
Load	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void Load(CvFileStorage* fs, CvFileNode* node)$/;"	f	class:CvBlobSeq
Lock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Lock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Lock() {}$/;"	f	class:std::tr1::Mutex
LogPolar_Adjacent	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LogPolar_Adjacent() {}$/;"	f	class:cv::LogPolar_Adjacent
LogPolar_Adjacent	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Adjacent$/;"	c	namespace:cv
LogPolar_Interp	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LogPolar_Interp() {}$/;"	f	class:cv::LogPolar_Interp
LogPolar_Interp	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Interp$/;"	c	namespace:cv
LogPolar_Overlapping	/usr/local/include/opencv2/contrib/contrib.hpp	/^        LogPolar_Overlapping() {}$/;"	f	class:cv::LogPolar_Overlapping
LogPolar_Overlapping	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Overlapping$/;"	c	namespace:cv
LogToStderr	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LogToStdout	/usr/local/include/opencv2/videostab/log.hpp	/^class CV_EXPORTS LogToStdout : public ILog$/;"	c	namespace:cv::videostab
Logger	/usr/local/include/opencv2/flann/logger.h	/^    Logger() : stream(stdout), logLevel(FLANN_LOG_WARN) {}$/;"	f	class:cvflann::Logger
Logger	/usr/local/include/opencv2/flann/logger.h	/^class Logger$/;"	c	namespace:cvflann
LshIndex	/usr/local/include/opencv2/flann/lsh_index.h	/^    LshIndex(const Matrix<ElementType>& input_data, const IndexParams& params = LshIndexParams(),$/;"	f	class:cvflann::LshIndex
LshIndex	/usr/local/include/opencv2/flann/lsh_index.h	/^class LshIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LshIndexParams	/usr/local/include/opencv2/flann/lsh_index.h	/^    LshIndexParams(unsigned int table_number = 12, unsigned int key_size = 20, unsigned int multi_probe_level = 2)$/;"	f	struct:cvflann::LshIndexParams
LshIndexParams	/usr/local/include/opencv2/flann/lsh_index.h	/^struct LshIndexParams : public IndexParams$/;"	s	namespace:cvflann
LshIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS LshIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LshStats	/usr/local/include/opencv2/flann/lsh_table.h	/^struct LshStats$/;"	s	namespace:cvflann::lsh
LshTable	/usr/local/include/opencv2/flann/lsh_table.h	/^    LshTable()$/;"	f	class:cvflann::lsh::LshTable
LshTable	/usr/local/include/opencv2/flann/lsh_table.h	/^    LshTable(unsigned int \/*feature_size*\/, unsigned int \/*key_size*\/)$/;"	f	class:cvflann::lsh::LshTable
LshTable	/usr/local/include/opencv2/flann/lsh_table.h	/^class LshTable$/;"	c	namespace:cvflann::lsh
LshTable	/usr/local/include/opencv2/flann/lsh_table.h	/^inline LshTable<unsigned char>::LshTable(unsigned int feature_size, unsigned int subsignature_size)$/;"	f	class:cvflann::lsh::LshTable
Luv2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Luv2RGB() {}$/;"	f	struct:cv::gpu::device::color_detail::Luv2RGB
Luv2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Luv2RGB(const Luv2RGB& other_) {}$/;"	f	struct:cv::gpu::device::color_detail::Luv2RGB
Luv2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct Luv2RGB<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
Luv2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct Luv2RGB<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
Luv2RGBConvert_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void Luv2RGBConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
Luv2RGBConvert_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void Luv2RGBConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
M	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
M	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
M	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
M	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        mutable double M;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
M	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            enum { M = N \/ 32 };$/;"	e	enum:cv::gpu::device::reduce_detail::GenericOptimized32::__anon69
M	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            enum { M = N \/ 32 };$/;"	e	enum:cv::gpu::device::reduce_key_val_detail::GenericOptimized32::__anon71
MANHATTAN	/usr/local/include/opencv2/flann/defines.h	/^    MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
MASK	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
MAT_ADD	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_ADD = 1,$/;"	e	enum:cv::ocl::__anon307
MAT_AND	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_AND,$/;"	e	enum:cv::ocl::__anon307
MAT_DIV	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_DIV,$/;"	e	enum:cv::ocl::__anon307
MAT_MUL	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_MUL,$/;"	e	enum:cv::ocl::__anon307
MAT_NOT	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_NOT,$/;"	e	enum:cv::ocl::__anon307
MAT_OR	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_OR,$/;"	e	enum:cv::ocl::__anon307
MAT_SUB	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_SUB,$/;"	e	enum:cv::ocl::__anon307
MAT_XOR	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^            MAT_XOR$/;"	e	enum:cv::ocl::__anon307
MAX	/usr/local/include/opencv2/core/types_c.h	/^#  define MAX(/;"	d
MAX_ARR	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
MAX_CAMERAS	/usr/local/include/opencv2/legacy/legacy.hpp	/^    enum { MAX_CAMERAS = 3 };$/;"	e	enum:CvCalibFilter::__anon279
MAX_DIST	/usr/local/include/opencv2/flann/defines.h	/^    MAX_DIST   = 4,$/;"	e	enum:cvflann::flann_distance_t
MAX_IDX	/usr/local/include/opencv2/ts/ts.hpp	/^        MAX_IDX=4$/;"	e	enum:cvtest::TS::__anon328
MEAN_FIELD	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        MEAN_FIELD = 1,$/;"	e	enum:cv::of2::FabMap::__anon25
MIN	/usr/local/include/opencv2/core/types_c.h	/^#  define MIN(/;"	d
MINKOWSKI	/usr/local/include/opencv2/flann/defines.h	/^    MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
MISCLASS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon294
MNCovariance	/usr/local/include/opencv2/video/tracking.hpp	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
MOG2_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS MOG2_GPU$/;"	c	namespace:cv::gpu
MOG_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS MOG_GPU$/;"	c	namespace:cv::gpu
MORPHING_METHOD_ERODE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE = 1,$/;"	e	enum:CvAdaptiveSkinDetector::__anon13
MORPHING_METHOD_ERODE_DILATE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE_DILATE = 3$/;"	e	enum:CvAdaptiveSkinDetector::__anon13
MORPHING_METHOD_ERODE_ERODE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE_ERODE = 2,$/;"	e	enum:CvAdaptiveSkinDetector::__anon13
MORPHING_METHOD_NONE	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MORPHING_METHOD_NONE = 0,$/;"	e	enum:CvAdaptiveSkinDetector::__anon13
MORPH_BLACKHAT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       MORPH_BLACKHAT=CV_MOP_BLACKHAT };$/;"	e	enum:cv::__anon230
MORPH_CLOSE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       MORPH_OPEN=CV_MOP_OPEN, MORPH_CLOSE=CV_MOP_CLOSE,$/;"	e	enum:cv::__anon230
MORPH_CROSS	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon231
MORPH_DILATE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { MORPH_ERODE=CV_MOP_ERODE, MORPH_DILATE=CV_MOP_DILATE,$/;"	e	enum:cv::__anon230
MORPH_ELLIPSE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon231
MORPH_ERODE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { MORPH_ERODE=CV_MOP_ERODE, MORPH_DILATE=CV_MOP_DILATE,$/;"	e	enum:cv::__anon230
MORPH_GRADIENT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       MORPH_GRADIENT=CV_MOP_GRADIENT, MORPH_TOPHAT=CV_MOP_TOPHAT,$/;"	e	enum:cv::__anon230
MORPH_OPEN	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       MORPH_OPEN=CV_MOP_OPEN, MORPH_CLOSE=CV_MOP_CLOSE,$/;"	e	enum:cv::__anon230
MORPH_RECT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon231
MORPH_TOPHAT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       MORPH_GRADIENT=CV_MOP_GRADIENT, MORPH_TOPHAT=CV_MOP_TOPHAT,$/;"	e	enum:cv::__anon230
MOTION_MODEL	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        MOTION_MODEL = 16$/;"	e	enum:cv::of2::FabMap::__anon25
MP	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int MP;$/;"	m	struct:CvConDensation
MP	/usr/local/include/opencv2/video/tracking.hpp	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman
MPEG1	/usr/local/include/opencv2/gpu/gpu.hpp	/^        MPEG1 = 0,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MPEG2	/usr/local/include/opencv2/gpu/gpu.hpp	/^        MPEG2,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MPEG4	/usr/local/include/opencv2/gpu/gpu.hpp	/^        MPEG4,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MSER	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W MSER : public FeatureDetector$/;"	c	namespace:cv
MSize	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MSize::MSize(int* _p) : p(_p) {}$/;"	f	class:cv::Mat::MSize
MStep	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MStep::MStep() { p = buf; p[0] = p[1] = 0; }$/;"	f	class:cv::Mat::MStep
MStep	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MStep::MStep(size_t s) { p = buf; p[0] = s; p[1] = 0; }$/;"	f	class:cv::Mat::MStep
MULTI_BAND	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon323
M_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
MaskCollection	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ MaskCollection(const MaskCollection& masks_)$/;"	f	struct:cv::gpu::device::MaskCollection
MaskCollection	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        explicit __host__ __device__ __forceinline__ MaskCollection(PtrStepb* maskCollection_)$/;"	f	struct:cv::gpu::device::MaskCollection
MaskCollection	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    struct MaskCollection$/;"	s	namespace:cv::gpu::device
MaskGenerator	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    class CV_EXPORTS MaskGenerator$/;"	c	class:cv::CascadeClassifier
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat() : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(const Mat& m)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(int _dims, const int* _sz, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(int _dims, const int* _sz, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int m, int n> inline Mat::Mat(const Matx<_Tp,m,n>& M, bool copyData)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int n> inline Mat::Mat(const Vec<_Tp, n>& vec, bool copyData)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const Point3_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const Point_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat
MatArg	/usr/local/include/opencv2/core/core.hpp	/^class CV_EXPORTS MatArg;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatCommaInitializer_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatCommaInitializer_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatCommaInitializer_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatCommaInitializer_<_Tp>::MatCommaInitializer_(Mat_<_Tp>* _m) : it(_m) {}$/;"	f	class:cv::MatCommaInitializer_
MatComparator	/usr/local/include/opencv2/ts/ts.hpp	/^struct CV_EXPORTS MatComparator$/;"	s	namespace:cvtest
MatConstIterator	/usr/local/include/opencv2/core/core.hpp	/^class CV_EXPORTS MatConstIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator::MatConstIterator()$/;"	f	class:cv::MatConstIterator
MatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m)$/;"	f	class:cv::MatConstIterator
MatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m, Point _pt)$/;"	f	class:cv::MatConstIterator
MatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator
MatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const MatConstIterator& it)$/;"	f	class:cv::MatConstIterator
MatConstIterator_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatConstIterator_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^    MatConstIterator_(const MatConstIterator_& it)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^    MatConstIterator_(const Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^    MatConstIterator_(const Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>::MatConstIterator_() {}$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>::MatConstIterator_(const Mat_<_Tp>* _m)$/;"	f	class:cv::MatConstIterator_
MatExpr	/usr/local/include/opencv2/core/core.hpp	/^class CV_EXPORTS MatExpr;$/;"	m	namespace:cv	typeref:class:cv::gpu
MatExpr	/usr/local/include/opencv2/core/mat.hpp	/^    MatExpr() : op(0), flags(0), a(Mat()), b(Mat()), c(Mat()), alpha(0), beta(0), s(Scalar()) {}$/;"	f	class:cv::MatExpr
MatExpr	/usr/local/include/opencv2/core/mat.hpp	/^    MatExpr(const MatOp* _op, int _flags, const Mat& _a=Mat(), const Mat& _b=Mat(),$/;"	f	class:cv::MatExpr
MatExpr	/usr/local/include/opencv2/core/mat.hpp	/^class CV_EXPORTS MatExpr$/;"	c	namespace:cv
MatInfo	/usr/local/include/opencv2/ts/ts.hpp	/^    MatInfo(const Mat& _m) : m(&_m) {}$/;"	f	struct:cvtest::MatInfo
MatInfo	/usr/local/include/opencv2/ts/ts.hpp	/^struct CV_EXPORTS MatInfo$/;"	s	namespace:cvtest
MatIterator_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatIterator_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_() : MatConstIterator_<_Tp>() {}$/;"	f	class:cv::MatIterator_
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m)$/;"	f	class:cv::MatIterator_
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatIterator_
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const MatIterator_& it)$/;"	f	class:cv::MatIterator_
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatIterator_
MatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const Mat_<_Tp>* _m, const int* _idx)$/;"	f	class:cv::MatIterator_
MatND	/usr/local/include/opencv2/core/core.hpp	/^typedef Mat MatND;$/;"	t	namespace:cv
MatOp	/usr/local/include/opencv2/core/mat.hpp	/^    MatOp() {};$/;"	f	class:cv::MatOp
MatOp	/usr/local/include/opencv2/core/mat.hpp	/^class CV_EXPORTS MatOp$/;"	c	namespace:cv
MatOp_Base	/usr/local/include/opencv2/core/core.hpp	/^class CV_EXPORTS MatOp_Base;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatType	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    MatType(int val=0) : _type(val) {}$/;"	f	class:perf::MatType
MatType	/usr/local/include/opencv2/ts/ts_perf.hpp	/^class MatType$/;"	c	namespace:perf
Mat_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Mat_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^    Mat_<_Tp>::Mat_(const Matx<typename DataType<_Tp>::channel_type,m,n>& M, bool copyData)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^    Mat_<_Tp>::Mat_(const Vec<typename DataType<_Tp>::channel_type, n>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_()$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(Size _sz)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(Size _sz, const _Tp& value)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat& m)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const MatExpr& e)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m, const Range& _rowRange, const Range& _colRange)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m, const Rect& roi)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_<_Tp>& m, const Range* ranges)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Point3_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Point_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _dims, const int* _sz, const _Tp& _s)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols, _Tp* _data, size_t steps)$/;"	f	class:cv::Mat_
Mat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols, const _Tp& value)$/;"	f	class:cv::Mat_
Match	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  Match()$/;"	f	struct:cv::linemod::Match
Match	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^inline  Match::Match(int _x, int _y, float _similarity, const std::string& _class_id, int _template_id)$/;"	f	class:cv::linemod::Match
Match	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct CV_EXPORTS Match$/;"	s	namespace:cv::linemod
MatchTemplateBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^struct CV_EXPORTS MatchTemplateBuf$/;"	s	namespace:cv::gpu
MatchTemplateBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^        struct CV_EXPORTS MatchTemplateBuf$/;"	s	namespace:cv::ocl
MatchesInfo	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^struct CV_EXPORTS MatchesInfo$/;"	s	namespace:cv::detail
Matrix	/usr/local/include/opencv2/flann/matrix.h	/^    Matrix() : rows(0), cols(0), stride(0), data(NULL)$/;"	f	class:cvflann::Matrix
Matrix	/usr/local/include/opencv2/flann/matrix.h	/^    Matrix(T* data_, size_t rows_, size_t cols_, size_t stride_ = 0) :$/;"	f	class:cvflann::Matrix
Matrix	/usr/local/include/opencv2/flann/matrix.h	/^class Matrix$/;"	c	namespace:cvflann
Matx	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp, int m, int n> class CV_EXPORTS Matx$/;"	c	namespace:cv
Matx	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp, int m, int n> class CV_EXPORTS Matx;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b, Matx_MatMulOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, _T2 alpha, Matx_ScaleOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_AddOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_MulOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_SubOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, n, m>& a, Matx_TOp)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^inline Matx<_Tp,m,n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx()$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Matx
Matx	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(const _Tp* values)$/;"	f	class:cv::Matx
MatxCommaInitializer	/usr/local/include/opencv2/core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n>::MatxCommaInitializer(Matx<_Tp, m, n>* _mtx)$/;"	f	class:cv::MatxCommaInitializer
Matx_AddOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_AddOp {};$/;"	s	namespace:cv
Matx_DetOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m> struct CV_EXPORTS Matx_DetOp$/;"	s	namespace:cv
Matx_DetOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 1>$/;"	s	namespace:cv
Matx_DetOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 2>$/;"	s	namespace:cv
Matx_DetOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 3>$/;"	s	namespace:cv
Matx_FastInvOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m> struct CV_EXPORTS Matx_FastInvOp$/;"	s	namespace:cv
Matx_FastInvOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastInvOp<_Tp, 2>$/;"	s	namespace:cv
Matx_FastInvOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastInvOp<_Tp, 3>$/;"	s	namespace:cv
Matx_FastSolveOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> struct CV_EXPORTS Matx_FastSolveOp$/;"	s	namespace:cv
Matx_FastSolveOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastSolveOp<_Tp, 2, 1>$/;"	s	namespace:cv
Matx_FastSolveOp	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastSolveOp<_Tp, 3, 1>$/;"	s	namespace:cv
Matx_MatMulOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_MatMulOp {};$/;"	s	namespace:cv
Matx_MulOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_MulOp {};$/;"	s	namespace:cv
Matx_ScaleOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_ScaleOp {};$/;"	s	namespace:cv
Matx_SubOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_SubOp {};$/;"	s	namespace:cv
Matx_TOp	/usr/local/include/opencv2/core/core.hpp	/^struct CV_EXPORTS Matx_TOp {};$/;"	s	namespace:cv
MaxDistance	/usr/local/include/opencv2/flann/dist.h	/^struct MaxDistance$/;"	s	namespace:cvflann
MaxMeanShiftIteration	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MaxMeanShiftIteration   = 5,$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon15
MaxSetSizeIteration	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MaxSetSizeIteration     = 5$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon15
MeanShiftTracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvMeanShiftTracker MeanShiftTracker;$/;"	t	namespace:cv
MeanShiftTrackerParams	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvMeanShiftTrackerParams MeanShiftTrackerParams;$/;"	t	namespace:cv
MeasurementMatr	/usr/local/include/opencv2/video/tracking.hpp	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman
MercatorProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS MercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
MercatorWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    MercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::MercatorWarper
MercatorWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS MercatorWarper : public RotationWarperBase<MercatorProjector>$/;"	c	namespace:cv::detail
MercatorWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class MercatorWarper: public WarperCreator$/;"	c	namespace:cv
Mesh3D	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS Mesh3D$/;"	c	namespace:cv
Message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
MinKernelMass	/usr/local/include/opencv2/contrib/contrib.hpp	/^        MinKernelMass           = 1000$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon14
MinkowskiDistance	/usr/local/include/opencv2/flann/dist.h	/^    MinkowskiDistance(int order_) : order(order_) {}$/;"	f	struct:cvflann::MinkowskiDistance
MinkowskiDistance	/usr/local/include/opencv2/flann/dist.h	/^struct MinkowskiDistance$/;"	s	namespace:cvflann
Modality	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class CV_EXPORTS Modality$/;"	c	namespace:cv::linemod
Moments	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS_W_MAP Moments$/;"	c	namespace:cv
Monochrome	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Monochrome=0,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
MotionFilterBase	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    MotionFilterBase() : radius_(0) {}$/;"	f	class:cv::videostab::MotionFilterBase
MotionFilterBase	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^class CV_EXPORTS MotionFilterBase : public IMotionStabilizer$/;"	c	namespace:cv::videostab
MotionInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS MotionInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
MotionModel	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^typedef CvMotionModel MotionModel;$/;"	t	namespace:cv
MotionModel	/usr/local/include/opencv2/videostab/global_motion.hpp	/^enum MotionModel$/;"	g	namespace:cv::videostab
MouseCallback	/usr/local/include/opencv2/highgui/highgui.hpp	/^typedef void (*MouseCallback)(int event, int x, int y, int flags, void* userdata);$/;"	t	namespace:cv
MouthRect	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvRect MouthRect;$/;"	m	struct:CvFace
MserFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef MSER MserFeatureDetector;$/;"	t	namespace:cv
MultiBandBlender	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^class CV_EXPORTS MultiBandBlender : public Blender$/;"	c	namespace:cv::detail
Mutex	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	/usr/local/include/opencv2/ts/ts_gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	/usr/local/include/opencv2/ts/ts_gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
MutexBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
N	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
N	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
N	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
N	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder
N1c	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int N1c; \/\/ Number of color vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N1c	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    N1c;			\/* Number of color vectors used to model normal background color variation at a given pixel.			*\/$/;"	m	struct:CvFGDStatModelParams
N1cc	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int N1cc; \/\/ Number of color co-occurrence vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N1cc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    N1cc;		\/* Number of color co-occurrence vectors used to model normal background color variation at a given pixel.	*\/$/;"	m	struct:CvFGDStatModelParams
N2c	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int N2c; \/\/ Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N2c	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    N2c;			\/* Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.			*\/$/;"	m	struct:CvFGDStatModelParams
N2cc	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int N2cc; \/\/ Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N2cc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    N2cc;		\/* Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.	*\/$/;"	m	struct:CvFGDStatModelParams
NAIVE_BAYES	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        NAIVE_BAYES = 4,$/;"	e	enum:cv::of2::FabMap::__anon25
NARROW_PRESET	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon9
NATIVE_DOUBLE	/usr/local/include/opencv2/core/gpumat.hpp	/^        NATIVE_DOUBLE = FEATURE_SET_COMPUTE_13,$/;"	e	enum:cv::gpu::FeatureSet
NB_ORIENPAIRS	/usr/local/include/opencv2/features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon56
NB_PAIRS	/usr/local/include/opencv2/features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon56
NB_SCALES	/usr/local/include/opencv2/features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon56
NEXT_AROUND_DST	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        NEXT_AROUND_DST   = 0x22,$/;"	e	enum:cv::Subdiv2D::__anon247
NEXT_AROUND_LEFT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:cv::Subdiv2D::__anon247
NEXT_AROUND_ORG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:cv::Subdiv2D::__anon247
NEXT_AROUND_RIGHT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:cv::Subdiv2D::__anon247
NNIndex	/usr/local/include/opencv2/flann/nn_index.h	/^class NNIndex$/;"	c	namespace:cvflann
NO	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon323
NO	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon324
NONE	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        NONE            = 0,$/;"	e	enum:cv::ogl::Texture2D::Format
NORM_HAMMING	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_HAMMING2	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_INF	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_L1	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_L2	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_L2SQR	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_MINMAX	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_RELATIVE	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NORM_TYPE_MASK	/usr/local/include/opencv2/core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon27
NOT_DRAW_SINGLE_POINTS	/usr/local/include/opencv2/features2d/features2d.hpp	/^          NOT_DRAW_SINGLE_POINTS = 2, \/\/ Single keypoints will not be drawn.$/;"	e	enum:cv::DrawMatchesFlags::__anon63
NO_INPUT_SCALE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon298
NO_OUTPUT_SCALE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon298
NU	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
NUL	/usr/local/include/opencv2/ts/ts.hpp	/^        NUL=0,$/;"	e	enum:cvtest::TS::__anon328
NU_SVC	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon285
NU_SVR	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon285
NaluFramingType	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       NaluFramingType; \/\/    NVVE_CONFIGURE_NALU_FRAMING_TYPE$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
NativeArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
NativeArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
NeuralNet_MLP	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvANN_MLP NeuralNet_MLP;$/;"	t	namespace:cv
No	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::gpu::device::IsBinaryFunction
No	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::gpu::device::IsUnaryFunction
NoExposureCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS NoExposureCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
NoSeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS NoSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
Node	/usr/local/include/opencv2/contrib/contrib.hpp	/^            Node() {}$/;"	f	struct:cv::Octree::Node
Node	/usr/local/include/opencv2/contrib/contrib.hpp	/^        struct Node$/;"	s	class:cv::Octree
Node	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    struct Node$/;"	s	class:cvflann::HierarchicalClusteringIndex
Node	/usr/local/include/opencv2/flann/kdtree_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeIndex
Node	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeSingleIndex
NodePtr	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::HierarchicalClusteringIndex
NodePtr	/usr/local/include/opencv2/flann/kdtree_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeIndex
NodePtr	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeSingleIndex
NonConstType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnConst<T>::type                                                NonConstType;$/;"	t	struct:cv::gpu::device::TypeTraits
NonVolatileType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<T>::type                                             NonVolatileType;$/;"	t	struct:cv::gpu::device::TypeTraits
None	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NormalBayesClassifier	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvNormalBayesClassifier NormalBayesClassifier;$/;"	t	namespace:cv
Notification	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Notification() : notified_(false) {$/;"	f	class:std::tr1::Notification
Notification	/usr/local/include/opencv2/ts/ts_gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Notify() {$/;"	f	class:std::tr1::Notification
NullDeblurer	/usr/local/include/opencv2/videostab/deblurring.hpp	/^class CV_EXPORTS NullDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
NullFrameSource	/usr/local/include/opencv2/videostab/frame_source.hpp	/^class CV_EXPORTS NullFrameSource : public IFrameSource$/;"	c	namespace:cv::videostab
NullInpainter	/usr/local/include/opencv2/videostab/inpainting.hpp	/^class CV_EXPORTS NullInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
NullLog	/usr/local/include/opencv2/videostab/log.hpp	/^class CV_EXPORTS NullLog : public ILog$/;"	c	namespace:cv::videostab
OCTAVE_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        OCTAVE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
OCTAVE_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        OCTAVE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
OCTAVE_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                OCTAVE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
OK	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	e	enum:cv::Stitcher::Status
OK	/usr/local/include/opencv2/ts/ts.hpp	/^        OK=0,$/;"	e	enum:cvtest::TS::__anon329
ONE_CLASS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon285
OPENCV_ASSERT	/usr/local/include/opencv2/core/core_c.h	/^#define OPENCV_ASSERT(/;"	d
OPENCV_CALL	/usr/local/include/opencv2/core/core_c.h	/^#define OPENCV_CALL(/;"	d
OPENCV_ERRCHK	/usr/local/include/opencv2/core/core_c.h	/^#define OPENCV_ERRCHK(/;"	d
OPENCV_ERROR	/usr/local/include/opencv2/core/core_c.h	/^#define OPENCV_ERROR(/;"	d
OPENCV_FLANN_ALLOCATOR_H_	/usr/local/include/opencv2/flann/allocator.h	/^#define OPENCV_FLANN_ALLOCATOR_H_$/;"	d
OPENCV_FLANN_ALL_INDICES_H_	/usr/local/include/opencv2/flann/all_indices.h	/^#define OPENCV_FLANN_ALL_INDICES_H_$/;"	d
OPENCV_FLANN_ANY_H_	/usr/local/include/opencv2/flann/any.h	/^#define OPENCV_FLANN_ANY_H_$/;"	d
OPENCV_FLANN_AUTOTUNED_INDEX_H_	/usr/local/include/opencv2/flann/autotuned_index.h	/^#define OPENCV_FLANN_AUTOTUNED_INDEX_H_$/;"	d
OPENCV_FLANN_BASE_HPP_	/usr/local/include/opencv2/flann/flann_base.hpp	/^#define OPENCV_FLANN_BASE_HPP_$/;"	d
OPENCV_FLANN_COMPOSITE_INDEX_H_	/usr/local/include/opencv2/flann/composite_index.h	/^#define OPENCV_FLANN_COMPOSITE_INDEX_H_$/;"	d
OPENCV_FLANN_CONFIG_H_	/usr/local/include/opencv2/flann/config.h	/^#define OPENCV_FLANN_CONFIG_H_$/;"	d
OPENCV_FLANN_DATASET_H_	/usr/local/include/opencv2/flann/matrix.h	/^#define OPENCV_FLANN_DATASET_H_$/;"	d
OPENCV_FLANN_DEFINES_H_	/usr/local/include/opencv2/flann/defines.h	/^#define OPENCV_FLANN_DEFINES_H_$/;"	d
OPENCV_FLANN_DIST_H_	/usr/local/include/opencv2/flann/dist.h	/^#define OPENCV_FLANN_DIST_H_$/;"	d
OPENCV_FLANN_DUMMY_H_	/usr/local/include/opencv2/flann/dummy.h	/^#define OPENCV_FLANN_DUMMY_H_$/;"	d
OPENCV_FLANN_DYNAMIC_BITSET_H_	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^#define OPENCV_FLANN_DYNAMIC_BITSET_H_$/;"	d
OPENCV_FLANN_GENERAL_H_	/usr/local/include/opencv2/flann/general.h	/^#define OPENCV_FLANN_GENERAL_H_$/;"	d
OPENCV_FLANN_GROUND_TRUTH_H_	/usr/local/include/opencv2/flann/ground_truth.h	/^#define OPENCV_FLANN_GROUND_TRUTH_H_$/;"	d
OPENCV_FLANN_HDF5_H_	/usr/local/include/opencv2/flann/hdf5.h	/^#define OPENCV_FLANN_HDF5_H_$/;"	d
OPENCV_FLANN_HEAP_H_	/usr/local/include/opencv2/flann/heap.h	/^#define OPENCV_FLANN_HEAP_H_$/;"	d
OPENCV_FLANN_HIERARCHICAL_CLUSTERING_INDEX_H_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^#define OPENCV_FLANN_HIERARCHICAL_CLUSTERING_INDEX_H_$/;"	d
OPENCV_FLANN_INDEX_TESTING_H_	/usr/local/include/opencv2/flann/index_testing.h	/^#define OPENCV_FLANN_INDEX_TESTING_H_$/;"	d
OPENCV_FLANN_KDTREE_INDEX_H_	/usr/local/include/opencv2/flann/kdtree_index.h	/^#define OPENCV_FLANN_KDTREE_INDEX_H_$/;"	d
OPENCV_FLANN_KDTREE_SINGLE_INDEX_H_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^#define OPENCV_FLANN_KDTREE_SINGLE_INDEX_H_$/;"	d
OPENCV_FLANN_KMEANS_INDEX_H_	/usr/local/include/opencv2/flann/kmeans_index.h	/^#define OPENCV_FLANN_KMEANS_INDEX_H_$/;"	d
OPENCV_FLANN_LINEAR_INDEX_H_	/usr/local/include/opencv2/flann/linear_index.h	/^#define OPENCV_FLANN_LINEAR_INDEX_H_$/;"	d
OPENCV_FLANN_LOGGER_H	/usr/local/include/opencv2/flann/logger.h	/^#define OPENCV_FLANN_LOGGER_H$/;"	d
OPENCV_FLANN_LSH_INDEX_H_	/usr/local/include/opencv2/flann/lsh_index.h	/^#define OPENCV_FLANN_LSH_INDEX_H_$/;"	d
OPENCV_FLANN_LSH_TABLE_H_	/usr/local/include/opencv2/flann/lsh_table.h	/^#define OPENCV_FLANN_LSH_TABLE_H_$/;"	d
OPENCV_FLANN_NNINDEX_H	/usr/local/include/opencv2/flann/nn_index.h	/^#define OPENCV_FLANN_NNINDEX_H$/;"	d
OPENCV_FLANN_OBJECT_FACTORY_H_	/usr/local/include/opencv2/flann/object_factory.h	/^#define OPENCV_FLANN_OBJECT_FACTORY_H_$/;"	d
OPENCV_FLANN_PARAMS_H_	/usr/local/include/opencv2/flann/params.h	/^#define OPENCV_FLANN_PARAMS_H_$/;"	d
OPENCV_FLANN_RANDOM_H	/usr/local/include/opencv2/flann/random.h	/^#define OPENCV_FLANN_RANDOM_H$/;"	d
OPENCV_FLANN_RESULTSET_H	/usr/local/include/opencv2/flann/result_set.h	/^#define OPENCV_FLANN_RESULTSET_H$/;"	d
OPENCV_FLANN_SAMPLING_H_	/usr/local/include/opencv2/flann/sampling.h	/^#define OPENCV_FLANN_SAMPLING_H_$/;"	d
OPENCV_FLANN_SAVING_H_	/usr/local/include/opencv2/flann/saving.h	/^#define OPENCV_FLANN_SAVING_H_$/;"	d
OPENCV_FLANN_SIMPLEX_DOWNHILL_H_	/usr/local/include/opencv2/flann/simplex_downhill.h	/^#define OPENCV_FLANN_SIMPLEX_DOWNHILL_H_$/;"	d
OPENCV_FLANN_TIMER_H	/usr/local/include/opencv2/flann/timer.h	/^#define OPENCV_FLANN_TIMER_H$/;"	d
OPENCV_GPU_EMULATION_HPP_	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^#define OPENCV_GPU_EMULATION_HPP_$/;"	d
OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR$/;"	d
OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#define OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR(/;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_Lab2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_Lab2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_Lab2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_Lab2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_Luv2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_Luv2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_Luv2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_Luv2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_MINMAX	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#define OPENCV_GPU_IMPLEMENT_MINMAX(/;"	d
OPENCV_GPU_IMPLEMENT_MINMAX	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#undef OPENCV_GPU_IMPLEMENT_MINMAX$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2Lab_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2Lab_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2Lab_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2Lab_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2Luv_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2Luv_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2Luv_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2Luv_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_TYPE_VEC	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_TYPE_VEC$/;"	d
OPENCV_GPU_IMPLEMENT_TYPE_VEC	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^#define OPENCV_GPU_IMPLEMENT_TYPE_VEC(/;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_UN_FUNCTOR$/;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#define OPENCV_GPU_IMPLEMENT_UN_FUNCTOR(/;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR_NO_DOUBLE	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_UN_FUNCTOR_NO_DOUBLE$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_BINOP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_VEC_BINOP$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_BINOP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^#define OPENCV_GPU_IMPLEMENT_VEC_BINOP(/;"	d
OPENCV_GPU_IMPLEMENT_VEC_INT_OP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_VEC_INT_OP$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_INT_OP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^#define OPENCV_GPU_IMPLEMENT_VEC_INT_OP(/;"	d
OPENCV_GPU_IMPLEMENT_VEC_OP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_VEC_OP$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_OP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^#define OPENCV_GPU_IMPLEMENT_VEC_OP(/;"	d
OPENCV_GPU_IMPLEMENT_VEC_TRAITS	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_VEC_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_TRAITS	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^#define OPENCV_GPU_IMPLEMENT_VEC_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_VEC_UNOP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_VEC_UNOP$/;"	d
OPENCV_GPU_IMPLEMENT_VEC_UNOP	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^#define OPENCV_GPU_IMPLEMENT_VEC_UNOP(/;"	d
OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS(/;"	d
OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/color.hpp	/^    #undef OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS$/;"	d
OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS(/;"	d
OPENCV_GPU_LOG_MEM_BANKS	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    #define OPENCV_GPU_LOG_MEM_BANKS /;"	d
OPENCV_GPU_LOG_WARP_SIZE	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    #define OPENCV_GPU_LOG_WARP_SIZE /;"	d
OPENCV_GPU_MEM_BANKS	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    #define OPENCV_GPU_MEM_BANKS /;"	d
OPENCV_GPU_TRANSFORM_FUNCTOR_TRAITS	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#define OPENCV_GPU_TRANSFORM_FUNCTOR_TRAITS(/;"	d
OPENCV_GPU_WARP_REDUCE_HPP__	/usr/local/include/opencv2/gpu/device/warp_reduce.hpp	/^#define OPENCV_GPU_WARP_REDUCE_HPP__$/;"	d
OPENCV_GPU_WARP_SIZE	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    #define OPENCV_GPU_WARP_SIZE /;"	d
OPENCV_RSTERR	/usr/local/include/opencv2/core/core_c.h	/^#define OPENCV_RSTERR(/;"	d
OPLandIplParvo	/usr/local/include/opencv2/contrib/retina.hpp	/^            struct OPLandIplParvoParameters OPLandIplParvo;$/;"	m	struct:cv::Retina::RetinaParameters	typeref:struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
OPLandIplParvoParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^               OPLandIplParvoParameters():colorMode(true),$/;"	f	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
OPLandIplParvoParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^        struct OPLandIplParvoParameters{ \/\/ Outer Plexiform Layer (OPL) and Inner Plexiform Layer Parvocellular (IplParvo) parameters$/;"	s	struct:cv::Retina::RetinaParameters
OPTFLOW_FARNEBACK_GAUSSIAN	/usr/local/include/opencv2/video/tracking.hpp	/^    OPTFLOW_FARNEBACK_GAUSSIAN = 256$/;"	e	enum:cv::__anon333
OPTFLOW_LK_GET_MIN_EIGENVALS	/usr/local/include/opencv2/video/tracking.hpp	/^    OPTFLOW_LK_GET_MIN_EIGENVALS = CV_LKFLOW_GET_MIN_EIGENVALS,$/;"	e	enum:cv::__anon333
OPTFLOW_USE_INITIAL_FLOW	/usr/local/include/opencv2/video/tracking.hpp	/^    OPTFLOW_USE_INITIAL_FLOW = CV_LKFLOW_INITIAL_GUESSES,$/;"	e	enum:cv::__anon333
OPTICAL_FLOW	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon24
ORB	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W ORB : public Feature2D$/;"	c	namespace:cv
ORB_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS ORB_GPU$/;"	c	namespace:cv::gpu
ORIG_RESOL	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    enum { ORIG_RESOL = -1 };$/;"	e	enum:cv::Stitcher::__anon326
OUTPUT	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
OVERSEE_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
Object	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        typedef std::pair<cv::Rect, int> Object;$/;"	t	class:DetectionBasedTracker
ObjectDetection	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    struct CV_EXPORTS ObjectDetection$/;"	s	class:cv::LatentSvmDetector
ObjectFactory	/usr/local/include/opencv2/flann/object_factory.h	/^    ObjectFactory() {}$/;"	f	class:cvflann::ObjectFactory
ObjectFactory	/usr/local/include/opencv2/flann/object_factory.h	/^class ObjectFactory$/;"	c	namespace:cvflann
ObjectRegistry	/usr/local/include/opencv2/flann/object_factory.h	/^    typedef std::map<UniqueIdType, ObjectCreator> ObjectRegistry;$/;"	t	class:cvflann::ObjectFactory
OclCascadeClassifier	/usr/local/include/opencv2/ocl/ocl.hpp	/^            OclCascadeClassifier() {};$/;"	f	class:cv::ocl::OclCascadeClassifier
OclCascadeClassifier	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS_W OclCascadeClassifier : public  cv::CascadeClassifier$/;"	c	namespace:cv::ocl
Octree	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS Octree$/;"	c	namespace:cv
OnEnvironmentsSetUpEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnePassStabilizer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^class CV_EXPORTS OnePassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
OneWayDescriptor	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptor$/;"	c	namespace:cv
OneWayDescriptorBase	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorBase$/;"	c	namespace:cv
OneWayDescriptorMatch	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef OneWayDescriptorMatcher OneWayDescriptorMatch;$/;"	t	namespace:cv
OneWayDescriptorMatcher	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
OneWayDescriptorObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorObject : public OneWayDescriptorBase$/;"	c	namespace:cv
OpUnroller	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<1>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<2>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<3>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<4>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<8>$/;"	s	namespace:cv::gpu::device::transform_detail
OpenGlDrawCallback	/usr/local/include/opencv2/highgui/highgui.hpp	/^typedef void (*OpenGlDrawCallback)(void* userdata);$/;"	t	namespace:cv
OpponentColorDescriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS OpponentColorDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
OpticalFlowDual_TVL1_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS OpticalFlowDual_TVL1_GPU$/;"	c	namespace:cv::gpu
OrbDescriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef ORB OrbDescriptorExtractor;$/;"	t	namespace:cv
OrbFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef ORB OrbFeatureDetector;$/;"	t	namespace:cv
OrbFeaturesFinder	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS OrbFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
OrientationPair	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct OrientationPair$/;"	s	class:cv::FREAK
P	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* P; \/\/ parameters used to evaluate function with new params$/;"	m	class:cv::LevMarqSparse
P	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon287
P1	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int P1;$/;"	m	class:cv::StereoSGBM
P2	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int P2;$/;"	m	class:cv::StereoSGBM
P3P	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    P3P=CV_P3P$/;"	e	enum:cv::__anon4
PARAM_TEST_CASE	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define PARAM_TEST_CASE(/;"	d
PATCH_HEIGHT	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static const int PATCH_HEIGHT = 24;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PATCH_SIZE	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const int PATCH_SIZE = 48;$/;"	m	class:cv::BriefDescriptorExtractor
PATCH_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^        PATCH_SIZE = 31,$/;"	e	enum:cv::FernClassifier::__anon282
PATCH_SIZE	/usr/local/include/opencv2/legacy/legacy.hpp	/^    static const uchar PATCH_SIZE = 32;$/;"	m	class:cv::RandomizedTree
PATCH_WIDTH	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static const int PATCH_WIDTH = 24;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PENALIZATION_CHARBONNIER	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon19
PENALIZATION_PERONA_MALIK	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon19
PENALIZATION_TICHONOV	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon19
PERF_PROXY_NAMESPACE_NAME_	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define PERF_PROXY_NAMESPACE_NAME_(/;"	d
PERF_RUN_GPU	/usr/local/include/opencv2/ts/ts_perf.hpp	/^# define PERF_RUN_GPU(/;"	d
PERF_TEST	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define PERF_TEST(/;"	d
PERF_TESTS_LOG_TAG	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#  define PERF_TESTS_LOG_TAG /;"	d
PERF_TEST_F	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define PERF_TEST_F(/;"	d
PERF_TEST_P	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define PERF_TEST_P(/;"	d
PFRAME	/usr/local/include/opencv2/gpu/gpu.hpp	/^            PFRAME = 2,$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
PIXEL_PACK_BUFFER	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        PIXEL_PACK_BUFFER    = 0x88EB, \/\/!< The buffer will be used for reading from OpenGL textures$/;"	e	enum:cv::ogl::Buffer::Target
PIXEL_UNPACK_BUFFER	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        PIXEL_UNPACK_BUFFER  = 0x88EC  \/\/!< The buffer will be used for writing to OpenGL textures$/;"	e	enum:cv::ogl::Buffer::Target
PNCovariance	/usr/local/include/opencv2/video/tracking.hpp	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
POINTS	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    POINTS         = 0x0000,$/;"	e	enum:cv::ogl::__anon43
POINTS	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        POINTS         = 0x0000,$/;"	e	enum:cv::RenderMode::__anon44
POLY	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon286
POLYGON	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    POLYGON        = 0x0009$/;"	e	enum:cv::ogl::__anon43
POLYGON	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        POLYGON        = 0x0009$/;"	e	enum:cv::RenderMode::__anon44
POSE_COUNT	/usr/local/include/opencv2/legacy/legacy.hpp	/^        static const int POSE_COUNT = 500;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PREFILTER_NORMALIZED_RESPONSE	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { PREFILTER_NORMALIZED_RESPONSE = 0, PREFILTER_XSOBEL = 1,$/;"	e	enum:cv::StereoBM::__anon9
PREFILTER_XSOBEL	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { PREFILTER_NORMALIZED_RESPONSE = 0, PREFILTER_XSOBEL = 1,$/;"	e	enum:cv::StereoBM::__anon9
PREFILTER_XSOBEL	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon186
PREFILTER_XSOBEL	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::ocl::StereoBM_OCL::__anon316
PREV_AROUND_DST	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PREV_AROUND_DST   = 0x33,$/;"	e	enum:cv::Subdiv2D::__anon247
PREV_AROUND_LEFT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:cv::Subdiv2D::__anon247
PREV_AROUND_ORG	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PREV_AROUND_ORG   = 0x11,$/;"	e	enum:cv::Subdiv2D::__anon247
PREV_AROUND_RIGHT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PREV_AROUND_RIGHT = 0x02$/;"	e	enum:cv::Subdiv2D::__anon247
PROFILE_DOG	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define PROFILE_DOG /;"	d
PROFILE_EPANECHNIKOV	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define PROFILE_EPANECHNIKOV /;"	d
PROJ_SPHERICAL_EQRECT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    PROJ_SPHERICAL_EQRECT = 1$/;"	e	enum:cv::__anon237
PROJ_SPHERICAL_ORTHO	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    PROJ_SPHERICAL_ORTHO = 0,$/;"	e	enum:cv::__anon237
PTLOC_ERROR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PTLOC_ERROR = -2,$/;"	e	enum:cv::Subdiv2D::__anon246
PTLOC_INSIDE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PTLOC_INSIDE = 0,$/;"	e	enum:cv::Subdiv2D::__anon246
PTLOC_ON_EDGE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PTLOC_ON_EDGE = 2$/;"	e	enum:cv::Subdiv2D::__anon246
PTLOC_OUTSIDE_RECT	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:cv::Subdiv2D::__anon246
PTLOC_VERTEX	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        PTLOC_VERTEX = 1,$/;"	e	enum:cv::Subdiv2D::__anon246
P_Interval	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       P_Interval;      \/\/    NVVE_P_INTERVAL,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
PairwiseSeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS PairwiseSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
PaniniPortraitProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^   PaniniPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniPortraitWarper
PaniniPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniPortraitWarper : public RotationWarperBase<PaniniPortraitProjector>$/;"	c	namespace:cv::detail
PaniniPortraitWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^    PaniniPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniPortraitWarper
PaniniPortraitWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class PaniniPortraitWarper: public WarperCreator$/;"	c	namespace:cv
PaniniProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^   PaniniWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniWarper
PaniniWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniWarper : public RotationWarperBase<PaniniProjector>$/;"	c	namespace:cv::detail
PaniniWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^    PaniniWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniWarper
PaniniWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class PaniniWarper: public WarperCreator$/;"	c	namespace:cv
ParamGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamGrid	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvParamGrid ParamGrid;$/;"	t	namespace:cv
ParamIterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^            T, typename type_traits_detail::AddParameterType<T>::type>::type ParameterType;$/;"	t	struct:cv::gpu::device::TypeTraits
ParameterizedTestCaseInfo	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        struct Parameters$/;"	s	class:DetectionBasedTracker
Params	/usr/local/include/opencv2/features2d/features2d.hpp	/^  struct CV_EXPORTS_W_SIMPLE Params$/;"	s	class:cv::SimpleBlobDetector
Params	/usr/local/include/opencv2/gpu/gpu.hpp	/^    struct CV_EXPORTS Params$/;"	s	class:cv::gpu::FGDStatModel
Params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    class CV_EXPORTS Params$/;"	c	class:cv::FernDescriptorMatcher
Params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    class CV_EXPORTS Params$/;"	c	class:cv::OneWayDescriptorMatcher
PartialMatch	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
Passed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
PatchGenerator	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS PatchGenerator$/;"	c	namespace:cv
PatternPoint	/usr/local/include/opencv2/features2d/features2d.hpp	/^    struct PatternPoint$/;"	s	class:cv::FREAK
Pbc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat
Pbcc	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat
PeakBitrate	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       PeakBitrate;     \/\/    NVVE_PEAK_BITRATE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
PicType	/usr/local/include/opencv2/gpu/gpu.hpp	/^        enum PicType$/;"	g	class:cv::gpu::VideoWriter_GPU::EncoderCallBack
PixelSize	/usr/local/include/opencv2/core/wimage.hpp	/^    int PixelSize() const {return Channels() * ChannelSize(); }$/;"	f	class:cv::WImage
PixelTestFn	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef void(*PixelTestFn)(const Mat&, const vector<KeyPoint>&, Mat&);$/;"	t	class:cv::BriefDescriptorExtractor
PlanarObjectDetector	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS PlanarObjectDetector$/;"	c	namespace:cv
PlanePortraitProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct PlanePortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlanePortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    PlanePortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlanePortraitWarper
PlanePortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS PlanePortraitWarper : public RotationWarperBase<PlanePortraitProjector>$/;"	c	namespace:cv::detail
PlaneProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS PlaneProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlaneWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    PlaneWarper(float scale = 1.f) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlaneWarper
PlaneWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarper : public RotationWarperBase<PlaneProjector>$/;"	c	namespace:cv::detail
PlaneWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class PlaneWarper : public WarperCreator$/;"	c	namespace:cv
PlaneWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    PlaneWarperGpu(float scale = 1.f) : PlaneWarper(scale) {}$/;"	f	class:cv::detail::PlaneWarperGpu
PlaneWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarperGpu : public PlaneWarper$/;"	c	namespace:cv::detail
PlaneWarperGpu	/usr/local/include/opencv2/stitching/warpers.hpp	/^class PlaneWarperGpu: public WarperCreator$/;"	c	namespace:cv
Pnew	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double Pnew;$/;"	m	class:cv::of2::FabMap
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_() : x(0), y(0), z(0) {}$/;"	f	class:cv::Point3_
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(_Tp _x, _Tp _y, _Tp _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:cv::Point3_
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const CvPoint3D32f& pt) :$/;"	f	class:cv::Point3_
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Point3_& pt) : x(pt.x), y(pt.y), z(pt.z) {}$/;"	f	class:cv::Point3_
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Point_<_Tp>& pt) : x(pt.x), y(pt.y), z(_Tp()) {}$/;"	f	class:cv::Point3_
Point3_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Vec<_Tp, 3>& v) : x(v[0]), y(v[1]), z(v[2]) {}$/;"	f	class:cv::Point3_
PointFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ PointFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::PointFilter
PointFilter	/usr/local/include/opencv2/gpu/device/filters.hpp	/^    template <typename Ptr2D> struct PointFilter$/;"	s	namespace:cv::gpu::device
Point_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Point_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_() : x(0), y(0) {}$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(_Tp _x, _Tp _y) : x(_x), y(_y) {}$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const CvPoint& pt) : x((_Tp)pt.x), y((_Tp)pt.y) {}$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const CvPoint2D32f& pt)$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Point_& pt) : x(pt.x), y(pt.y) {}$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Size_<_Tp>& sz) : x(sz.width), y(sz.height) {}$/;"	f	class:cv::Point_
Point_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Vec<_Tp,2>& v) : x(v[0]), y(v[1]) {}$/;"	f	class:cv::Point_
PointeeType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::PointerTraits<UnqualifiedType>::type                            PointeeType;$/;"	t	struct:cv::gpu::device::TypeTraits
PointerTraits	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits$/;"	s	namespace:cv::gpu::device::type_traits_detail
PointerTraits	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
PointerTraits	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*>$/;"	s	namespace:cv::gpu::device::type_traits_detail
PooledAllocator	/usr/local/include/opencv2/flann/allocator.h	/^    PooledAllocator(int blockSize = BLOCKSIZE)$/;"	f	class:cvflann::PooledAllocator
PooledAllocator	/usr/local/include/opencv2/flann/allocator.h	/^class PooledAllocator$/;"	c	namespace:cvflann
PositionsVector	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            typedef std::vector<cv::Rect> PositionsVector;$/;"	t	struct:DetectionBasedTracker::TrackedObject
PosterErrorCovariance	/usr/local/include/opencv2/video/tracking.hpp	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman
PosterState	/usr/local/include/opencv2/video/tracking.hpp	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman
Presets	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       Presets;         \/\/    NVVE_PRESETS,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
PrintPrefixTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	/usr/local/include/opencv2/ts/ts_gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	/usr/local/include/opencv2/ts/ts_gtest.h	/^void PrintTupleTo(const T& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PriorErrorCovariance	/usr/local/include/opencv2/video/tracking.hpp	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman
PriorState	/usr/local/include/opencv2/video/tracking.hpp	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman
ProfileLevel	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       ProfileLevel;    \/\/    NVVE_PROFILE_LEVEL,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ProjectorBase	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS ProjectorBase$/;"	s	namespace:cv::detail
PsGd	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double PsGd;$/;"	m	class:cv::of2::FabMapFBO
Ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr() : obj(0), refcount(0) {}$/;"	f	class:cv::Ptr
Ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr(_Tp* _obj) : obj(_obj)$/;"	f	class:cv::Ptr
Ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr(const Ptr<_Tp>& _ptr)$/;"	f	class:cv::Ptr
Ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> Ptr<_Tp>::Ptr(const Ptr<_Tp2>& p)$/;"	f	class:cv::Ptr
PtrElemStep	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<unsigned char> PtrElemStep;$/;"	t	namespace:cv::gpu
PtrElemStep_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            PtrElemStep_(const DevMem2D_<T>& mem) : PtrStep<T>(mem.data, mem.step)$/;"	f	struct:cv::gpu::PtrElemStep_
PtrElemStep_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template<typename T> struct PtrElemStep_ : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrElemStepf	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<float> PtrElemStepf;$/;"	t	namespace:cv::gpu
PtrElemStepi	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<int> PtrElemStepi;$/;"	t	namespace:cv::gpu
PtrStep	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStep() : step(0) {}$/;"	f	struct:cv::gpu::PtrStep
PtrStep	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStep(T* data_, size_t step_) : DevPtr<T>(data_), step(step_) {}$/;"	f	struct:cv::gpu::PtrStep
PtrStep	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template<typename T> struct PtrStep : public DevPtr<T>$/;"	s	namespace:cv::gpu
PtrStepSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStepSz() : cols(0), rows(0) {}$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStepSz(int rows_, int cols_, T* data_, size_t step_)$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            explicit PtrStepSz(const PtrStepSz<U>& d) : PtrStep<T>((T*)d.data, d.step), cols(d.cols), rows(d.rows){}$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template <typename T> struct PtrStepSz : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrStepSzb	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStepSz<unsigned char> PtrStepSzb;$/;"	t	namespace:cv::gpu
PtrStepSzf	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStepSz<float> PtrStepSzf;$/;"	t	namespace:cv::gpu
PtrStepSzi	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStepSz<int> PtrStepSzi;$/;"	t	namespace:cv::gpu
PtrStep_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            PtrStep_() {}$/;"	f	struct:cv::gpu::PtrStep_
PtrStep_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            PtrStep_(const DevMem2D_<T>& mem) : PtrStep<T>(mem.data, mem.step) {}$/;"	f	struct:cv::gpu::PtrStep_
PtrStep_	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template<typename T> struct PtrStep_ : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrStepb	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStep<unsigned char> PtrStepb;$/;"	t	namespace:cv::gpu
PtrStepf	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStep<float> PtrStepf;$/;"	t	namespace:cv::gpu
PtrStepi	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        typedef PtrStep<int> PtrStepi;$/;"	t	namespace:cv::gpu
PtrSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrSz() : size(0) {}$/;"	f	struct:cv::gpu::PtrSz
PtrSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrSz(T* data_, size_t size_) : DevPtr<T>(data_), size(size_) {}$/;"	f	struct:cv::gpu::PtrSz
PtrSz	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template<typename T> struct PtrSz : public DevPtr<T>$/;"	s	namespace:cv::gpu
Pv	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable
Pv	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable
Pvb	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable
Pvb	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable
PyrLKOpticalFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS PyrLKOpticalFlow$/;"	c	namespace:cv::gpu
PyrLKOpticalFlow	/usr/local/include/opencv2/ocl/ocl.hpp	/^            PyrLKOpticalFlow()$/;"	f	class:cv::ocl::PyrLKOpticalFlow
PyrLKOpticalFlow	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS PyrLKOpticalFlow$/;"	c	namespace:cv::ocl
PyrLkOptFlowEstimatorBase	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    PyrLkOptFlowEstimatorBase() { setWinSize(Size(21, 21)); setMaxLevel(3); }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
PyrLkOptFlowEstimatorBase	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^class CV_EXPORTS PyrLkOptFlowEstimatorBase$/;"	c	namespace:cv::videostab
PyrLkRobustMotionEstimator	/usr/local/include/opencv2/videostab/global_motion.hpp	/^class CV_EXPORTS PyrLkRobustMotionEstimator : public IGlobalMotionEstimator$/;"	c	namespace:cv::videostab
PyramidAdaptedFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W PyramidAdaptedFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
PzGL	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double (FabMap::*PzGL)(int q, bool zq, bool zpq, bool Lzq);$/;"	m	class:cv::of2::FabMap
PzGNe	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double PzGNe;$/;"	m	class:cv::of2::FabMap
PzGe	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double PzGe;$/;"	m	class:cv::of2::FabMap
QP_Level_InterB	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       QP_Level_InterB; \/\/    NVVE_QP_LEVEL_INTER_B,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QP_Level_InterP	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       QP_Level_InterP; \/\/    NVVE_QP_LEVEL_INTER_P,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QP_Level_Intra	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       QP_Level_Intra;  \/\/    NVVE_QP_LEVEL_INTRA,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QUADS	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    QUADS          = 0x0007,$/;"	e	enum:cv::ogl::__anon43
QUADS	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        QUADS          = 0x0007,$/;"	e	enum:cv::RenderMode::__anon44
QUAD_STRIP	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    QUAD_STRIP     = 0x0008,$/;"	e	enum:cv::ogl::__anon43
QUAD_STRIP	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        QUAD_STRIP     = 0x0008,$/;"	e	enum:cv::RenderMode::__anon44
QuadEdge	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    struct CV_EXPORTS QuadEdge$/;"	s	class:cv::Subdiv2D
QuantizedPyramid	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^class QuantizedPyramid$/;"	c	namespace:cv::linemod
R	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
R	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
R	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
R	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    Mat R; \/\/ Rotation$/;"	m	struct:cv::detail::CameraParams
R2Y	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            R2Y        = 4899,$/;"	e	enum:cv::gpu::device::color_detail::__anon67
RAND_DIM	/usr/local/include/opencv2/flann/kdtree_index.h	/^        RAND_DIM=5$/;"	e	enum:cvflann::KDTreeIndex::__anon66
RANSAC	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    RANSAC=CV_RANSAC \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon3
RBF	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon286
RCType	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int       RCType;          \/\/    NVVE_RC_TYPE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
READ_ONLY	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        READ_ONLY  = 0x88B8,$/;"	e	enum:cv::ogl::Buffer::Access
READ_WRITE	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        READ_WRITE = 0x88BA$/;"	e	enum:cv::ogl::Buffer::Access
REAL	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon293
RECT	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon271
REF_INPUT_OUTPUT	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
REF_OUTPUT	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
REGISTER_TYPED_TEST_CASE_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define REGISTER_TYPED_TEST_CASE_P(/;"	d
RESPONSE_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::gpu::FAST_GPU::__anon201
RESPONSE_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
RETINA_COLORSAMPLINGMETHOD	/usr/local/include/opencv2/contrib/retina.hpp	/^enum RETINA_COLORSAMPLINGMETHOD$/;"	g	namespace:cv
RETINA_COLOR_BAYER	/usr/local/include/opencv2/contrib/retina.hpp	/^    RETINA_COLOR_BAYER\/\/!< standard bayer sampling$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETINA_COLOR_DIAGONAL	/usr/local/include/opencv2/contrib/retina.hpp	/^    RETINA_COLOR_DIAGONAL,\/\/!< color sampling is RGBRGBRGB..., line 2 BRGBRGBRG..., line 3, GBRGBRGBR...$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETINA_COLOR_RANDOM	/usr/local/include/opencv2/contrib/retina.hpp	/^    RETINA_COLOR_RANDOM, \/\/!< each pixel position is either R, G or B in a random choice$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETR_CCOMP	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    RETR_CCOMP=CV_RETR_CCOMP, \/\/!< retrieve the connected components (that can possibly be nested)$/;"	e	enum:cv::__anon244
RETR_EXTERNAL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    RETR_EXTERNAL=CV_RETR_EXTERNAL, \/\/!< retrieve only the most external (top-level) contours$/;"	e	enum:cv::__anon244
RETR_FLOODFILL	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    RETR_FLOODFILL=CV_RETR_FLOODFILL$/;"	e	enum:cv::__anon244
RETR_LIST	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    RETR_LIST=CV_RETR_LIST, \/\/!< retrieve all the contours without any hierarchical information$/;"	e	enum:cv::__anon244
RETR_TREE	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    RETR_TREE=CV_RETR_TREE, \/\/!< retrieve all the contours and the whole hierarchy$/;"	e	enum:cv::__anon244
RGB	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        RGB             = 0x1907, \/\/!< Red, Green, Blue$/;"	e	enum:cv::ogl::Texture2D::Format
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray() : unary_function<typename TypeVec<T, scn>::vec_type, T>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray() : unary_function<uint, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray(const RGB2Gray& other_) : unary_function<uint, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray(const RGB2Gray& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2Gray<uchar, 4, bidx> : unary_function<uint, uchar>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int bidx> struct RGB2Gray : unary_function<typename TypeVec<T, scn>::vec_type, T>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ T RGB2GrayConvert(const T* src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ float RGB2GrayConvert(const float* src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uchar RGB2GrayConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS()$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS(const RGB2HLS& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS(const RGB2HLS& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HLS<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HLS	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HLS$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HLSConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV()$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV(const RGB2HSV& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV(const RGB2HSV& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HSV<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HSV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HSV$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HSVConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2Lab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Lab() {}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Lab
RGB2Lab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Lab(const RGB2Lab& other_) {}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Lab
RGB2Lab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct RGB2Lab<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2Lab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct RGB2Lab<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2LabConvert_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LabConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2LabConvert_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LabConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2Luv	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Luv() {}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Luv
RGB2Luv	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Luv(const RGB2Luv& other_) {}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Luv
RGB2Luv	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct RGB2Luv<float, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2Luv	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        struct RGB2Luv<uchar, scn, dcn, srgb, blueIdx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2LuvConvert_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LuvConvert_b(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2LuvConvert_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ void RGB2LuvConvert_f(const T& src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB()$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB(const RGB2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB(const RGB2RGB& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <> struct RGB2RGB<uchar, 4, 4, 2> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2RGB$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5():unary_function<uchar3, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5():unary_function<uint, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5(const RGB2RGB5x5& other_):unary_function<uchar3, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5(const RGB2RGB5x5& other_):unary_function<uint, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<3, bidx,green_bits> : unary_function<uchar3, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<4, bidx,green_bits> : unary_function<uint, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5Converter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<5, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5Converter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<6, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ()$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ(const RGB2XYZ& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ(const RGB2XYZ& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2XYZ<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZ	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2XYZ$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint RGB2XYZConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb()$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb(const RGB2YCrCb& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb(const RGB2YCrCb& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2YCrCb<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YCrCb	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YCrCb$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YCrCbConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YCrCbConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint RGB2YCrCbConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YUV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YUV()$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
RGB2YUV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YUV(const RGB2YUV& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
RGB2YUV	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YUV$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YUVConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YUVConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YUVConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YUVConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB5x52Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52Gray() : unary_function<ushort, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
RGB5x52Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52Gray(const RGB5x52Gray& other_) : unary_function<ushort, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
RGB5x52Gray	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template<int green_bits> struct RGB5x52Gray : unary_function<ushort, uchar>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52GrayConverter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<5>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52GrayConverter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<6>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB():unary_function<ushort, uchar3>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB():unary_function<ushort, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB(const RGB5x52RGB& other_):unary_function<ushort, uchar3>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB(const RGB5x52RGB& other_):unary_function<ushort, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<3, bidx, green_bits> : unary_function<ushort, uchar3>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<4, bidx, green_bits> : unary_function<ushort, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGBConverter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<5, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGBConverter	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<6, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGBA	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        RGBA            = 0x1908  \/\/!< Red, Green, Blue, Alpha$/;"	e	enum:cv::ogl::Texture2D::Format
RIGID_BODY_MOTION	/usr/local/include/opencv2/contrib/contrib.hpp	/^           RIGID_BODY_MOTION = 4$/;"	e	enum:cv::__anon20
RNG	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::RNG() { state = 0xffffffff; }$/;"	f	class:cv::RNG
RNG	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::RNG(uint64 _state) { state = _state ? _state : 0xffffffff; }$/;"	f	class:cv::RNG
ROTATION	/usr/local/include/opencv2/contrib/contrib.hpp	/^    enum { ROTATION          = 1,$/;"	e	enum:cv::__anon20
ROWS_COUNT	/usr/local/include/opencv2/gpu/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::FAST_GPU::__anon201
ROWS_COUNT	/usr/local/include/opencv2/gpu/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
ROWS_COUNT	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
ROWS_COUNT	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                ROWS_COUNT$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
RPROP	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon296
RTTIImpl	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _ClsName> struct CV_EXPORTS RTTIImpl$/;"	s	namespace:cv
RTreeClassifier	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS RTreeClassifier$/;"	c	namespace:cv
RTreeNode	/usr/local/include/opencv2/legacy/legacy.hpp	/^    RTreeNode() {}$/;"	f	struct:cv::RTreeNode
RTreeNode	/usr/local/include/opencv2/legacy/legacy.hpp	/^    RTreeNode(uchar x1, uchar y1, uchar x2, uchar y2)$/;"	f	struct:cv::RTreeNode
RTreeNode	/usr/local/include/opencv2/legacy/legacy.hpp	/^struct CV_EXPORTS RTreeNode$/;"	s	namespace:cv
RUN_ALL_TESTS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define RUN_ALL_TESTS(/;"	d
R_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
RadiusResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    RadiusResultSet(DistanceType radius_, int* indices_, DistanceType* dists_, int capacity_) :$/;"	f	class:cvflann::RadiusResultSet
RadiusResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class RadiusResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
RadiusUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    RadiusUniqueResultSet(DistanceType radius) :$/;"	f	class:cvflann::RadiusUniqueResultSet
RadiusUniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class RadiusUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
RandS	/usr/local/include/opencv2/legacy/legacy.hpp	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState
Random	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
RandomSample	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation
RandomTreeParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvRTParams RandomTreeParams;$/;"	t	namespace:cv
RandomTrees	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvRTrees RandomTrees;$/;"	t	namespace:cv
RandomizedTree	/usr/local/include/opencv2/legacy/legacy.hpp	/^class CV_EXPORTS RandomizedTree$/;"	c	namespace:cv
Range	/usr/local/include/opencv2/core/operations.hpp	/^inline Range::Range() : start(0), end(0) {}$/;"	f	class:cv::Range
Range	/usr/local/include/opencv2/core/operations.hpp	/^inline Range::Range(const CvSlice& slice) : start(slice.start_index), end(slice.end_index)$/;"	f	class:cv::Range
Range	/usr/local/include/opencv2/core/operations.hpp	/^inline Range::Range(int _start, int _end) : start(_start), end(_end) {}$/;"	f	class:cv::Range
Range	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
RansacParams	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    RansacParams(int _size, float _thresh, float _eps, float _prob)$/;"	f	struct:cv::videostab::RansacParams
RansacParams	/usr/local/include/opencv2/videostab/global_motion.hpp	/^struct CV_EXPORTS RansacParams$/;"	s	namespace:cv::videostab
Read	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
RectLess	/usr/local/include/opencv2/ts/ts_perf.hpp	/^typedef RectLess_<int> RectLess;$/;"	t	namespace:perf::comparators
RectLess_	/usr/local/include/opencv2/ts/ts_perf.hpp	/^struct CV_EXPORTS RectLess_$/;"	s	namespace:perf::comparators
Rect_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Rect_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_() : x(0), y(0), width(0), height(0) {}$/;"	f	class:cv::Rect_
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(_Tp _x, _Tp _y, _Tp _width, _Tp _height) : x(_x), y(_y), width(_width), height(_height) {}$/;"	f	class:cv::Rect_
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const CvRect& r) : x((_Tp)r.x), y((_Tp)r.y), width((_Tp)r.width), height((_Tp)r.height) {}$/;"	f	class:cv::Rect_
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Point_<_Tp>& org, const Size_<_Tp>& sz) :$/;"	f	class:cv::Rect_
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Point_<_Tp>& pt1, const Point_<_Tp>& pt2)$/;"	f	class:cv::Rect_
Rect_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Rect_<_Tp>& r) : x(r.x), y(r.y), width(r.width), height(r.height) {}$/;"	f	class:cv::Rect_
ReferenceTraits	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits$/;"	s	namespace:cv::gpu::device::type_traits_detail
ReferenceTraits	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits<U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
ReferredType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::ReferenceTraits<T>::type                                        ReferredType;$/;"	t	struct:cv::gpu::device::TypeTraits
Register	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterTests	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
Regression	/usr/local/include/opencv2/ts/ts_perf.hpp	/^class CV_EXPORTS Regression$/;"	c	namespace:perf
ReinterpretBits	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSource	/usr/local/include/opencv2/ts/ts_gtest.h	/^enum RelationToSource {$/;"	g	namespace:testing::internal
ReleaseImage	/usr/local/include/opencv2/core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBuffer
ReleaseImage	/usr/local/include/opencv2/core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBufferC
RemoveConst	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveReference	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RenderMode	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^namespace RenderMode {$/;"	n	namespace:cv
Reseed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
ResizeMethod	/usr/local/include/opencv2/contrib/contrib.hpp	/^    enum ResizeMethod {$/;"	g	class:CvFuzzyMeanShiftTracker
ResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class ResultSet$/;"	c	namespace:cvflann
ResultType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef int ResultType;$/;"	t	struct:cv::Hamming
ResultType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef int ResultType;$/;"	t	struct:cv::HammingMultilevel
ResultType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L1
ResultType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L2
ResultType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::SL2
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming2
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::HammingLUT
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::HammingLUT2
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::ChiSquareDistance
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HellingerDistance
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HistIntersectionDistance
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::KL_Divergence
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L1
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2_Simple
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MaxDistance
ResultType	/usr/local/include/opencv2/flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MinkowskiDistance
ResultType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef int ResultType;$/;"	t	struct:cv::ocl::Hamming
ResultType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::ocl::L1
ResultType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::ocl::L2
Retina	/usr/local/include/opencv2/contrib/retina.hpp	/^class CV_EXPORTS Retina {$/;"	c	namespace:cv
RetinaParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^    struct RetinaParameters{$/;"	s	class:cv::Retina
ReturnSentinel	/usr/local/include/opencv2/ts/ts_gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
RightEyeRect	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace
RmDir	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
RotatedRect	/usr/local/include/opencv2/core/operations.hpp	/^inline RotatedRect::RotatedRect() { angle = 0; }$/;"	f	class:cv::RotatedRect
RotatedRect	/usr/local/include/opencv2/core/operations.hpp	/^inline RotatedRect::RotatedRect(const CvBox2D& box)$/;"	f	class:cv::RotatedRect
RotatedRect	/usr/local/include/opencv2/core/operations.hpp	/^inline RotatedRect::RotatedRect(const Point2f& _center, const Size2f& _size, float _angle)$/;"	f	class:cv::RotatedRect
RotationWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarper$/;"	c	namespace:cv::detail
RotationWarperBase	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarperBase : public RotationWarper$/;"	c	namespace:cv::detail
Row	/usr/local/include/opencv2/core/wimage.hpp	/^    inline T* Row(int r) {$/;"	f	class:cv::WImage
Row	/usr/local/include/opencv2/core/wimage.hpp	/^    inline const T* Row(int r) const {$/;"	f	class:cv::WImage
Rsr	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<int> Rsr;$/;"	m	class:cv::LogPolar_Overlapping
Rsri	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat Rsri;$/;"	m	class:cv::LogPolar_Interp
Rsri	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat Rsri;$/;"	m	class:cv::LogPolar_Overlapping
Run	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunSetUpTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunTearDownTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
S	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* S; \/\/big matrix of block Sjk  , each block has size num_cam_params x num_cam_params$/;"	m	class:cv::LevMarqSparse
S	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
S	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
S	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
SADWindowSize	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int SADWindowSize;$/;"	m	class:cv::StereoSGBM
SADWindowSize	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int SADWindowSize; \/\/ ~5x5..21x21$/;"	m	struct:CvStereoBMState
SAMPLED	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        SAMPLED = 2,$/;"	e	enum:cv::of2::FabMap::__anon25
SAMPLE_MEAN	/usr/local/include/opencv2/flann/kdtree_index.h	/^        SAMPLE_MEAN = 100,$/;"	e	enum:cvflann::KDTreeIndex::__anon66
SANITY_CHECK	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SANITY_CHECK(/;"	d
SANITY_CHECK_KEYPOINTS	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SANITY_CHECK_KEYPOINTS(/;"	d
SANITY_CHECK_MATCHES	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SANITY_CHECK_MATCHES(/;"	d
SAVED	/usr/local/include/opencv2/flann/defines.h	/^    SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
SCALE_IMAGE	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    enum { DO_CANNY_PRUNING = 1, SCALE_IMAGE = 2,$/;"	e	enum:cv::CascadeClassifier::__anon304
SCOPED_TRACE	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define SCOPED_TRACE(/;"	d
SECOND	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
SF_BGR	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_BGR,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_GRAY	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_GRAY = SF_BGR$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_IYUV	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_IYUV,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_NV12	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_NV12,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_UYVY	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_UYVY = 0,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_YUY2	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_YUY2,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_YV12	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SF_YV12,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SHARED_ATOMICS	/usr/local/include/opencv2/core/gpumat.hpp	/^        SHARED_ATOMICS = FEATURE_SET_COMPUTE_12,$/;"	e	enum:cv::gpu::FeatureSet
SIFT	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon24
SIFT	/usr/local/include/opencv2/nonfree/features2d.hpp	/^class CV_EXPORTS_W SIFT : public Feature2D$/;"	c	namespace:cv
SIGMOID	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon286
SIGMOID_SYM	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon297
SIZE_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        SIZE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
SIZE_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        SIZE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
SIZE_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                SIZE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
SKIPPED	/usr/local/include/opencv2/ts/ts.hpp	/^        SKIPPED=1$/;"	e	enum:cvtest::TS::__anon329
SL2	/usr/local/include/opencv2/features2d/features2d.hpp	/^struct CV_EXPORTS SL2$/;"	s	namespace:cv
SMALL_POLICY	/usr/local/include/opencv2/flann/any.h	/^#define SMALL_POLICY(/;"	d
SMALL_POLICY	/usr/local/include/opencv2/flann/any.h	/^#undef SMALL_POLICY$/;"	d
SQERR	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon294
SQUARED_LOSS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon295
STARTED	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon2
START_AUTO_STEP	/usr/local/include/opencv2/legacy/legacy.hpp	/^           START_AUTO_STEP=cv::EM::START_AUTO_STEP };$/;"	e	enum:CvEM::__anon281
START_AUTO_STEP	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon290
START_E_STEP	/usr/local/include/opencv2/legacy/legacy.hpp	/^    enum { START_E_STEP=cv::EM::START_E_STEP,$/;"	e	enum:CvEM::__anon281
START_E_STEP	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon290
START_M_STEP	/usr/local/include/opencv2/legacy/legacy.hpp	/^           START_M_STEP=cv::EM::START_M_STEP,$/;"	e	enum:CvEM::__anon281
START_M_STEP	/usr/local/include/opencv2/ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon290
STRIDE	/usr/local/include/opencv2/gpu/device/warp.hpp	/^            STRIDE        = WARP_SIZE$/;"	e	enum:cv::gpu::device::Warp::__anon182
STYLE_ITALIC	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        STYLE_ITALIC    = 1,$/;"	e	enum:cv::GlFont::Style
STYLE_NORMAL	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        STYLE_NORMAL    = 0,$/;"	e	enum:cv::GlFont::Style
STYLE_UNDERLINE	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        STYLE_UNDERLINE = 2$/;"	e	enum:cv::GlFont::Style
SUCCEED	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define SUCCEED(/;"	d
SUMMARY	/usr/local/include/opencv2/ts/ts.hpp	/^        SUMMARY=1 << SUMMARY_IDX,$/;"	e	enum:cvtest::TS::__anon328
SUMMARY_IDX	/usr/local/include/opencv2/ts/ts.hpp	/^        SUMMARY_IDX=0,$/;"	e	enum:cvtest::TS::__anon328
SURF	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon24
SURF	/usr/local/include/opencv2/nonfree/features2d.hpp	/^class CV_EXPORTS_W SURF : public Feature2D$/;"	c	namespace:cv
SURF_GPU	/usr/local/include/opencv2/nonfree/gpu.hpp	/^class CV_EXPORTS SURF_GPU$/;"	c	namespace:cv::gpu
SURF_OCL	/usr/local/include/opencv2/nonfree/ocl.hpp	/^        class CV_EXPORTS SURF_OCL$/;"	c	namespace:cv::ocl
SVD	/usr/local/include/opencv2/core/mat.hpp	/^inline SVD::SVD( InputArray m, int flags ) { operator ()(m, flags); }$/;"	f	class:cv::SVD
SVD	/usr/local/include/opencv2/core/mat.hpp	/^inline SVD::SVD() {}$/;"	f	class:cv::SVD
SVM	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvSVM SVM;$/;"	t	namespace:cv
SVMKernel	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvSVMKernel SVMKernel;$/;"	t	namespace:cv
SVMParams	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvSVMParams SVMParams;$/;"	t	namespace:cv
SVMSolver	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvSVMSolver SVMSolver;$/;"	t	namespace:cv
SVM_C	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SVM_COEF	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SVM_DEGREE	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SVM_GAMMA	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SVM_NU	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SVM_P	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon284
SZ_ALL	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_ALL /;"	d
SZ_ALL_GA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_ALL_GA /;"	d
SZ_ALL_HD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_ALL_HD /;"	d
SZ_ALL_SMALL	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_ALL_SMALL /;"	d
SZ_ALL_VGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_ALL_VGA /;"	d
SZ_TYPICAL	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define SZ_TYPICAL /;"	d
SamplesNum	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation
SatCastHelper	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<1, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<2, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<3, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<4, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SavedIndexParams	/usr/local/include/opencv2/flann/flann_base.hpp	/^    SavedIndexParams(std::string filename)$/;"	f	struct:cvflann::SavedIndexParams
SavedIndexParams	/usr/local/include/opencv2/flann/flann_base.hpp	/^struct SavedIndexParams : public IndexParams$/;"	s	namespace:cvflann
SavedIndexParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS SavedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
Scalar_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_()$/;"	f	class:cv::Scalar_
Scalar_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(_Tp v0)$/;"	f	class:cv::Scalar_
Scalar_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Scalar_
Scalar_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(const CvScalar& s)$/;"	f	class:cv::Scalar_
ScaleAfter	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH
ScanKind	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	g	namespace:cv::gpu::device
ScopedTrace	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
ScoreIndexPair	/usr/local/include/opencv2/flann/lsh_index.h	/^    typedef std::pair<float, unsigned int> ScoreIndexPair;$/;"	t	class:cvflann::LshIndex
SeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS SeamFinder$/;"	c	namespace:cv::detail
SearchParams	/usr/local/include/opencv2/flann/miniflann.hpp	/^struct CV_EXPORTS SearchParams : public IndexParams$/;"	s	namespace:cv::flann
SearchParams	/usr/local/include/opencv2/flann/params.h	/^    SearchParams(int checks = 32, float eps = 0, bool sorted = true )$/;"	f	struct:cvflann::SearchParams
SearchParams	/usr/local/include/opencv2/flann/params.h	/^struct SearchParams : public IndexParams$/;"	s	namespace:cvflann
SearchWindow	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class SearchWindow$/;"	c	class:CvFuzzyMeanShiftTracker
Select	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
Select	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
SelectWorkingSet	/usr/local/include/opencv2/ml/ml.hpp	/^    typedef bool (CvSVMSolver::*SelectWorkingSet)( int& i, int& j );$/;"	t	class:CvSVMSolver
SelfSimDescriptor	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS SelfSimDescriptor$/;"	c	namespace:cv
Seq	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq( MemStorage& storage,$/;"	f	class:cv::Seq
Seq	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq( const CvSeq* _seq ) : seq((CvSeq*)_seq)$/;"	f	class:cv::Seq
Seq	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq() : seq(0) {}$/;"	f	class:cv::Seq
SeqIterator	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator()$/;"	f	class:cv::SeqIterator
SeqIterator	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator(const Seq<_Tp>& _seq, bool seekEnd)$/;"	f	class:cv::SeqIterator
Set	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetCollision	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void SetCollision(int \/*CollisionFlag*\/){}; \/* call in case of blob collision situation*\/$/;"	f	class:CvBlobTrackerOne
SetFileName	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void    SetFileName(char* \/*DataBaseName*\/){};$/;"	f	class:CvBlobTrackAnalysis
SetIpl	/usr/local/include/opencv2/core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImage
SetIpl	/usr/local/include/opencv2/core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImageC
SetIpl	/usr/local/include/opencv2/core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBuffer
SetIpl	/usr/local/include/opencv2/core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBufferC
SetLabeledFeatures	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void SetLabeledFeatures(const vector<KeyPoint>& features) {m_train_features = features;};$/;"	f	class:cv::OneWayDescriptorObject
SetPCADimHigh	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void SetPCADimHigh(int pca_dim_high) {m_pca_dim_high = pca_dim_high;};$/;"	f	class:cv::OneWayDescriptor
SetPCADimLow	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void SetPCADimLow(int pca_dim_low) {m_pca_dim_low = pca_dim_low;};$/;"	f	class:cv::OneWayDescriptor
SetParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetUp	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUpTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetValue	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void SetValue(const char* new_value) {$/;"	f	class:testing::TestProperty
SetZero	/usr/local/include/opencv2/core/wimage.hpp	/^    void SetZero() { cvSetZero(image_); }$/;"	f	class:cv::WImage
Setup	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	/usr/local/include/opencv2/ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	/usr/local/include/opencv2/ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShiftDispatcher	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, false>$/;"	s	namespace:cv::gpu::device::functional_detail
ShiftDispatcher	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, true>$/;"	s	namespace:cv::gpu::device::functional_detail
ShouldRunTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
SiftDescriptorExtractor	/usr/local/include/opencv2/nonfree/features2d.hpp	/^typedef SIFT SiftDescriptorExtractor;$/;"	t	namespace:cv
SiftFeatureDetector	/usr/local/include/opencv2/nonfree/features2d.hpp	/^typedef SIFT SiftFeatureDetector;$/;"	t	namespace:cv
SignAndMagnitudeToBiased	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SimpleBlobDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W SimpleBlobDetector : public FeatureDetector$/;"	c	namespace:cv
SingleMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMask(const SingleMask& mask_): mask(mask_.mask){}$/;"	f	struct:cv::gpu::device::SingleMask
SingleMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        explicit __host__ __device__ __forceinline__ SingleMask(PtrStepb mask_) : mask(mask_) {}$/;"	f	struct:cv::gpu::device::SingleMask
SingleMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    struct SingleMask$/;"	s	namespace:cv::gpu::device
SingleMaskChannels	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(PtrStepb mask_, int channels_)$/;"	f	struct:cv::gpu::device::SingleMaskChannels
SingleMaskChannels	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(const SingleMaskChannels& mask_)$/;"	f	struct:cv::gpu::device::SingleMaskChannels
SingleMaskChannels	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    struct SingleMaskChannels$/;"	s	namespace:cv::gpu::device
SizeVector	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    typedef std::vector<std::pair<int, cv::Size> > SizeVector;$/;"	t	class:perf::TestBase
Size_	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Size_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_()$/;"	f	class:cv::Size_
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(_Tp _width, _Tp _height)$/;"	f	class:cv::Size_
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const CvSize& sz)$/;"	f	class:cv::Size_
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const CvSize2D32f& sz)$/;"	f	class:cv::Size_
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const Point_<_Tp>& pt) : width(pt.x), height(pt.y) {}$/;"	f	class:cv::Size_
Size_	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const Size_& sz)$/;"	f	class:cv::Size_
Size_MatType	/usr/local/include/opencv2/ts/ts_perf.hpp	/^typedef TestBaseWithParam<Size_MatType_t> Size_MatType;$/;"	t	namespace:perf
Size_MatType_t	/usr/local/include/opencv2/ts/ts_perf.hpp	/^typedef std::tr1::tuple<cv::Size, MatType> Size_MatType_t;$/;"	t	namespace:perf
SkipComma	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipProcess	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void SkipProcess(CvBlob* \/*pBlobPrev*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne
SleepMilliseconds	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SortScoreIndexPairOnSecond	/usr/local/include/opencv2/flann/lsh_index.h	/^    struct SortScoreIndexPairOnSecond$/;"	s	class:cvflann::LshIndex
SparseMat	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::SparseMat()$/;"	f	class:cv::SparseMat
SparseMat	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::SparseMat(const SparseMat& m)$/;"	f	class:cv::SparseMat
SparseMat	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::SparseMat(int _dims, const int* _sizes, int _type)$/;"	f	class:cv::SparseMat
SparseMatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator::SparseMatConstIterator()$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator::SparseMatConstIterator(const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_()$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMat* _m)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator()$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator(SparseMat* _m)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator(const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_()$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(SparseMat* _m)$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_()$/;"	f	class:cv::SparseMat_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const CvSparseMat* m)$/;"	f	class:cv::SparseMat_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const Mat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const SparseMat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
SparseMat_	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
SparsePyrLkOptFlowEstimator	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^class CV_EXPORTS SparsePyrLkOptFlowEstimator$/;"	c	namespace:cv::videostab
SpeedLevel	/usr/local/include/opencv2/flann/lsh_table.h	/^    enum SpeedLevel$/;"	g	class:cvflann::lsh::LshTable
SphericalPortraitProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct SphericalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    SphericalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalPortraitWarper
SphericalPortraitWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalPortraitWarper : public RotationWarperBase<SphericalPortraitProjector>$/;"	c	namespace:cv::detail
SphericalProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS SphericalProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    SphericalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalWarper
SphericalWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarper : public RotationWarperBase<SphericalProjector>$/;"	c	namespace:cv::detail
SphericalWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class SphericalWarper: public WarperCreator$/;"	c	namespace:cv
SphericalWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    SphericalWarperGpu(float scale) : SphericalWarper(scale) {}$/;"	f	class:cv::detail::SphericalWarperGpu
SphericalWarperGpu	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarperGpu : public SphericalWarper$/;"	c	namespace:cv::detail
SphericalWarperGpu	/usr/local/include/opencv2/stitching/warpers.hpp	/^class SphericalWarperGpu: public WarperCreator$/;"	c	namespace:cv
SpinImageModel	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS SpinImageModel$/;"	c	namespace:cv
Split	/usr/local/include/opencv2/core/internal.hpp	/^    typedef tbb::split Split;$/;"	t	namespace:cv
StabilizerBase	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^class CV_EXPORTS StabilizerBase$/;"	c	namespace:cv::videostab
Stage	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        struct CV_EXPORTS Stage$/;"	s	class:cv::CascadeClassifier::Data
StarAdjuster	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS StarAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
StarDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS_W StarDetector : public FeatureDetector$/;"	c	namespace:cv
StarFeatureDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef StarDetector StarFeatureDetector;$/;"	t	namespace:cv
StartFrame	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack
StartStopTimer	/usr/local/include/opencv2/flann/timer.h	/^    StartStopTimer()$/;"	f	class:cvflann::StartStopTimer
StartStopTimer	/usr/local/include/opencv2/flann/timer.h	/^class StartStopTimer$/;"	c	namespace:cvflann
Stat	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatModel	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvStatModel StatModel;$/;"	t	namespace:cv
StatStruct	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
State	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation
Static	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^        template<> struct Static<true>$/;"	s	namespace:cv::gpu::device
Static	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^        template<bool expr> struct Static {};$/;"	s	namespace:cv::gpu::device
StaticAssert	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template <> struct StaticAssert<true> {static __CV_GPU_HOST_DEVICE__ void check(){}};$/;"	s	namespace:cv::gpu
StaticAssertTypeEq	/usr/local/include/opencv2/ts/ts_gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
StaticIf	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <class T1, class T2> struct StaticIf<false, T1, T2>$/;"	s	namespace:cv::gpu::device::reduce_detail
StaticIf	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <class T1, class T2> struct StaticIf<true, T1, T2>$/;"	s	namespace:cv::gpu::device::reduce_detail
StaticIf	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <class T1, class T2> struct StaticIf<false, T1, T2>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
StaticIf	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <class T1, class T2> struct StaticIf<true, T1, T2>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
Status	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	g	class:cv::Stitcher
StereoBM	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^class CV_EXPORTS_W StereoBM$/;"	c	namespace:cv
StereoBM_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS StereoBM_GPU$/;"	c	namespace:cv::gpu
StereoBM_OCL	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS StereoBM_OCL$/;"	c	namespace:cv::ocl
StereoBeliefPropagation	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS StereoBeliefPropagation$/;"	c	namespace:cv::gpu
StereoBeliefPropagation	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS StereoBeliefPropagation$/;"	c	namespace:cv::ocl
StereoConstantSpaceBP	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS StereoConstantSpaceBP$/;"	c	namespace:cv::gpu
StereoSGBM	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^class CV_EXPORTS_W StereoSGBM$/;"	c	namespace:cv
StereoVar	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS_W StereoVar$/;"	c	namespace:cv
StereographicProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS StereographicProjector : ProjectorBase$/;"	s	namespace:cv::detail
StereographicWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    StereographicWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::StereographicWarper
StereographicWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS StereographicWarper : public RotationWarperBase<StereographicProjector>$/;"	c	namespace:cv::detail
StereographicWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class StereographicWarper: public WarperCreator$/;"	c	namespace:cv
Stitcher	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Stitcher() {}$/;"	f	class:cv::Stitcher
Stitcher	/usr/local/include/opencv2/stitching/stitcher.hpp	/^class CV_EXPORTS Stitcher$/;"	c	namespace:cv
Str	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam
StrCaseCmp	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrDup	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrError	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrNCpy	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
Stream	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS Stream$/;"	c	namespace:cv::gpu
StreamAccessor	/usr/local/include/opencv2/gpu/stream_accessor.hpp	/^        struct StreamAccessor$/;"	s	namespace:cv::gpu
StreamCallback	/usr/local/include/opencv2/gpu/gpu.hpp	/^    typedef void (*StreamCallback)(Stream& stream, int status, void* userData);$/;"	t	class:cv::gpu::Stream
StreamHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^  inline void StreamHelper(internal::false_type \/*dummy*\/, const T& value) {$/;"	f	class:testing::Message
StreamHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^  inline void StreamHelper(internal::true_type \/*dummy*\/, T* pointer) {$/;"	f	class:testing::Message
StreamableToString	/usr/local/include/opencv2/ts/ts_gtest.h	/^std::string StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
String	/usr/local/include/opencv2/core/core.hpp	/^typedef std::string String;$/;"	t	namespace:cv
String	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
Strings	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
Style	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    enum Style$/;"	g	class:cv::GlFont
Subdiv2D	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^class CV_EXPORTS_W Subdiv2D$/;"	c	namespace:cv
SuperResolution	/usr/local/include/opencv2/superres/superres.hpp	/^        class CV_EXPORTS SuperResolution : public cv::Algorithm, public FrameSource$/;"	c	namespace:cv::superres
SurfAdjuster	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS SurfAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
SurfDescriptorExtractor	/usr/local/include/opencv2/nonfree/features2d.hpp	/^typedef SURF SurfDescriptorExtractor;$/;"	t	namespace:cv
SurfFeatureDetector	/usr/local/include/opencv2/nonfree/features2d.hpp	/^typedef SURF SurfFeatureDetector;$/;"	t	namespace:cv
SurfFeaturesFinder	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfFeaturesFinderGpu	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinderGpu : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfaceFormat	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum SurfaceFormat$/;"	g	class:cv::gpu::VideoWriter_GPU
Sz_Type	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    typedef perf::Size_MatType Sz_Type;$/;"	t	namespace:perf
T	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float T;       \/\/ A percentage value which determines when new features can be recognized as new background. (Typically 0.9).$/;"	m	struct:cv::gpu::FGDStatModel::Params
T	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  T;			\/* "A percentage value which determines when new features can be recognized as new background." (Typically 0.9).*\/$/;"	m	struct:CvFGDStatModelParams
T	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
TAG_MASK	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^            enum { TAG_MASK = (1U << ( (sizeof(unsigned int) << 3) - 5U)) - 1U };$/;"	e	enum:cv::gpu::device::Emulation::smem::__anon145
TEMP	/usr/local/include/opencv2/ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon330
TERM_EXCEPTION	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TERM_EXCEPTION = 3,$/;"	e	enum:perf::performance_metrics::__anon331
TERM_INTERRUPT	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TERM_INTERRUPT = 2,$/;"	e	enum:perf::performance_metrics::__anon331
TERM_ITERATIONS	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TERM_ITERATIONS = 0,$/;"	e	enum:perf::performance_metrics::__anon331
TERM_TIME	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TERM_TIME = 1,$/;"	e	enum:perf::performance_metrics::__anon331
TERM_UNKNOWN	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TERM_UNKNOWN = -1$/;"	e	enum:perf::performance_metrics::__anon331
TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TEST(/;"	d
TEST_CYCLE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TEST_CYCLE(/;"	d
TEST_CYCLE_MULTIRUN	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TEST_CYCLE_MULTIRUN(/;"	d
TEST_CYCLE_N	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TEST_CYCLE_N(/;"	d
TEST_DID_NOT_DIE	/usr/local/include/opencv2/ts/ts_gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	/usr/local/include/opencv2/ts/ts_gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	/usr/local/include/opencv2/ts/ts_gtest.h	/^#define TEST_F(/;"	d
TEST_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TEST_P(/;"	d
TEST_THREW_EXCEPTION	/usr/local/include/opencv2/ts/ts_gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEXTURE_BUFFER	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        TEXTURE_BUFFER = 0x88EC \/\/ buffer will ise for OpenGL textures$/;"	e	enum:cv::GlBuffer::Usage
THRESH_BINARY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { THRESH_BINARY=CV_THRESH_BINARY, THRESH_BINARY_INV=CV_THRESH_BINARY_INV,$/;"	e	enum:cv::__anon235
THRESH_BINARY_INV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { THRESH_BINARY=CV_THRESH_BINARY, THRESH_BINARY_INV=CV_THRESH_BINARY_INV,$/;"	e	enum:cv::__anon235
THRESH_MASK	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       THRESH_TOZERO_INV=CV_THRESH_TOZERO_INV, THRESH_MASK=CV_THRESH_MASK,$/;"	e	enum:cv::__anon235
THRESH_OTSU	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       THRESH_OTSU=CV_THRESH_OTSU };$/;"	e	enum:cv::__anon235
THRESH_TOZERO	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       THRESH_TRUNC=CV_THRESH_TRUNC, THRESH_TOZERO=CV_THRESH_TOZERO,$/;"	e	enum:cv::__anon235
THRESH_TOZERO_INV	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       THRESH_TOZERO_INV=CV_THRESH_TOZERO_INV, THRESH_MASK=CV_THRESH_MASK,$/;"	e	enum:cv::__anon235
THRESH_TRUNC	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^       THRESH_TRUNC=CV_THRESH_TRUNC, THRESH_TOZERO=CV_THRESH_TOZERO,$/;"	e	enum:cv::__anon235
TM_CCOEFF	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TM_CCOEFF_NORMED	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TM_CCORR	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TM_CCORR_NORMED	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TM_SQDIFF	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TM_SQDIFF_NORMED	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon243
TRANSLATION	/usr/local/include/opencv2/contrib/contrib.hpp	/^           TRANSLATION       = 2,$/;"	e	enum:cv::__anon20
TRANSLATION	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    TRANSLATION = 0,$/;"	e	enum:cv::videostab::MotionModel
TRANSLATION_AND_SCALE	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    TRANSLATION_AND_SCALE = 1,$/;"	e	enum:cv::videostab::MotionModel
TRIANGLES	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    TRIANGLES      = 0x0004,$/;"	e	enum:cv::ogl::__anon43
TRIANGLES	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        TRIANGLES      = 0x0004,$/;"	e	enum:cv::RenderMode::__anon44
TRIANGLE_FAN	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    TRIANGLE_FAN   = 0x0006,$/;"	e	enum:cv::ogl::__anon43
TRIANGLE_FAN	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        TRIANGLE_FAN   = 0x0006,$/;"	e	enum:cv::RenderMode::__anon44
TRIANGLE_STRIP	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    TRIANGLE_STRIP = 0x0005,$/;"	e	enum:cv::ogl::__anon43
TRIANGLE_STRIP	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        TRIANGLE_STRIP = 0x0005,$/;"	e	enum:cv::RenderMode::__anon44
TRUE	/usr/local/include/opencv2/core/internal.hpp	/^#  define TRUE /;"	d
TS	/usr/local/include/opencv2/ts/ts.hpp	/^class CV_EXPORTS TS$/;"	c	namespace:cvtest
TS	/usr/local/include/opencv2/ts/ts.hpp	/^class CV_EXPORTS TS;$/;"	m	namespace:cvtest	typeref:class:cvtest::CV_EXPORTS
TSParams	/usr/local/include/opencv2/ts/ts.hpp	/^struct CV_EXPORTS TSParams$/;"	s	namespace:cvtest
TYPED_TEST	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TYPED_TEST(/;"	d
TYPED_TEST_CASE	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TYPED_TEST_CASE(/;"	d
TYPED_TEST_CASE_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TYPED_TEST_CASE_P(/;"	d
TYPED_TEST_P	/usr/local/include/opencv2/ts/ts_gtest.h	/^# define TYPED_TEST_P(/;"	d
TYPES	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define TYPES(/;"	d
TYPE_5_8	/usr/local/include/opencv2/features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon57
TYPE_7_12	/usr/local/include/opencv2/features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon57
TYPE_9_16	/usr/local/include/opencv2/features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon57
TYPICAL_MATS	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TYPICAL_MATS /;"	d
TYPICAL_MATS_C1	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TYPICAL_MATS_C1 /;"	d
TYPICAL_MATS_C4	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TYPICAL_MATS_C4 /;"	d
TYPICAL_MAT_SIZES	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TYPICAL_MAT_SIZES /;"	d
TYPICAL_MAT_TYPES	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define TYPICAL_MAT_TYPES /;"	d
T_GeometriccConsistency	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float T_GeometriccConsistency;$/;"	m	class:cv::SpinImageModel
T_GroupingCorespondances	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float T_GroupingCorespondances;$/;"	m	class:cv::SpinImageModel
T_at_level	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  std::vector<int> T_at_level;$/;"	m	class:cv::linemod::Detector
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
Target	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    enum Target$/;"	g	class:cv::ogl::Buffer
TargetArchs	/usr/local/include/opencv2/core/gpumat.hpp	/^    class CV_EXPORTS TargetArchs$/;"	c	namespace:cv::gpu
TearDown	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDownTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
Temp	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation
Temp1	/usr/local/include/opencv2/video/tracking.hpp	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman
Temp2	/usr/local/include/opencv2/video/tracking.hpp	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman
Template	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^struct CV_EXPORTS Template$/;"	s	namespace:cv::linemod
TemplatePyramid	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  typedef std::vector<Template> TemplatePyramid;$/;"	t	class:cv::linemod::Detector
TemplateSel	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TemplatesMap	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  typedef std::map<std::string, std::vector<TemplatePyramid> > TemplatesMap;$/;"	t	class:cv::linemod::Detector
TermCriteria	/usr/local/include/opencv2/core/operations.hpp	/^inline TermCriteria::TermCriteria() : type(0), maxCount(0), epsilon(0) {}$/;"	f	class:cv::TermCriteria
TermCriteria	/usr/local/include/opencv2/core/operations.hpp	/^inline TermCriteria::TermCriteria(const CvTermCriteria& criteria)$/;"	f	class:cv::TermCriteria
TermCriteria	/usr/local/include/opencv2/core/operations.hpp	/^inline TermCriteria::TermCriteria(int _type, int _maxCount, double _epsilon)$/;"	f	class:cv::TermCriteria
TersePrintPrefixToStrings	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
TestBase	/usr/local/include/opencv2/ts/ts_perf.hpp	/^class CV_EXPORTS TestBase: public ::testing::Test$/;"	c	namespace:perf
TestBaseWithParam	/usr/local/include/opencv2/ts/ts_perf.hpp	/^template<typename T> class TestBaseWithParam: public TestBase, public ::testing::WithParamInterface<T> {};$/;"	c	namespace:perf
TestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCaseInfoContainer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestDisabled	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestFactoryBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestInfo	/usr/local/include/opencv2/ts/ts.hpp	/^struct TestInfo$/;"	s	namespace:cvtest
TestInfo	/usr/local/include/opencv2/ts/ts_gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	/usr/local/include/opencv2/ts/ts_gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestMetaFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestPartResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPassed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestProperty	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestProperty(const char* a_key, const char* a_value) :$/;"	f	class:testing::TestProperty
TestProperty	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestResult	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestRole	/usr/local/include/opencv2/ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestWithParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
Texture2D	/usr/local/include/opencv2/core/opengl_interop.hpp	/^class CV_EXPORTS Texture2D$/;"	c	namespace:cv::ogl
ThisClass	/usr/local/include/opencv2/flann/object_factory.h	/^    typedef ObjectFactory<BaseClass,UniqueIdType,ObjectCreator> ThisClass;$/;"	t	class:cvflann::ObjectFactory
ThreadFuncWithCLinkage	/usr/local/include/opencv2/ts/ts_gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalValueHolderBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadWithParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ThreadWithParam($/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
TickMeter	/usr/local/include/opencv2/contrib/contrib.hpp	/^    class CV_EXPORTS TickMeter$/;"	c	namespace:cv
TimeInMillis	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeVector	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    typedef std::vector<int64> TimeVector;$/;"	t	class:perf::TestBase
Tn	/usr/local/include/opencv2/ml/ml.hpp	/^    int Tn;$/;"	m	struct:CvDTreeNode
ToLower	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToUpper	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
TrackID	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack
TrackbarCallback	/usr/local/include/opencv2/highgui/highgui.hpp	/^typedef void (CV_CDECL *TrackbarCallback)(int pos, void* userdata);$/;"	t	namespace:cv
TrackedObject	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            TrackedObject(const cv::Rect& rect):numDetectedFrames(1), numFramesNotDetected(0)$/;"	f	struct:DetectionBasedTracker::TrackedObject
TrackedObject	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        struct TrackedObject$/;"	s	class:DetectionBasedTracker
TrackingState	/usr/local/include/opencv2/contrib/contrib.hpp	/^    enum TrackingState$/;"	g	class:CvFuzzyMeanShiftTracker
TrainData	/usr/local/include/opencv2/ml/ml.hpp	/^typedef CvMLData TrainData;$/;"	t	namespace:cv
TransformDispatcher	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<false>$/;"	s	namespace:cv::gpu::device::transform_detail
TransformDispatcher	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<true>$/;"	s	namespace:cv::gpu::device::transform_detail
TransformFunctorTraits	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Func> struct TransformFunctorTraits : DefaultTransformFunctorTraits<Func> {};$/;"	s	namespace:cv::gpu::device
TransverseMercatorProjector	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^struct CV_EXPORTS TransverseMercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
TransverseMercatorWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    TransverseMercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::TransverseMercatorWarper
TransverseMercatorWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^class CV_EXPORTS TransverseMercatorWarper : public RotationWarperBase<TransverseMercatorProjector>$/;"	c	namespace:cv::detail
TransverseMercatorWarper	/usr/local/include/opencv2/stitching/warpers.hpp	/^class TransverseMercatorWarper: public WarperCreator$/;"	c	namespace:cv
True	/usr/local/include/opencv2/flann/dist.h	/^#undef True$/;"	d
True	/usr/local/include/opencv2/flann/dist.h	/^class True$/;"	c	namespace:cvflann
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TuplePrefixPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TuplePrefixPrinter<1> {$/;"	s	namespace:testing::internal
TwoChannel	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^    enum { Gray = 1, TwoChannel = 2, BGR = 3, BGRA = 4 };$/;"	e	enum:perf::__anon327
TwoPassStabilizer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^class CV_EXPORTS TwoPassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
Type	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef T Type;$/;"	t	struct:cv::Accumulator
Type	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	/usr/local/include/opencv2/features2d/features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef T Type;$/;"	t	struct:cv::ocl::Accumulator
Type	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef float Type;$/;"	t	struct:cv::ocl::Accumulator
Type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
TypeId	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	/usr/local/include/opencv2/ts/ts_gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeTraits	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^    template <typename T> struct TypeTraits$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeWithSize	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedTestCasePState	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
U	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** U; \/\/size of array is equal to number of cameras$/;"	m	class:cv::LevMarqSparse
UInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt32	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UPDATE_WEIGHTS	/usr/local/include/opencv2/ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon298
USE_AUTO_PARAMS	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon17
USE_EQUALIZE_HIST	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon17
USE_INITIAL_DISPARITY	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon17
USE_MEDIAN_FILTERING	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon17
USE_SMART_ID	/usr/local/include/opencv2/contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon17
USE_UNORDERED_MAP	/usr/local/include/opencv2/flann/lsh_table.h	/^#  define USE_UNORDERED_MAP /;"	d
UnConst	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnConst	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnConst	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnOpShift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnVolatile	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnVolatile	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnVolatile	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnaryReadWriteTraits	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        template <typename T, typename D, int shift> struct UnaryReadWriteTraits$/;"	s	namespace:cv::gpu::device::transform_detail
Uncompressed_NV12	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Uncompressed_NV12   = (('N'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,UV  (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_UYVY	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Uncompressed_UYVY   = (('U'<<24)|('Y'<<16)|('V'<<8)|('Y')),   \/\/ UYVY (4:2:2)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YUV420	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Uncompressed_YUV420 = (('I'<<24)|('Y'<<16)|('U'<<8)|('V')),   \/\/ Y,U,V (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YUYV	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Uncompressed_YUYV   = (('Y'<<24)|('U'<<16)|('Y'<<8)|('V')),   \/\/ YUYV\/YUY2 (4:2:2)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YV12	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Uncompressed_YV12   = (('Y'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,V,U (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
UniqueRandom	/usr/local/include/opencv2/flann/random.h	/^    UniqueRandom(int n)$/;"	f	class:cvflann::UniqueRandom
UniqueRandom	/usr/local/include/opencv2/flann/random.h	/^class UniqueRandom$/;"	c	namespace:cvflann
UniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    UniqueResultSet() :$/;"	f	class:cvflann::UniqueResultSet
UniqueResultSet	/usr/local/include/opencv2/flann/result_set.h	/^class UniqueResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
UnitTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UniversalPrint	/usr/local/include/opencv2/ts/ts_gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	/usr/local/include/opencv2/ts/ts_gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	/usr/local/include/opencv2/ts/ts_gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	/usr/local/include/opencv2/ts/ts_gtest.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unlock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
Unlock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void Unlock() {}$/;"	f	class:std::tr1::Mutex
UnqualifiedType	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<typename type_traits_detail::UnConst<T>::type>::type UnqualifiedType;$/;"	t	struct:cv::gpu::device::TypeTraits
Unroll	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        struct Unroll$/;"	s	namespace:cv::gpu::device::reduce_detail
Unroll	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        struct Unroll<0, Pointer, Reference, Op>$/;"	s	namespace:cv::gpu::device::reduce_detail
Unroll	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        struct Unroll$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
Unroll	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        struct Unroll<0, KP, KR, VP, VR, Cmp>$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
UnrollVecDiffCached	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int N> struct UnrollVecDiffCached$/;"	s	namespace:cv::gpu::device::vec_distance_detail
UnrollVecDiffCached	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM> struct UnrollVecDiffCached<THREAD_DIM, 0>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
UntypedMatrix	/usr/local/include/opencv2/flann/matrix.h	/^    UntypedMatrix(void* data_, long rows_, long cols_) :$/;"	f	class:cvflann::UntypedMatrix
UntypedMatrix	/usr/local/include/opencv2/flann/matrix.h	/^class UntypedMatrix$/;"	c	namespace:cvflann
Update	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void Update(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne
Usage	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    enum Usage$/;"	g	class:cv::GlBuffer
UsePPData	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1
UseRoi	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        inline UseRoi(bool val = false) : val_(val) {}$/;"	f	class:cvtest::UseRoi
UseRoi	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    class UseRoi$/;"	c	namespace:cvtest
UserThreadFunc	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef void (*UserThreadFunc)(T);$/;"	t	class:std::tr1::ThreadWithParam
V	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** V; \/\/size of array is equal to number of points$/;"	m	class:cv::LevMarqSparse
V	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        mutable double V;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
V	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvLSVMFilterPosition V;$/;"	m	struct:CvLSVMFilterObject
V0CompressionParameter	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
VC1	/usr/local/include/opencv2/gpu/gpu.hpp	/^        VC1,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
VIBE_GPU	/usr/local/include/opencv2/nonfree/gpu.hpp	/^class CV_EXPORTS VIBE_GPU$/;"	c	namespace:cv::gpu
Value	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual double Value(int* \/*comp*\/, int \/*x*\/ = 0, int \/*y*\/ = 0){return -1;};$/;"	f	class:CvProb
ValueArray1	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	/usr/local/include/opencv2/ts/ts_gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	/usr/local/include/opencv2/ts/ts_gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
ValueType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L1
ValueType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L2
ValueType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::SL2
ValueType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef unsigned char ValueType;$/;"	t	struct:cv::Hamming
ValueType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    typedef unsigned char ValueType;$/;"	t	struct:cv::HammingMultilevel
ValueType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef T ValueType;$/;"	t	struct:cv::ocl::L1
ValueType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef T ValueType;$/;"	t	struct:cv::ocl::L2
ValueType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            typedef unsigned char ValueType;$/;"	t	struct:cv::ocl::Hamming
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	/usr/local/include/opencv2/ts/ts_gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	/usr/local/include/opencv2/ts/ts_gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
Vec	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp, int cn> class CV_EXPORTS Vec;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Vec	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, _T2 alpha, Matx_ScaleOp op)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_AddOp op)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_SubOp op)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec()$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(const Vec<_Tp, cn>& m)$/;"	f	class:cv::Vec
Vec	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(const _Tp* values)$/;"	f	class:cv::Vec
VecCommaInitializer	/usr/local/include/opencv2/core/operations.hpp	/^VecCommaInitializer<_Tp, cn>::VecCommaInitializer(Vec<_Tp, cn>* _vec)$/;"	f	class:cv::VecCommaInitializer
VecDiffCachedCalculator	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, false>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
VecDiffCachedCalculator	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, true>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
VecDiffCachedRegister	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        template <typename T1> __device__ __forceinline__ VecDiffCachedRegister(const T1* vec1, int len, U* smem, int glob_tid, int tid)$/;"	f	struct:cv::gpu::device::VecDiffCachedRegister
VecDiffCachedRegister	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    template <int THREAD_DIM, int MAX_LEN, bool LEN_EQ_MAX_LEN, typename U> struct VecDiffCachedRegister$/;"	s	namespace:cv::gpu::device
VecDiffGlobal	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        explicit __device__ __forceinline__ VecDiffGlobal(const T1* vec1_, int = 0, void* = 0, int = 0, int = 0)$/;"	f	struct:cv::gpu::device::VecDiffGlobal
VecDiffGlobal	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    template <int THREAD_DIM, typename T1> struct VecDiffGlobal$/;"	s	namespace:cv::gpu::device
VecReaderProxy	/usr/local/include/opencv2/core/operations.hpp	/^    VecReaderProxy( FileNodeIterator* _it ) : it(_it) {}$/;"	f	class:cv::VecReaderProxy
VecReaderProxy	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int numflag> class CV_EXPORTS VecReaderProxy$/;"	c	namespace:cv
VecReaderProxy	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS VecReaderProxy<_Tp,1>$/;"	c	namespace:cv
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char1>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char2>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char3>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char4>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char8>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char>$/;"	s	namespace:cv::gpu::device
VecTraits	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<schar>$/;"	s	namespace:cv::gpu::device
VecWriterProxy	/usr/local/include/opencv2/core/operations.hpp	/^    VecWriterProxy( FileStorage* _fs ) : fs(_fs) {}$/;"	f	class:cv::VecWriterProxy
VecWriterProxy	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int numflag> class CV_EXPORTS VecWriterProxy$/;"	c	namespace:cv
VecWriterProxy	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS VecWriterProxy<_Tp,1>$/;"	c	namespace:cv
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector() {}$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(_Tp* _data, size_t _size, bool _copyData=false)$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(const Vector& d) { *this = d; }$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(const Vector& d, const Range& r_)$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(const std::vector<_Tp>& vec, bool _copyData=false)$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(size_t _size)  { resize(_size); }$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    Vector(size_t _size, const _Tp& val)$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^    template<int n> Vector(const Vec<_Tp, n>& vec)$/;"	f	class:cv::Vector
Vector	/usr/local/include/opencv2/core/operations.hpp	/^template <typename _Tp> class CV_EXPORTS Vector$/;"	c	namespace:cv
VectorDescriptorMatch	/usr/local/include/opencv2/features2d/features2d.hpp	/^typedef VectorDescriptorMatcher VectorDescriptorMatch;$/;"	t	namespace:cv
VectorDescriptorMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^class CV_EXPORTS VectorDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
Vertex	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    struct CV_EXPORTS Vertex$/;"	s	class:cv::Subdiv2D
VideoCapture	/usr/local/include/opencv2/highgui/highgui.hpp	/^class CV_EXPORTS_W VideoCapture$/;"	c	namespace:cv
VideoFileSource	/usr/local/include/opencv2/videostab/frame_source.hpp	/^class CV_EXPORTS VideoFileSource : public IFrameSource$/;"	c	namespace:cv::videostab
VideoReader_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS VideoReader_GPU$/;"	c	namespace:cv::gpu
VideoSource	/usr/local/include/opencv2/gpu/gpu.hpp	/^        VideoSource() : frameQueue_(0), videoParser_(0) {}$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
VideoSource	/usr/local/include/opencv2/gpu/gpu.hpp	/^    class CV_EXPORTS VideoSource$/;"	c	class:cv::gpu::VideoReader_GPU
VideoWriter	/usr/local/include/opencv2/highgui/highgui.hpp	/^class CV_EXPORTS_W VideoWriter$/;"	c	namespace:cv
VideoWriter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^class CV_EXPORTS VideoWriter_GPU$/;"	c	namespace:cv::gpu
View	/usr/local/include/opencv2/core/wimage.hpp	/^WImageView<T> WImage<T>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImage
View	/usr/local/include/opencv2/core/wimage.hpp	/^WImageViewC<T, C> WImageC<T, C>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImageC
Vis_index	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* Vis_index; \/\/ matrix which element is index of measurement for point i and camera j$/;"	m	class:cv::LevMarqSparse
VoronoiSeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^class CV_EXPORTS VoronoiSeamFinder : public PairwiseSeamFinder$/;"	c	namespace:cv::detail
W	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** W;$/;"	m	class:cv::LevMarqSparse
WARMUP_NONE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        WARMUP_NONE$/;"	e	enum:perf::TestBase::__anon332
WARMUP_READ	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        WARMUP_READ,$/;"	e	enum:perf::TestBase::__anon332
WARMUP_RNG	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        WARMUP_RNG,$/;"	e	enum:perf::TestBase::__anon332
WARMUP_WRITE	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        WARMUP_WRITE,$/;"	e	enum:perf::TestBase::__anon332
WARP_INVERSE_MAP	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    WARP_INVERSE_MAP=CV_WARP_INVERSE_MAP$/;"	e	enum:cv::__anon233
WARP_SHUFFLE_FUNCTIONS	/usr/local/include/opencv2/core/gpumat.hpp	/^        WARP_SHUFFLE_FUNCTIONS = FEATURE_SET_COMPUTE_30,$/;"	e	enum:cv::gpu::FeatureSet
WARP_SIZE	/usr/local/include/opencv2/gpu/device/warp.hpp	/^            WARP_SIZE     = 1 << LOG_WARP_SIZE,$/;"	e	enum:cv::gpu::device::Warp::__anon182
WAVE_CORRECT_HORIZ	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_HORIZ,$/;"	e	enum:cv::detail::WaveCorrectKind
WAVE_CORRECT_VERT	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_VERT$/;"	e	enum:cv::detail::WaveCorrectKind
WEIGHT_BLACK	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        WEIGHT_BLACK    = 900$/;"	e	enum:cv::GlFont::Weight
WEIGHT_BOLD	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        WEIGHT_BOLD     = 700,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_LIGHT	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        WEIGHT_LIGHT    = 300,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_NORMAL	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        WEIGHT_NORMAL   = 400,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_SEMIBOLD	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^        WEIGHT_SEMIBOLD = 600,$/;"	e	enum:cv::GlFont::Weight
WHOLE_SUBMAT	/usr/local/include/opencv2/ts/gpu_test.hpp	/^    #define WHOLE_SUBMAT /;"	d
WIN32	/usr/local/include/opencv2/core/internal.hpp	/^#    define WIN32$/;"	d
WINDOW_AUTOSIZE	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WINDOW_AUTOSIZE = CV_WINDOW_AUTOSIZE, \/\/ the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:cv::__anon205
WINDOW_NORMAL	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WINDOW_NORMAL   = CV_WINDOW_NORMAL,   \/\/ the user can resize the window (no constraint) \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:cv::__anon205
WINDOW_OPENGL	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WINDOW_OPENGL   = CV_WINDOW_OPENGL,   \/\/ window with opengl support$/;"	e	enum:cv::__anon205
WImage	/usr/local/include/opencv2/core/wimage.hpp	/^    explicit WImage(IplImage* img) : image_(img) {$/;"	f	class:cv::WImage
WImage	/usr/local/include/opencv2/core/wimage.hpp	/^class WImage$/;"	c	namespace:cv
WImage1_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<short, 1>        WImage1_16s;$/;"	t	namespace:cv
WImage1_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<ushort, 1>        WImage1_16u;$/;"	t	namespace:cv
WImage1_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<uchar, 1>        WImage1_b;$/;"	t	namespace:cv
WImage1_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<float, 1>        WImage1_f;$/;"	t	namespace:cv
WImage3_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<short, 3>        WImage3_16s;$/;"	t	namespace:cv
WImage3_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<ushort, 3>        WImage3_16u;$/;"	t	namespace:cv
WImage3_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<uchar, 3>        WImage3_b;$/;"	t	namespace:cv
WImage3_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageC<float, 3>        WImage3_f;$/;"	t	namespace:cv
WImageBuffer	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageBuffer() : WImage<T>(0) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageBuffer(int width, int height, int nchannels) : WImage<T>(0) {$/;"	f	class:cv::WImageBuffer
WImageBuffer	/usr/local/include/opencv2/core/wimage.hpp	/^    explicit WImageBuffer(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	/usr/local/include/opencv2/core/wimage.hpp	/^class WImageBuffer : public WImage<T>$/;"	c	namespace:cv
WImageBuffer1_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<short, 1>  WImageBuffer1_16s;$/;"	t	namespace:cv
WImageBuffer1_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<ushort, 1>  WImageBuffer1_16u;$/;"	t	namespace:cv
WImageBuffer1_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<uchar, 1>  WImageBuffer1_b;$/;"	t	namespace:cv
WImageBuffer1_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<float, 1>  WImageBuffer1_f;$/;"	t	namespace:cv
WImageBuffer3_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<short, 3>  WImageBuffer3_16s;$/;"	t	namespace:cv
WImageBuffer3_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<ushort, 3>  WImageBuffer3_16u;$/;"	t	namespace:cv
WImageBuffer3_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<uchar, 3>  WImageBuffer3_b;$/;"	t	namespace:cv
WImageBuffer3_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBufferC<float, 3>  WImageBuffer3_f;$/;"	t	namespace:cv
WImageBufferC	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageBufferC() : WImageC<T, C>(0) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageBufferC(int width, int height) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageBufferC
WImageBufferC	/usr/local/include/opencv2/core/wimage.hpp	/^    explicit WImageBufferC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	/usr/local/include/opencv2/core/wimage.hpp	/^class WImageBufferC : public WImageC<T, C>$/;"	c	namespace:cv
WImageBuffer_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBuffer<short>      WImageBuffer_16s;$/;"	t	namespace:cv
WImageBuffer_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBuffer<ushort>      WImageBuffer_16u;$/;"	t	namespace:cv
WImageBuffer_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBuffer<uchar>      WImageBuffer_b;$/;"	t	namespace:cv
WImageBuffer_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageBuffer<float>      WImageBuffer_f;$/;"	t	namespace:cv
WImageC	/usr/local/include/opencv2/core/wimage.hpp	/^    explicit WImageC(IplImage* img) : WImage<T>(img) {$/;"	f	class:cv::WImageC
WImageC	/usr/local/include/opencv2/core/wimage.hpp	/^class WImageC : public WImage<T>$/;"	c	namespace:cv
WImageView	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageView(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageView
WImageView	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageView(const WImage<T>& img) : WImage<T>(0) {$/;"	f	class:cv::WImageView
WImageView	/usr/local/include/opencv2/core/wimage.hpp	/^WImageView<T>::WImageView(T* data, int width, int height, int nchannels, int width_step)$/;"	f	class:cv::WImageView
WImageView	/usr/local/include/opencv2/core/wimage.hpp	/^WImageView<T>::WImageView(WImage<T>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageView
WImageView	/usr/local/include/opencv2/core/wimage.hpp	/^class WImageView : public WImage<T>$/;"	c	namespace:cv
WImageView1_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<short, 1>    WImageView1_16s;$/;"	t	namespace:cv
WImageView1_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<ushort, 1>    WImageView1_16u;$/;"	t	namespace:cv
WImageView1_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<uchar, 1>    WImageView1_b;$/;"	t	namespace:cv
WImageView1_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<float, 1>    WImageView1_f;$/;"	t	namespace:cv
WImageView3_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<short, 3>    WImageView3_16s;$/;"	t	namespace:cv
WImageView3_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<ushort, 3>    WImageView3_16u;$/;"	t	namespace:cv
WImageView3_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<uchar, 3>    WImageView3_b;$/;"	t	namespace:cv
WImageView3_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageViewC<float, 3>    WImageView3_f;$/;"	t	namespace:cv
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageViewC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageViewC(const WImageC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageViewC(const WImageViewC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC() : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(T* data, int width, int height, int width_step)$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(WImageC<T, C>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageViewC
WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^class WImageViewC : public WImageC<T, C>$/;"	c	namespace:cv
WImageView_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageView<short>        WImageView_16s;$/;"	t	namespace:cv
WImageView_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageView<ushort>        WImageView_16u;$/;"	t	namespace:cv
WImageView_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageView<uchar>        WImageView_b;$/;"	t	namespace:cv
WImageView_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImageView<float>        WImageView_f;$/;"	t	namespace:cv
WImage_16s	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImage<short>            WImage_16s;$/;"	t	namespace:cv
WImage_16u	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImage<ushort>            WImage_16u;$/;"	t	namespace:cv
WImage_b	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImage<uchar>            WImage_b;$/;"	t	namespace:cv
WImage_f	/usr/local/include/opencv2/core/wimage.hpp	/^typedef WImage<float>            WImage_f;$/;"	t	namespace:cv
WND_PROP_ASPECT_RATIO	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WND_PROP_ASPECT_RATIO = CV_WND_PROP_ASPECTRATIO, \/\/ window's aspect ration$/;"	e	enum:cv::__anon205
WND_PROP_AUTOSIZE	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WND_PROP_AUTOSIZE     = CV_WND_PROP_AUTOSIZE,    \/\/ autosize property$/;"	e	enum:cv::__anon205
WND_PROP_FULLSCREEN	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WND_PROP_FULLSCREEN   = CV_WND_PROP_FULLSCREEN,  \/\/ fullscreen property$/;"	e	enum:cv::__anon205
WND_PROP_OPENGL	/usr/local/include/opencv2/highgui/highgui.hpp	/^    WND_PROP_OPENGL       = CV_WND_PROP_OPENGL       \/\/ opengl support$/;"	e	enum:cv::__anon205
WORDSIZE	/usr/local/include/opencv2/flann/allocator.h	/^const size_t     WORDSIZE=16;$/;"	m	namespace:cvflann
WRITE_ONLY	/usr/local/include/opencv2/core/opengl_interop.hpp	/^        WRITE_ONLY = 0x88B9,$/;"	e	enum:cv::ogl::Buffer::Access
WString	/usr/local/include/opencv2/core/core.hpp	/^typedef std::basic_string<wchar_t> WString;$/;"	t	namespace:cv
WTA_K	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int WTA_K;$/;"	m	class:cv::ORB
WTA_K_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int WTA_K_;$/;"	m	class:cv::gpu::ORB_GPU
WaitForNotification	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
Warp	/usr/local/include/opencv2/gpu/device/warp.hpp	/^    struct Warp$/;"	s	namespace:cv::gpu::device
WarpOptimized	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        template <unsigned int N> struct WarpOptimized$/;"	s	namespace:cv::gpu::device::reduce_detail
WarpOptimized	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        template <unsigned int N> struct WarpOptimized$/;"	s	namespace:cv::gpu::device::reduce_key_val_detail
WarpScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScan() {}$/;"	f	struct:cv::gpu::device::WarpScan
WarpScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScan(const WarpScan& other) { (void)other; }$/;"	f	struct:cv::gpu::device::WarpScan
WarpScan	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    template <ScanKind Kind, typename T, typename F> struct WarpScan$/;"	s	namespace:cv::gpu::device
WarpScanNoComp	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp() {}$/;"	f	struct:cv::gpu::device::WarpScanNoComp
WarpScanNoComp	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp(const WarpScanNoComp& other) { (void)other; }$/;"	f	struct:cv::gpu::device::WarpScanNoComp
WarpScanNoComp	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    template <ScanKind Kind , typename T, typename F> struct WarpScanNoComp$/;"	s	namespace:cv::gpu::device
WarperCreator	/usr/local/include/opencv2/stitching/warpers.hpp	/^class WarperCreator$/;"	c	namespace:cv
WaveCorrectKind	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^enum WaveCorrectKind$/;"	g	namespace:cv::detail
Weight	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    enum Weight$/;"	g	class:cv::GlFont
WeightingDeblurer	/usr/local/include/opencv2/videostab/deblurring.hpp	/^class CV_EXPORTS WeightingDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
Width	/usr/local/include/opencv2/core/wimage.hpp	/^    int Width() const {return image_->width; }$/;"	f	class:cv::WImage
WidthStep	/usr/local/include/opencv2/core/wimage.hpp	/^    int WidthStep() const {return image_->widthStep; }$/;"	f	class:cv::WImage
WithOutMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ WithOutMask(){}$/;"	f	struct:cv::gpu::device::WithOutMask
WithOutMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ WithOutMask(const WithOutMask& mask){}$/;"	f	struct:cv::gpu::device::WithOutMask
WithOutMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    struct WithOutMask$/;"	s	namespace:cv::gpu::device
WithParamInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WordStats	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        WordStats() :$/;"	f	struct:cv::of2::FabMapFBO::WordStats
WordStats	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        WordStats(int _q, double _info) :$/;"	f	struct:cv::of2::FabMapFBO::WordStats
WordStats	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    struct WordStats {$/;"	s	class:cv::of2::FabMapFBO
Write	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual void Write(CvFileStorage* fs, const char* name)$/;"	f	class:CvBlobSeq
Write	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteStructContext	/usr/local/include/opencv2/core/operations.hpp	/^class CV_EXPORTS WriteStructContext$/;"	c	namespace:cv
Wsr	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<double> Wsr;$/;"	m	class:cv::LogPolar_Overlapping
X	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* X; \/\/measurement$/;"	m	class:cv::LevMarqSparse
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB()$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB(const XYZ2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB(const XYZ2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct XYZ2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
XYZ2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct XYZ2RGB$/;"	s	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint XYZ2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
X_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        X_ROW = 0,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
X_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        X_ROW = 0,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
X_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                X_ROW = 0,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
Xcoef	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff
XcoefA	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff
XcoefAB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff
XcoefB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff
YAPE	/usr/local/include/opencv2/legacy/legacy.hpp	/^typedef LDetector YAPE;$/;"	t	namespace:cv
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB()$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB(const YCrCb2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB(const YCrCb2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct YCrCb2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
YCrCb2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YCrCb2RGB$/;"	s	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YCrCb2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> __device__ __forceinline__ void YCrCb2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YCrCb2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB()$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB(const YUV2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB(const YUV2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct YUV2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
YUV2RGB	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YUV2RGB$/;"	s	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YUV2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void YUV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YUV2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
YUV420	/usr/local/include/opencv2/gpu/gpu.hpp	/^        YUV420,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
YUV422	/usr/local/include/opencv2/gpu/gpu.hpp	/^        YUV422,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
YUV444	/usr/local/include/opencv2/gpu/gpu.hpp	/^        YUV444,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
Y_ROW	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Y_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon202
Y_ROW	/usr/local/include/opencv2/nonfree/gpu.hpp	/^        Y_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
Y_ROW	/usr/local/include/opencv2/nonfree/ocl.hpp	/^                Y_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
Ycoef	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff
YcoefA	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff
YcoefAB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff
YcoefB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff
Yes	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::gpu::device::IsBinaryFunction
Yes	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::gpu::device::IsUnaryFunction
Yj	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** Yj; \/\/length of array is i = num_points$/;"	m	class:cv::LevMarqSparse
Zcoef	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff
ZcoefA	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff
ZcoefAB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff
ZcoefB	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff
ZeroIterator	/usr/local/include/opencv2/flann/dist.h	/^struct ZeroIterator$/;"	s	namespace:cvflann
_CRT_SECURE_NO_DEPRECATE	/usr/local/include/opencv2/core/types_c.h	/^#    define _CRT_SECURE_NO_DEPRECATE /;"	d
_CV_ALWAYS_NO_PROFILE_	/usr/local/include/opencv2/core/internal.hpp	/^#  define _CV_ALWAYS_NO_PROFILE_$/;"	d
_CV_ALWAYS_PROFILE_	/usr/local/include/opencv2/core/internal.hpp	/^#  undef _CV_ALWAYS_PROFILE_$/;"	d
_CvPixelPosition32f	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct _CvPixelPosition32f$/;"	s
_CvPixelPosition8s	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct _CvPixelPosition8s$/;"	s
_CvPixelPosition8u	/usr/local/include/opencv2/legacy/compat.hpp	/^typedef struct _CvPixelPosition8u$/;"	s
_HAS_EXCEPTIONS	/usr/local/include/opencv2/ts/ts_gtest.h	/^#   define _HAS_EXCEPTIONS /;"	d
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^inline _InputArray::_InputArray(const Scalar& s)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int m, int n> inline _InputArray::_InputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const _Tp* vec, int n)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<_Tp>& vec)$/;"	f	class:cv::_InputArray
_InputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<vector<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_IplConvKernel	/usr/local/include/opencv2/core/types_c.h	/^typedef struct _IplConvKernel$/;"	s
_IplConvKernelFP	/usr/local/include/opencv2/core/types_c.h	/^typedef struct _IplConvKernelFP$/;"	s
_IplImage	/usr/local/include/opencv2/core/types_c.h	/^typedef struct _IplImage$/;"	s
_IplROI	/usr/local/include/opencv2/core/types_c.h	/^typedef struct _IplROI$/;"	s
_OPENCV_FLANN_HPP_	/usr/local/include/opencv2/flann/flann.hpp	/^#define _OPENCV_FLANN_HPP_$/;"	d
_OPENCV_MINIFLANN_HPP_	/usr/local/include/opencv2/flann/miniflann.hpp	/^#define _OPENCV_MINIFLANN_HPP_$/;"	d
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int m, int n> inline _OutputArray::_OutputArray(Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int m, int n> inline _OutputArray::_OutputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(_Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const _Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_WIN32	/usr/local/include/opencv2/core/internal.hpp	/^#    define _WIN32$/;"	d
__BEGIN__	/usr/local/include/opencv2/core/internal.hpp	/^#define __BEGIN__ /;"	d
__CV_BEGIN__	/usr/local/include/opencv2/core/core_c.h	/^#define __CV_BEGIN__ /;"	d
__CV_END__	/usr/local/include/opencv2/core/core_c.h	/^#define __CV_END__ /;"	d
__CV_EXIT__	/usr/local/include/opencv2/core/core_c.h	/^#define __CV_EXIT__ /;"	d
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        } __CV_GPU_DEPR_AFTER__ ;$/;"	m	namespace:cv::gpu	typeref:struct:cv::gpu::DevMem2D_
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_DEPR_AFTER__ /;"	d
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_DEPR_AFTER__$/;"	d
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/gpumat.hpp	/^        #undef __CV_GPU_DEPR_AFTER__$/;"	d
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/gpumat.hpp	/^        __CV_GPU_DEPR_BEFORE__ template <typename _Tp> operator DevMem2D_<_Tp>() const __CV_GPU_DEPR_AFTER__;$/;"	m	class:cv::gpu::GpuMat
__CV_GPU_DEPR_AFTER__	/usr/local/include/opencv2/core/gpumat.hpp	/^        __CV_GPU_DEPR_BEFORE__ template <typename _Tp> operator PtrStep_<_Tp>() const __CV_GPU_DEPR_AFTER__;$/;"	m	class:cv::gpu::GpuMat
__CV_GPU_DEPR_BEFORE__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_DEPR_BEFORE__ /;"	d
__CV_GPU_DEPR_BEFORE__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_DEPR_BEFORE__$/;"	d
__CV_GPU_DEPR_BEFORE__	/usr/local/include/opencv2/core/gpumat.hpp	/^        #undef __CV_GPU_DEPR_BEFORE__$/;"	d
__CV_GPU_HOST_DEVICE__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_HOST_DEVICE__ /;"	d
__CV_GPU_HOST_DEVICE__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    #define __CV_GPU_HOST_DEVICE__$/;"	d
__END__	/usr/local/include/opencv2/core/internal.hpp	/^#define __END__ /;"	d
__OPENCV_ALL_HPP__	/usr/local/include/opencv2/opencv.hpp	/^#define __OPENCV_ALL_HPP__$/;"	d
__OPENCV_BACKGROUND_SEGM_HPP__	/usr/local/include/opencv2/video/background_segm.hpp	/^#define __OPENCV_BACKGROUND_SEGM_HPP__$/;"	d
__OPENCV_CALIB3D_HPP__	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^#define __OPENCV_CALIB3D_HPP__$/;"	d
__OPENCV_COMPAT_HPP__	/usr/local/include/opencv2/legacy/compat.hpp	/^#define __OPENCV_COMPAT_HPP__$/;"	d
__OPENCV_CONTRIB_HPP__	/usr/local/include/opencv2/contrib/contrib.hpp	/^#define __OPENCV_CONTRIB_HPP__$/;"	d
__OPENCV_CONTRIB_RETINA_HPP__	/usr/local/include/opencv2/contrib/retina.hpp	/^#define __OPENCV_CONTRIB_RETINA_HPP__$/;"	d
__OPENCV_CORE_C_H__	/usr/local/include/opencv2/core/core_c.h	/^#define __OPENCV_CORE_C_H__$/;"	d
__OPENCV_CORE_DEVPTRS_HPP__	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^#define __OPENCV_CORE_DEVPTRS_HPP__$/;"	d
__OPENCV_CORE_EIGEN_HPP__	/usr/local/include/opencv2/core/eigen.hpp	/^#define __OPENCV_CORE_EIGEN_HPP__$/;"	d
__OPENCV_CORE_HPP__	/usr/local/include/opencv2/core/core.hpp	/^#define __OPENCV_CORE_HPP__$/;"	d
__OPENCV_CORE_INTERNAL_HPP__	/usr/local/include/opencv2/core/internal.hpp	/^#define __OPENCV_CORE_INTERNAL_HPP__$/;"	d
__OPENCV_CORE_MATRIX_OPERATIONS_HPP__	/usr/local/include/opencv2/core/mat.hpp	/^#define __OPENCV_CORE_MATRIX_OPERATIONS_HPP__$/;"	d
__OPENCV_CORE_OPERATIONS_HPP__	/usr/local/include/opencv2/core/operations.hpp	/^#define __OPENCV_CORE_OPERATIONS_HPP__$/;"	d
__OPENCV_CORE_TYPES_H__	/usr/local/include/opencv2/core/types_c.h	/^#define __OPENCV_CORE_TYPES_H__$/;"	d
__OPENCV_CORE_WIMAGE_HPP__	/usr/local/include/opencv2/core/wimage.hpp	/^#define __OPENCV_CORE_WIMAGE_HPP__$/;"	d
__OPENCV_CVSTREAMS_H__	/usr/local/include/opencv2/legacy/streams.hpp	/^#define __OPENCV_CVSTREAMS_H__$/;"	d
__OPENCV_FEATURES_2D_HPP__	/usr/local/include/opencv2/features2d/features2d.hpp	/^#define __OPENCV_FEATURES_2D_HPP__$/;"	d
__OPENCV_GPUMAT_HPP__	/usr/local/include/opencv2/core/gpumat.hpp	/^#define __OPENCV_GPUMAT_HPP__$/;"	d
__OPENCV_GPU_BORDER_INTERPOLATE_HPP__	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^#define __OPENCV_GPU_BORDER_INTERPOLATE_HPP__$/;"	d
__OPENCV_GPU_COLOR_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^#define __OPENCV_GPU_COLOR_DETAIL_HPP__$/;"	d
__OPENCV_GPU_COLOR_HPP__	/usr/local/include/opencv2/gpu/device/color.hpp	/^#define __OPENCV_GPU_COLOR_HPP__$/;"	d
__OPENCV_GPU_COMMON_HPP__	/usr/local/include/opencv2/gpu/device/common.hpp	/^#define __OPENCV_GPU_COMMON_HPP__$/;"	d
__OPENCV_GPU_DATAMOV_UTILS_HPP__	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^#define __OPENCV_GPU_DATAMOV_UTILS_HPP__$/;"	d
__OPENCV_GPU_DEVICE_BLOCK_HPP__	/usr/local/include/opencv2/gpu/device/block.hpp	/^#define __OPENCV_GPU_DEVICE_BLOCK_HPP__$/;"	d
__OPENCV_GPU_DEVICE_FUNCATTRIB_HPP_	/usr/local/include/opencv2/gpu/device/funcattrib.hpp	/^#define __OPENCV_GPU_DEVICE_FUNCATTRIB_HPP_$/;"	d
__OPENCV_GPU_DEVICE_WARP_HPP__	/usr/local/include/opencv2/gpu/device/warp.hpp	/^#define __OPENCV_GPU_DEVICE_WARP_HPP__$/;"	d
__OPENCV_GPU_DYNAMIC_SMEM_HPP__	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^#define __OPENCV_GPU_DYNAMIC_SMEM_HPP__$/;"	d
__OPENCV_GPU_FILTERS_HPP__	/usr/local/include/opencv2/gpu/device/filters.hpp	/^#define __OPENCV_GPU_FILTERS_HPP__$/;"	d
__OPENCV_GPU_FUNCTIONAL_HPP__	/usr/local/include/opencv2/gpu/device/functional.hpp	/^#define __OPENCV_GPU_FUNCTIONAL_HPP__$/;"	d
__OPENCV_GPU_GPU_DEVICE_STATIC_CHECK_HPP__	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^#define __OPENCV_GPU_GPU_DEVICE_STATIC_CHECK_HPP__$/;"	d
__OPENCV_GPU_HOST_DEVICE__	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^    #define __OPENCV_GPU_HOST_DEVICE__ /;"	d
__OPENCV_GPU_HOST_DEVICE__	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^    #define __OPENCV_GPU_HOST_DEVICE__$/;"	d
__OPENCV_GPU_HOST_DEVICE__	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^#undef __OPENCV_GPU_HOST_DEVICE__$/;"	d
__OPENCV_GPU_HPP__	/usr/local/include/opencv2/gpu/gpu.hpp	/^#define __OPENCV_GPU_HPP__$/;"	d
__OPENCV_GPU_LIMITS_GPU_HPP__	/usr/local/include/opencv2/gpu/device/limits.hpp	/^#define __OPENCV_GPU_LIMITS_GPU_HPP__$/;"	d
__OPENCV_GPU_MATRIX_OPERATIONS_HPP__	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^#define __OPENCV_GPU_MATRIX_OPERATIONS_HPP__$/;"	d
__OPENCV_GPU_PERF_UTILITY_HPP__	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^#define __OPENCV_GPU_PERF_UTILITY_HPP__$/;"	d
__OPENCV_GPU_PRED_VAL_REDUCE_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^#define __OPENCV_GPU_PRED_VAL_REDUCE_DETAIL_HPP__$/;"	d
__OPENCV_GPU_REDUCE_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^#define __OPENCV_GPU_REDUCE_DETAIL_HPP__$/;"	d
__OPENCV_GPU_REDUCE_HPP__	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^#define __OPENCV_GPU_REDUCE_HPP__$/;"	d
__OPENCV_GPU_SATURATE_CAST_HPP__	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^#define __OPENCV_GPU_SATURATE_CAST_HPP__$/;"	d
__OPENCV_GPU_SCAN_HPP__	/usr/local/include/opencv2/gpu/device/scan.hpp	/^#define __OPENCV_GPU_SCAN_HPP__$/;"	d
__OPENCV_GPU_SIMD_FUNCTIONS_HPP__	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^#define __OPENCV_GPU_SIMD_FUNCTIONS_HPP__$/;"	d
__OPENCV_GPU_STREAM_ACCESSOR_HPP__	/usr/local/include/opencv2/gpu/stream_accessor.hpp	/^#define __OPENCV_GPU_STREAM_ACCESSOR_HPP__$/;"	d
__OPENCV_GPU_TEST_UTILITY_HPP__	/usr/local/include/opencv2/ts/gpu_test.hpp	/^#define __OPENCV_GPU_TEST_UTILITY_HPP__$/;"	d
__OPENCV_GPU_TRANSFORM_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^#define __OPENCV_GPU_TRANSFORM_DETAIL_HPP__$/;"	d
__OPENCV_GPU_TRANSFORM_HPP__	/usr/local/include/opencv2/gpu/device/transform.hpp	/^#define __OPENCV_GPU_TRANSFORM_HPP__$/;"	d
__OPENCV_GPU_TYPE_TRAITS_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^#define __OPENCV_GPU_TYPE_TRAITS_DETAIL_HPP__$/;"	d
__OPENCV_GPU_TYPE_TRAITS_HPP__	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^#define __OPENCV_GPU_TYPE_TRAITS_HPP__$/;"	d
__OPENCV_GPU_UTILITY_HPP__	/usr/local/include/opencv2/gpu/device/utility.hpp	/^#define __OPENCV_GPU_UTILITY_HPP__$/;"	d
__OPENCV_GPU_VECMATH_HPP__	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^#define __OPENCV_GPU_VECMATH_HPP__$/;"	d
__OPENCV_GPU_VEC_DISTANCE_DETAIL_HPP__	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^#define __OPENCV_GPU_VEC_DISTANCE_DETAIL_HPP__$/;"	d
__OPENCV_GPU_VEC_DISTANCE_HPP__	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^#define __OPENCV_GPU_VEC_DISTANCE_HPP__$/;"	d
__OPENCV_GPU_VEC_TRAITS_HPP__	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^#define __OPENCV_GPU_VEC_TRAITS_HPP__$/;"	d
__OPENCV_GPU_WARP_SHUFFLE_HPP__	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^#define __OPENCV_GPU_WARP_SHUFFLE_HPP__$/;"	d
__OPENCV_GTESTCV_HPP__	/usr/local/include/opencv2/ts/ts.hpp	/^#define __OPENCV_GTESTCV_HPP__$/;"	d
__OPENCV_HIGHGUI_HPP__	/usr/local/include/opencv2/highgui/highgui.hpp	/^#define __OPENCV_HIGHGUI_HPP__$/;"	d
__OPENCV_HIGHGUI_H__	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define __OPENCV_HIGHGUI_H__$/;"	d
__OPENCV_HYBRIDTRACKER_H_	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^#define __OPENCV_HYBRIDTRACKER_H_$/;"	d
__OPENCV_IMGPROC_HPP__	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^#define __OPENCV_IMGPROC_HPP__$/;"	d
__OPENCV_IMGPROC_IMGPROC_C_H__	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^#define __OPENCV_IMGPROC_IMGPROC_C_H__$/;"	d
__OPENCV_IMGPROC_TYPES_C_H__	/usr/local/include/opencv2/imgproc/types_c.h	/^#define __OPENCV_IMGPROC_TYPES_C_H__$/;"	d
__OPENCV_LEGACY_HPP__	/usr/local/include/opencv2/legacy/legacy.hpp	/^#define __OPENCV_LEGACY_HPP__$/;"	d
__OPENCV_ML_HPP__	/usr/local/include/opencv2/ml/ml.hpp	/^#define __OPENCV_ML_HPP__$/;"	d
__OPENCV_NONFREE_FEATURES_2D_HPP__	/usr/local/include/opencv2/nonfree/features2d.hpp	/^#define __OPENCV_NONFREE_FEATURES_2D_HPP__$/;"	d
__OPENCV_NONFREE_GPU_HPP__	/usr/local/include/opencv2/nonfree/gpu.hpp	/^#define __OPENCV_NONFREE_GPU_HPP__$/;"	d
__OPENCV_NONFREE_HPP__	/usr/local/include/opencv2/nonfree/nonfree.hpp	/^#define __OPENCV_NONFREE_HPP__$/;"	d
__OPENCV_NONFREE_OCL_HPP__	/usr/local/include/opencv2/nonfree/ocl.hpp	/^#define __OPENCV_NONFREE_OCL_HPP__$/;"	d
__OPENCV_OBJDETECT_HPP__	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^#define __OPENCV_OBJDETECT_HPP__$/;"	d
__OPENCV_OCL_HPP__	/usr/local/include/opencv2/ocl/ocl.hpp	/^#define __OPENCV_OCL_HPP__$/;"	d
__OPENCV_OPENFABMAP_H_	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^#define __OPENCV_OPENFABMAP_H_$/;"	d
__OPENCV_OPENGL_INTEROP_DEPRECATED_HPP__	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^#define __OPENCV_OPENGL_INTEROP_DEPRECATED_HPP__$/;"	d
__OPENCV_OPENGL_INTEROP_HPP__	/usr/local/include/opencv2/core/opengl_interop.hpp	/^#define __OPENCV_OPENGL_INTEROP_HPP__$/;"	d
__OPENCV_PHOTO_C_H__	/usr/local/include/opencv2/photo/photo_c.h	/^#define __OPENCV_PHOTO_C_H__$/;"	d
__OPENCV_PHOTO_HPP__	/usr/local/include/opencv2/photo/photo.hpp	/^#define __OPENCV_PHOTO_HPP__$/;"	d
__OPENCV_STITCHING_AUTOCALIB_HPP__	/usr/local/include/opencv2/stitching/detail/autocalib.hpp	/^#define __OPENCV_STITCHING_AUTOCALIB_HPP__$/;"	d
__OPENCV_STITCHING_BLENDERS_HPP__	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^#define __OPENCV_STITCHING_BLENDERS_HPP__$/;"	d
__OPENCV_STITCHING_CAMERA_HPP__	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^#define __OPENCV_STITCHING_CAMERA_HPP__$/;"	d
__OPENCV_STITCHING_EXPOSURE_COMPENSATE_HPP__	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^#define __OPENCV_STITCHING_EXPOSURE_COMPENSATE_HPP__$/;"	d
__OPENCV_STITCHING_MATCHERS_HPP__	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^#define __OPENCV_STITCHING_MATCHERS_HPP__$/;"	d
__OPENCV_STITCHING_MOTION_ESTIMATORS_HPP__	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^#define __OPENCV_STITCHING_MOTION_ESTIMATORS_HPP__$/;"	d
__OPENCV_STITCHING_SEAM_FINDERS_HPP__	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^#define __OPENCV_STITCHING_SEAM_FINDERS_HPP__$/;"	d
__OPENCV_STITCHING_STITCHER_HPP__	/usr/local/include/opencv2/stitching/stitcher.hpp	/^#define __OPENCV_STITCHING_STITCHER_HPP__$/;"	d
__OPENCV_STITCHING_UTIL_HPP__	/usr/local/include/opencv2/stitching/detail/util.hpp	/^#define __OPENCV_STITCHING_UTIL_HPP__$/;"	d
__OPENCV_STITCHING_UTIL_INL_HPP__	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^#define __OPENCV_STITCHING_UTIL_INL_HPP__$/;"	d
__OPENCV_STITCHING_WARPERS_HPP__	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^#define __OPENCV_STITCHING_WARPERS_HPP__$/;"	d
__OPENCV_STITCHING_WARPERS_INL_HPP__	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^#define __OPENCV_STITCHING_WARPERS_INL_HPP__$/;"	d
__OPENCV_STITCHING_WARPER_CREATORS_HPP__	/usr/local/include/opencv2/stitching/warpers.hpp	/^#define __OPENCV_STITCHING_WARPER_CREATORS_HPP__$/;"	d
__OPENCV_SUPERRES_HPP__	/usr/local/include/opencv2/superres/superres.hpp	/^#define __OPENCV_SUPERRES_HPP__$/;"	d
__OPENCV_SUPERRES_OPTICAL_FLOW_HPP__	/usr/local/include/opencv2/superres/optical_flow.hpp	/^#define __OPENCV_SUPERRES_OPTICAL_FLOW_HPP__$/;"	d
__OPENCV_TRACKING_HPP__	/usr/local/include/opencv2/video/tracking.hpp	/^#define __OPENCV_TRACKING_HPP__$/;"	d
__OPENCV_TS_PERF_HPP__	/usr/local/include/opencv2/ts/ts_perf.hpp	/^#define __OPENCV_TS_PERF_HPP__$/;"	d
__OPENCV_VERSION_HPP__	/usr/local/include/opencv2/core/version.hpp	/^#define __OPENCV_VERSION_HPP__$/;"	d
__OPENCV_VIDEOSTAB_DEBLURRING_HPP__	/usr/local/include/opencv2/videostab/deblurring.hpp	/^#define __OPENCV_VIDEOSTAB_DEBLURRING_HPP__$/;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_HPP__	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^#define __OPENCV_VIDEOSTAB_FAST_MARCHING_HPP__$/;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_INL_HPP__	/usr/local/include/opencv2/videostab/fast_marching_inl.hpp	/^#define __OPENCV_VIDEOSTAB_FAST_MARCHING_INL_HPP__$/;"	d
__OPENCV_VIDEOSTAB_FRAME_SOURCE_HPP__	/usr/local/include/opencv2/videostab/frame_source.hpp	/^#define __OPENCV_VIDEOSTAB_FRAME_SOURCE_HPP__$/;"	d
__OPENCV_VIDEOSTAB_GLOBAL_MOTION_HPP__	/usr/local/include/opencv2/videostab/global_motion.hpp	/^#define __OPENCV_VIDEOSTAB_GLOBAL_MOTION_HPP__$/;"	d
__OPENCV_VIDEOSTAB_HPP__	/usr/local/include/opencv2/videostab/videostab.hpp	/^#define __OPENCV_VIDEOSTAB_HPP__$/;"	d
__OPENCV_VIDEOSTAB_INPAINTINT_HPP__	/usr/local/include/opencv2/videostab/inpainting.hpp	/^#define __OPENCV_VIDEOSTAB_INPAINTINT_HPP__$/;"	d
__OPENCV_VIDEOSTAB_LOG_HPP__	/usr/local/include/opencv2/videostab/log.hpp	/^#define __OPENCV_VIDEOSTAB_LOG_HPP__$/;"	d
__OPENCV_VIDEOSTAB_MOTION_STABILIZING_HPP__	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^#define __OPENCV_VIDEOSTAB_MOTION_STABILIZING_HPP__$/;"	d
__OPENCV_VIDEOSTAB_OPTICAL_FLOW_HPP__	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^#define __OPENCV_VIDEOSTAB_OPTICAL_FLOW_HPP__$/;"	d
__OPENCV_VIDEOSTAB_STABILIZER_HPP__	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^#define __OPENCV_VIDEOSTAB_STABILIZER_HPP__$/;"	d
__OPENCV_VIDEOSURVEILLANCE_H__	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define __OPENCV_VIDEOSURVEILLANCE_H__$/;"	d
__OPENCV_VIDEO_HPP__	/usr/local/include/opencv2/video/video.hpp	/^#define __OPENCV_VIDEO_HPP__$/;"	d
___cudaSafeCall	/usr/local/include/opencv2/gpu/device/common.hpp	/^static inline void ___cudaSafeCall(cudaError_t err, const char *file, const int line, const char *func = "")$/;"	f
__xgetbv	/usr/local/include/opencv2/core/internal.hpp	/^#      define __xgetbv(/;"	d
_dataAsRow	/usr/local/include/opencv2/contrib/contrib.hpp	/^        bool _dataAsRow;$/;"	m	class:cv::LDA
_declareHelper	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    class CV_EXPORTS _declareHelper$/;"	c	class:perf::TestBase
_eigenvalues	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat _eigenvalues;$/;"	m	class:cv::LDA
_eigenvectors	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat _eigenvectors;$/;"	m	class:cv::LDA
_inputBuffer	/usr/local/include/opencv2/contrib/retina.hpp	/^    std::valarray<float> _inputBuffer; \/\/!< buffer used to convert input cv::Mat to internal retina buffers format (valarrays)$/;"	m	class:cv::Retina
_log	/usr/local/include/opencv2/flann/logger.h	/^    int _log(int level, const char* fmt, va_list arglist)$/;"	f	class:cvflann::Logger
_num_components	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int _num_components;$/;"	m	class:cv::LDA
_retinaFilter	/usr/local/include/opencv2/contrib/retina.hpp	/^    RetinaFilter* _retinaFilter; \/\/!< the pointer to the retina module, allocated with instance construction$/;"	m	class:cv::Retina
_retinaParameters	/usr/local/include/opencv2/contrib/retina.hpp	/^    RetinaParameters _retinaParameters; \/\/ structure of parameters$/;"	m	class:cv::Retina
_setDestination	/usr/local/include/opencv2/flann/logger.h	/^    void _setDestination(const char* name)$/;"	f	class:cvflann::Logger
_timeadjustment	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    static int64 _timeadjustment;$/;"	m	class:perf::TestBase
_type	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    int _type;$/;"	m	class:perf::MatType
a	/usr/local/include/opencv2/contrib/contrib.hpp	/^            double a;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
a	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
a	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
a	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
a	/usr/local/include/opencv2/core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
a	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::gpu::device::IsBinaryFunction::No
a	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::gpu::device::IsUnaryFunction::No
a	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^                oclMat a, b;$/;"	m	class:cv::ocl::oclMatExpr
a	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
a	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
a	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
a	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
a	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
a	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
a	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
a	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
a0	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a1	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a2	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a3	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a4	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a5	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a6	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a7	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
ab	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
abs	/usr/local/include/opencv2/core/core.hpp	/^#undef abs$/;"	d
abs	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr abs(const Mat_<_Tp>& m)$/;"	f	namespace:cv
abs	/usr/local/include/opencv2/core/operations.hpp	/^double abs(const Complex<_Tp>& a)$/;"	f	namespace:cv
abs	/usr/local/include/opencv2/flann/dist.h	/^inline T abs(T x) { return (x<0) ? -x : x; }$/;"	f	namespace:cvflann
abs	/usr/local/include/opencv2/flann/dist.h	/^inline double abs<double>(double x) { return fabs(x); }$/;"	f	namespace:cvflann
abs	/usr/local/include/opencv2/flann/dist.h	/^inline float abs<float>(float x) { return fabsf(x); }$/;"	f	namespace:cvflann
abs	/usr/local/include/opencv2/flann/dist.h	/^inline int abs<int>(int x) { return ::abs(x); }$/;"	f	namespace:cvflann
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ abs_func() {}$/;"	f	struct:cv::gpu::device::abs_func
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ abs_func(const abs_func&) {}$/;"	f	struct:cv::gpu::device::abs_func
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<char> : unary_function<char, char>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<double> : unary_function<double, double>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<float> : unary_function<float, float>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<int> : unary_function<int, int>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<short> : unary_function<short, short>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<signed char> : unary_function<signed char, signed char>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<unsigned char> : unary_function<unsigned char, unsigned char>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<unsigned int> : unary_function<unsigned int, unsigned int>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <> struct abs_func<unsigned short> : unary_function<unsigned short, unsigned short>$/;"	s	namespace:cv::gpu::device
abs_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct abs_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
accum	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat accum;$/;"	m	struct:cv::gpu::HoughCirclesBuf
accum	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat accum;$/;"	m	struct:cv::gpu::HoughLinesBuf
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::ChiSquareDistance
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HellingerDistance
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HistIntersectionDistance
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::KL_Divergence
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L1
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2_Simple
accum_dist	/usr/local/include/opencv2/flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::MinkowskiDistance
activ_func	/usr/local/include/opencv2/ml/ml.hpp	/^    int activ_func;$/;"	m	class:CvANN_MLP
active_var_mask	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* active_var_mask;$/;"	m	class:CvRTrees
active_vars	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* active_vars;$/;"	m	class:CvBoost
active_vars_abs	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* active_vars_abs;$/;"	m	class:CvBoost
actual_num_bands_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
add	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    void add(const Mat& queryImgDescriptors) {$/;"	f	class:cv::of2::FabMap2
add	/usr/local/include/opencv2/flann/lsh_table.h	/^    void add(Matrix<ElementType> dataset)$/;"	f	class:cvflann::lsh::LshTable
add	/usr/local/include/opencv2/flann/lsh_table.h	/^    void add(unsigned int value, const ElementType* feature)$/;"	f	class:cvflann::lsh::LshTable
addParam	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, typename _Base> inline void AlgorithmInfo::addParam(Algorithm& algo, const char* parameter,$/;"	f	class:cv::AlgorithmInfo
addParam	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void AlgorithmInfo::addParam(Algorithm& algo, const char* parameter,$/;"	f	class:cv::AlgorithmInfo
addPoint	/usr/local/include/opencv2/flann/result_set.h	/^    inline void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNUniqueResultSet
addPoint	/usr/local/include/opencv2/flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNResultSet
addPoint	/usr/local/include/opencv2/flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNSimpleResultSet
addPoint	/usr/local/include/opencv2/flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusResultSet
addPoint	/usr/local/include/opencv2/flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusUniqueResultSet
addTraining	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    void addTraining(const Mat& queryImgDescriptors) {$/;"	f	class:cv::of2::FabMap2
addValue	/usr/local/include/opencv2/flann/simplex_downhill.h	/^void addValue(int pos, float val, float* vals, T* point, T* points, int n)$/;"	f	namespace:cvflann
addedDescCount	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int addedDescCount;$/;"	m	class:cv::FlannBasedMatcher
addref	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::addref()$/;"	f	class:cv::Mat
addref	/usr/local/include/opencv2/core/mat.hpp	/^inline void SparseMat::addref()$/;"	f	class:cv::SparseMat
addref	/usr/local/include/opencv2/core/operations.hpp	/^    void addref() { if( hdr.refcount ) CV_XADD(hdr.refcount, 1); }$/;"	f	class:cv::Vector
addref	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::addref()$/;"	f	class:cv::Ptr
addref	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void addref() const$/;"	f	class:CvMatrix
address	/usr/local/include/opencv2/core/core.hpp	/^    const_pointer address(const_reference r) { return &r; }$/;"	f	class:cv::Allocator
address	/usr/local/include/opencv2/core/core.hpp	/^    pointer address(reference r) { return &r; }$/;"	f	class:cv::Allocator
adj_matr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder
adjustROI	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::adjustROI( int dtop, int dbottom, int dleft, int dright )$/;"	f	class:cv::Mat_
adjustROI	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::adjustROI( int dtop, int dbottom, int dleft, int dright )$/;"	f	class:cv::ocl::oclMat
adjuster_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    const Ptr<AdjusterAdapter> adjuster_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
affine2dMotionStd	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    static RansacParams affine2dMotionStd() { return RansacParams(6, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
algo	/usr/local/include/opencv2/flann/miniflann.hpp	/^    cvflann::flann_algorithm_t algo;$/;"	m	class:cv::flann::Index
align	/usr/local/include/opencv2/core/types_c.h	/^    int  align;             \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage
alignPtr	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> static inline _Tp* alignPtr(_Tp* ptr, int n=(int)sizeof(_Tp))$/;"	f	namespace:cv
alignSize	/usr/local/include/opencv2/core/core.hpp	/^static inline size_t alignSize(size_t sz, int n)$/;"	f	namespace:cv
all	/usr/local/include/opencv2/core/operations.hpp	/^inline Range Range::all() { return Range(INT_MIN, INT_MAX); }$/;"	f	class:cv::Range
all	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::all(_Tp alpha)$/;"	f	class:cv::Vec
all	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n> Matx<_Tp, m, n>::all(_Tp alpha)$/;"	f	class:cv::Matx
all	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::all(_Tp v0)$/;"	f	class:cv::Scalar_
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char all(char v) {return v;}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 all(schar v) {return make_char1(v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 all(schar v) {return make_char2(v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 all(schar v) {return make_char3(v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 all(schar v) {return make_char4(v, v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 all(schar v) {return make_char8(v, v, v, v, v, v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar all(schar v) {return v;}$/;"	f	struct:cv::gpu::device::VecTraits
alloc_type	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int alloc_type;$/;"	m	class:cv::gpu::CudaMem
alloca	/usr/local/include/opencv2/core/internal.hpp	/^#  define alloca /;"	d
alloca	/usr/local/include/opencv2/core/internal.hpp	/^#  undef alloca$/;"	d
allocate	/usr/local/include/opencv2/core/core.hpp	/^    pointer allocate(size_type count, const void* =0)$/;"	f	class:cv::Allocator
allocate	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> static inline _Tp* allocate(size_t n)$/;"	f	namespace:cv
allocate	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline void AutoBuffer<_Tp, fixed_size>::allocate(size_t _size)$/;"	f	class:cv::AutoBuffer
allocate	/usr/local/include/opencv2/flann/allocator.h	/^    T* allocate(size_t count = 1)$/;"	f	class:cvflann::PooledAllocator
allocate	/usr/local/include/opencv2/flann/allocator.h	/^T* allocate(size_t count = 1)$/;"	f	namespace:cvflann
allocateMemory	/usr/local/include/opencv2/flann/allocator.h	/^    void* allocateMemory(int size)$/;"	f	class:cvflann::PooledAllocator
allzero	/usr/local/include/opencv2/contrib/contrib.hpp	/^        const static Point3f allzero;$/;"	m	class:cv::Mesh3D
alpha	/usr/local/include/opencv2/core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
alpha	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float alpha;$/;"	m	class:cv::gpu::BroxOpticalFlow
alpha	/usr/local/include/opencv2/ml/ml.hpp	/^    double alpha;$/;"	m	struct:CvDTreeNode
alpha	/usr/local/include/opencv2/ml/ml.hpp	/^    double* alpha;$/;"	m	class:CvSVMSolver
alpha	/usr/local/include/opencv2/ml/ml.hpp	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc
alpha	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float* alpha;$/;"	m	struct:CvHaarClassifier
alpha1	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float alpha1; \/\/ How quickly we forget old background pixel values seen. Typically set to 0.1.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  alpha1;		\/* How quickly we forget old background pixel values seen.  Typically set to 0.1  				*\/$/;"	m	struct:CvFGDStatModelParams
alpha2	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float alpha2; \/\/ "Controls speed of feature learning". Depends on T. Typical value circa 0.005.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  alpha2;		\/* "Controls speed of feature learning". Depends on T. Typical value circa 0.005. 				*\/$/;"	m	struct:CvFGDStatModelParams
alpha3	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float alpha3; \/\/ Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha3	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  alpha3;		\/* Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.				*\/$/;"	m	struct:CvFGDStatModelParams
alphaChannel	/usr/local/include/opencv2/core/types_c.h	/^    int  alphaChannel;      \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage
alpha_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int alpha_count;$/;"	m	class:CvSVMSolver
alpha_status	/usr/local/include/opencv2/ml/ml.hpp	/^    schar* alpha_status;$/;"	m	class:CvSVMSolver
amacrinCellsTemporalCutFrequency	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
anchor	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Point anchor;$/;"	m	class:cv::gpu::BaseFilter_GPU
anchor	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseColumnFilter_GPU
anchor	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseRowFilter_GPU
anchor	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Point anchor;$/;"	m	class:cv::BaseFilter
anchor	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Point anchor;$/;"	m	class:cv::FilterEngine
anchor	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseColumnFilter
anchor	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseRowFilter
anchor	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Point anchor;$/;"	m	class:cv::ocl::BaseFilter_GPU
anchor	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
anchor	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
anchorX	/usr/local/include/opencv2/core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel
anchorX	/usr/local/include/opencv2/core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP
anchorY	/usr/local/include/opencv2/core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel
anchorY	/usr/local/include/opencv2/core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP
angle	/usr/local/include/opencv2/core/types_c.h	/^    float angle;          \/* Angle between the horizontal axis           *\/$/;"	m	struct:CvBox2D
angle	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW float angle; \/\/!< computed orientation of the keypoint (-1 if not applicable);$/;"	m	class:cv::KeyPoint
any	/usr/local/include/opencv2/flann/any.h	/^    any()$/;"	f	struct:cvflann::any
any	/usr/local/include/opencv2/flann/any.h	/^    any(const T& x)$/;"	f	struct:cvflann::any
any	/usr/local/include/opencv2/flann/any.h	/^    any(const any& x)$/;"	f	struct:cvflann::any
any	/usr/local/include/opencv2/flann/any.h	/^    any(const char* x)$/;"	f	struct:cvflann::any
any	/usr/local/include/opencv2/flann/any.h	/^struct any$/;"	s	namespace:cvflann
anyimpl	/usr/local/include/opencv2/flann/any.h	/^namespace anyimpl$/;"	n	namespace:cvflann
appearance_profile	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS
apply	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    void apply(int \/*index*\/, Point \/*corner*\/, Mat &\/*image*\/, const Mat &\/*mask*\/) {};$/;"	f	class:cv::detail::NoExposureCompensator
applyQuantization	/usr/local/include/opencv2/legacy/legacy.hpp	/^    inline void applyQuantization(int num_quant_bits) { makePosteriors2(num_quant_bits); }$/;"	f	class:cv::RandomizedTree
area	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp Rect_<_Tp>::area() const { return width*height; }$/;"	f	class:cv::Rect_
area	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp Size_<_Tp>::area() const { return width*height; }$/;"	f	class:cv::Size_
area	/usr/local/include/opencv2/imgproc/types_c.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp
areaThreshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double areaThreshold;$/;"	m	class:cv::MSER
areaThreshold	/usr/local/include/opencv2/legacy/compat.hpp	/^    double areaThreshold;$/;"	m	struct:CvMSERParams
arg1	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const typename Op::first_argument_type arg1;$/;"	m	struct:cv::gpu::device::binder1st
arg2	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const typename Op::second_argument_type arg2;$/;"	m	struct:cv::gpu::device::binder2nd
argument_type	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^            typedef T argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^            typedef double argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^            typedef float argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^            typedef int argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar)  cvSum( const CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSize) cvGetSize( const CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	v
arr	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp* arr;$/;"	m	class:cv::GreaterEqIdx
arr	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp* arr;$/;"	m	class:cv::LessThanIdx
array_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_iterator	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	v
as	/usr/local/include/opencv2/flann/matrix.h	/^    Matrix<T> as()$/;"	f	class:cvflann::UntypedMatrix
ascii	/usr/local/include/opencv2/core/core_c.h	/^    const int*  ascii;      \/* font data and metrics *\/$/;"	m	struct:CvFont
aspect	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    double aspect; \/\/ Aspect ratio$/;"	m	struct:cv::detail::CameraParams
aspect_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double aspect_;$/;"	m	class:cv::GlCamera
assign	/usr/local/include/opencv2/flann/any.h	/^    any& assign(const T& x)$/;"	f	struct:cvflann::any
assign	/usr/local/include/opencv2/flann/any.h	/^    any& assign(const any& x)$/;"	f	struct:cvflann::any
assignTo	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline void GpuMat::assignTo(GpuMat& m, int _type) const$/;"	f	class:cv::gpu::GpuMat
assignTo	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::assignTo( Mat& m, int _type ) const$/;"	f	class:cv::Mat
assignTo	/usr/local/include/opencv2/core/mat.hpp	/^inline void SparseMat::assignTo( SparseMat& m, int _type ) const$/;"	f	class:cv::SparseMat
assignTo	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void oclMat::assignTo( oclMat &m, int mtype ) const$/;"	f	class:cv::ocl::oclMat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int n> _Tp& Mat::at(const Vec<int, n>& idx)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int n> inline const _Tp& Mat::at(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(Point pt)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(const int* idx)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0, int i1)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0, int i1, int i2)$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(Point pt) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(const int* idx) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0, int i1) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdConstant
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReflect
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReflect101
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReplicate
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdWrap
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdConstant
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReflect
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReflect101
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReplicate
at	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdWrap
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
atomicAdd	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicAdd(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
atomicInc	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicInc(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
atomicMin	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicMin(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
attach	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void attach( IplImage* img, bool use_refcount=true )$/;"	f	class:CvImage
attempts	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int attempts;$/;"	m	class:cv::BOWKMeansTrainer
attr	/usr/local/include/opencv2/core/types_c.h	/^    const char** attr;         \/* NULL-terminated array of (attribute_name,attribute_value) pairs. *\/$/;"	m	struct:CvAttrList
avergeTexThreshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float avergeTexThreshold;$/;"	m	class:cv::gpu::StereoBM_GPU
avergeTexThreshold	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float avergeTexThreshold;$/;"	m	class:cv::ocl::StereoBM_OCL
avg	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** avg;$/;"	m	class:CvNormalBayesClassifier
b	/usr/local/include/opencv2/core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
b	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const B b;$/;"	m	struct:cv::gpu::device::BorderReader
b	/usr/local/include/opencv2/ml/ml.hpp	/^    double* b;$/;"	m	class:CvSVMSolver
b	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float* b;$/;"	m	struct:CvLatentSvmDetector
b	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^                oclMat a, b;$/;"	m	class:cv::ocl::oclMatExpr
b	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
b	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
b	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
b	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
b	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
b	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
b	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
b	/usr/local/include/opencv2/stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
bShadowDetection	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool bShadowDetection; \/\/default 1 - do shadow detection$/;"	m	class:cv::gpu::MOG2_GPU
bShadowDetection	/usr/local/include/opencv2/video/background_segm.hpp	/^    bool bShadowDetection;\/\/default 1 - do shadow detection$/;"	m	class:cv::BackgroundSubtractorMOG2
bSum_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
back	/usr/local/include/opencv2/core/operations.hpp	/^    _Tp& back() { CV_DbgAssert(!empty()); return hdr.data[hdr.size-1]; }$/;"	f	class:cv::Vector
back	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp& back() const { CV_DbgAssert(!empty()); return hdr.data[hdr.size-1]; }$/;"	f	class:cv::Vector
back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::back()$/;"	f	class:cv::Seq
back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::back() const$/;"	f	class:cv::Seq
backSubst	/usr/local/include/opencv2/core/mat.hpp	/^SVD::backSubst( const Matx<_Tp, nm, 1>& w, const Matx<_Tp, m, nm>& u,$/;"	f	class:cv::SVD
background	/usr/local/include/opencv2/gpu/gpu.hpp	/^    cv::gpu::GpuMat background;$/;"	m	class:cv::gpu::FGDStatModel
backgroundMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double backgroundMin, backgroundMax;$/;"	m	class:cv::PatchGenerator
backgroundMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double backgroundMin, backgroundMax;$/;"	m	class:cv::PatchGenerator
backgroundPrior	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float backgroundPrior;$/;"	m	class:cv::gpu::GMG_GPU
backgroundPrior	/usr/local/include/opencv2/video/background_segm.hpp	/^    double  backgroundPrior;$/;"	m	class:cv::BackgroundSubtractorGMG
backgroundRatio	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float backgroundRatio;$/;"	m	class:cv::gpu::MOG2_GPU
backgroundRatio	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float backgroundRatio;$/;"	m	class:cv::gpu::MOG_GPU
backgroundRatio	/usr/local/include/opencv2/video/background_segm.hpp	/^    double backgroundRatio;$/;"	m	class:cv::BackgroundSubtractorMOG
backgroundRatio	/usr/local/include/opencv2/video/background_segm.hpp	/^    float backgroundRatio;$/;"	m	class:cv::BackgroundSubtractorMOG2
backproj	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat backproj;$/;"	m	class:cv::CvMeanShiftTracker
bad_any_cast	/usr/local/include/opencv2/flann/any.h	/^struct bad_any_cast$/;"	s	namespace:cvflann::anyimpl
bad_region_penalty_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    float bad_region_penalty_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
base	/usr/local/include/opencv2/flann/allocator.h	/^    void*   base;     \/* Pointer to base of current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
base	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Ptr<OneWayDescriptorBase> base;$/;"	m	class:cv::OneWayDescriptorMatcher
baseFeatureSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double baseFeatureSize;$/;"	m	class:cv::LDetector
base_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    unsigned int base_;$/;"	m	class:cv::GlFont
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
base_any_policy	/usr/local/include/opencv2/flann/any.h	/^struct base_any_policy$/;"	s	namespace:cvflann::anyimpl
base_value	/usr/local/include/opencv2/ml/ml.hpp	/^    float base_value;$/;"	m	class:CvGBTrees
basicSize_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const float basicSize_;$/;"	m	class:cv::BRISK
basic_manipulator	/usr/local/include/opencv2/ts/ts_gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
beg1	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos
beg2	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos
begin	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int begin, end;$/;"	m	struct:cv::Octree::Node
begin	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat::begin() const$/;"	f	class:cv::Mat
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat_<_Tp>::begin() const$/;"	f	class:cv::Mat_
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat::begin()$/;"	f	class:cv::Mat
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat_<_Tp>::begin()$/;"	f	class:cv::Mat_
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::begin() const$/;"	f	class:cv::SparseMat_
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat_<_Tp>::begin()$/;"	f	class:cv::SparseMat_
begin	/usr/local/include/opencv2/core/operations.hpp	/^    _Tp* begin() { return hdr.data; }$/;"	f	class:cv::Vector
begin	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp* begin() const { return hdr.data; }$/;"	f	class:cv::Vector
begin	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNodeIterator FileNode::begin() const$/;"	f	class:cv::FileNode
begin	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::begin() const$/;"	f	class:cv::Seq
begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	/usr/local/include/opencv2/ts/ts_gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
bestIndex_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    NNIndex<Distance>* bestIndex_;$/;"	m	class:cvflann::AutotunedIndex
bestParams_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    IndexParams bestParams_;$/;"	m	class:cvflann::AutotunedIndex
bestSearchParams_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    SearchParams bestSearchParams_;$/;"	m	class:cvflann::AutotunedIndex
best_score	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int best_score;$/;"	m	struct:CvCliqueFinder
best_weight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float best_weight;$/;"	m	struct:CvCliqueFinder
beta	/usr/local/include/opencv2/core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
bg_model	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGStatModel( CvBGStatModel** bg_model );$/;"	v
bg_threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
bgmodel	/usr/local/include/opencv2/video/background_segm.hpp	/^    Mat bgmodel;$/;"	m	class:cv::BackgroundSubtractorMOG
bgmodel	/usr/local/include/opencv2/video/background_segm.hpp	/^    Mat bgmodel;$/;"	m	class:cv::BackgroundSubtractorMOG2
bgmodelUsedModes	/usr/local/include/opencv2/video/background_segm.hpp	/^    Mat bgmodelUsedModes;\/\/keep track of number of modes per pixel$/;"	m	class:cv::BackgroundSubtractorMOG2
bgmodelUsedModes_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat bgmodelUsedModes_; \/\/keep track of number of modes per pixel$/;"	m	class:cv::gpu::MOG2_GPU
bgra_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    bool bgra_;$/;"	m	class:cv::GlArrays
bicubicCoeff	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        static __device__ __forceinline__ float bicubicCoeff(float x_)$/;"	f	struct:cv::gpu::device::CubicFilter
big_any_policy	/usr/local/include/opencv2/flann/any.h	/^struct big_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
binSize	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float binSize;$/;"	m	class:cv::SpinImageModel
binary_function	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template<typename Argument1, typename Argument2, typename Result> struct binary_function : public std::binary_function<Argument1, Argument2, Result> {};$/;"	s	namespace:cv::gpu::device
binary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ binary_negate() :$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ binary_negate(const binary_negate& other)$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ binary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Predicate> struct binary_negate : binary_function<typename Predicate::first_argument_type, typename Predicate::second_argument_type, bool>$/;"	s	namespace:cv::gpu::device
bind1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder1st<Op> bind1st(const Op& op, const T& x)$/;"	f	namespace:cv::gpu::device
bind2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder2nd<Op> bind2nd(const Op& op, const T& x)$/;"	f	namespace:cv::gpu::device
bindTexture	/usr/local/include/opencv2/gpu/device/common.hpp	/^        template<class T> inline void bindTexture(const textureReference* tex, const PtrStepSz<T>& img)$/;"	f	namespace:cv::gpu::device
binder1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ binder1st(const binder1st& other) :$/;"	f	struct:cv::gpu::device::binder1st
binder1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ binder1st(const Op& op_, const typename Op::first_argument_type& arg1_) : op(op_), arg1(arg1_) {}$/;"	f	struct:cv::gpu::device::binder1st
binder1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Op> struct binder1st : unary_function<typename Op::second_argument_type, typename Op::result_type>$/;"	s	namespace:cv::gpu::device
binder2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^         __device__ __forceinline__ binder2nd(const binder2nd& other) :$/;"	f	struct:cv::gpu::device::binder2nd
binder2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ binder2nd(const Op& op_, const typename Op::second_argument_type& arg2_) : op(op_), arg2(arg2_) {}$/;"	f	struct:cv::gpu::device::binder2nd
binder2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Op> struct binder2nd : unary_function<typename Op::first_argument_type, typename Op::result_type>$/;"	s	namespace:cv::gpu::device
bins	/usr/local/include/opencv2/core/types_c.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram
bisectionIts	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int bisectionIts;$/;"	m	class:cv::of2::FabMapFBO
bisectionStart	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int bisectionStart;$/;"	m	class:cv::of2::FabMapFBO
bit_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_and():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_and
bit_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_and(const bit_and& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_and
bit_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct bit_and : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bit_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_not():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::bit_not
bit_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_not(const bit_not& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::bit_not
bit_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct bit_not : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
bit_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_or():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_or
bit_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_or(const bit_or& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_or
bit_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct bit_or : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bit_xor	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_xor():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_xor
bit_xor	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_xor(const bit_xor& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_xor
bit_xor	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct bit_xor : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bits	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
bitset_	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    std::vector<size_t> bitset_;$/;"	m	class:cvflann::DynamicBitset
bl_height_	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
bl_width_	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
blender	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::Blender> blender() { return blender_; }$/;"	f	class:cv::Stitcher
blender	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::Blender> blender() const { return blender_; }$/;"	f	class:cv::Stitcher
blender_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::Blender> blender_;$/;"	m	class:cv::Stitcher
blobColor	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW uchar blobColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
blockScanInclusive	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    __device__ T blockScanInclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::gpu::device
blockSize	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int blockSize;$/;"	m	class:cv::GFTTDetector
blockSize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int blockSize;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
blockSize	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP Size blockSize;$/;"	m	struct:cv::HOGDescriptor
blockStride	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP Size blockStride;$/;"	m	struct:cv::HOGDescriptor
block_hists	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat block_hists, block_hists_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
block_hists	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat block_hists;$/;"	m	struct:cv::ocl::HOGDescriptor
block_hists_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat block_hists, block_hists_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
block_size	/usr/local/include/opencv2/core/types_c.h	/^    int block_size;               \/* Block size.                              *\/$/;"	m	struct:CvMemStorage
block_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size block_size;$/;"	m	struct:cv::gpu::ConvolveBuf
block_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size block_size;$/;"	m	struct:cv::gpu::HOGDescriptor
block_size	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size block_size;$/;"	m	struct:cv::ocl::HOGDescriptor
block_stride	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size block_stride;$/;"	m	struct:cv::gpu::HOGDescriptor
block_stride	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size block_stride;$/;"	m	struct:cv::ocl::HOGDescriptor
blocksize	/usr/local/include/opencv2/flann/allocator.h	/^    int     blocksize;$/;"	m	class:cvflann::PooledAllocator
blur	/usr/local/include/opencv2/gpu/gpu.hpp	/^static inline void blur(const GpuMat& src, GpuMat& dst, Size ksize, Point anchor = Point(-1,-1), Stream& stream = Stream::Null())$/;"	f	namespace:cv::gpu
blur	/usr/local/include/opencv2/ocl/ocl.hpp	/^        static inline void blur(const oclMat &src, oclMat &dst, Size ksize, Point anchor = Point(-1, -1),$/;"	f	namespace:cv::ocl
blurFilter	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> blurFilter;$/;"	m	class:cv::gpu::ORB_GPU
blurForDescriptor	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool blurForDescriptor;$/;"	m	class:cv::gpu::ORB_GPU
blurredFrame_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
blurrinessRates	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual const std::vector<float>& blurrinessRates() const { return *blurrinessRates_; }$/;"	f	class:cv::videostab::DeblurerBase
blurrinessRates_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    const std::vector<float> *blurrinessRates_;$/;"	m	class:cv::videostab::DeblurerBase
blurrinessRates_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<float> blurrinessRates_;$/;"	m	class:cv::videostab::StabilizerBase
bool_constant	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
boost_type	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int boost_type;$/;"	m	struct:CvBoostParams
border	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera
borderElemSize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int borderElemSize;$/;"	m	class:cv::FilterEngine
borderMode	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::MotionInpainter
borderMode	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::StabilizerBase
borderMode_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::MotionInpainter
borderMode_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::StabilizerBase
borderTab	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<int> borderTab;$/;"	m	class:cv::FilterEngine
borderType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int borderType;$/;"	m	class:cv::ocl::BaseFilter_GPU
bordertype	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
bordertype	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
bottom	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
bottom	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
bottom	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
bottom	/usr/local/include/opencv2/core/types_c.h	/^    CvMemBlock* bottom;           \/* First allocated block.                   *\/$/;"	m	struct:CvMemStorage
bottomRight	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Point2f bottomRight;$/;"	m	class:cv::Subdiv2D
bottom_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double bottom_;$/;"	m	class:cv::GlCamera
bottomline	/usr/local/include/opencv2/legacy/compat.hpp	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f
bottomline	/usr/local/include/opencv2/legacy/compat.hpp	/^    schar*  bottomline;$/;"	m	struct:_CvPixelPosition8s
bottomline	/usr/local/include/opencv2/legacy/compat.hpp	/^    uchar*  bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u
boxFilter_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> boxFilter_;$/;"	m	class:cv::gpu::GMG_GPU
boxMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar boxMax[3];$/;"	m	struct:CvBGCodeBookElem
boxMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar boxMin[3];$/;"	m	struct:CvBGCodeBookElem
bp_dw_scale	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams
bp_moment_scale	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams
br	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp> Rect_<_Tp>::br() const { return Point_<_Tp>(x+width, y+height); }$/;"	f	class:cv::Rect_
branching_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int branching_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
branching_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int branching_;$/;"	m	class:cvflann::KMeansIndex
brs_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
bucket_size_max_	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t bucket_size_max_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_mean_	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t bucket_size_mean_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_median_	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t bucket_size_median_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_min_	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t bucket_size_min_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_std_dev	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t bucket_size_std_dev;$/;"	m	struct:cvflann::lsh::LshStats
bucket_sizes_	/usr/local/include/opencv2/flann/lsh_table.h	/^    std::vector<unsigned int> bucket_sizes_;$/;"	m	struct:cvflann::lsh::LshStats
buckets_space_	/usr/local/include/opencv2/flann/lsh_table.h	/^    BucketsSpace buckets_space_;$/;"	m	class:cvflann::lsh::LshTable
buckets_speed_	/usr/local/include/opencv2/flann/lsh_table.h	/^    BucketsSpeed buckets_speed_;$/;"	m	class:cvflann::lsh::LshTable
buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buf;$/;"	m	class:cv::gpu::BroxOpticalFlow
buf	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData
buf	/usr/local/include/opencv2/ml/ml.hpp	/^    float* buf[2];$/;"	m	class:CvSVMSolver
buf	/usr/local/include/opencv2/ts/ts.hpp	/^    float buf[4];$/;"	m	class:cvtest::ArrayTest
bufM_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
bufStep	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
bufType	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
buf_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    GlBuffer buf_;$/;"	m	class:cv::GlTexture
buf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::GMG_GPU
buf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
buf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::ORB_GPU
buf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    vector<GpuMat> buf_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
buf_	/usr/local/include/opencv2/video/background_segm.hpp	/^    cv::Mat buf_;$/;"	m	class:cv::BackgroundSubtractorGMG
buf_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int buf_count, buf_size; \/\/ buf_size is obsolete, please do not use it, use expression ((int64)buf->rows * (int64)buf->cols \/ buf_count) instead$/;"	m	struct:CvDTreeTrainData
buf_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int buf_idx;$/;"	m	struct:CvDTreeNode
buf_size	/usr/local/include/opencv2/ml/ml.hpp	/^    int buf_count, buf_size; \/\/ buf_size is obsolete, please do not use it, use expression ((int64)buf->rows * (int64)buf->cols \/ buf_count) instead$/;"	m	struct:CvDTreeTrainData
buffer	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    Mat buffer;$/;"	m	class:cv::StereoSGBM
buffer	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buffer, extended_src_buffer;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
buffer	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buffer;$/;"	m	class:cv::gpu::FastOpticalFlowBM
buildIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual void buildIndex()$/;"	f	class:cvflann::AutotunedIndex
buildIndex	/usr/local/include/opencv2/flann/composite_index.h	/^    void buildIndex()$/;"	f	class:cvflann::CompositeIndex
buildIndex	/usr/local/include/opencv2/flann/flann_base.hpp	/^    void buildIndex()$/;"	f	class:cvflann::Index
buildIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void buildIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
buildIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeIndex
buildIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
buildIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KMeansIndex
buildIndex	/usr/local/include/opencv2/flann/linear_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LinearIndex
buildIndex	/usr/local/include/opencv2/flann/lsh_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LshIndex
buildMaps	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::CylindricalWarperGpu
buildMaps	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::SphericalWarperGpu
buildMaps	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, const Mat &T, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::RotationWarperBase
buildTimeCost	/usr/local/include/opencv2/flann/autotuned_index.h	/^        float buildTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
build_weight_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float build_weight_;$/;"	m	class:cvflann::AutotunedIndex
bundleAdjuster	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::BundleAdjusterBase> bundleAdjuster() { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundleAdjuster	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::BundleAdjusterBase> bundleAdjuster() const { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundle_adjuster_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::BundleAdjusterBase> bundle_adjuster_;$/;"	m	class:cv::Stitcher
bytesIn	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    size_t bytesIn;$/;"	m	struct:perf::performance_metrics
bytesOut	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    size_t bytesOut;$/;"	m	struct:perf::performance_metrics
bytes_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int bytes_;$/;"	m	class:cv::BriefDescriptorExtractor
c	/usr/local/include/opencv2/core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
c	/usr/local/include/opencv2/ml/ml.hpp	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon291::__anon292
c	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat*  c;$/;"	m	class:CvNormalBayesClassifier
c_HlsSectorData	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HlsSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable   [256] = {0, 1044480, 522240, 348160, 261120, 208896, 174080, 149211, 130560, 116053, 104448, 94953, 87040, 80345, 74606, 69632, 65280, 61440, 58027, 54973, 52224, 49737, 47476, 45412, 43520, 41779, 40172, 38684, 37303, 36017, 34816, 33693, 32640, 31651, 30720, 29842, 29013, 28229, 27486, 26782, 26112, 25475, 24869, 24290, 23738, 23211, 22706, 22223, 21760, 21316, 20890, 20480, 20086, 19707, 19342, 18991, 18651, 18324, 18008, 17703, 17408, 17123, 16846, 16579, 16320, 16069, 15825, 15589, 15360, 15137, 14921, 14711, 14507, 14308, 14115, 13926, 13743, 13565, 13391, 13221, 13056, 12895, 12738, 12584, 12434, 12288, 12145, 12006, 11869, 11736, 11605, 11478, 11353, 11231, 11111, 10995, 10880, 10768, 10658, 10550, 10445, 10341, 10240, 10141, 10043, 9947, 9854, 9761, 9671, 9582, 9495, 9410, 9326, 9243, 9162, 9082, 9004, 8927, 8852, 8777, 8704, 8632, 8561, 8492, 8423, 8356, 8290, 8224, 8160, 8097, 8034, 7973, 7913, 7853, 7795, 7737, 7680, 7624, 7569, 7514, 7461, 7408, 7355, 7304, 7253, 7203, 7154, 7105, 7057, 7010, 6963, 6917, 6872, 6827, 6782, 6739, 6695, 6653, 6611, 6569, 6528, 6487, 6447, 6408, 6369, 6330, 6292, 6254, 6217, 6180, 6144, 6108, 6073, 6037, 6003, 5968, 5935, 5901, 5868, 5835, 5803, 5771, 5739, 5708, 5677, 5646, 5615, 5585, 5556, 5526, 5497, 5468, 5440, 5412, 5384, 5356, 5329, 5302, 5275, 5249, 5222, 5196, 5171, 5145, 5120, 5095, 5070, 5046, 5022, 4998, 4974, 4950, 4927, 4904, 4881, 4858, 4836, 4813, 4791, 4769, 4748, 4726, 4705, 4684, 4663, 4642, 4622, 4601, 4581, 4561, 4541, 4522, 4502, 4483, 4464, 4445, 4426, 4407, 4389, 4370, 4352, 4334, 4316, 4298, 4281, 4263, 4246, 4229, 4212, 4195, 4178, 4161, 4145, 4128, 4112, 4096};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable180	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable180[256] = {0, 122880, 61440, 40960, 30720, 24576, 20480, 17554, 15360, 13653, 12288, 11171, 10240, 9452, 8777, 8192, 7680, 7228, 6827, 6467, 6144, 5851, 5585, 5343, 5120, 4915, 4726, 4551, 4389, 4237, 4096, 3964, 3840, 3724, 3614, 3511, 3413, 3321, 3234, 3151, 3072, 2997, 2926, 2858, 2793, 2731, 2671, 2614, 2560, 2508, 2458, 2409, 2363, 2318, 2276, 2234, 2194, 2156, 2119, 2083, 2048, 2014, 1982, 1950, 1920, 1890, 1862, 1834, 1807, 1781, 1755, 1731, 1707, 1683, 1661, 1638, 1617, 1596, 1575, 1555, 1536, 1517, 1499, 1480, 1463, 1446, 1429, 1412, 1396, 1381, 1365, 1350, 1336, 1321, 1307, 1293, 1280, 1267, 1254, 1241, 1229, 1217, 1205, 1193, 1182, 1170, 1159, 1148, 1138, 1127, 1117, 1107, 1097, 1087, 1078, 1069, 1059, 1050, 1041, 1033, 1024, 1016, 1007, 999, 991, 983, 975, 968, 960, 953, 945, 938, 931, 924, 917, 910, 904, 897, 890, 884, 878, 871, 865, 859, 853, 847, 842, 836, 830, 825, 819, 814, 808, 803, 798, 793, 788, 783, 778, 773, 768, 763, 759, 754, 749, 745, 740, 736, 731, 727, 723, 719, 714, 710, 706, 702, 698, 694, 690, 686, 683, 679, 675, 671, 668, 664, 661, 657, 654, 650, 647, 643, 640, 637, 633, 630, 627, 624, 621, 617, 614, 611, 608, 605, 602, 599, 597, 594, 591, 588, 585, 582, 580, 577, 574, 572, 569, 566, 564, 561, 559, 556, 554, 551, 549, 546, 544, 541, 539, 537, 534, 532, 530, 527, 525, 523, 521, 518, 516, 514, 512, 510, 508, 506, 504, 502, 500, 497, 495, 493, 492, 490, 488, 486, 484, 482};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable256	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable256[256] = {0, 174763, 87381, 58254, 43691, 34953, 29127, 24966, 21845, 19418, 17476, 15888, 14564, 13443, 12483, 11651, 10923, 10280, 9709, 9198, 8738, 8322, 7944, 7598, 7282, 6991, 6722, 6473, 6242, 6026, 5825, 5638, 5461, 5296, 5140, 4993, 4855, 4723, 4599, 4481, 4369, 4263, 4161, 4064, 3972, 3884, 3799, 3718, 3641, 3567, 3495, 3427, 3361, 3297, 3236, 3178, 3121, 3066, 3013, 2962, 2913, 2865, 2819, 2774, 2731, 2689, 2648, 2608, 2570, 2533, 2497, 2461, 2427, 2394, 2362, 2330, 2300, 2270, 2241, 2212, 2185, 2158, 2131, 2106, 2081, 2056, 2032, 2009, 1986, 1964, 1942, 1920, 1900, 1879, 1859, 1840, 1820, 1802, 1783, 1765, 1748, 1730, 1713, 1697, 1680, 1664, 1649, 1633, 1618, 1603, 1589, 1574, 1560, 1547, 1533, 1520, 1507, 1494, 1481, 1469, 1456, 1444, 1432, 1421, 1409, 1398, 1387, 1376, 1365, 1355, 1344, 1334, 1324, 1314, 1304, 1295, 1285, 1276, 1266, 1257, 1248, 1239, 1231, 1222, 1214, 1205, 1197, 1189, 1181, 1173, 1165, 1157, 1150, 1142, 1135, 1128, 1120, 1113, 1106, 1099, 1092, 1085, 1079, 1072, 1066, 1059, 1053, 1046, 1040, 1034, 1028, 1022, 1016, 1010, 1004, 999, 993, 987, 982, 976, 971, 966, 960, 955, 950, 945, 940, 935, 930, 925, 920, 915, 910, 906, 901, 896, 892, 887, 883, 878, 874, 869, 865, 861, 857, 853, 848, 844, 840, 836, 832, 828, 824, 820, 817, 813, 809, 805, 802, 798, 794, 791, 787, 784, 780, 777, 773, 770, 767, 763, 760, 757, 753, 750, 747, 744, 741, 737, 734, 731, 728, 725, 722, 719, 716, 713, 710, 708, 705, 702, 699, 696, 694, 691, 688, 685};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvSectorData	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::gpu::device::color_detail
c_LabCbrtTab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_LabCbrtTab[] = {0.137931,0.0114066,0.,1.18859e-07,0.149338,0.011407,3.56578e-07,-5.79396e-07,0.160745,0.0114059,-1.38161e-06,2.16892e-06,0.172151,0.0114097,5.12516e-06,-8.0814e-06,0.183558,0.0113957,-1.9119e-05,3.01567e-05,0.194965,0.0114479,7.13509e-05,-0.000112545,0.206371,0.011253,-0.000266285,-0.000106493,0.217252,0.0104009,-0.000585765,7.32149e-05,0.22714,0.00944906,-0.00036612,1.21917e-05,0.236235,0.0087534,-0.000329545,2.01753e-05,0.244679,0.00815483,-0.000269019,1.24435e-05,0.252577,0.00765412,-0.000231689,1.05618e-05,0.26001,0.00722243,-0.000200003,8.26662e-06,0.267041,0.00684723,-0.000175203,6.76746e-06,0.27372,0.00651712,-0.000154901,5.61192e-06,0.280088,0.00622416,-0.000138065,4.67009e-06,0.286179,0.00596204,-0.000124055,3.99012e-06,0.292021,0.0057259,-0.000112085,3.36032e-06,0.297638,0.00551181,-0.000102004,2.95338e-06,0.30305,0.00531666,-9.31435e-05,2.52875e-06,0.308277,0.00513796,-8.55572e-05,2.22022e-06,0.313331,0.00497351,-7.88966e-05,1.97163e-06,0.318228,0.00482163,-7.29817e-05,1.7248e-06,0.322978,0.00468084,-6.78073e-05,1.55998e-06,0.327593,0.0045499,-6.31274e-05,1.36343e-06,0.332081,0.00442774,-5.90371e-05,1.27136e-06,0.336451,0.00431348,-5.5223e-05,1.09111e-06,0.34071,0.00420631,-5.19496e-05,1.0399e-06,0.344866,0.00410553,-4.88299e-05,9.18347e-07,0.348923,0.00401062,-4.60749e-05,8.29942e-07,0.352889,0.00392096,-4.35851e-05,7.98478e-07,0.356767,0.00383619,-4.11896e-05,6.84917e-07,0.360562,0.00375586,-3.91349e-05,6.63976e-07,0.36428,0.00367959,-3.7143e-05,5.93086e-07,0.367923,0.00360708,-3.53637e-05,5.6976e-07,0.371495,0.00353806,-3.36544e-05,4.95533e-07,0.375,0.00347224,-3.21678e-05,4.87951e-07,0.378441,0.00340937,-3.0704e-05,4.4349e-07,0.38182,0.00334929,-2.93735e-05,4.20297e-07,0.38514,0.0032918,-2.81126e-05,3.7872e-07,0.388404,0.00323671,-2.69764e-05,3.596e-07,0.391614,0.00318384,-2.58976e-05,3.5845e-07,0.394772,0.00313312,-2.48223e-05,2.92765e-07,0.397881,0.00308435,-2.3944e-05,3.18232e-07,0.400942,0.00303742,-2.29893e-05,2.82046e-07,0.403957,0.00299229,-2.21432e-05,2.52315e-07,0.406927,0.00294876,-2.13862e-05,2.58416e-07,0.409855,0.00290676,-2.0611e-05,2.33939e-07,0.412741,0.00286624,-1.99092e-05,2.36342e-07,0.415587,0.00282713,-1.92001e-05,1.916e-07,0.418396,0.00278931,-1.86253e-05,2.1915e-07,0.421167,0.00275271,-1.79679e-05,1.83498e-07,0.423901,0.00271733,-1.74174e-05,1.79343e-07,0.426602,0.00268303,-1.68794e-05,1.72013e-07,0.429268,0.00264979,-1.63633e-05,1.75686e-07,0.431901,0.00261759,-1.58363e-05,1.3852e-07,0.434503,0.00258633,-1.54207e-05,1.64304e-07,0.437074,0.00255598,-1.49278e-05,1.28136e-07,0.439616,0.00252651,-1.45434e-05,1.57618e-07,0.442128,0.0024979,-1.40705e-05,1.0566e-07,0.444612,0.00247007,-1.37535e-05,1.34998e-07,0.447068,0.00244297,-1.33485e-05,1.29207e-07,0.449498,0.00241666,-1.29609e-05,9.32347e-08,0.451902,0.00239102,-1.26812e-05,1.23703e-07,0.45428,0.00236603,-1.23101e-05,9.74072e-08,0.456634,0.0023417,-1.20179e-05,1.12518e-07,0.458964,0.002318,-1.16803e-05,7.83681e-08,0.46127,0.00229488,-1.14452e-05,1.10452e-07,0.463554,0.00227232,-1.11139e-05,7.58719e-08,0.465815,0.00225032,-1.08863e-05,9.2699e-08,0.468055,0.00222882,-1.06082e-05,8.97738e-08,0.470273,0.00220788,-1.03388e-05,5.4845e-08,0.47247,0.00218736,-1.01743e-05,1.0808e-07,0.474648,0.00216734,-9.85007e-06,4.9277e-08,0.476805,0.00214779,-9.70224e-06,8.22408e-08,0.478943,0.00212863,-9.45551e-06,6.87942e-08,0.481063,0.00210993,-9.24913e-06,5.98144e-08,0.483163,0.00209161,-9.06969e-06,7.93789e-08,0.485246,0.00207371,-8.83155e-06,3.99032e-08,0.487311,0.00205616,-8.71184e-06,8.88325e-08,0.489358,0.002039,-8.44534e-06,2.20004e-08,0.491389,0.00202218,-8.37934e-06,9.13872e-08,0.493403,0.0020057,-8.10518e-06,2.96829e-08,0.495401,0.00198957,-8.01613e-06,5.81028e-08,0.497382,0.00197372,-7.84183e-06,6.5731e-08,0.499348,0.00195823,-7.64463e-06,3.66019e-08,0.501299,0.00194305,-7.53483e-06,2.62811e-08,0.503234,0.00192806,-7.45598e-06,9.66907e-08,0.505155,0.00191344,-7.16591e-06,4.18928e-09,0.507061,0.00189912,-7.15334e-06,6.53665e-08,0.508953,0.00188501,-6.95724e-06,3.23686e-08,0.510831,0.00187119,-6.86014e-06,4.35774e-08,0.512696,0.0018576,-6.72941e-06,3.17406e-08,0.514547,0.00184424,-6.63418e-06,6.78785e-08,0.516384,0.00183117,-6.43055e-06,-5.23126e-09,0.518209,0.0018183,-6.44624e-06,7.22562e-08,0.520021,0.00180562,-6.22947e-06,1.42292e-08,0.52182,0.0017932,-6.18679e-06,4.9641e-08,0.523607,0.00178098,-6.03786e-06,2.56259e-08,0.525382,0.00176898,-5.96099e-06,2.66696e-08,0.527145,0.00175714,-5.88098e-06,4.65094e-08,0.528897,0.00174552,-5.74145e-06,2.57114e-08,0.530637,0.00173411,-5.66431e-06,2.94588e-08,0.532365,0.00172287,-5.57594e-06,3.52667e-08,0.534082,0.00171182,-5.47014e-06,8.28868e-09,0.535789,0.00170091,-5.44527e-06,5.07871e-08,0.537484,0.00169017,-5.29291e-06,2.69817e-08,0.539169,0.00167967,-5.21197e-06,2.01009e-08,0.540844,0.0016693,-5.15166e-06,1.18237e-08,0.542508,0.00165903,-5.11619e-06,5.18135e-08,0.544162,0.00164896,-4.96075e-06,1.9341e-08,0.545806,0.00163909,-4.90273e-06,-9.96867e-09,0.54744,0.00162926,-4.93263e-06,8.01382e-08,0.549064,0.00161963,-4.69222e-06,-1.25601e-08,0.550679,0.00161021,-4.7299e-06,2.97067e-08,0.552285,0.00160084,-4.64078e-06,1.29426e-08,0.553881,0.0015916,-4.60195e-06,3.77327e-08,0.555468,0.00158251,-4.48875e-06,1.49412e-08,0.557046,0.00157357,-4.44393e-06,2.17118e-08,0.558615,0.00156475,-4.3788e-06,1.74206e-08,0.560176,0.00155605,-4.32653e-06,2.78152e-08,0.561727,0.00154748,-4.24309e-06,-9.47239e-09,0.563271,0.00153896,-4.27151e-06,6.9679e-08,0.564805,0.00153063,-4.06247e-06,-3.08246e-08,0.566332,0.00152241,-4.15494e-06,5.36188e-08,0.56785,0.00151426,-3.99409e-06,-4.83594e-09,0.56936,0.00150626,-4.00859e-06,2.53293e-08,0.570863,0.00149832,-3.93261e-06,2.27286e-08,0.572357,0.00149052,-3.86442e-06,2.96541e-09,0.573844,0.0014828,-3.85552e-06,2.50147e-08,0.575323,0.00147516,-3.78048e-06,1.61842e-08,0.576794,0.00146765,-3.73193e-06,2.94582e-08,0.578258,0.00146028,-3.64355e-06,-1.48076e-08,0.579715,0.00145295,-3.68798e-06,2.97724e-08,0.581164,0.00144566,-3.59866e-06,1.49272e-08,0.582606,0.00143851,-3.55388e-06,2.97285e-08,0.584041,0.00143149,-3.46469e-06,-1.46323e-08,0.585469,0.00142451,-3.50859e-06,2.88004e-08,0.58689,0.00141758,-3.42219e-06,1.864e-08,0.588304,0.00141079,-3.36627e-06,1.58482e-08,0.589712,0.00140411,-3.31872e-06,-2.24279e-08,0.591112,0.00139741,-3.38601e-06,7.38639e-08,0.592507,0.00139085,-3.16441e-06,-3.46088e-08,0.593894,0.00138442,-3.26824e-06,4.96675e-09,0.595275,0.0013779,-3.25334e-06,7.4346e-08,0.59665,0.00137162,-3.0303e-06,-6.39319e-08,0.598019,0.00136536,-3.2221e-06,6.21725e-08,0.599381,0.00135911,-3.03558e-06,-5.94423e-09,0.600737,0.00135302,-3.05341e-06,2.12091e-08,0.602087,0.00134697,-2.98979e-06,-1.92876e-08,0.603431,0.00134094,-3.04765e-06,5.5941e-08,0.604769,0.00133501,-2.87983e-06,-2.56622e-08,0.606101,0.00132917,-2.95681e-06,4.67078e-08,0.607427,0.0013234,-2.81669e-06,-4.19592e-08,0.608748,0.00131764,-2.94257e-06,6.15243e-08,0.610062,0.00131194,-2.75799e-06,-2.53244e-08,0.611372,0.00130635,-2.83397e-06,3.97739e-08,0.612675,0.0013008,-2.71465e-06,-1.45618e-08,0.613973,0.00129533,-2.75833e-06,1.84733e-08,0.615266,0.00128986,-2.70291e-06,2.73606e-10,0.616553,0.00128446,-2.70209e-06,4.00367e-08,0.617835,0.00127918,-2.58198e-06,-4.12113e-08,0.619111,0.00127389,-2.70561e-06,6.52039e-08,0.620383,0.00126867,-2.51e-06,-4.07901e-08,0.621649,0.00126353,-2.63237e-06,3.83516e-08,0.62291,0.00125838,-2.51732e-06,6.59315e-09,0.624166,0.00125337,-2.49754e-06,-5.11939e-09,0.625416,0.00124836,-2.5129e-06,1.38846e-08,0.626662,0.00124337,-2.47124e-06,9.18514e-09,0.627903,0.00123846,-2.44369e-06,8.97952e-09,0.629139,0.0012336,-2.41675e-06,1.45012e-08,0.63037,0.00122881,-2.37325e-06,-7.37949e-09,0.631597,0.00122404,-2.39538e-06,1.50169e-08,0.632818,0.00121929,-2.35033e-06,6.91648e-09,0.634035,0.00121461,-2.32958e-06,1.69219e-08,0.635248,0.00121,-2.27882e-06,-1.49997e-08,0.636455,0.0012054,-2.32382e-06,4.30769e-08,0.637659,0.00120088,-2.19459e-06,-3.80986e-08,0.638857,0.00119638,-2.30888e-06,4.97134e-08,0.640051,0.00119191,-2.15974e-06,-4.15463e-08,0.641241,0.00118747,-2.28438e-06,5.68667e-08,0.642426,0.00118307,-2.11378e-06,-7.10641e-09,0.643607,0.00117882,-2.1351e-06,-2.8441e-08,0.644784,0.00117446,-2.22042e-06,6.12658e-08,0.645956,0.00117021,-2.03663e-06,-3.78083e-08,0.647124,0.00116602,-2.15005e-06,3.03627e-08,0.648288,0.00116181,-2.05896e-06,-2.40379e-08,0.649448,0.00115762,-2.13108e-06,6.57887e-08,0.650603,0.00115356,-1.93371e-06,-6.03028e-08,0.651755,0.00114951,-2.11462e-06,5.62134e-08,0.652902,0.00114545,-1.94598e-06,-4.53417e-08,0.654046,0.00114142,-2.082e-06,6.55489e-08,0.655185,0.00113745,-1.88536e-06,-3.80396e-08,0.656321,0.00113357,-1.99948e-06,2.70049e-08,0.657452,0.00112965,-1.91846e-06,-1.03755e-08,0.65858,0.00112578,-1.94959e-06,1.44973e-08,0.659704,0.00112192,-1.9061e-06,1.1991e-08,0.660824,0.00111815,-1.87012e-06,-2.85634e-09,0.66194,0.0011144,-1.87869e-06,-5.65782e-10,0.663053,0.00111064,-1.88039e-06,5.11947e-09,0.664162,0.0011069,-1.86503e-06,3.96924e-08,0.665267,0.00110328,-1.74595e-06,-4.46795e-08,0.666368,0.00109966,-1.87999e-06,1.98161e-08,0.667466,0.00109596,-1.82054e-06,2.502e-08,0.66856,0.00109239,-1.74548e-06,-6.86593e-10,0.669651,0.0010889,-1.74754e-06,-2.22739e-08,0.670738,0.00108534,-1.81437e-06,3.01776e-08,0.671821,0.0010818,-1.72383e-06,2.07732e-08,0.672902,0.00107841,-1.66151e-06,-5.36658e-08,0.673978,0.00107493,-1.82251e-06,7.46802e-08,0.675051,0.00107151,-1.59847e-06,-6.62411e-08,0.676121,0.00106811,-1.79719e-06,7.10748e-08,0.677188,0.00106473,-1.58397e-06,-3.92441e-08,0.678251,0.00106145,-1.7017e-06,2.62973e-08,0.679311,0.00105812,-1.62281e-06,-6.34035e-09,0.680367,0.00105486,-1.64183e-06,-9.36249e-10,0.68142,0.00105157,-1.64464e-06,1.00854e-08,0.68247,0.00104831,-1.61438e-06,2.01995e-08,0.683517,0.00104514,-1.55378e-06,-3.1279e-08,0.68456,0.00104194,-1.64762e-06,4.53114e-08,0.685601,0.00103878,-1.51169e-06,-3.07573e-08,0.686638,0.00103567,-1.60396e-06,1.81133e-08,0.687672,0.00103251,-1.54962e-06,1.79085e-08,0.688703,0.00102947,-1.49589e-06,-3.01428e-08,0.689731,0.00102639,-1.58632e-06,4.30583e-08,0.690756,0.00102334,-1.45715e-06,-2.28814e-08,0.691778,0.00102036,-1.52579e-06,-1.11373e-08,0.692797,0.00101727,-1.5592e-06,6.74305e-08,0.693812,0.00101436,-1.35691e-06,-7.97709e-08,0.694825,0.0010114,-1.59622e-06,7.28391e-08,0.695835,0.00100843,-1.37771e-06,-3.27715e-08,0.696842,0.00100558,-1.47602e-06,-1.35807e-09,0.697846,0.00100262,-1.48009e-06,3.82037e-08,0.698847,0.000999775,-1.36548e-06,-3.22474e-08,0.699846,0.000996948,-1.46223e-06,3.11809e-08,0.700841,0.000994117,-1.36868e-06,-3.28714e-08,0.701834,0.000991281,-1.4673e-06,4.07001e-08,0.702824,0.000988468,-1.3452e-06,-1.07197e-08,0.703811,0.000985746,-1.37736e-06,2.17866e-09,0.704795,0.000982998,-1.37082e-06,2.00521e-09,0.705777,0.000980262,-1.3648e-06,-1.01996e-08,0.706756,0.000977502,-1.3954e-06,3.87931e-08,0.707732,0.000974827,-1.27902e-06,-2.57632e-08,0.708706,0.000972192,-1.35631e-06,4.65513e-09,0.709676,0.000969493,-1.34235e-06,7.14257e-09,0.710645,0.00096683,-1.32092e-06,2.63791e-08,0.71161,0.000964267,-1.24178e-06,-5.30543e-08,0.712573,0.000961625,-1.40095e-06,6.66289e-08,0.713533,0.000959023,-1.20106e-06,-3.46474e-08,0.714491,0.000956517,-1.305e-06,1.23559e-08,0.715446,0.000953944,-1.26793e-06,-1.47763e-08,0.716399,0.000951364,-1.31226e-06,4.67494e-08,0.717349,0.000948879,-1.17201e-06,-5.3012e-08,0.718297,0.000946376,-1.33105e-06,4.60894e-08,0.719242,0.000943852,-1.19278e-06,-1.21366e-08,0.720185,0.00094143,-1.22919e-06,2.45673e-09,0.721125,0.000938979,-1.22182e-06,2.30966e-09,0.722063,0.000936543,-1.21489e-06,-1.16954e-08,0.722998,0.000934078,-1.24998e-06,4.44718e-08,0.723931,0.000931711,-1.11656e-06,-4.69823e-08,0.724861,0.000929337,-1.25751e-06,2.4248e-08,0.725789,0.000926895,-1.18477e-06,9.5949e-09,0.726715,0.000924554,-1.15598e-06,-3.02286e-09,0.727638,0.000922233,-1.16505e-06,2.49649e-09,0.72856,0.00091991,-1.15756e-06,-6.96321e-09,0.729478,0.000917575,-1.17845e-06,2.53564e-08,0.730395,0.000915294,-1.10238e-06,-3.48578e-08,0.731309,0.000912984,-1.20695e-06,5.44704e-08,0.732221,0.000910734,-1.04354e-06,-6.38144e-08,0.73313,0.000908455,-1.23499e-06,8.15781e-08,0.734038,0.00090623,-9.90253e-07,-8.3684e-08,0.734943,0.000903999,-1.2413e-06,7.43441e-08,0.735846,0.000901739,-1.01827e-06,-3.48787e-08,0.736746,0.000899598,-1.12291e-06,5.56596e-09,0.737645,0.000897369,-1.10621e-06,1.26148e-08,0.738541,0.000895194,-1.06837e-06,3.57935e-09,0.739435,0.000893068,-1.05763e-06,-2.69322e-08,0.740327,0.000890872,-1.13842e-06,4.45448e-08,0.741217,0.000888729,-1.00479e-06,-3.20376e-08,0.742105,0.000886623,-1.1009e-06,2.40011e-08,0.74299,0.000884493,-1.0289e-06,-4.36209e-09,0.743874,0.000882422,-1.04199e-06,-6.55268e-09,0.744755,0.000880319,-1.06164e-06,3.05728e-08,0.745634,0.000878287,-9.69926e-07,-5.61338e-08,0.746512,0.000876179,-1.13833e-06,7.4753e-08,0.747387,0.000874127,-9.14068e-07,-6.40644e-08,0.74826,0.000872106,-1.10626e-06,6.22955e-08,0.749131,0.000870081,-9.19375e-07,-6.59083e-08,0.75,0.000868044,-1.1171e-06,8.21284e-08,0.750867,0.000866056,-8.70714e-07,-8.37915e-08,0.751732,0.000864064,-1.12209e-06,7.42237e-08,0.752595,0.000862042,-8.99418e-07,-3.42894e-08,0.753456,0.00086014,-1.00229e-06,3.32955e-09,0.754315,0.000858146,-9.92297e-07,2.09712e-08,0.755173,0.000856224,-9.29384e-07,-2.76096e-08,0.756028,0.000854282,-1.01221e-06,2.98627e-08,0.756881,0.000852348,-9.22625e-07,-3.22365e-08,0.757733,0.000850406,-1.01933e-06,3.94786e-08,0.758582,0.000848485,-9.00898e-07,-6.46833e-09,0.75943,0.000846664,-9.20303e-07,-1.36052e-08,0.760275,0.000844783,-9.61119e-07,1.28447e-09,0.761119,0.000842864,-9.57266e-07,8.4674e-09,0.761961,0.000840975,-9.31864e-07,2.44506e-08,0.762801,0.000839185,-8.58512e-07,-4.6665e-08,0.763639,0.000837328,-9.98507e-07,4.30001e-08,0.764476,0.00083546,-8.69507e-07,-6.12609e-09,0.76531,0.000833703,-8.87885e-07,-1.84959e-08,0.766143,0.000831871,-9.43372e-07,2.05052e-08,0.766974,0.000830046,-8.81857e-07,-3.92026e-09,0.767803,0.000828271,-8.93618e-07,-4.82426e-09,0.768631,0.000826469,-9.0809e-07,2.32172e-08,0.769456,0.000824722,-8.38439e-07,-2.84401e-08,0.77028,0.00082296,-9.23759e-07,3.09386e-08,0.771102,0.000821205,-8.30943e-07,-3.57099e-08,0.771922,0.000819436,-9.38073e-07,5.22963e-08,0.772741,0.000817717,-7.81184e-07,-5.42658e-08,0.773558,0.000815992,-9.43981e-07,4.55579e-08,0.774373,0.000814241,-8.07308e-07,-8.75656e-09,0.775186,0.0008126,-8.33578e-07,-1.05315e-08,0.775998,0.000810901,-8.65172e-07,-8.72188e-09,0.776808,0.000809145,-8.91338e-07,4.54191e-08,0.777616,0.000807498,-7.5508e-07,-5.37454e-08,0.778423,0.000805827,-9.16317e-07,5.03532e-08,0.779228,0.000804145,-7.65257e-07,-2.84584e-08,0.780031,0.000802529,-8.50632e-07,3.87579e-09,0.780833,0.00080084,-8.39005e-07,1.29552e-08,0.781633,0.0007992,-8.00139e-07,3.90804e-09,0.782432,0.000797612,-7.88415e-07,-2.85874e-08,0.783228,0.000795949,-8.74177e-07,5.0837e-08,0.784023,0.000794353,-7.21666e-07,-5.55513e-08,0.784817,0.000792743,-8.8832e-07,5.21587e-08,0.785609,0.000791123,-7.31844e-07,-3.38744e-08,0.786399,0.000789558,-8.33467e-07,2.37342e-08,0.787188,0.000787962,-7.62264e-07,-1.45775e-09,0.787975,0.000786433,-7.66638e-07,-1.79034e-08,0.788761,0.000784846,-8.20348e-07,1.34665e-08,0.789545,0.000783246,-7.79948e-07,2.3642e-08,0.790327,0.000781757,-7.09022e-07,-4.84297e-08,0.791108,0.000780194,-8.54311e-07,5.08674e-08,0.791888,0.000778638,-7.01709e-07,-3.58303e-08,0.792666,0.000777127,-8.092e-07,3.28493e-08,0.793442,0.000775607,-7.10652e-07,-3.59624e-08,0.794217,0.000774078,-8.1854e-07,5.13959e-08,0.79499,0.000772595,-6.64352e-07,-5.04121e-08,0.795762,0.000771115,-8.15588e-07,3.10431e-08,0.796532,0.000769577,-7.22459e-07,-1.41557e-08,0.797301,0.00076809,-7.64926e-07,2.55795e-08,0.798069,0.000766636,-6.88187e-07,-2.85578e-08,0.798835,0.000765174,-7.73861e-07,2.90472e-08,0.799599,0.000763714,-6.86719e-07,-2.80262e-08,0.800362,0.000762256,-7.70798e-07,2.34531e-08,0.801123,0.000760785,-7.00438e-07,-6.18144e-09,0.801884,0.000759366,-7.18983e-07,1.27263e-09,0.802642,0.000757931,-7.15165e-07,1.09101e-09,0.803399,0.000756504,-7.11892e-07,-5.63675e-09,0.804155,0.000755064,-7.28802e-07,2.14559e-08,0.80491,0.00075367,-6.64434e-07,-2.05821e-08,0.805663,0.00075228,-7.26181e-07,1.26812e-09,0.806414,0.000750831,-7.22377e-07,1.55097e-08,0.807164,0.000749433,-6.75848e-07,-3.70216e-09,0.807913,0.00074807,-6.86954e-07,-7.0105e-10,0.80866,0.000746694,-6.89057e-07,6.5063e-09,0.809406,0.000745336,-6.69538e-07,-2.53242e-08,0.810151,0.000743921,-7.45511e-07,3.51858e-08,0.810894,0.000742535,-6.39953e-07,3.79034e-09,0.811636,0.000741267,-6.28582e-07,-5.03471e-08,0.812377,0.000739858,-7.79624e-07,7.83886e-08,0.813116,0.000738534,-5.44458e-07,-8.43935e-08,0.813854,0.000737192,-7.97638e-07,8.03714e-08,0.81459,0.000735838,-5.56524e-07,-5.82784e-08,0.815325,0.00073455,-7.31359e-07,3.35329e-08,0.816059,0.000733188,-6.3076e-07,-1.62486e-08,0.816792,0.000731878,-6.79506e-07,3.14614e-08,0.817523,0.000730613,-5.85122e-07,-4.99925e-08,0.818253,0.000729293,-7.35099e-07,4.92994e-08,0.818982,0.000727971,-5.87201e-07,-2.79959e-08,0.819709,0.000726712,-6.71189e-07,3.07959e-09,0.820435,0.000725379,-6.6195e-07,1.56777e-08,0.82116,0.000724102,-6.14917e-07,-6.18564e-09,0.821883,0.000722854,-6.33474e-07,9.06488e-09,0.822606,0.000721614,-6.06279e-07,-3.00739e-08,0.823327,0.000720311,-6.96501e-07,5.16262e-08,0.824046,0.000719073,-5.41623e-07,-5.72214e-08,0.824765,0.000717818,-7.13287e-07,5.80503e-08,0.825482,0.000716566,-5.39136e-07,-5.57703e-08,0.826198,0.00071532,-7.06447e-07,4.58215e-08,0.826912,0.000714045,-5.68983e-07,-8.30636e-09,0.827626,0.000712882,-5.93902e-07,-1.25961e-08,0.828338,0.000711656,-6.3169e-07,-9.13985e-10,0.829049,0.00071039,-6.34432e-07,1.62519e-08,0.829759,0.00070917,-5.85676e-07,-4.48904e-09,0.830468,0.000707985,-5.99143e-07,1.70418e-09,0.831175,0.000706792,-5.9403e-07,-2.32768e-09,0.831881,0.000705597,-6.01014e-07,7.60648e-09,0.832586,0.000704418,-5.78194e-07,-2.80982e-08,0.83329,0.000703177,-6.62489e-07,4.51817e-08,0.833993,0.000701988,-5.26944e-07,-3.34192e-08,0.834694,0.000700834,-6.27201e-07,2.88904e-08,0.835394,0.000699666,-5.4053e-07,-2.25378e-08,0.836093,0.000698517,-6.08143e-07,1.65589e-09,0.836791,0.000697306,-6.03176e-07,1.59142e-08,0.837488,0.000696147,-5.55433e-07,-5.70801e-09,0.838184,0.000695019,-5.72557e-07,6.91792e-09,0.838878,0.000693895,-5.51803e-07,-2.19637e-08,0.839571,0.000692725,-6.17694e-07,2.13321e-08,0.840263,0.000691554,-5.53698e-07,-3.75996e-09,0.840954,0.000690435,-5.64978e-07,-6.29219e-09,0.841644,0.000689287,-5.83855e-07,2.89287e-08,0.842333,0.000688206,-4.97068e-07,-4.98181e-08,0.843021,0.000687062,-6.46523e-07,5.11344e-08,0.843707,0.000685922,-4.9312e-07,-3.55102e-08,0.844393,0.00068483,-5.9965e-07,3.13019e-08,0.845077,0.000683724,-5.05745e-07,-3.00925e-08,0.84576,0.000682622,-5.96022e-07,2.94636e-08,0.846442,0.000681519,-5.07631e-07,-2.81572e-08,0.847123,0.000680419,-5.92103e-07,2.35606e-08,0.847803,0.000679306,-5.21421e-07,-6.48045e-09,0.848482,0.000678243,-5.40863e-07,2.36124e-09,0.849159,0.000677169,-5.33779e-07,-2.96461e-09,0.849836,0.000676092,-5.42673e-07,9.49728e-09,0.850512,0.000675035,-5.14181e-07,-3.50245e-08,0.851186,0.000673902,-6.19254e-07,7.09959e-08,0.851859,0.000672876,-4.06267e-07,-7.01453e-08,0.852532,0.000671853,-6.16703e-07,3.07714e-08,0.853203,0.000670712,-5.24388e-07,6.66423e-09,0.853873,0.000669684,-5.04396e-07,2.17629e-09,0.854542,0.000668681,-4.97867e-07,-1.53693e-08,0.855211,0.000667639,-5.43975e-07,-3.03752e-10,0.855878,0.000666551,-5.44886e-07,1.65844e-08,0.856544,0.000665511,-4.95133e-07,-6.42907e-09,0.857209,0.000664501,-5.1442e-07,9.13195e-09,0.857873,0.0006635,-4.87024e-07,-3.00987e-08,0.858536,0.000662435,-5.7732e-07,5.16584e-08,0.859198,0.000661436,-4.22345e-07,-5.73255e-08,0.859859,0.000660419,-5.94322e-07,5.84343e-08,0.860518,0.000659406,-4.19019e-07,-5.72022e-08,0.861177,0.000658396,-5.90626e-07,5.11653e-08,0.861835,0.000657368,-4.3713e-07,-2.82495e-08,0.862492,0.000656409,-5.21878e-07,2.22788e-09,0.863148,0.000655372,-5.15195e-07,1.9338e-08,0.863803,0.0006544,-4.5718e-07,-1.99754e-08,0.864457,0.000653425,-5.17107e-07,9.59024e-10,0.86511,0.000652394,-5.1423e-07,1.61393e-08,0.865762,0.000651414,-4.65812e-07,-5.91149e-09,0.866413,0.000650465,-4.83546e-07,7.50665e-09,0.867063,0.00064952,-4.61026e-07,-2.4115e-08,0.867712,0.000648526,-5.33371e-07,2.93486e-08,0.86836,0.000647547,-4.45325e-07,-3.36748e-08,0.869007,0.000646555,-5.4635e-07,4.57461e-08,0.869653,0.0006456,-4.09112e-07,-3.01002e-08,0.870298,0.000644691,-4.99412e-07,1.50501e-08,0.870942,0.000643738,-4.54262e-07,-3.01002e-08,0.871585,0.000642739,-5.44563e-07,4.57461e-08,0.872228,0.000641787,-4.07324e-07,-3.36748e-08,0.872869,0.000640871,-5.08349e-07,2.93486e-08,0.873509,0.000639943,-4.20303e-07,-2.4115e-08,0.874149,0.00063903,-4.92648e-07,7.50655e-09,0.874787,0.000638067,-4.70128e-07,-5.91126e-09,0.875425,0.000637109,-4.87862e-07,1.61385e-08,0.876062,0.000636182,-4.39447e-07,9.61961e-10,0.876697,0.000635306,-4.36561e-07,-1.99863e-08,0.877332,0.000634373,-4.9652e-07,1.93785e-08,0.877966,0.000633438,-4.38384e-07,2.07697e-09,0.878599,0.000632567,-4.32153e-07,-2.76864e-08,0.879231,0.00063162,-5.15212e-07,4.90641e-08,0.879862,0.000630737,-3.6802e-07,-4.93606e-08,0.880493,0.000629852,-5.16102e-07,2.9169e-08,0.881122,0.000628908,-4.28595e-07,-7.71083e-09,0.881751,0.000628027,-4.51727e-07,1.6744e-09,0.882378,0.000627129,-4.46704e-07,1.01317e-09,0.883005,0.000626239,-4.43665e-07,-5.72703e-09,0.883631,0.000625334,-4.60846e-07,2.1895e-08,0.884255,0.000624478,-3.95161e-07,-2.22481e-08,0.88488,0.000623621,-4.61905e-07,7.4928e-09,0.885503,0.00062272,-4.39427e-07,-7.72306e-09,0.886125,0.000621818,-4.62596e-07,2.33995e-08,0.886746,0.000620963,-3.92398e-07,-2.62704e-08,0.887367,0.000620099,-4.71209e-07,2.20775e-08,0.887987,0.000619223,-4.04976e-07,-2.43496e-09,0.888605,0.000618406,-4.12281e-07,-1.23377e-08,0.889223,0.000617544,-4.49294e-07,-7.81876e-09,0.88984,0.000616622,-4.72751e-07,4.36128e-08,0.890457,0.000615807,-3.41912e-07,-4.7423e-08,0.891072,0.000614981,-4.84181e-07,2.68698e-08,0.891687,0.000614093,-4.03572e-07,-4.51384e-10,0.8923,0.000613285,-4.04926e-07,-2.50643e-08,0.892913,0.0006124,-4.80119e-07,4.11038e-08,0.893525,0.000611563,-3.56808e-07,-2.01414e-08,0.894136,0.000610789,-4.17232e-07,-2.01426e-08,0.894747,0.000609894,-4.7766e-07,4.11073e-08,0.895356,0.000609062,-3.54338e-07,-2.50773e-08,0.895965,0.000608278,-4.2957e-07,-4.02954e-10,0.896573,0.000607418,-4.30779e-07,2.66891e-08,0.89718,0.000606636,-3.50711e-07,-4.67489e-08,0.897786,0.000605795,-4.90958e-07,4.10972e-08,0.898391,0.000604936,-3.67666e-07,1.56948e-09,0.898996,0.000604205,-3.62958e-07,-4.73751e-08,0.8996,0.000603337,-5.05083e-07,6.87214e-08,0.900202,0.000602533,-2.98919e-07,-4.86966e-08,0.900805,0.000601789,-4.45009e-07,6.85589e-09,0.901406,0.00060092,-4.24441e-07,2.1273e-08,0.902007,0.000600135,-3.60622e-07,-3.23434e-08,0.902606,0.000599317,-4.57652e-07,4.84959e-08,0.903205,0.000598547,-3.12164e-07,-4.24309e-08,0.903803,0.000597795,-4.39457e-07,2.01844e-09,0.904401,0.000596922,-4.33402e-07,3.43571e-08,0.904997,0.000596159,-3.30331e-07,-2.02374e-08,0.905593,0.000595437,-3.91043e-07,-1.30123e-08,0.906188,0.000594616,-4.3008e-07,1.26819e-08,0.906782,0.000593794,-3.92034e-07,2.18894e-08,0.907376,0.000593076,-3.26366e-07,-4.06349e-08,0.907968,0.000592301,-4.4827e-07,2.1441e-08,0.90856,0.000591469,-3.83947e-07,1.44754e-08,0.909151,0.000590744,-3.40521e-07,-1.97379e-08,0.909742,0.000590004,-3.99735e-07,4.87161e-09,0.910331,0.000589219,-3.8512e-07,2.51532e-10,0.91092,0.00058845,-3.84366e-07,-5.87776e-09,0.911508,0.000587663,-4.01999e-07,2.32595e-08,0.912096,0.000586929,-3.3222e-07,-2.75554e-08,0.912682,0.000586182,-4.14887e-07,2.73573e-08,0.913268,0.000585434,-3.32815e-07,-2.22692e-08,0.913853,0.000584702,-3.99622e-07,2.11486e-09,0.914437,0.000583909,-3.93278e-07,1.38098e-08,0.915021,0.000583164,-3.51848e-07,2.25042e-09,0.915604,0.000582467,-3.45097e-07,-2.28115e-08,0.916186,0.000581708,-4.13531e-07,2.93911e-08,0.916767,0.000580969,-3.25358e-07,-3.51481e-08,0.917348,0.000580213,-4.30803e-07,5.15967e-08,0.917928,0.000579506,-2.76012e-07,-5.20296e-08,0.918507,0.000578798,-4.32101e-07,3.73124e-08,0.919085,0.000578046,-3.20164e-07,-3.76154e-08,0.919663,0.000577293,-4.3301e-07,5.35447e-08,0.92024,0.000576587,-2.72376e-07,-5.7354e-08,0.920816,0.000575871,-4.44438e-07,5.66621e-08,0.921391,0.000575152,-2.74452e-07,-5.00851e-08,0.921966,0.000574453,-4.24707e-07,2.4469e-08,0.92254,0.000573677,-3.513e-07,1.18138e-08,0.923114,0.000573009,-3.15859e-07,-1.21195e-08,0.923686,0.000572341,-3.52217e-07,-2.29403e-08,0.924258,0.000571568,-4.21038e-07,4.4276e-08,0.924829,0.000570859,-2.8821e-07,-3.49546e-08,0.9254,0.000570178,-3.93074e-07,3.59377e-08,0.92597,0.000569499,-2.85261e-07,-4.91915e-08,0.926539,0.000568781,-4.32835e-07,4.16189e-08,0.927107,0.00056804,-3.07979e-07,1.92523e-09,0.927675,0.00056743,-3.02203e-07,-4.93198e-08,0.928242,0.000566678,-4.50162e-07,7.61447e-08,0.928809,0.000566006,-2.21728e-07,-7.6445e-08,0.929374,0.000565333,-4.51063e-07,5.08216e-08,0.929939,0.000564583,-2.98599e-07,-7.63212e-09,0.930503,0.000563963,-3.21495e-07,-2.02931e-08,0.931067,0.000563259,-3.82374e-07,2.92001e-08,0.93163,0.000562582,-2.94774e-07,-3.69025e-08,0.932192,0.000561882,-4.05482e-07,5.88053e-08,0.932754,0.000561247,-2.29066e-07,-7.91094e-08,0.933315,0.000560552,-4.66394e-07,7.88184e-08,0.933875,0.000559856,-2.29939e-07,-5.73501e-08,0.934434,0.000559224,-4.01989e-07,3.13727e-08,0.934993,0.000558514,-3.07871e-07,-8.53611e-09,0.935551,0.000557873,-3.33479e-07,2.77175e-09,0.936109,0.000557214,-3.25164e-07,-2.55091e-09,0.936666,0.000556556,-3.32817e-07,7.43188e-09,0.937222,0.000555913,-3.10521e-07,-2.71766e-08,0.937778,0.00055521,-3.92051e-07,4.167e-08,0.938333,0.000554551,-2.67041e-07,-2.02941e-08,0.938887,0.000553956,-3.27923e-07,-2.00984e-08,0.93944,0.00055324,-3.88218e-07,4.10828e-08,0.939993,0.000552587,-2.6497e-07,-2.50237e-08,0.940546,0.000551982,-3.40041e-07,-5.92583e-10,0.941097,0.0005513,-3.41819e-07,2.7394e-08,0.941648,0.000550698,-2.59637e-07,-4.93788e-08,0.942199,0.000550031,-4.07773e-07,5.09119e-08,0.942748,0.000549368,-2.55038e-07,-3.50595e-08,0.943297,0.000548753,-3.60216e-07,2.97214e-08,0.943846,0.000548122,-2.71052e-07,-2.42215e-08,0.944394,0.000547507,-3.43716e-07,7.55985e-09,0.944941,0.000546842,-3.21037e-07,-6.01796e-09,0.945487,0.000546182,-3.3909e-07,1.65119e-08,0.946033,0.000545553,-2.89555e-07,-4.2498e-10,0.946578,0.000544973,-2.9083e-07,-1.4812e-08,0.947123,0.000544347,-3.35266e-07,6.83068e-11,0.947667,0.000543676,-3.35061e-07,1.45388e-08,0.94821,0.00054305,-2.91444e-07,1.38123e-09,0.948753,0.000542471,-2.87301e-07,-2.00637e-08,0.949295,0.000541836,-3.47492e-07,1.92688e-08,0.949837,0.000541199,-2.89685e-07,2.59298e-09,0.950378,0.000540628,-2.81906e-07,-2.96407e-08,0.950918,0.000539975,-3.70829e-07,5.63652e-08,0.951458,0.000539402,-2.01733e-07,-7.66107e-08,0.951997,0.000538769,-4.31565e-07,7.12638e-08,0.952535,0.00053812,-2.17774e-07,-2.96305e-08,0.953073,0.000537595,-3.06665e-07,-1.23464e-08,0.95361,0.000536945,-3.43704e-07,1.94114e-08,0.954147,0.000536316,-2.8547e-07,-5.69451e-09,0.954683,0.000535728,-3.02554e-07,3.36666e-09,0.955219,0.000535133,-2.92454e-07,-7.77208e-09,0.955753,0.000534525,-3.1577e-07,2.77216e-08,0.956288,0.000533976,-2.32605e-07,-4.35097e-08,0.956821,0.00053338,-3.63134e-07,2.7108e-08,0.957354,0.000532735,-2.8181e-07,-5.31772e-09,0.957887,0.000532156,-2.97764e-07,-5.83718e-09,0.958419,0.000531543,-3.15275e-07,2.86664e-08,0.95895,0.000530998,-2.29276e-07,-4.9224e-08,0.959481,0.000530392,-3.76948e-07,4.90201e-08,0.960011,0.000529785,-2.29887e-07,-2.76471e-08,0.96054,0.000529243,-3.12829e-07,1.96385e-09,0.961069,0.000528623,-3.06937e-07,1.97917e-08,0.961598,0.000528068,-2.47562e-07,-2.15261e-08,0.962125,0.000527508,-3.1214e-07,6.70795e-09,0.962653,0.000526904,-2.92016e-07,-5.30573e-09,0.963179,0.000526304,-3.07934e-07,1.4515e-08,0.963705,0.000525732,-2.64389e-07,6.85048e-09,0.964231,0.000525224,-2.43837e-07,-4.19169e-08,0.964756,0.00052461,-3.69588e-07,4.1608e-08,0.96528,0.000523996,-2.44764e-07,-5.30598e-09,0.965804,0.000523491,-2.60682e-07,-2.03841e-08,0.966327,0.000522908,-3.21834e-07,2.72378e-08,0.966849,0.000522346,-2.40121e-07,-2.89625e-08,0.967371,0.000521779,-3.27008e-07,2.90075e-08,0.967893,0.000521212,-2.39986e-07,-2.74629e-08,0.968414,0.00052065,-3.22374e-07,2.12396e-08,0.968934,0.000520069,-2.58656e-07,2.10922e-09,0.969454,0.000519558,-2.52328e-07,-2.96765e-08,0.969973,0.000518964,-3.41357e-07,5.6992e-08,0.970492,0.000518452,-1.70382e-07,-7.90821e-08,0.97101,0.000517874,-4.07628e-07,8.05224e-08,0.971528,0.000517301,-1.66061e-07,-6.41937e-08,0.972045,0.000516776,-3.58642e-07,5.70429e-08,0.972561,0.00051623,-1.87513e-07,-4.47686e-08,0.973077,0.00051572,-3.21819e-07,2.82237e-09,0.973593,0.000515085,-3.13352e-07,3.34792e-08,0.974108,0.000514559,-2.12914e-07,-1.75298e-08,0.974622,0.000514081,-2.65503e-07,-2.29648e-08,0.975136,0.000513481,-3.34398e-07,4.97843e-08,0.975649,0.000512961,-1.85045e-07,-5.6963e-08,0.976162,0.00051242,-3.55934e-07,5.88585e-08,0.976674,0.000511885,-1.79359e-07,-5.92616e-08,0.977185,0.000511348,-3.57143e-07,5.89785e-08,0.977696,0.000510811,-1.80208e-07,-5.74433e-08,0.978207,0.000510278,-3.52538e-07,5.15854e-08,0.978717,0.000509728,-1.97781e-07,-2.9689e-08,0.979226,0.000509243,-2.86848e-07,7.56591e-09,0.979735,0.000508692,-2.64151e-07,-5.74649e-10,0.980244,0.000508162,-2.65875e-07,-5.26732e-09,0.980752,0.000507615,-2.81677e-07,2.16439e-08,0.981259,0.000507116,-2.16745e-07,-2.17037e-08,0.981766,0.000506618,-2.81856e-07,5.56636e-09,0.982272,0.000506071,-2.65157e-07,-5.61689e-10,0.982778,0.000505539,-2.66842e-07,-3.31963e-09,0.983283,0.000504995,-2.76801e-07,1.38402e-08,0.983788,0.000504483,-2.3528e-07,7.56339e-09,0.984292,0.000504035,-2.1259e-07,-4.40938e-08,0.984796,0.000503478,-3.44871e-07,4.96026e-08,0.985299,0.000502937,-1.96064e-07,-3.51071e-08,0.985802,0.000502439,-3.01385e-07,3.12212e-08,0.986304,0.00050193,-2.07721e-07,-3.0173e-08,0.986806,0.000501424,-2.9824e-07,2.9866e-08,0.987307,0.000500917,-2.08642e-07,-2.96865e-08,0.987808,0.000500411,-2.97702e-07,2.92753e-08,0.988308,0.000499903,-2.09876e-07,-2.78101e-08,0.988807,0.0004994,-2.93306e-07,2.23604e-08,0.989307,0.000498881,-2.26225e-07,-2.02681e-09,0.989805,0.000498422,-2.32305e-07,-1.42531e-08,0.990303,0.000497915,-2.75065e-07,-5.65232e-10,0.990801,0.000497363,-2.76761e-07,1.65141e-08,0.991298,0.000496859,-2.27218e-07,-5.88639e-09,0.991795,0.000496387,-2.44878e-07,7.0315e-09,0.992291,0.000495918,-2.23783e-07,-2.22396e-08,0.992787,0.000495404,-2.90502e-07,2.23224e-08,0.993282,0.00049489,-2.23535e-07,-7.44543e-09,0.993776,0.000494421,-2.45871e-07,7.45924e-09,0.994271,0.000493951,-2.23493e-07,-2.23915e-08,0.994764,0.000493437,-2.90668e-07,2.25021e-08,0.995257,0.000492923,-2.23161e-07,-8.01218e-09,0.99575,0.000492453,-2.47198e-07,9.54669e-09,0.996242,0.000491987,-2.18558e-07,-3.01746e-08,0.996734,0.000491459,-3.09082e-07,5.1547e-08,0.997225,0.000490996,-1.54441e-07,-5.68039e-08,0.997716,0.000490517,-3.24853e-07,5.64594e-08,0.998206,0.000490036,-1.55474e-07,-4.98245e-08,0.998696,0.000489576,-3.04948e-07,2.36292e-08,0.999186,0.000489037,-2.3406e-07,1.49121e-08,0.999674,0.000488613,-1.89324e-07,-2.3673e-08,1.00016,0.000488164,-2.60343e-07,2.01754e-08,1.00065,0.000487704,-1.99816e-07,-5.70288e-08,1.00114,0.000487133,-3.70903e-07,8.87303e-08,1.00162,0.000486657,-1.04712e-07,-5.94737e-08,1.00211,0.000486269,-2.83133e-07,2.99553e-08,1.0026,0.000485793,-1.93267e-07,-6.03474e-08,1.00308,0.000485225,-3.74309e-07,9.2225e-08,1.00357,0.000484754,-9.76345e-08,-7.0134e-08,1.00405,0.000484348,-3.08036e-07,6.91016e-08,1.00454,0.000483939,-1.00731e-07,-8.70633e-08,1.00502,0.000483476,-3.61921e-07,4.07328e-08,1.0055,0.000482875,-2.39723e-07,4.33413e-08,1.00599,0.000482525,-1.09699e-07,-9.48886e-08,1.00647,0.000482021,-3.94365e-07,9.77947e-08,1.00695,0.000481526,-1.00981e-07,-5.78713e-08,1.00743,0.00048115,-2.74595e-07,1.44814e-08,1.00791,0.000480645,-2.31151e-07,-5.42665e-11,1.00839,0.000480182,-2.31314e-07,-1.42643e-08,1.00887,0.000479677,-2.74106e-07,5.71115e-08,1.00935,0.0004793,-1.02772e-07,-9.49724e-08,1.00983,0.000478809,-3.87689e-07,8.43596e-08,1.01031,0.000478287,-1.3461e-07,-4.04755e-09,1.01079,0.000478006,-1.46753e-07,-6.81694e-08,1.01127,0.000477508,-3.51261e-07,3.83067e-08,1.01174,0.00047692,-2.36341e-07,3.41521e-08,1.01222,0.00047655,-1.33885e-07,-5.57058e-08,1.0127,0.000476115,-3.01002e-07,6.94616e-08,1.01317,0.000475721,-9.26174e-08,-1.02931e-07,1.01365,0.000475227,-4.01412e-07,1.03846e-07,1.01412,0.000474736,-8.98751e-08,-7.40321e-08,1.0146,0.000474334,-3.11971e-07,7.30735e-08,1.01507,0.00047393,-9.27508e-08,-9.90527e-08,1.01554,0.000473447,-3.89909e-07,8.47188e-08,1.01602,0.000472921,-1.35753e-07,-1.40381e-09,1.01649,0.000472645,-1.39964e-07,-7.91035e-08,1.01696,0.000472128,-3.77275e-07,7.93993e-08,1.01744,0.000471612,-1.39077e-07,-7.52607e-11,1.01791,0.000471334,-1.39302e-07,-7.90983e-08,1.01838,0.000470818,-3.76597e-07,7.80499e-08,1.01885,0.000470299,-1.42448e-07,5.31733e-09,1.01932,0.00047003,-1.26496e-07,-9.93193e-08,1.01979,0.000469479,-4.24453e-07,1.53541e-07,1.02026,0.00046909,3.617e-08,-1.57217e-07,1.02073,0.000468691,-4.35482e-07,1.177e-07,1.02119,0.000468173,-8.23808e-08,-7.51659e-08,1.02166,0.000467783,-3.07878e-07,6.37538e-08,1.02213,0.000467358,-1.16617e-07,-6.064e-08,1.0226,0.000466943,-2.98537e-07,5.9597e-08,1.02306,0.000466525,-1.19746e-07,-5.85386e-08,1.02353,0.00046611,-2.95362e-07,5.53482e-08,1.024,0.000465685,-1.29317e-07,-4.36449e-08,1.02446,0.000465296,-2.60252e-07,2.20268e-11,1.02493,0.000464775,-2.60186e-07,4.35568e-08,1.02539,0.000464386,-1.29516e-07,-5.50398e-08,1.02586,0.000463961,-2.94635e-07,5.73932e-08,1.02632,0.000463544,-1.22456e-07,-5.53236e-08,1.02678,0.000463133,-2.88426e-07,4.46921e-08,1.02725,0.000462691,-1.5435e-07,-4.23534e-09,1.02771,0.000462369,-1.67056e-07,-2.77507e-08,1.02817,0.000461952,-2.50308e-07,-3.97101e-09,1.02863,0.000461439,-2.62221e-07,4.36348e-08,1.02909,0.000461046,-1.31317e-07,-5.13589e-08,1.02955,0.000460629,-2.85394e-07,4.25913e-08,1.03001,0.000460186,-1.5762e-07,2.0285e-10,1.03047,0.000459871,-1.57011e-07,-4.34027e-08,1.03093,0.000459427,-2.87219e-07,5.41987e-08,1.03139,0.000459015,-1.24623e-07,-5.4183e-08,1.03185,0.000458604,-2.87172e-07,4.33239e-08,1.03231,0.000458159,-1.572e-07,9.65817e-11,1.03277,0.000457845,-1.56911e-07,-4.37103e-08,1.03323,0.0004574,-2.88041e-07,5.55351e-08,1.03368,0.000456991,-1.21436e-07,-5.9221e-08,1.03414,0.00045657,-2.99099e-07,6.21394e-08,1.0346,0.000456158,-1.1268e-07,-7.01275e-08,1.03505,0.000455723,-3.23063e-07,9.91614e-08,1.03551,0.000455374,-2.55788e-08,-8.80996e-08,1.03596,0.000455058,-2.89878e-07,1.48184e-08,1.03642,0.000454523,-2.45422e-07,2.88258e-08,1.03687,0.000454119,-1.58945e-07,-1.09125e-08,1.03733,0.000453768,-1.91682e-07,1.48241e-08,1.03778,0.000453429,-1.4721e-07,-4.83838e-08,1.03823,0.00045299,-2.92361e-07,5.95019e-08,1.03869,0.000452584,-1.13856e-07,-7.04146e-08,1.03914,0.000452145,-3.25099e-07,1.02947e-07,1.03959,0.000451803,-1.62583e-08,-1.02955e-07,1.04004,0.000451462,-3.25123e-07,7.04544e-08,1.04049,0.000451023,-1.1376e-07,-5.96534e-08,1.04094,0.000450616,-2.9272e-07,4.89499e-08,1.04139,0.000450178,-1.45871e-07,-1.69369e-08,1.04184,0.000449835,-1.96681e-07,1.87977e-08,1.04229,0.000449498,-1.40288e-07,-5.82539e-08,1.04274,0.000449043,-3.1505e-07,9.50087e-08,1.04319,0.000448698,-3.00238e-08,-8.33623e-08,1.04364,0.000448388,-2.80111e-07,2.20363e-11,1.04409,0.000447828,-2.80045e-07,8.32742e-08,1.04454,0.000447517,-3.02221e-08,-9.47002e-08,1.04498,0.000447173,-3.14323e-07,5.7108e-08,1.04543,0.000446716,-1.42999e-07,-1.45225e-08,1.04588,0.000446386,-1.86566e-07,9.82022e-10,1.04632,0.000446016,-1.8362e-07,1.05944e-08,1.04677,0.00044568,-1.51837e-07,-4.33597e-08,1.04721,0.000445247,-2.81916e-07,4.36352e-08,1.04766,0.000444814,-1.51011e-07,-1.19717e-08,1.0481,0.000444476,-1.86926e-07,4.25158e-09,1.04855,0.000444115,-1.74171e-07,-5.03461e-09,1.04899,0.000443751,-1.89275e-07,1.58868e-08,1.04944,0.00044342,-1.41614e-07,-5.85127e-08,1.04988,0.000442961,-3.17152e-07,9.89548e-08,1.05032,0.000442624,-2.0288e-08,-9.88878e-08,1.05076,0.000442287,-3.16951e-07,5.81779e-08,1.05121,0.000441827,-1.42418e-07,-1.46144e-08,1.05165,0.000441499,-1.86261e-07,2.79892e-10,1.05209,0.000441127,-1.85421e-07,1.34949e-08,1.05253,0.000440797,-1.44937e-07,-5.42594e-08,1.05297,0.000440344,-3.07715e-07,8.43335e-08,1.05341,0.000439982,-5.47146e-08,-4.46558e-08,1.05385,0.000439738,-1.88682e-07,-2.49193e-08,1.05429,0.000439286,-2.6344e-07,2.5124e-08,1.05473,0.000438835,-1.88068e-07,4.36328e-08,1.05517,0.000438589,-5.71699e-08,-8.04459e-08,1.05561,0.000438234,-2.98508e-07,3.97324e-08,1.05605,0.000437756,-1.79311e-07,4.07258e-08,1.05648,0.000437519,-5.71332e-08,-8.34263e-08,1.05692,0.000437155,-3.07412e-07,5.45608e-08,1.05736,0.000436704,-1.4373e-07,-1.56078e-08,1.05779,0.000436369,-1.90553e-07,7.87043e-09,1.05823,0.000436012,-1.66942e-07,-1.58739e-08,1.05867,0.00043563,-2.14563e-07,5.56251e-08,1.0591,0.000435368,-4.76881e-08,-8.74172e-08,1.05954,0.000435011,-3.0994e-07,5.56251e-08,1.05997,0.000434558,-1.43064e-07,-1.58739e-08,1.06041,0.000434224,-1.90686e-07,7.87042e-09,1.06084,0.000433866,-1.67075e-07,-1.56078e-08,1.06127,0.000433485,-2.13898e-07,5.45609e-08,1.06171,0.000433221,-5.02157e-08,-8.34263e-08,1.06214,0.00043287,-3.00495e-07,4.07258e-08,1.06257,0.000432391,-1.78317e-07,3.97325e-08,1.063,0.000432154,-5.91198e-08,-8.04464e-08,1.06344,0.000431794,-3.00459e-07,4.36347e-08,1.06387,0.000431324,-1.69555e-07,2.5117e-08,1.0643,0.000431061,-9.42041e-08,-2.48934e-08,1.06473,0.000430798,-1.68884e-07,-4.47527e-08,1.06516,0.000430326,-3.03142e-07,8.46951e-08,1.06559,0.000429973,-4.90573e-08,-5.56089e-08,1.06602,0.000429708,-2.15884e-07,1.85314e-08,1.06645,0.000429332,-1.6029e-07,-1.85166e-08,1.06688,0.000428956,-2.1584e-07,5.5535e-08,1.06731,0.000428691,-4.92347e-08,-8.44142e-08,1.06774,0.000428339,-3.02477e-07,4.37032e-08,1.06816,0.000427865,-1.71368e-07,2.88107e-08,1.06859,0.000427609,-8.49356e-08,-3.97367e-08,1.06902,0.00042732,-2.04146e-07,1.09267e-08,1.06945,0.000426945,-1.71365e-07,-3.97023e-09,1.06987,0.00042659,-1.83276e-07,4.9542e-09,1.0703,0.000426238,-1.68414e-07,-1.58466e-08,1.07073,0.000425854,-2.15953e-07,5.84321e-08,1.07115,0.000425597,-4.0657e-08,-9.86725e-08,1.07158,0.00042522,-3.36674e-07,9.78392e-08,1.072,0.00042484,-4.31568e-08,-5.42658e-08,1.07243,0.000424591,-2.05954e-07,1.45377e-11,1.07285,0.000424179,-2.0591e-07,5.42076e-08,1.07328,0.00042393,-4.32877e-08,-9.76357e-08,1.0737,0.00042355,-3.36195e-07,9.79165e-08,1.07412,0.000423172,-4.24451e-08,-5.56118e-08,1.07455,0.00042292,-2.09281e-07,5.32143e-09,1.07497,0.000422518,-1.93316e-07,3.43261e-08,1.07539,0.000422234,-9.0338e-08,-2.34165e-08,1.07581,0.000421983,-1.60588e-07,-5.98692e-08,1.07623,0.000421482,-3.40195e-07,1.43684e-07,1.07666,0.000421233,9.08574e-08,-1.5724e-07,1.07708,0.000420943,-3.80862e-07,1.27647e-07,1.0775,0.000420564,2.0791e-09,-1.1493e-07,1.07792,0.000420223,-3.4271e-07,9.36534e-08,1.07834,0.000419819,-6.17499e-08,-2.12653e-08,1.07876,0.000419632,-1.25546e-07,-8.59219e-09,1.07918,0.000419355,-1.51322e-07,-6.35752e-08,1.0796,0.000418861,-3.42048e-07,1.43684e-07,1.08002,0.000418608,8.90034e-08,-1.53532e-07,1.08043,0.000418326,-3.71593e-07,1.12817e-07,1.08085,0.000417921,-3.31414e-08,-5.93184e-08,1.08127,0.000417677,-2.11097e-07,5.24697e-09,1.08169,0.00041727,-1.95356e-07,3.83305e-08,1.0821,0.000416995,-8.03642e-08,-3.93597e-08,1.08252,0.000416716,-1.98443e-07,-1.0094e-10,1.08294,0.000416319,-1.98746e-07,3.97635e-08,1.08335,0.00041604,-7.94557e-08,-3.97437e-08,1.08377,0.000415762,-1.98687e-07,1.94215e-12,1.08419,0.000415365,-1.98681e-07,3.97359e-08,1.0846,0.000415087,-7.94732e-08,-3.97362e-08,1.08502,0.000414809,-1.98682e-07,-4.31063e-13,1.08543,0.000414411,-1.98683e-07,3.97379e-08,1.08584,0.000414133,-7.94694e-08,-3.97418e-08,1.08626,0.000413855,-1.98695e-07,2.00563e-11,1.08667,0.000413458,-1.98635e-07,3.96616e-08,1.08709,0.000413179,-7.965e-08,-3.9457e-08,1.0875,0.000412902,-1.98021e-07,-1.04281e-09,1.08791,0.000412502,-2.01149e-07,4.36282e-08,1.08832,0.000412231,-7.02648e-08,-5.42608e-08,1.08874,0.000411928,-2.33047e-07,5.42057e-08,1.08915,0.000411624,-7.04301e-08,-4.33527e-08,1.08956,0.000411353,-2.00488e-07,-4.07378e-12,1.08997,0.000410952,-2.005e-07,4.3369e-08,1.09038,0.000410681,-7.03934e-08,-5.42627e-08,1.09079,0.000410378,-2.33182e-07,5.44726e-08,1.0912,0.000410075,-6.97637e-08,-4.44186e-08,1.09161,0.000409802,-2.03019e-07,3.99235e-09,1.09202,0.000409408,-1.91042e-07,2.84491e-08,1.09243,0.000409111,-1.05695e-07,1.42043e-09,1.09284,0.000408904,-1.01434e-07,-3.41308e-08,1.09325,0.000408599,-2.03826e-07,1.58937e-08,1.09366,0.000408239,-1.56145e-07,-2.94438e-08,1.09406,0.000407838,-2.44476e-07,1.01881e-07,1.09447,0.000407655,6.11676e-08,-1.39663e-07,1.09488,0.000407358,-3.57822e-07,9.91432e-08,1.09529,0.00040694,-6.03921e-08,-1.84912e-08,1.09569,0.000406764,-1.15866e-07,-2.51785e-08,1.0961,0.000406457,-1.91401e-07,-4.03115e-12,1.09651,0.000406074,-1.91413e-07,2.51947e-08,1.09691,0.000405767,-1.15829e-07,1.84346e-08,1.09732,0.00040559,-6.05254e-08,-9.89332e-08,1.09772,0.000405172,-3.57325e-07,1.3888e-07,1.09813,0.000404874,5.93136e-08,-9.8957e-08,1.09853,0.000404696,-2.37557e-07,1.853e-08,1.09894,0.000404277,-1.81968e-07,2.48372e-08,1.09934,0.000403987,-1.07456e-07,1.33047e-09,1.09975,0.000403776,-1.03465e-07,-3.01591e-08,1.10015,0.000403479,-1.93942e-07,9.66054e-11,1.10055,0.000403091,-1.93652e-07,2.97727e-08,1.10096,0.000402793,-1.04334e-07,2.19273e-11,1.10136,0.000402585,-1.04268e-07,-2.98604e-08,1.10176,0.000402287,-1.93849e-07,2.10325e-10,1.10216,0.0004019,-1.93218e-07,2.90191e-08,1.10256,0.0004016,-1.06161e-07,2.92264e-09,1.10297,0.000401397,-9.73931e-08,-4.07096e-08,1.10337,0.00040108,-2.19522e-07,4.07067e-08,1.10377,0.000400763,-9.7402e-08,-2.90783e-09,1.10417,0.000400559,-1.06126e-07,-2.90754e-08,1.10457,0.00040026,-1.93352e-07,9.00021e-14,1.10497,0.000399873,-1.93351e-07,2.9075e-08,1.10537,0.000399574,-1.06126e-07,2.90902e-09,1.10577,0.00039937,-9.73992e-08,-4.07111e-08,1.10617,0.000399053,-2.19533e-07,4.07262e-08,1.10657,0.000398736,-9.73541e-08,-2.98424e-09,1.10697,0.000398533,-1.06307e-07,-2.87892e-08,1.10736,0.000398234,-1.92674e-07,-1.06824e-09,1.10776,0.000397845,-1.95879e-07,3.30622e-08,1.10816,0.000397552,-9.66926e-08,-1.19712e-08,1.10856,0.000397323,-1.32606e-07,1.48225e-08,1.10895,0.000397102,-8.81387e-08,-4.73187e-08,1.10935,0.000396784,-2.30095e-07,5.52429e-08,1.10975,0.00039649,-6.4366e-08,-5.44437e-08,1.11014,0.000396198,-2.27697e-07,4.33226e-08,1.11054,0.000395872,-9.77293e-08,3.62656e-10,1.11094,0.000395678,-9.66414e-08,-4.47732e-08,1.11133,0.00039535,-2.30961e-07,5.95208e-08,1.11173,0.000395067,-5.23985e-08,-7.41008e-08,1.11212,0.00039474,-2.74701e-07,1.17673e-07,1.11252,0.000394543,7.83181e-08,-1.58172e-07,1.11291,0.000394225,-3.96199e-07,1.57389e-07,1.1133,0.000393905,7.59679e-08,-1.13756e-07,1.1137,0.000393716,-2.653e-07,5.92165e-08,1.11409,0.000393363,-8.76507e-08,-3.90074e-09,1.11449,0.000393176,-9.93529e-08,-4.36136e-08,1.11488,0.000392846,-2.30194e-07,5.91457e-08,1.11527,0.000392563,-5.27564e-08,-7.376e-08,1.11566,0.000392237,-2.74037e-07,1.16685e-07,1.11606,0.000392039,7.60189e-08,-1.54562e-07,1.11645,0.000391727,-3.87667e-07,1.43935e-07,1.11684,0.000391384,4.4137e-08,-6.35487e-08,1.11723,0.000391281,-1.46509e-07,-8.94896e-09,1.11762,0.000390961,-1.73356e-07,-1.98647e-08,1.11801,0.000390555,-2.3295e-07,8.8408e-08,1.1184,0.000390354,3.22736e-08,-9.53486e-08,1.11879,0.000390133,-2.53772e-07,5.45677e-08,1.11918,0.000389789,-9.0069e-08,-3.71296e-09,1.11957,0.000389598,-1.01208e-07,-3.97159e-08,1.11996,0.000389276,-2.20355e-07,4.33671e-08,1.12035,0.000388966,-9.02542e-08,-1.45431e-08,1.12074,0.000388741,-1.33883e-07,1.48052e-08,1.12113,0.000388518,-8.94678e-08,-4.46778e-08,1.12152,0.000388205,-2.23501e-07,4.46966e-08,1.12191,0.000387892,-8.94114e-08,-1.48992e-08,1.12229,0.000387669,-1.34109e-07,1.49003e-08,1.12268,0.000387445,-8.94082e-08,-4.47019e-08,1.12307,0.000387132,-2.23514e-07,4.4698e-08,1.12345,0.000386819,-8.942e-08,-1.48806e-08,1.12384,0.000386596,-1.34062e-07,1.48245e-08,1.12423,0.000386372,-8.95885e-08,-4.44172e-08,1.12461,0.00038606,-2.2284e-07,4.36351e-08,1.125,0.000385745,-9.19348e-08,-1.09139e-08,1.12539,0.000385528,-1.24677e-07,2.05584e-11,1.12577,0.000385279,-1.24615e-07,1.08317e-08,1.12616,0.000385062,-9.21198e-08,-4.33473e-08,1.12654,0.000384748,-2.22162e-07,4.33481e-08,1.12693,0.000384434,-9.21174e-08,-1.08356e-08,1.12731,0.000384217,-1.24624e-07,-5.50907e-12,1.12769,0.000383968,-1.24641e-07,1.08577e-08,1.12808,0.000383751,-9.20679e-08,-4.34252e-08,1.12846,0.000383437,-2.22343e-07,4.36337e-08,1.12884,0.000383123,-9.14422e-08,-1.19005e-08,1.12923,0.000382904,-1.27144e-07,3.96813e-09,1.12961,0.000382662,-1.15239e-07,-3.97207e-09,1.12999,0.000382419,-1.27155e-07,1.19201e-08,1.13038,0.000382201,-9.1395e-08,-4.37085e-08,1.13076,0.000381887,-2.2252e-07,4.37046e-08,1.13114,0.000381573,-9.14068e-08,-1.19005e-08,1.13152,0.000381355,-1.27108e-07,3.89734e-09,1.1319,0.000381112,-1.15416e-07,-3.68887e-09,1.13228,0.00038087,-1.26483e-07,1.08582e-08,1.13266,0.00038065,-9.39083e-08,-3.97438e-08,1.13304,0.000380343,-2.1314e-07,2.89076e-08,1.13342,0.000380003,-1.26417e-07,4.33225e-08,1.1338,0.00037988,3.55072e-09,-8.29883e-08,1.13418,0.000379638,-2.45414e-07,5.0212e-08,1.13456,0.000379298,-9.47781e-08,1.34964e-09,1.13494,0.000379113,-9.07292e-08,-5.56105e-08,1.13532,0.000378764,-2.57561e-07,1.01883e-07,1.1357,0.000378555,4.80889e-08,-1.13504e-07,1.13608,0.000378311,-2.92423e-07,1.13713e-07,1.13646,0.000378067,4.87176e-08,-1.02931e-07,1.13683,0.000377856,-2.60076e-07,5.95923e-08,1.13721,0.000377514,-8.12988e-08,-1.62288e-08,1.13759,0.000377303,-1.29985e-07,5.32278e-09,1.13797,0.000377059,-1.14017e-07,-5.06237e-09,1.13834,0.000376816,-1.29204e-07,1.49267e-08,1.13872,0.000376602,-8.44237e-08,-5.46444e-08,1.1391,0.000376269,-2.48357e-07,8.44417e-08,1.13947,0.000376026,4.96815e-09,-4.47039e-08,1.13985,0.000375902,-1.29143e-07,-2.48355e-08,1.14023,0.000375569,-2.0365e-07,2.48368e-08,1.1406,0.000375236,-1.2914e-07,4.46977e-08,1.14098,0.000375112,4.95341e-09,-8.44184e-08,1.14135,0.000374869,-2.48302e-07,5.45572e-08,1.14173,0.000374536,-8.463e-08,-1.46013e-08,1.1421,0.000374323,-1.28434e-07,3.8478e-09,1.14247,0.000374077,-1.1689e-07,-7.89941e-10,1.14285,0.000373841,-1.1926e-07,-6.88042e-10,1.14322,0.0003736,-1.21324e-07,3.54213e-09,1.1436,0.000373368,-1.10698e-07,-1.34805e-08,1.14397,0.000373107,-1.51139e-07,5.03798e-08,1.14434,0.000372767,0.,0.};$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2XYZ_D65f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2XYZ_D65f[9] = { 0.412453f, 0.357580f, 0.180423f, 0.212671f, 0.715160f, 0.072169f, 0.019334f, 0.119193f, 0.950227f };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2XYZ_D65i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2XYZ_D65i[9] = { 1689, 1465, 739, 871, 2929, 296, 79, 488, 3892 };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YCrCbCoeffs_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2YCrCbCoeffs_f[5] = {0.299f, 0.587f, 0.114f, 0.713f, 0.564f};$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YCrCbCoeffs_i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YCrCbCoeffs_i[5] = {R2Y, G2Y, B2Y, 11682, 9241};$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YUVCoeffs_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2YUVCoeffs_f[5] = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YUVCoeffs_i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YUVCoeffs_i[5] = { B2Y, G2Y, R2Y, 8061, 14369 };$/;"	m	namespace:cv::gpu::device::color_detail
c_XYZ2sRGB_D65f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_XYZ2sRGB_D65f[9] = { 3.240479f, -1.53715f, -0.498535f, -0.969256f, 1.875991f, 0.041556f, 0.055648f, -0.204043f, 1.057311f };$/;"	m	namespace:cv::gpu::device::color_detail
c_XYZ2sRGB_D65i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_XYZ2sRGB_D65i[9] = { 13273, -6296, -2042, -3970, 7684, 170, 228, -836, 4331 };$/;"	m	namespace:cv::gpu::device::color_detail
c_YCrCb2RGBCoeffs_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_YCrCb2RGBCoeffs_f[5] = {1.403f, -0.714f, -0.344f, 1.773f};$/;"	m	namespace:cv::gpu::device::color_detail
c_YCrCb2RGBCoeffs_i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_YCrCb2RGBCoeffs_i[5] = {22987, -11698, -5636, 29049};$/;"	m	namespace:cv::gpu::device::color_detail
c_YUV2RGBCoeffs_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_YUV2RGBCoeffs_f[5] = { 2.032f, -0.395f, -0.581f, 1.140f };$/;"	m	namespace:cv::gpu::device::color_detail
c_YUV2RGBCoeffs_i	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_YUV2RGBCoeffs_i[5] = { 33292, -6472, -9519, 18678 };$/;"	m	namespace:cv::gpu::device::color_detail
c_sRGBGammaTab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_sRGBGammaTab[] = {0,7.55853e-05,0.,-7.51331e-13,7.55853e-05,7.55853e-05,-2.25399e-12,3.75665e-12,0.000151171,7.55853e-05,9.01597e-12,-6.99932e-12,0.000226756,7.55853e-05,-1.1982e-11,2.41277e-12,0.000302341,7.55853e-05,-4.74369e-12,1.19001e-11,0.000377927,7.55853e-05,3.09568e-11,-2.09095e-11,0.000453512,7.55853e-05,-3.17718e-11,1.35303e-11,0.000529097,7.55853e-05,8.81905e-12,-4.10782e-12,0.000604683,7.55853e-05,-3.50439e-12,2.90097e-12,0.000680268,7.55853e-05,5.19852e-12,-7.49607e-12,0.000755853,7.55853e-05,-1.72897e-11,2.70833e-11,0.000831439,7.55854e-05,6.39602e-11,-4.26295e-11,0.000907024,7.55854e-05,-6.39282e-11,2.70193e-11,0.000982609,7.55853e-05,1.71298e-11,-7.24017e-12,0.00105819,7.55853e-05,-4.59077e-12,1.94137e-12,0.00113378,7.55853e-05,1.23333e-12,-5.25291e-13,0.00120937,7.55853e-05,-3.42545e-13,1.59799e-13,0.00128495,7.55853e-05,1.36852e-13,-1.13904e-13,0.00136054,7.55853e-05,-2.04861e-13,2.95818e-13,0.00143612,7.55853e-05,6.82594e-13,-1.06937e-12,0.00151171,7.55853e-05,-2.52551e-12,3.98166e-12,0.00158729,7.55853e-05,9.41946e-12,-1.48573e-11,0.00166288,7.55853e-05,-3.51523e-11,5.54474e-11,0.00173846,7.55854e-05,1.3119e-10,-9.0517e-11,0.00181405,7.55854e-05,-1.40361e-10,7.37899e-11,0.00188963,7.55853e-05,8.10085e-11,-8.82272e-11,0.00196522,7.55852e-05,-1.83673e-10,1.62704e-10,0.0020408,7.55853e-05,3.04438e-10,-2.13341e-10,0.00211639,7.55853e-05,-3.35586e-10,2.25e-10,0.00219197,7.55853e-05,3.39414e-10,-2.20997e-10,0.00226756,7.55853e-05,-3.23576e-10,1.93326e-10,0.00234315,7.55853e-05,2.564e-10,-8.66446e-11,0.00241873,7.55855e-05,-3.53328e-12,-7.9578e-11,0.00249432,7.55853e-05,-2.42267e-10,1.72126e-10,0.0025699,7.55853e-05,2.74111e-10,-1.43265e-10,0.00264549,7.55854e-05,-1.55683e-10,-6.47292e-11,0.00272107,7.55849e-05,-3.4987e-10,8.67842e-10,0.00279666,7.55868e-05,2.25366e-09,-3.8723e-09,0.00287224,7.55797e-05,-9.36325e-09,1.5087e-08,0.00294783,7.56063e-05,3.58978e-08,-5.69415e-08,0.00302341,7.55072e-05,-1.34927e-07,2.13144e-07,0.003099,7.58768e-05,5.04507e-07,1.38713e-07,0.00317552,7.7302e-05,9.20646e-07,-1.55186e-07,0.00325359,7.86777e-05,4.55087e-07,4.26813e-08,0.00333276,7.97159e-05,5.83131e-07,-1.06495e-08,0.00341305,8.08502e-05,5.51182e-07,3.87467e-09,0.00349446,8.19642e-05,5.62806e-07,-1.92586e-10,0.00357698,8.30892e-05,5.62228e-07,1.0866e-09,0.00366063,8.4217e-05,5.65488e-07,5.02818e-10,0.00374542,8.53494e-05,5.66997e-07,8.60211e-10,0.00383133,8.6486e-05,5.69577e-07,7.13044e-10,0.00391839,8.76273e-05,5.71716e-07,4.78527e-10,0.00400659,8.87722e-05,5.73152e-07,1.09818e-09,0.00409594,8.99218e-05,5.76447e-07,2.50964e-10,0.00418644,9.10754e-05,5.772e-07,1.15762e-09,0.00427809,9.22333e-05,5.80672e-07,2.40865e-10,0.0043709,9.33954e-05,5.81395e-07,1.13854e-09,0.00446488,9.45616e-05,5.84811e-07,3.27267e-10,0.00456003,9.57322e-05,5.85792e-07,8.1197e-10,0.00465635,9.69062e-05,5.88228e-07,6.15823e-10,0.00475384,9.80845e-05,5.90076e-07,9.15747e-10,0.00485252,9.92674e-05,5.92823e-07,3.778e-10,0.00495238,0.000100454,5.93956e-07,8.32623e-10,0.00505343,0.000101645,5.96454e-07,4.82695e-10,0.00515567,0.000102839,5.97902e-07,9.61904e-10,0.00525911,0.000104038,6.00788e-07,3.26281e-10,0.00536375,0.00010524,6.01767e-07,9.926e-10,0.00546959,0.000106447,6.04745e-07,3.59933e-10,0.00557664,0.000107657,6.05824e-07,8.2728e-10,0.0056849,0.000108871,6.08306e-07,5.21898e-10,0.00579438,0.00011009,6.09872e-07,8.10492e-10,0.00590508,0.000111312,6.12303e-07,4.27046e-10,0.00601701,0.000112538,6.13585e-07,7.40878e-10,0.00613016,0.000113767,6.15807e-07,8.00469e-10,0.00624454,0.000115001,6.18209e-07,2.48178e-10,0.00636016,0.000116238,6.18953e-07,1.00073e-09,0.00647702,0.000117479,6.21955e-07,4.05654e-10,0.00659512,0.000118724,6.23172e-07,6.36192e-10,0.00671447,0.000119973,6.25081e-07,7.74927e-10,0.00683507,0.000121225,6.27406e-07,4.54975e-10,0.00695692,0.000122481,6.28771e-07,6.64841e-10,0.00708003,0.000123741,6.30765e-07,6.10972e-10,0.00720441,0.000125004,6.32598e-07,6.16543e-10,0.00733004,0.000126271,6.34448e-07,6.48204e-10,0.00745695,0.000127542,6.36392e-07,5.15835e-10,0.00758513,0.000128816,6.3794e-07,5.48103e-10,0.00771458,0.000130094,6.39584e-07,1.01706e-09,0.00784532,0.000131376,6.42635e-07,4.0283e-11,0.00797734,0.000132661,6.42756e-07,6.84471e-10,0.00811064,0.000133949,6.4481e-07,9.47144e-10,0.00824524,0.000135241,6.47651e-07,1.83472e-10,0.00838112,0.000136537,6.48201e-07,1.11296e-09,0.00851831,0.000137837,6.5154e-07,2.13163e-11,0.0086568,0.00013914,6.51604e-07,6.64462e-10,0.00879659,0.000140445,6.53598e-07,1.04613e-09,0.00893769,0.000141756,6.56736e-07,-1.92377e-10,0.0090801,0.000143069,6.56159e-07,1.58601e-09,0.00922383,0.000144386,6.60917e-07,-5.63754e-10,0.00936888,0.000145706,6.59226e-07,1.60033e-09,0.00951524,0.000147029,6.64027e-07,-2.49543e-10,0.00966294,0.000148356,6.63278e-07,1.26043e-09,0.00981196,0.000149687,6.67059e-07,-1.35572e-10,0.00996231,0.00015102,6.66653e-07,1.14458e-09,0.010114,0.000152357,6.70086e-07,2.13864e-10,0.010267,0.000153698,6.70728e-07,7.93856e-10,0.0104214,0.000155042,6.73109e-07,3.36077e-10,0.0105771,0.000156389,6.74118e-07,6.55765e-10,0.0107342,0.000157739,6.76085e-07,7.66211e-10,0.0108926,0.000159094,6.78384e-07,4.66116e-12,0.0110524,0.000160451,6.78398e-07,1.07775e-09,0.0112135,0.000161811,6.81631e-07,3.41023e-10,0.011376,0.000163175,6.82654e-07,3.5205e-10,0.0115398,0.000164541,6.8371e-07,1.04473e-09,0.0117051,0.000165912,6.86844e-07,1.25757e-10,0.0118717,0.000167286,6.87222e-07,3.14818e-10,0.0120396,0.000168661,6.88166e-07,1.40886e-09,0.012209,0.000170042,6.92393e-07,-3.62244e-10,0.0123797,0.000171425,6.91306e-07,9.71397e-10,0.0125518,0.000172811,6.9422e-07,2.02003e-10,0.0127253,0.0001742,6.94826e-07,1.01448e-09,0.0129002,0.000175593,6.97869e-07,3.96653e-10,0.0130765,0.00017699,6.99059e-07,1.92927e-10,0.0132542,0.000178388,6.99638e-07,6.94305e-10,0.0134333,0.00017979,7.01721e-07,7.55108e-10,0.0136138,0.000181195,7.03986e-07,1.05918e-11,0.0137957,0.000182603,7.04018e-07,1.06513e-09,0.013979,0.000184015,7.07214e-07,3.85512e-10,0.0141637,0.00018543,7.0837e-07,1.86769e-10,0.0143499,0.000186848,7.0893e-07,7.30116e-10,0.0145374,0.000188268,7.11121e-07,6.17983e-10,0.0147264,0.000189692,7.12975e-07,5.23282e-10,0.0149168,0.000191119,7.14545e-07,8.28398e-11,0.0151087,0.000192549,7.14793e-07,1.0081e-09,0.0153019,0.000193981,7.17817e-07,5.41244e-10,0.0154966,0.000195418,7.19441e-07,-3.7907e-10,0.0156928,0.000196856,7.18304e-07,1.90641e-09,0.0158903,0.000198298,7.24023e-07,-7.27387e-10,0.0160893,0.000199744,7.21841e-07,1.00317e-09,0.0162898,0.000201191,7.24851e-07,4.39949e-10,0.0164917,0.000202642,7.2617e-07,9.6234e-10,0.0166951,0.000204097,7.29057e-07,-5.64019e-10,0.0168999,0.000205554,7.27365e-07,1.29374e-09,0.0171062,0.000207012,7.31247e-07,9.77025e-10,0.017314,0.000208478,7.34178e-07,-1.47651e-09,0.0175232,0.000209942,7.29748e-07,3.06636e-09,0.0177338,0.00021141,7.38947e-07,-1.47573e-09,0.017946,0.000212884,7.3452e-07,9.7386e-10,0.0181596,0.000214356,7.37442e-07,1.30562e-09,0.0183747,0.000215835,7.41358e-07,-6.08376e-10,0.0185913,0.000217315,7.39533e-07,1.12785e-09,0.0188093,0.000218798,7.42917e-07,-1.77711e-10,0.0190289,0.000220283,7.42384e-07,1.44562e-09,0.0192499,0.000221772,7.46721e-07,-1.68825e-11,0.0194724,0.000223266,7.4667e-07,4.84533e-10,0.0196964,0.000224761,7.48124e-07,-5.85298e-11,0.0199219,0.000226257,7.47948e-07,1.61217e-09,0.0201489,0.000227757,7.52785e-07,-8.02136e-10,0.0203775,0.00022926,7.50378e-07,1.59637e-09,0.0206075,0.000230766,7.55167e-07,4.47168e-12,0.020839,0.000232276,7.55181e-07,2.48387e-10,0.021072,0.000233787,7.55926e-07,8.6474e-10,0.0213066,0.000235302,7.5852e-07,1.78299e-11,0.0215426,0.000236819,7.58573e-07,9.26567e-10,0.0217802,0.000238339,7.61353e-07,1.34529e-12,0.0220193,0.000239862,7.61357e-07,9.30659e-10,0.0222599,0.000241387,7.64149e-07,1.34529e-12,0.0225021,0.000242915,7.64153e-07,9.26567e-10,0.0227458,0.000244447,7.66933e-07,1.76215e-11,0.022991,0.00024598,7.66986e-07,8.65536e-10,0.0232377,0.000247517,7.69582e-07,2.45677e-10,0.023486,0.000249057,7.70319e-07,1.44193e-11,0.0237358,0.000250598,7.70363e-07,1.55918e-09,0.0239872,0.000252143,7.7504e-07,-6.63173e-10,0.0242401,0.000253691,7.73051e-07,1.09357e-09,0.0244946,0.000255241,7.76331e-07,1.41919e-11,0.0247506,0.000256793,7.76374e-07,7.12248e-10,0.0250082,0.000258348,7.78511e-07,8.62049e-10,0.0252673,0.000259908,7.81097e-07,-4.35061e-10,0.025528,0.000261469,7.79792e-07,8.7825e-10,0.0257902,0.000263031,7.82426e-07,6.47181e-10,0.0260541,0.000264598,7.84368e-07,2.58448e-10,0.0263194,0.000266167,7.85143e-07,1.81558e-10,0.0265864,0.000267738,7.85688e-07,8.78041e-10,0.0268549,0.000269312,7.88322e-07,3.15102e-11,0.027125,0.000270889,7.88417e-07,8.58525e-10,0.0273967,0.000272468,7.90992e-07,2.59812e-10,0.02767,0.000274051,7.91772e-07,-3.5224e-11,0.0279448,0.000275634,7.91666e-07,1.74377e-09,0.0282212,0.000277223,7.96897e-07,-1.35196e-09,0.0284992,0.000278813,7.92841e-07,1.80141e-09,0.0287788,0.000280404,7.98246e-07,-2.65629e-10,0.0290601,0.000281999,7.97449e-07,1.12374e-09,0.0293428,0.000283598,8.0082e-07,-5.04106e-10,0.0296272,0.000285198,7.99308e-07,8.92764e-10,0.0299132,0.000286799,8.01986e-07,6.58379e-10,0.0302008,0.000288405,8.03961e-07,1.98971e-10,0.0304901,0.000290014,8.04558e-07,4.08382e-10,0.0307809,0.000291624,8.05783e-07,3.01839e-11,0.0310733,0.000293236,8.05874e-07,1.33343e-09,0.0313673,0.000294851,8.09874e-07,2.2419e-10,0.031663,0.000296472,8.10547e-07,-3.67606e-10,0.0319603,0.000298092,8.09444e-07,1.24624e-09,0.0322592,0.000299714,8.13182e-07,-8.92025e-10,0.0325597,0.000301338,8.10506e-07,2.32183e-09,0.0328619,0.000302966,8.17472e-07,-9.44719e-10,0.0331657,0.000304598,8.14638e-07,1.45703e-09,0.0334711,0.000306232,8.19009e-07,-1.15805e-09,0.0337781,0.000307866,8.15535e-07,3.17507e-09,0.0340868,0.000309507,8.2506e-07,-4.09161e-09,0.0343971,0.000311145,8.12785e-07,5.74079e-09,0.0347091,0.000312788,8.30007e-07,-3.97034e-09,0.0350227,0.000314436,8.18096e-07,2.68985e-09,0.035338,0.00031608,8.26166e-07,6.61676e-10,0.0356549,0.000317734,8.28151e-07,-1.61123e-09,0.0359734,0.000319386,8.23317e-07,2.05786e-09,0.0362936,0.000321038,8.29491e-07,8.30388e-10,0.0366155,0.0003227,8.31982e-07,-1.65424e-09,0.036939,0.000324359,8.27019e-07,2.06129e-09,0.0372642,0.000326019,8.33203e-07,8.59719e-10,0.0375911,0.000327688,8.35782e-07,-1.77488e-09,0.0379196,0.000329354,8.30458e-07,2.51464e-09,0.0382498,0.000331023,8.38002e-07,-8.33135e-10,0.0385817,0.000332696,8.35502e-07,8.17825e-10,0.0389152,0.00033437,8.37956e-07,1.28718e-09,0.0392504,0.00033605,8.41817e-07,-2.2413e-09,0.0395873,0.000337727,8.35093e-07,3.95265e-09,0.0399258,0.000339409,8.46951e-07,-2.39332e-09,0.0402661,0.000341095,8.39771e-07,1.89533e-09,0.040608,0.000342781,8.45457e-07,-1.46271e-09,0.0409517,0.000344467,8.41069e-07,3.95554e-09,0.041297,0.000346161,8.52936e-07,-3.18369e-09,0.041644,0.000347857,8.43385e-07,1.32873e-09,0.0419927,0.000349548,8.47371e-07,1.59402e-09,0.0423431,0.000351248,8.52153e-07,-2.54336e-10,0.0426952,0.000352951,8.5139e-07,-5.76676e-10,0.043049,0.000354652,8.4966e-07,2.56114e-09,0.0434045,0.000356359,8.57343e-07,-2.21744e-09,0.0437617,0.000358067,8.50691e-07,2.58344e-09,0.0441206,0.000359776,8.58441e-07,-6.65826e-10,0.0444813,0.000361491,8.56444e-07,7.99218e-11,0.0448436,0.000363204,8.56684e-07,3.46063e-10,0.0452077,0.000364919,8.57722e-07,2.26116e-09,0.0455734,0.000366641,8.64505e-07,-1.94005e-09,0.045941,0.000368364,8.58685e-07,1.77384e-09,0.0463102,0.000370087,8.64007e-07,-1.43005e-09,0.0466811,0.000371811,8.59717e-07,3.94634e-09,0.0470538,0.000373542,8.71556e-07,-3.17946e-09,0.0474282,0.000375276,8.62017e-07,1.32104e-09,0.0478043,0.000377003,8.6598e-07,1.62045e-09,0.0481822,0.00037874,8.70842e-07,-3.52297e-10,0.0485618,0.000380481,8.69785e-07,-2.11211e-10,0.0489432,0.00038222,8.69151e-07,1.19716e-09,0.0493263,0.000383962,8.72743e-07,-8.52026e-10,0.0497111,0.000385705,8.70187e-07,2.21092e-09,0.0500977,0.000387452,8.76819e-07,-5.41339e-10,0.050486,0.000389204,8.75195e-07,-4.5361e-11,0.0508761,0.000390954,8.75059e-07,7.22669e-10,0.0512679,0.000392706,8.77227e-07,8.79936e-10,0.0516615,0.000394463,8.79867e-07,-5.17048e-10,0.0520568,0.000396222,8.78316e-07,1.18833e-09,0.0524539,0.000397982,8.81881e-07,-5.11022e-10,0.0528528,0.000399744,8.80348e-07,8.55683e-10,0.0532534,0.000401507,8.82915e-07,8.13562e-10,0.0536558,0.000403276,8.85356e-07,-3.84603e-10,0.05406,0.000405045,8.84202e-07,7.24962e-10,0.0544659,0.000406816,8.86377e-07,1.20986e-09,0.0548736,0.000408592,8.90006e-07,-1.83896e-09,0.0552831,0.000410367,8.84489e-07,2.42071e-09,0.0556944,0.000412143,8.91751e-07,-3.93413e-10,0.0561074,0.000413925,8.90571e-07,-8.46967e-10,0.0565222,0.000415704,8.8803e-07,3.78122e-09,0.0569388,0.000417491,8.99374e-07,-3.1021e-09,0.0573572,0.000419281,8.90068e-07,1.17658e-09,0.0577774,0.000421064,8.93597e-07,2.12117e-09,0.0581993,0.000422858,8.99961e-07,-2.21068e-09,0.0586231,0.000424651,8.93329e-07,2.9961e-09,0.0590486,0.000426447,9.02317e-07,-2.32311e-09,0.059476,0.000428244,8.95348e-07,2.57122e-09,0.0599051,0.000430043,9.03062e-07,-5.11098e-10,0.0603361,0.000431847,9.01528e-07,-5.27166e-10,0.0607688,0.000433649,8.99947e-07,2.61984e-09,0.0612034,0.000435457,9.07806e-07,-2.50141e-09,0.0616397,0.000437265,9.00302e-07,3.66045e-09,0.0620779,0.000439076,9.11283e-07,-4.68977e-09,0.0625179,0.000440885,8.97214e-07,7.64783e-09,0.0629597,0.000442702,9.20158e-07,-7.27499e-09,0.0634033,0.000444521,8.98333e-07,6.55113e-09,0.0638487,0.000446337,9.17986e-07,-4.02844e-09,0.0642959,0.000448161,9.05901e-07,2.11196e-09,0.064745,0.000449979,9.12236e-07,3.03125e-09,0.0651959,0.000451813,9.2133e-07,-6.78648e-09,0.0656486,0.000453635,9.00971e-07,9.21375e-09,0.0661032,0.000455464,9.28612e-07,-7.71684e-09,0.0665596,0.000457299,9.05462e-07,6.7522e-09,0.0670178,0.00045913,9.25718e-07,-4.3907e-09,0.0674778,0.000460968,9.12546e-07,3.36e-09,0.0679397,0.000462803,9.22626e-07,-1.59876e-09,0.0684034,0.000464644,9.1783e-07,3.0351e-09,0.068869,0.000466488,9.26935e-07,-3.09101e-09,0.0693364,0.000468333,9.17662e-07,1.8785e-09,0.0698057,0.000470174,9.23298e-07,3.02733e-09,0.0702768,0.00047203,9.3238e-07,-6.53722e-09,0.0707497,0.000473875,9.12768e-07,8.22054e-09,0.0712245,0.000475725,9.37429e-07,-3.99325e-09,0.0717012,0.000477588,9.2545e-07,3.01839e-10,0.0721797,0.00047944,9.26355e-07,2.78597e-09,0.0726601,0.000481301,9.34713e-07,-3.99507e-09,0.0731423,0.000483158,9.22728e-07,5.7435e-09,0.0736264,0.000485021,9.39958e-07,-4.07776e-09,0.0741123,0.000486888,9.27725e-07,3.11695e-09,0.0746002,0.000488753,9.37076e-07,-9.39394e-10,0.0750898,0.000490625,9.34258e-07,6.4055e-10,0.0755814,0.000492495,9.3618e-07,-1.62265e-09,0.0760748,0.000494363,9.31312e-07,5.84995e-09,0.0765701,0.000496243,9.48861e-07,-6.87601e-09,0.0770673,0.00049812,9.28233e-07,6.75296e-09,0.0775664,0.000499997,9.48492e-07,-5.23467e-09,0.0780673,0.000501878,9.32788e-07,6.73523e-09,0.0785701,0.000503764,9.52994e-07,-6.80514e-09,0.0790748,0.000505649,9.32578e-07,5.5842e-09,0.0795814,0.000507531,9.49331e-07,-6.30583e-10,0.0800899,0.000509428,9.47439e-07,-3.0618e-09,0.0806003,0.000511314,9.38254e-07,5.4273e-09,0.0811125,0.000513206,9.54536e-07,-3.74627e-09,0.0816267,0.000515104,9.43297e-07,2.10713e-09,0.0821427,0.000516997,9.49618e-07,2.76839e-09,0.0826607,0.000518905,9.57924e-07,-5.73006e-09,0.0831805,0.000520803,9.40733e-07,5.25072e-09,0.0837023,0.0005227,9.56486e-07,-3.71718e-10,0.084226,0.000524612,9.5537e-07,-3.76404e-09,0.0847515,0.000526512,9.44078e-07,7.97735e-09,0.085279,0.000528424,9.6801e-07,-5.79367e-09,0.0858084,0.000530343,9.50629e-07,2.96268e-10,0.0863397,0.000532245,9.51518e-07,4.6086e-09,0.0868729,0.000534162,9.65344e-07,-3.82947e-09,0.087408,0.000536081,9.53856e-07,3.25861e-09,0.087945,0.000537998,9.63631e-07,-1.7543e-09,0.088484,0.00053992,9.58368e-07,3.75849e-09,0.0890249,0.000541848,9.69644e-07,-5.82891e-09,0.0895677,0.00054377,9.52157e-07,4.65593e-09,0.0901124,0.000545688,9.66125e-07,2.10643e-09,0.0906591,0.000547627,9.72444e-07,-5.63099e-09,0.0912077,0.000549555,9.55551e-07,5.51627e-09,0.0917582,0.000551483,9.721e-07,-1.53292e-09,0.0923106,0.000553422,9.67501e-07,6.15311e-10,0.092865,0.000555359,9.69347e-07,-9.28291e-10,0.0934213,0.000557295,9.66562e-07,3.09774e-09,0.0939796,0.000559237,9.75856e-07,-4.01186e-09,0.0945398,0.000561177,9.6382e-07,5.49892e-09,0.095102,0.000563121,9.80317e-07,-3.08258e-09,0.0956661,0.000565073,9.71069e-07,-6.19176e-10,0.0962321,0.000567013,9.69212e-07,5.55932e-09,0.0968001,0.000568968,9.8589e-07,-6.71704e-09,0.09737,0.00057092,9.65738e-07,6.40762e-09,0.0979419,0.00057287,9.84961e-07,-4.0122e-09,0.0985158,0.000574828,9.72925e-07,2.19059e-09,0.0990916,0.000576781,9.79496e-07,2.70048e-09,0.0996693,0.000578748,9.87598e-07,-5.54193e-09,0.100249,0.000580706,9.70972e-07,4.56597e-09,0.100831,0.000582662,9.8467e-07,2.17923e-09,0.101414,0.000584638,9.91208e-07,-5.83232e-09,0.102,0.000586603,9.73711e-07,6.24884e-09,0.102588,0.000588569,9.92457e-07,-4.26178e-09,0.103177,0.000590541,9.79672e-07,3.34781e-09,0.103769,0.00059251,9.89715e-07,-1.67904e-09,0.104362,0.000594485,9.84678e-07,3.36839e-09,0.104958,0.000596464,9.94783e-07,-4.34397e-09,0.105555,0.000598441,9.81751e-07,6.55696e-09,0.106155,0.000600424,1.00142e-06,-6.98272e-09,0.106756,0.000602406,9.80474e-07,6.4728e-09,0.107359,0.000604386,9.99893e-07,-4.00742e-09,0.107965,0.000606374,9.8787e-07,2.10654e-09,0.108572,0.000608356,9.9419e-07,3.0318e-09,0.109181,0.000610353,1.00329e-06,-6.7832e-09,0.109793,0.00061234,9.82936e-07,9.1998e-09,0.110406,0.000614333,1.01054e-06,-7.6642e-09,0.111021,0.000616331,9.87543e-07,6.55579e-09,0.111639,0.000618326,1.00721e-06,-3.65791e-09,0.112258,0.000620329,9.96236e-07,6.25467e-10,0.112879,0.000622324,9.98113e-07,1.15593e-09,0.113503,0.000624323,1.00158e-06,2.20158e-09,0.114128,0.000626333,1.00819e-06,-2.51191e-09,0.114755,0.000628342,1.00065e-06,3.95517e-10,0.115385,0.000630345,1.00184e-06,9.29807e-10,0.116016,0.000632351,1.00463e-06,3.33599e-09,0.116649,0.00063437,1.01463e-06,-6.82329e-09,0.117285,0.000636379,9.94163e-07,9.05595e-09,0.117922,0.000638395,1.02133e-06,-7.04862e-09,0.118562,0.000640416,1.00019e-06,4.23737e-09,0.119203,0.000642429,1.0129e-06,-2.45033e-09,0.119847,0.000644448,1.00555e-06,5.56395e-09,0.120492,0.000646475,1.02224e-06,-4.9043e-09,0.121139,0.000648505,1.00753e-06,-8.47952e-10,0.121789,0.000650518,1.00498e-06,8.29622e-09,0.122441,0.000652553,1.02987e-06,-9.98538e-09,0.123094,0.000654582,9.99914e-07,9.2936e-09,0.12375,0.00065661,1.02779e-06,-4.83707e-09,0.124407,0.000658651,1.01328e-06,2.60411e-09,0.125067,0.000660685,1.0211e-06,-5.57945e-09,0.125729,0.000662711,1.00436e-06,1.22631e-08,0.126392,0.000664756,1.04115e-06,-1.36704e-08,0.127058,0.000666798,1.00014e-06,1.26161e-08,0.127726,0.000668836,1.03798e-06,-6.99155e-09,0.128396,0.000670891,1.01701e-06,4.48836e-10,0.129068,0.000672926,1.01836e-06,5.19606e-09,0.129742,0.000674978,1.03394e-06,-6.3319e-09,0.130418,0.000677027,1.01495e-06,5.2305e-09,0.131096,0.000679073,1.03064e-06,3.11123e-10,0.131776,0.000681135,1.03157e-06,-6.47511e-09,0.132458,0.000683179,1.01215e-06,1.06882e-08,0.133142,0.000685235,1.04421e-06,-6.47519e-09,0.133829,0.000687304,1.02479e-06,3.11237e-10,0.134517,0.000689355,1.02572e-06,5.23035e-09,0.135207,0.000691422,1.04141e-06,-6.3316e-09,0.1359,0.000693486,1.02242e-06,5.19484e-09,0.136594,0.000695546,1.038e-06,4.53497e-10,0.137291,0.000697623,1.03936e-06,-7.00891e-09,0.137989,0.000699681,1.01834e-06,1.2681e-08,0.13869,0.000701756,1.05638e-06,-1.39128e-08,0.139393,0.000703827,1.01464e-06,1.31679e-08,0.140098,0.000705896,1.05414e-06,-8.95659e-09,0.140805,0.000707977,1.02727e-06,7.75742e-09,0.141514,0.000710055,1.05055e-06,-7.17182e-09,0.142225,0.000712135,1.02903e-06,6.02862e-09,0.142938,0.000714211,1.04712e-06,-2.04163e-09,0.143653,0.000716299,1.04099e-06,2.13792e-09,0.144371,0.000718387,1.04741e-06,-6.51009e-09,0.14509,0.000720462,1.02787e-06,9.00123e-09,0.145812,0.000722545,1.05488e-06,3.07523e-10,0.146535,0.000724656,1.0558e-06,-1.02312e-08,0.147261,0.000726737,1.02511e-06,1.0815e-08,0.147989,0.000728819,1.05755e-06,-3.22681e-09,0.148719,0.000730925,1.04787e-06,2.09244e-09,0.14945,0.000733027,1.05415e-06,-5.143e-09,0.150185,0.00073512,1.03872e-06,3.57844e-09,0.150921,0.000737208,1.04946e-06,5.73027e-09,0.151659,0.000739324,1.06665e-06,-1.15983e-08,0.152399,0.000741423,1.03185e-06,1.08605e-08,0.153142,0.000743519,1.06443e-06,-2.04106e-09,0.153886,0.000745642,1.05831e-06,-2.69642e-09,0.154633,0.00074775,1.05022e-06,-2.07425e-09,0.155382,0.000749844,1.044e-06,1.09934e-08,0.156133,0.000751965,1.07698e-06,-1.20972e-08,0.156886,0.000754083,1.04069e-06,7.59288e-09,0.157641,0.000756187,1.06347e-06,-3.37305e-09,0.158398,0.000758304,1.05335e-06,5.89921e-09,0.159158,0.000760428,1.07104e-06,-5.32248e-09,0.159919,0.000762554,1.05508e-06,4.8927e-10,0.160683,0.000764666,1.05654e-06,3.36547e-09,0.161448,0.000766789,1.06664e-06,9.50081e-10,0.162216,0.000768925,1.06949e-06,-7.16568e-09,0.162986,0.000771043,1.04799e-06,1.28114e-08,0.163758,0.000773177,1.08643e-06,-1.42774e-08,0.164533,0.000775307,1.0436e-06,1.44956e-08,0.165309,0.000777438,1.08708e-06,-1.39025e-08,0.166087,0.00077957,1.04538e-06,1.13118e-08,0.166868,0.000781695,1.07931e-06,-1.54224e-09,0.167651,0.000783849,1.07468e-06,-5.14312e-09,0.168436,0.000785983,1.05925e-06,7.21381e-09,0.169223,0.000788123,1.0809e-06,-8.81096e-09,0.170012,0.000790259,1.05446e-06,1.31289e-08,0.170803,0.000792407,1.09385e-06,-1.39022e-08,0.171597,0.000794553,1.05214e-06,1.26775e-08,0.172392,0.000796695,1.09018e-06,-7.00557e-09,0.17319,0.000798855,1.06916e-06,4.43796e-10,0.17399,0.000800994,1.07049e-06,5.23031e-09,0.174792,0.000803151,1.08618e-06,-6.46397e-09,0.175596,0.000805304,1.06679e-06,5.72444e-09,0.176403,0.000807455,1.08396e-06,-1.53254e-09,0.177211,0.000809618,1.07937e-06,4.05673e-10,0.178022,0.000811778,1.08058e-06,-9.01916e-11,0.178835,0.000813939,1.08031e-06,-4.49821e-11,0.17965,0.000816099,1.08018e-06,2.70234e-10,0.180467,0.00081826,1.08099e-06,-1.03603e-09,0.181286,0.000820419,1.07788e-06,3.87392e-09,0.182108,0.000822587,1.0895e-06,4.41522e-10,0.182932,0.000824767,1.09083e-06,-5.63997e-09,0.183758,0.000826932,1.07391e-06,7.21707e-09,0.184586,0.000829101,1.09556e-06,-8.32718e-09,0.185416,0.000831267,1.07058e-06,1.11907e-08,0.186248,0.000833442,1.10415e-06,-6.63336e-09,0.187083,0.00083563,1.08425e-06,4.41484e-10,0.187919,0.0008378,1.08557e-06,4.86754e-09,0.188758,0.000839986,1.10017e-06,-5.01041e-09,0.189599,0.000842171,1.08514e-06,2.72811e-10,0.190443,0.000844342,1.08596e-06,3.91916e-09,0.191288,0.000846526,1.09772e-06,-1.04819e-09,0.192136,0.000848718,1.09457e-06,2.73531e-10,0.192985,0.000850908,1.0954e-06,-4.58916e-11,0.193837,0.000853099,1.09526e-06,-9.01158e-11,0.194692,0.000855289,1.09499e-06,4.06506e-10,0.195548,0.00085748,1.09621e-06,-1.53595e-09,0.196407,0.000859668,1.0916e-06,5.73717e-09,0.197267,0.000861869,1.10881e-06,-6.51164e-09,0.19813,0.000864067,1.08928e-06,5.40831e-09,0.198995,0.000866261,1.1055e-06,-2.20401e-10,0.199863,0.000868472,1.10484e-06,-4.52652e-09,0.200732,0.000870668,1.09126e-06,3.42508e-09,0.201604,0.000872861,1.10153e-06,5.72762e-09,0.202478,0.000875081,1.11872e-06,-1.14344e-08,0.203354,0.000877284,1.08441e-06,1.02076e-08,0.204233,0.000879484,1.11504e-06,4.06355e-10,0.205113,0.000881715,1.11626e-06,-1.18329e-08,0.205996,0.000883912,1.08076e-06,1.71227e-08,0.206881,0.000886125,1.13213e-06,-1.19546e-08,0.207768,0.000888353,1.09626e-06,8.93465e-10,0.208658,0.000890548,1.09894e-06,8.38062e-09,0.209549,0.000892771,1.12408e-06,-4.61353e-09,0.210443,0.000895006,1.11024e-06,-4.82756e-09,0.211339,0.000897212,1.09576e-06,9.02245e-09,0.212238,0.00089943,1.12283e-06,-1.45997e-09,0.213138,0.000901672,1.11845e-06,-3.18255e-09,0.214041,0.000903899,1.1089e-06,-7.11073e-10,0.214946,0.000906115,1.10677e-06,6.02692e-09,0.215853,0.000908346,1.12485e-06,-8.49548e-09,0.216763,0.00091057,1.09936e-06,1.30537e-08,0.217675,0.000912808,1.13852e-06,-1.3917e-08,0.218588,0.000915044,1.09677e-06,1.28121e-08,0.219505,0.000917276,1.13521e-06,-7.5288e-09,0.220423,0.000919523,1.11262e-06,2.40205e-09,0.221344,0.000921756,1.11983e-06,-2.07941e-09,0.222267,0.000923989,1.11359e-06,5.91551e-09,0.223192,0.000926234,1.13134e-06,-6.68149e-09,0.224119,0.000928477,1.11129e-06,5.90929e-09,0.225049,0.000930717,1.12902e-06,-2.05436e-09,0.22598,0.000932969,1.12286e-06,2.30807e-09,0.226915,0.000935222,1.12978e-06,-7.17796e-09,0.227851,0.00093746,1.10825e-06,1.15028e-08,0.228789,0.000939711,1.14276e-06,-9.03083e-09,0.22973,0.000941969,1.11566e-06,9.71932e-09,0.230673,0.00094423,1.14482e-06,-1.49452e-08,0.231619,0.000946474,1.09998e-06,2.02591e-08,0.232566,0.000948735,1.16076e-06,-2.13879e-08,0.233516,0.000950993,1.0966e-06,2.05888e-08,0.234468,0.000953247,1.15837e-06,-1.62642e-08,0.235423,0.000955515,1.10957e-06,1.46658e-08,0.236379,0.000957779,1.15357e-06,-1.25966e-08,0.237338,0.000960048,1.11578e-06,5.91793e-09,0.238299,0.000962297,1.13353e-06,3.82602e-09,0.239263,0.000964576,1.14501e-06,-6.3208e-09,0.240229,0.000966847,1.12605e-06,6.55613e-09,0.241197,0.000969119,1.14572e-06,-5.00268e-09,0.242167,0.000971395,1.13071e-06,-1.44659e-09,0.243139,0.000973652,1.12637e-06,1.07891e-08,0.244114,0.000975937,1.15874e-06,-1.19073e-08,0.245091,0.000978219,1.12302e-06,7.03782e-09,0.246071,0.000980486,1.14413e-06,-1.34276e-09,0.247052,0.00098277,1.1401e-06,-1.66669e-09,0.248036,0.000985046,1.1351e-06,8.00935e-09,0.249022,0.00098734,1.15913e-06,-1.54694e-08,0.250011,0.000989612,1.11272e-06,2.4066e-08,0.251002,0.000991909,1.18492e-06,-2.11901e-08,0.251995,0.000994215,1.12135e-06,1.08973e-09,0.25299,0.000996461,1.12462e-06,1.68311e-08,0.253988,0.000998761,1.17511e-06,-8.8094e-09,0.254987,0.00100109,1.14868e-06,-1.13958e-08,0.25599,0.00100335,1.1145e-06,2.45902e-08,0.256994,0.00100565,1.18827e-06,-2.73603e-08,0.258001,0.00100795,1.10618e-06,2.52464e-08,0.25901,0.00101023,1.18192e-06,-1.40207e-08,0.260021,0.00101256,1.13986e-06,1.03387e-09,0.261035,0.00101484,1.14296e-06,9.8853e-09,0.262051,0.00101715,1.17262e-06,-1.07726e-08,0.263069,0.00101947,1.1403e-06,3.40272e-09,0.26409,0.00102176,1.15051e-06,-2.83827e-09,0.265113,0.00102405,1.142e-06,7.95039e-09,0.266138,0.00102636,1.16585e-06,8.39047e-10,0.267166,0.00102869,1.16836e-06,-1.13066e-08,0.268196,0.00103099,1.13444e-06,1.4585e-08,0.269228,0.00103331,1.1782e-06,-1.72314e-08,0.270262,0.00103561,1.1265e-06,2.45382e-08,0.271299,0.00103794,1.20012e-06,-2.13166e-08,0.272338,0.00104028,1.13617e-06,1.12364e-09,0.273379,0.00104255,1.13954e-06,1.68221e-08,0.274423,0.00104488,1.19001e-06,-8.80736e-09,0.275469,0.00104723,1.16358e-06,-1.13948e-08,0.276518,0.00104953,1.1294e-06,2.45839e-08,0.277568,0.00105186,1.20315e-06,-2.73361e-08,0.278621,0.00105418,1.12114e-06,2.51559e-08,0.279677,0.0010565,1.19661e-06,-1.36832e-08,0.280734,0.00105885,1.15556e-06,-2.25706e-10,0.281794,0.00106116,1.15488e-06,1.45862e-08,0.282857,0.00106352,1.19864e-06,-2.83167e-08,0.283921,0.00106583,1.11369e-06,3.90759e-08,0.284988,0.00106817,1.23092e-06,-3.85801e-08,0.286058,0.00107052,1.11518e-06,2.58375e-08,0.287129,0.00107283,1.19269e-06,-5.16498e-09,0.288203,0.0010752,1.1772e-06,-5.17768e-09,0.28928,0.00107754,1.16167e-06,-3.92671e-09,0.290358,0.00107985,1.14988e-06,2.08846e-08,0.29144,0.00108221,1.21254e-06,-2.00072e-08,0.292523,0.00108458,1.15252e-06,-4.60659e-10,0.293609,0.00108688,1.15114e-06,2.18499e-08,0.294697,0.00108925,1.21669e-06,-2.73343e-08,0.295787,0.0010916,1.13468e-06,2.78826e-08,0.29688,0.00109395,1.21833e-06,-2.45915e-08,0.297975,0.00109632,1.14456e-06,1.08787e-08,0.299073,0.00109864,1.17719e-06,1.08788e-08,0.300172,0.00110102,1.20983e-06,-2.45915e-08,0.301275,0.00110337,1.13605e-06,2.78828e-08,0.302379,0.00110573,1.2197e-06,-2.73348e-08,0.303486,0.00110808,1.1377e-06,2.18518e-08,0.304595,0.00111042,1.20325e-06,-4.67556e-10,0.305707,0.00111283,1.20185e-06,-1.99816e-08,0.306821,0.00111517,1.14191e-06,2.07891e-08,0.307937,0.00111752,1.20427e-06,-3.57026e-09,0.309056,0.00111992,1.19356e-06,-6.50797e-09,0.310177,0.00112228,1.17404e-06,-2.00165e-10,0.3113,0.00112463,1.17344e-06,7.30874e-09,0.312426,0.001127,1.19536e-06,7.67424e-10,0.313554,0.00112939,1.19767e-06,-1.03784e-08,0.314685,0.00113176,1.16653e-06,1.09437e-08,0.315818,0.00113412,1.19936e-06,-3.59406e-09,0.316953,0.00113651,1.18858e-06,3.43251e-09,0.318091,0.0011389,1.19888e-06,-1.0136e-08,0.319231,0.00114127,1.16847e-06,7.30915e-09,0.320374,0.00114363,1.1904e-06,1.07018e-08,0.321518,0.00114604,1.2225e-06,-2.03137e-08,0.322666,0.00114842,1.16156e-06,1.09484e-08,0.323815,0.00115078,1.19441e-06,6.32224e-09,0.324967,0.00115319,1.21337e-06,-6.43509e-09,0.326122,0.00115559,1.19407e-06,-1.03842e-08,0.327278,0.00115795,1.16291e-06,1.81697e-08,0.328438,0.00116033,1.21742e-06,-2.6901e-09,0.329599,0.00116276,1.20935e-06,-7.40939e-09,0.330763,0.00116515,1.18713e-06,2.52533e-09,0.331929,0.00116754,1.1947e-06,-2.69191e-09,0.333098,0.00116992,1.18663e-06,8.24218e-09,0.334269,0.00117232,1.21135e-06,-4.74377e-10,0.335443,0.00117474,1.20993e-06,-6.34471e-09,0.336619,0.00117714,1.1909e-06,-3.94922e-09,0.337797,0.00117951,1.17905e-06,2.21417e-08,0.338978,0.00118193,1.24547e-06,-2.50128e-08,0.340161,0.00118435,1.17043e-06,1.8305e-08,0.341346,0.00118674,1.22535e-06,-1.84048e-08,0.342534,0.00118914,1.17013e-06,2.55121e-08,0.343725,0.00119156,1.24667e-06,-2.40389e-08,0.344917,0.00119398,1.17455e-06,1.10389e-08,0.346113,0.00119636,1.20767e-06,9.68574e-09,0.34731,0.0011988,1.23673e-06,-1.99797e-08,0.34851,0.00120122,1.17679e-06,1.06284e-08,0.349713,0.0012036,1.20867e-06,7.26868e-09,0.350917,0.00120604,1.23048e-06,-9.90072e-09,0.352125,0.00120847,1.20078e-06,2.53177e-09,0.353334,0.00121088,1.20837e-06,-2.26199e-10,0.354546,0.0012133,1.20769e-06,-1.62705e-09,0.355761,0.00121571,1.20281e-06,6.73435e-09,0.356978,0.00121813,1.22302e-06,4.49207e-09,0.358197,0.00122059,1.23649e-06,-2.47027e-08,0.359419,0.00122299,1.16238e-06,3.47142e-08,0.360643,0.00122542,1.26653e-06,-2.47472e-08,0.36187,0.00122788,1.19229e-06,4.66965e-09,0.363099,0.00123028,1.20629e-06,6.06872e-09,0.36433,0.00123271,1.2245e-06,8.57729e-10,0.365564,0.00123516,1.22707e-06,-9.49952e-09,0.366801,0.00123759,1.19858e-06,7.33792e-09,0.36804,0.00124001,1.22059e-06,9.95025e-09,0.369281,0.00124248,1.25044e-06,-1.73366e-08,0.370525,0.00124493,1.19843e-06,-2.08464e-10,0.371771,0.00124732,1.1978e-06,1.81704e-08,0.373019,0.00124977,1.25232e-06,-1.28683e-08,0.37427,0.00125224,1.21371e-06,3.50042e-09,0.375524,0.00125468,1.22421e-06,-1.1335e-09,0.37678,0.00125712,1.22081e-06,1.03345e-09,0.378038,0.00125957,1.22391e-06,-3.00023e-09,0.379299,0.00126201,1.21491e-06,1.09676e-08,0.380562,0.00126447,1.24781e-06,-1.10676e-08,0.381828,0.00126693,1.21461e-06,3.50042e-09,0.383096,0.00126937,1.22511e-06,-2.93403e-09,0.384366,0.00127181,1.21631e-06,8.23574e-09,0.385639,0.00127427,1.24102e-06,-2.06607e-10,0.386915,0.00127675,1.2404e-06,-7.40935e-09,0.388193,0.00127921,1.21817e-06,4.1761e-11,0.389473,0.00128165,1.21829e-06,7.24223e-09,0.390756,0.0012841,1.24002e-06,7.91564e-10,0.392042,0.00128659,1.2424e-06,-1.04086e-08,0.393329,0.00128904,1.21117e-06,1.10405e-08,0.39462,0.0012915,1.24429e-06,-3.951e-09,0.395912,0.00129397,1.23244e-06,4.7634e-09,0.397208,0.00129645,1.24673e-06,-1.51025e-08,0.398505,0.0012989,1.20142e-06,2.58443e-08,0.399805,0.00130138,1.27895e-06,-2.86702e-08,0.401108,0.00130385,1.19294e-06,2.92318e-08,0.402413,0.00130632,1.28064e-06,-2.86524e-08,0.403721,0.0013088,1.19468e-06,2.57731e-08,0.405031,0.00131127,1.272e-06,-1.48355e-08,0.406343,0.00131377,1.2275e-06,3.76652e-09,0.407658,0.00131623,1.23879e-06,-2.30784e-10,0.408976,0.00131871,1.2381e-06,-2.84331e-09,0.410296,0.00132118,1.22957e-06,1.16041e-08,0.411618,0.00132367,1.26438e-06,-1.37708e-08,0.412943,0.00132616,1.22307e-06,1.36768e-08,0.41427,0.00132865,1.2641e-06,-1.1134e-08,0.4156,0.00133114,1.2307e-06,1.05714e-09,0.416933,0.00133361,1.23387e-06,6.90538e-09,0.418267,0.00133609,1.25459e-06,1.12372e-09,0.419605,0.00133861,1.25796e-06,-1.14002e-08,0.420945,0.00134109,1.22376e-06,1.46747e-08,0.422287,0.00134358,1.26778e-06,-1.7496e-08,0.423632,0.00134606,1.21529e-06,2.5507e-08,0.424979,0.00134857,1.29182e-06,-2.49272e-08,0.426329,0.00135108,1.21703e-06,1.45972e-08,0.427681,0.00135356,1.26083e-06,-3.65935e-09,0.429036,0.00135607,1.24985e-06,4.00178e-11,0.430393,0.00135857,1.24997e-06,3.49917e-09,0.431753,0.00136108,1.26047e-06,-1.40366e-08,0.433116,0.00136356,1.21836e-06,2.28448e-08,0.43448,0.00136606,1.28689e-06,-1.77378e-08,0.435848,0.00136858,1.23368e-06,1.83043e-08,0.437218,0.0013711,1.28859e-06,-2.56769e-08,0.43859,0.0013736,1.21156e-06,2.47987e-08,0.439965,0.0013761,1.28595e-06,-1.39133e-08,0.441342,0.00137863,1.24421e-06,1.05202e-09,0.442722,0.00138112,1.24737e-06,9.70507e-09,0.444104,0.00138365,1.27649e-06,-1.00698e-08,0.445489,0.00138617,1.24628e-06,7.72123e-10,0.446877,0.00138867,1.24859e-06,6.98132e-09,0.448267,0.00139118,1.26954e-06,1.10477e-09,0.449659,0.00139373,1.27285e-06,-1.14003e-08,0.451054,0.00139624,1.23865e-06,1.4694e-08,0.452452,0.00139876,1.28273e-06,-1.75734e-08,0.453852,0.00140127,1.23001e-06,2.5797e-08,0.455254,0.00140381,1.3074e-06,-2.60097e-08,0.456659,0.00140635,1.22937e-06,1.86371e-08,0.458067,0.00140886,1.28529e-06,-1.8736e-08,0.459477,0.00141137,1.22908e-06,2.65048e-08,0.46089,0.00141391,1.30859e-06,-2.76784e-08,0.462305,0.00141645,1.22556e-06,2.46043e-08,0.463722,0.00141897,1.29937e-06,-1.11341e-08,0.465143,0.00142154,1.26597e-06,-9.87033e-09,0.466565,0.00142404,1.23636e-06,2.08131e-08,0.467991,0.00142657,1.2988e-06,-1.37773e-08,0.469419,0.00142913,1.25746e-06,4.49378e-09,0.470849,0.00143166,1.27094e-06,-4.19781e-09,0.472282,0.00143419,1.25835e-06,1.22975e-08,0.473717,0.00143674,1.29524e-06,-1.51902e-08,0.475155,0.00143929,1.24967e-06,1.86608e-08,0.476596,0.00144184,1.30566e-06,-2.96506e-08,0.478039,0.00144436,1.2167e-06,4.03368e-08,0.479485,0.00144692,1.33771e-06,-4.22896e-08,0.480933,0.00144947,1.21085e-06,3.94148e-08,0.482384,0.00145201,1.32909e-06,-2.59626e-08,0.483837,0.00145459,1.2512e-06,4.83124e-09,0.485293,0.0014571,1.2657e-06,6.63757e-09,0.486751,0.00145966,1.28561e-06,-1.57911e-09,0.488212,0.00146222,1.28087e-06,-3.21468e-10,0.489676,0.00146478,1.27991e-06,2.86517e-09,0.491142,0.00146735,1.2885e-06,-1.11392e-08,0.49261,0.00146989,1.25508e-06,1.18893e-08,0.494081,0.00147244,1.29075e-06,-6.61574e-09,0.495555,0.001475,1.27091e-06,1.45736e-08,0.497031,0.00147759,1.31463e-06,-2.18759e-08,0.49851,0.00148015,1.249e-06,1.33252e-08,0.499992,0.00148269,1.28897e-06,-1.62277e-09,0.501476,0.00148526,1.28411e-06,-6.83421e-09,0.502962,0.00148781,1.2636e-06,2.89596e-08,0.504451,0.00149042,1.35048e-06,-4.93997e-08,0.505943,0.00149298,1.20228e-06,4.94299e-08,0.507437,0.00149553,1.35057e-06,-2.91107e-08,0.508934,0.00149814,1.26324e-06,7.40848e-09,0.510434,0.00150069,1.28547e-06,-5.23187e-10,0.511936,0.00150326,1.2839e-06,-5.31585e-09,0.51344,0.00150581,1.26795e-06,2.17866e-08,0.514947,0.00150841,1.33331e-06,-2.22257e-08,0.516457,0.00151101,1.26663e-06,7.51178e-09,0.517969,0.00151357,1.28917e-06,-7.82128e-09,0.519484,0.00151613,1.2657e-06,2.37733e-08,0.521002,0.00151873,1.33702e-06,-2.76674e-08,0.522522,0.00152132,1.25402e-06,2.72917e-08,0.524044,0.00152391,1.3359e-06,-2.18949e-08,0.525569,0.00152652,1.27021e-06,6.83372e-10,0.527097,0.00152906,1.27226e-06,1.91613e-08,0.528628,0.00153166,1.32974e-06,-1.77241e-08,0.53016,0.00153427,1.27657e-06,-7.86963e-09,0.531696,0.0015368,1.25296e-06,4.92027e-08,0.533234,0.00153945,1.40057e-06,-6.9732e-08,0.534775,0.00154204,1.19138e-06,5.09114e-08,0.536318,0.00154458,1.34411e-06,-1.4704e-08,0.537864,0.00154722,1.3e-06,7.9048e-09,0.539413,0.00154984,1.32371e-06,-1.69152e-08,0.540964,0.00155244,1.27297e-06,1.51355e-10,0.542517,0.00155499,1.27342e-06,1.63099e-08,0.544074,0.00155758,1.32235e-06,-5.78647e-09,0.545633,0.00156021,1.30499e-06,6.83599e-09,0.547194,0.00156284,1.3255e-06,-2.15575e-08,0.548758,0.00156543,1.26083e-06,1.97892e-08,0.550325,0.00156801,1.32019e-06,2.00525e-09,0.551894,0.00157065,1.32621e-06,-2.78103e-08,0.553466,0.00157322,1.24278e-06,4.96314e-08,0.555041,0.00157586,1.39167e-06,-5.1506e-08,0.556618,0.00157849,1.23716e-06,3.71835e-08,0.558198,0.00158107,1.34871e-06,-3.76233e-08,0.55978,0.00158366,1.23584e-06,5.37052e-08,0.561365,0.00158629,1.39695e-06,-5.79884e-08,0.562953,0.00158891,1.22299e-06,5.90392e-08,0.564543,0.00159153,1.4001e-06,-5.89592e-08,0.566136,0.00159416,1.22323e-06,5.7588e-08,0.567731,0.00159678,1.39599e-06,-5.21835e-08,0.569329,0.00159941,1.23944e-06,3.19369e-08,0.57093,0.00160199,1.33525e-06,-1.59594e-08,0.572533,0.00160461,1.28737e-06,3.19006e-08,0.574139,0.00160728,1.38307e-06,-5.20383e-08,0.575748,0.00160989,1.22696e-06,5.70431e-08,0.577359,0.00161251,1.39809e-06,-5.69247e-08,0.578973,0.00161514,1.22731e-06,5.14463e-08,0.580589,0.00161775,1.38165e-06,-2.9651e-08,0.582208,0.00162042,1.2927e-06,7.55339e-09,0.58383,0.00162303,1.31536e-06,-5.62636e-10,0.585455,0.00162566,1.31367e-06,-5.30281e-09,0.587081,0.00162827,1.29776e-06,2.17738e-08,0.588711,0.00163093,1.36309e-06,-2.21875e-08,0.590343,0.00163359,1.29652e-06,7.37164e-09,0.591978,0.00163621,1.31864e-06,-7.29907e-09,0.593616,0.00163882,1.29674e-06,2.18247e-08,0.595256,0.00164148,1.36221e-06,-2.03952e-08,0.596899,0.00164414,1.30103e-06,1.51241e-10,0.598544,0.00164675,1.30148e-06,1.97902e-08,0.600192,0.00164941,1.36085e-06,-1.97074e-08,0.601843,0.00165207,1.30173e-06,-5.65175e-10,0.603496,0.00165467,1.30004e-06,2.1968e-08,0.605152,0.00165734,1.36594e-06,-2.77024e-08,0.606811,0.00165999,1.28283e-06,2.92369e-08,0.608472,0.00166264,1.37054e-06,-2.96407e-08,0.610136,0.00166529,1.28162e-06,2.97215e-08,0.611803,0.00166795,1.37079e-06,-2.96408e-08,0.613472,0.0016706,1.28186e-06,2.92371e-08,0.615144,0.00167325,1.36957e-06,-2.77031e-08,0.616819,0.00167591,1.28647e-06,2.19708e-08,0.618496,0.00167855,1.35238e-06,-5.75407e-10,0.620176,0.00168125,1.35065e-06,-1.9669e-08,0.621858,0.00168389,1.29164e-06,1.96468e-08,0.623544,0.00168653,1.35058e-06,6.86403e-10,0.625232,0.00168924,1.35264e-06,-2.23924e-08,0.626922,0.00169187,1.28547e-06,2.92788e-08,0.628615,0.00169453,1.3733e-06,-3.51181e-08,0.630311,0.00169717,1.26795e-06,5.15889e-08,0.63201,0.00169987,1.42272e-06,-5.2028e-08,0.633711,0.00170255,1.26663e-06,3.73139e-08,0.635415,0.0017052,1.37857e-06,-3.76227e-08,0.637121,0.00170784,1.2657e-06,5.35722e-08,0.63883,0.00171054,1.42642e-06,-5.74567e-08,0.640542,0.00171322,1.25405e-06,5.70456e-08,0.642257,0.0017159,1.42519e-06,-5.15163e-08,0.643974,0.00171859,1.27064e-06,2.98103e-08,0.645694,0.00172122,1.36007e-06,-8.12016e-09,0.647417,0.00172392,1.33571e-06,2.67039e-09,0.649142,0.0017266,1.34372e-06,-2.56152e-09,0.65087,0.00172928,1.33604e-06,7.57571e-09,0.6526,0.00173197,1.35876e-06,-2.77413e-08,0.654334,0.00173461,1.27554e-06,4.3785e-08,0.65607,0.00173729,1.40689e-06,-2.81896e-08,0.657808,0.00174002,1.32233e-06,9.36893e-09,0.65955,0.00174269,1.35043e-06,-9.28617e-09,0.661294,0.00174536,1.32257e-06,2.77757e-08,0.66304,0.00174809,1.4059e-06,-4.2212e-08,0.66479,0.00175078,1.27926e-06,2.1863e-08,0.666542,0.0017534,1.34485e-06,1.43648e-08,0.668297,0.00175613,1.38795e-06,-1.97177e-08,0.670054,0.00175885,1.3288e-06,4.90115e-09,0.671814,0.00176152,1.3435e-06,1.13232e-10,0.673577,0.00176421,1.34384e-06,-5.3542e-09,0.675343,0.00176688,1.32778e-06,2.13035e-08,0.677111,0.0017696,1.39169e-06,-2.02553e-08,0.678882,0.00177232,1.33092e-06,1.13005e-10,0.680656,0.00177499,1.33126e-06,1.98031e-08,0.682432,0.00177771,1.39067e-06,-1.97211e-08,0.684211,0.00178043,1.33151e-06,-5.2349e-10,0.685993,0.00178309,1.32994e-06,2.18151e-08,0.687777,0.00178582,1.39538e-06,-2.71325e-08,0.689564,0.00178853,1.31398e-06,2.71101e-08,0.691354,0.00179124,1.39531e-06,-2.17035e-08,0.693147,0.00179396,1.3302e-06,9.92865e-11,0.694942,0.00179662,1.3305e-06,2.13063e-08,0.69674,0.00179935,1.39442e-06,-2.57198e-08,0.698541,0.00180206,1.31726e-06,2.19682e-08,0.700344,0.00180476,1.38317e-06,-2.54852e-09,0.70215,0.00180752,1.37552e-06,-1.17741e-08,0.703959,0.00181023,1.3402e-06,-9.95999e-09,0.705771,0.00181288,1.31032e-06,5.16141e-08,0.707585,0.00181566,1.46516e-06,-7.72869e-08,0.709402,0.00181836,1.2333e-06,7.87197e-08,0.711222,0.00182106,1.46946e-06,-5.87781e-08,0.713044,0.00182382,1.29312e-06,3.71834e-08,0.714869,0.00182652,1.40467e-06,-3.03511e-08,0.716697,0.00182924,1.31362e-06,2.46161e-08,0.718528,0.00183194,1.38747e-06,-8.5087e-09,0.720361,0.00183469,1.36194e-06,9.41892e-09,0.722197,0.00183744,1.3902e-06,-2.91671e-08,0.724036,0.00184014,1.3027e-06,4.76448e-08,0.725878,0.00184288,1.44563e-06,-4.22028e-08,0.727722,0.00184565,1.31902e-06,1.95682e-09,0.729569,0.00184829,1.3249e-06,3.43754e-08,0.731419,0.00185104,1.42802e-06,-2.0249e-08,0.733271,0.00185384,1.36727e-06,-1.29838e-08,0.735126,0.00185654,1.32832e-06,1.25794e-08,0.736984,0.00185923,1.36606e-06,2.22711e-08,0.738845,0.00186203,1.43287e-06,-4.20594e-08,0.740708,0.00186477,1.3067e-06,2.67571e-08,0.742574,0.00186746,1.38697e-06,-5.36424e-09,0.744443,0.00187022,1.37087e-06,-5.30023e-09,0.746315,0.00187295,1.35497e-06,2.65653e-08,0.748189,0.00187574,1.43467e-06,-4.13564e-08,0.750066,0.00187848,1.3106e-06,1.9651e-08,0.751946,0.00188116,1.36955e-06,2.23572e-08,0.753828,0.00188397,1.43663e-06,-4.9475e-08,0.755714,0.00188669,1.2882e-06,5.63335e-08,0.757602,0.00188944,1.4572e-06,-5.66499e-08,0.759493,0.00189218,1.28725e-06,5.10567e-08,0.761386,0.00189491,1.44042e-06,-2.83677e-08,0.763283,0.00189771,1.35532e-06,2.80962e-09,0.765182,0.00190042,1.36375e-06,1.71293e-08,0.767083,0.0019032,1.41513e-06,-1.17221e-08,0.768988,0.001906,1.37997e-06,-2.98453e-08,0.770895,0.00190867,1.29043e-06,7.14987e-08,0.772805,0.00191146,1.50493e-06,-7.73354e-08,0.774718,0.00191424,1.27292e-06,5.90292e-08,0.776634,0.00191697,1.45001e-06,-3.9572e-08,0.778552,0.00191975,1.33129e-06,3.9654e-08,0.780473,0.00192253,1.45026e-06,-5.94395e-08,0.782397,0.00192525,1.27194e-06,7.88945e-08,0.784324,0.00192803,1.50862e-06,-7.73249e-08,0.786253,0.00193082,1.27665e-06,5.15913e-08,0.788185,0.00193352,1.43142e-06,-9.83099e-09,0.79012,0.00193636,1.40193e-06,-1.22672e-08,0.792058,0.00193912,1.36513e-06,-7.05275e-10,0.793999,0.00194185,1.36301e-06,1.50883e-08,0.795942,0.00194462,1.40828e-06,-4.33147e-11,0.797888,0.00194744,1.40815e-06,-1.49151e-08,0.799837,0.00195021,1.3634e-06,9.93244e-11,0.801788,0.00195294,1.3637e-06,1.45179e-08,0.803743,0.00195571,1.40725e-06,1.43363e-09,0.8057,0.00195853,1.41155e-06,-2.02525e-08,0.80766,0.00196129,1.35079e-06,1.99718e-08,0.809622,0.00196405,1.41071e-06,-3.01649e-11,0.811588,0.00196687,1.41062e-06,-1.9851e-08,0.813556,0.00196964,1.35107e-06,1.98296e-08,0.815527,0.0019724,1.41056e-06,1.37485e-10,0.817501,0.00197522,1.41097e-06,-2.03796e-08,0.819477,0.00197798,1.34983e-06,2.17763e-08,0.821457,0.00198074,1.41516e-06,-7.12085e-09,0.823439,0.00198355,1.3938e-06,6.70707e-09,0.825424,0.00198636,1.41392e-06,-1.97074e-08,0.827412,0.00198913,1.35479e-06,1.25179e-08,0.829402,0.00199188,1.39235e-06,2.92405e-08,0.831396,0.00199475,1.48007e-06,-6.98755e-08,0.833392,0.0019975,1.27044e-06,7.14477e-08,0.835391,0.00200026,1.48479e-06,-3.71014e-08,0.837392,0.00200311,1.37348e-06,1.73533e-08,0.839397,0.00200591,1.42554e-06,-3.23118e-08,0.841404,0.00200867,1.32861e-06,5.2289e-08,0.843414,0.00201148,1.48547e-06,-5.76348e-08,0.845427,0.00201428,1.31257e-06,5.9041e-08,0.847443,0.00201708,1.48969e-06,-5.93197e-08,0.849461,0.00201988,1.31173e-06,5.90289e-08,0.851482,0.00202268,1.48882e-06,-5.75864e-08,0.853507,0.00202549,1.31606e-06,5.21075e-08,0.855533,0.00202828,1.47238e-06,-3.16344e-08,0.857563,0.00203113,1.37748e-06,1.48257e-08,0.859596,0.00203393,1.42196e-06,-2.76684e-08,0.861631,0.00203669,1.33895e-06,3.62433e-08,0.863669,0.00203947,1.44768e-06,1.90463e-09,0.86571,0.00204237,1.45339e-06,-4.38617e-08,0.867754,0.00204515,1.32181e-06,5.43328e-08,0.8698,0.00204796,1.48481e-06,-5.42603e-08,0.87185,0.00205076,1.32203e-06,4.34989e-08,0.873902,0.00205354,1.45252e-06,-5.26029e-10,0.875957,0.00205644,1.45095e-06,-4.13949e-08,0.878015,0.00205922,1.32676e-06,4.68962e-08,0.880075,0.00206201,1.46745e-06,-2.69807e-08,0.882139,0.00206487,1.38651e-06,1.42181e-09,0.884205,0.00206764,1.39077e-06,2.12935e-08,0.886274,0.00207049,1.45465e-06,-2.69912e-08,0.888346,0.00207332,1.37368e-06,2.70664e-08,0.890421,0.00207615,1.45488e-06,-2.16698e-08,0.892498,0.00207899,1.38987e-06,8.14756e-12,0.894579,0.00208177,1.38989e-06,2.16371e-08,0.896662,0.00208462,1.45481e-06,-2.6952e-08,0.898748,0.00208744,1.37395e-06,2.65663e-08,0.900837,0.00209027,1.45365e-06,-1.97084e-08,0.902928,0.00209312,1.39452e-06,-7.33731e-09,0.905023,0.00209589,1.37251e-06,4.90578e-08,0.90712,0.00209878,1.51968e-06,-6.96845e-08,0.90922,0.00210161,1.31063e-06,5.08664e-08,0.911323,0.00210438,1.46323e-06,-1.45717e-08,0.913429,0.00210727,1.41952e-06,7.42038e-09,0.915538,0.00211013,1.44178e-06,-1.51097e-08,0.917649,0.00211297,1.39645e-06,-6.58618e-09,0.919764,0.00211574,1.37669e-06,4.14545e-08,0.921881,0.00211862,1.50105e-06,-4.00222e-08,0.924001,0.0021215,1.38099e-06,-5.7518e-10,0.926124,0.00212426,1.37926e-06,4.23229e-08,0.92825,0.00212714,1.50623e-06,-4.9507e-08,0.930378,0.00213001,1.35771e-06,3.64958e-08,0.93251,0.00213283,1.4672e-06,-3.68713e-08,0.934644,0.00213566,1.35658e-06,5.13848e-08,0.936781,0.00213852,1.51074e-06,-4.94585e-08,0.938921,0.0021414,1.36236e-06,2.72399e-08,0.941064,0.0021442,1.44408e-06,1.0372e-10,0.943209,0.00214709,1.44439e-06,-2.76547e-08,0.945358,0.0021499,1.36143e-06,5.09106e-08,0.947509,0.00215277,1.51416e-06,-5.67784e-08,0.949663,0.00215563,1.34382e-06,5.69935e-08,0.95182,0.00215849,1.5148e-06,-5.19861e-08,0.95398,0.00216136,1.35885e-06,3.17417e-08,0.956143,0.00216418,1.45407e-06,-1.53758e-08,0.958309,0.00216704,1.40794e-06,2.97615e-08,0.960477,0.00216994,1.49723e-06,-4.40657e-08,0.962649,0.00217281,1.36503e-06,2.72919e-08,0.964823,0.00217562,1.44691e-06,-5.49729e-09,0.967,0.0021785,1.43041e-06,-5.30273e-09,0.96918,0.00218134,1.41451e-06,2.67084e-08,0.971363,0.00218425,1.49463e-06,-4.19265e-08,0.973548,0.00218711,1.36885e-06,2.17881e-08,0.975737,0.00218992,1.43422e-06,1.43789e-08,0.977928,0.00219283,1.47735e-06,-1.96989e-08,0.980122,0.00219572,1.41826e-06,4.81221e-09,0.98232,0.00219857,1.43269e-06,4.50048e-10,0.98452,0.00220144,1.43404e-06,-6.61237e-09,0.986722,0.00220429,1.41421e-06,2.59993e-08,0.988928,0.0022072,1.4922e-06,-3.77803e-08,0.991137,0.00221007,1.37886e-06,5.9127e-09,0.993348,0.00221284,1.3966e-06,1.33339e-07,0.995563,0.00221604,1.79662e-06,-5.98872e-07,0.99778,0.00222015,0.,0.};$/;"	m	namespace:cv::gpu::device::color_detail
c_sRGBGammaTab_b	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ ushort c_sRGBGammaTab_b[] = {0,1,1,2,2,3,4,4,5,6,6,7,8,8,9,10,11,11,12,13,14,15,16,17,19,20,21,22,24,25,26,28,29,31,33,34,36,38,40,41,43,45,47,49,51,54,56,58,60,63,65,68,70,73,75,78,81,83,86,89,92,95,98,101,105,108,111,115,118,121,125,129,132,136,140,144,147,151,155,160,164,168,172,176,181,185,190,194,199,204,209,213,218,223,228,233,239,244,249,255,260,265,271,277,282,288,294,300,306,312,318,324,331,337,343,350,356,363,370,376,383,390,397,404,411,418,426,433,440,448,455,463,471,478,486,494,502,510,518,527,535,543,552,560,569,578,586,595,604,613,622,631,641,650,659,669,678,688,698,707,717,727,737,747,757,768,778,788,799,809,820,831,842,852,863,875,886,897,908,920,931,943,954,966,978,990,1002,1014,1026,1038,1050,1063,1075,1088,1101,1113,1126,1139,1152,1165,1178,1192,1205,1218,1232,1245,1259,1273,1287,1301,1315,1329,1343,1357,1372,1386,1401,1415,1430,1445,1460,1475,1490,1505,1521,1536,1551,1567,1583,1598,1614,1630,1646,1662,1678,1695,1711,1728,1744,1761,1778,1794,1811,1828,1846,1863,1880,1897,1915,1933,1950,1968,1986,2004,2022,2040};$/;"	m	namespace:cv::gpu::device::color_detail
c_sRGBInvGammaTab	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __constant__ float c_sRGBInvGammaTab[] = {0,0.0126255,0.,-8.33961e-06,0.0126172,0.0126005,-2.50188e-05,4.1698e-05,0.0252344,0.0126756,0.000100075,-0.000158451,0.0378516,0.0124004,-0.000375277,-0.000207393,0.0496693,0.0110276,-0.000997456,0.00016837,0.0598678,0.00953783,-0.000492346,2.07235e-05,0.068934,0.00861531,-0.000430176,3.62876e-05,0.0771554,0.00786382,-0.000321313,1.87625e-05,0.0847167,0.00727748,-0.000265025,1.53594e-05,0.0917445,0.00679351,-0.000218947,1.10545e-05,0.0983301,0.00638877,-0.000185784,8.66984e-06,0.104542,0.00604322,-0.000159774,6.82996e-06,0.110432,0.00574416,-0.000139284,5.51008e-06,0.116042,0.00548212,-0.000122754,4.52322e-06,0.121406,0.00525018,-0.000109184,3.75557e-06,0.126551,0.00504308,-9.79177e-05,3.17134e-06,0.131499,0.00485676,-8.84037e-05,2.68469e-06,0.13627,0.004688,-8.03496e-05,2.31725e-06,0.14088,0.00453426,-7.33978e-05,2.00868e-06,0.145343,0.00439349,-6.73718e-05,1.74775e-06,0.149671,0.00426399,-6.21286e-05,1.53547e-06,0.153875,0.00414434,-5.75222e-05,1.364e-06,0.157963,0.00403338,-5.34301e-05,1.20416e-06,0.161944,0.00393014,-4.98177e-05,1.09114e-06,0.165825,0.00383377,-4.65443e-05,9.57987e-07,0.169613,0.00374356,-4.36703e-05,8.88359e-07,0.173314,0.00365888,-4.10052e-05,7.7849e-07,0.176933,0.00357921,-3.86697e-05,7.36254e-07,0.180474,0.00350408,-3.6461e-05,6.42534e-07,0.183942,0.00343308,-3.45334e-05,6.12614e-07,0.187342,0.00336586,-3.26955e-05,5.42894e-07,0.190675,0.00330209,-3.10669e-05,5.08967e-07,0.193947,0.00324149,-2.954e-05,4.75977e-07,0.197159,0.00318383,-2.8112e-05,4.18343e-07,0.200315,0.00312887,-2.6857e-05,4.13651e-07,0.203418,0.00307639,-2.5616e-05,3.70847e-07,0.206469,0.00302627,-2.45035e-05,3.3813e-07,0.209471,0.00297828,-2.34891e-05,3.32999e-07,0.212426,0.0029323,-2.24901e-05,2.96826e-07,0.215336,0.00288821,-2.15996e-05,2.82736e-07,0.218203,0.00284586,-2.07514e-05,2.70961e-07,0.221029,0.00280517,-1.99385e-05,2.42744e-07,0.223814,0.00276602,-1.92103e-05,2.33277e-07,0.226561,0.0027283,-1.85105e-05,2.2486e-07,0.229271,0.00269195,-1.78359e-05,2.08383e-07,0.231945,0.00265691,-1.72108e-05,1.93305e-07,0.234585,0.00262307,-1.66308e-05,1.80687e-07,0.237192,0.00259035,-1.60888e-05,1.86632e-07,0.239766,0.00255873,-1.55289e-05,1.60569e-07,0.24231,0.00252815,-1.50472e-05,1.54566e-07,0.244823,0.00249852,-1.45835e-05,1.59939e-07,0.247307,0.00246983,-1.41037e-05,1.29549e-07,0.249763,0.00244202,-1.3715e-05,1.41429e-07,0.252191,0.00241501,-1.32907e-05,1.39198e-07,0.254593,0.00238885,-1.28731e-05,1.06444e-07,0.256969,0.00236342,-1.25538e-05,1.2048e-07,0.25932,0.00233867,-1.21924e-05,1.26892e-07,0.261647,0.00231467,-1.18117e-05,8.72084e-08,0.26395,0.00229131,-1.15501e-05,1.20323e-07,0.26623,0.00226857,-1.11891e-05,8.71514e-08,0.268487,0.00224645,-1.09276e-05,9.73165e-08,0.270723,0.00222489,-1.06357e-05,8.98259e-08,0.272937,0.00220389,-1.03662e-05,7.98218e-08,0.275131,0.00218339,-1.01267e-05,9.75254e-08,0.277304,0.00216343,-9.83416e-06,6.65195e-08,0.279458,0.00214396,-9.63461e-06,8.34313e-08,0.281592,0.00212494,-9.38431e-06,7.65919e-08,0.283708,0.00210641,-9.15454e-06,5.7236e-08,0.285805,0.00208827,-8.98283e-06,8.18939e-08,0.287885,0.00207055,-8.73715e-06,6.2224e-08,0.289946,0.00205326,-8.55047e-06,5.66388e-08,0.291991,0.00203633,-8.38056e-06,6.88491e-08,0.294019,0.00201978,-8.17401e-06,5.53955e-08,0.296031,0.00200359,-8.00782e-06,6.71971e-08,0.298027,0.00198778,-7.80623e-06,3.34439e-08,0.300007,0.00197227,-7.7059e-06,6.7248e-08,0.301971,0.00195706,-7.50416e-06,5.51915e-08,0.303921,0.00194221,-7.33858e-06,3.98124e-08,0.305856,0.00192766,-7.21915e-06,5.37795e-08,0.307776,0.00191338,-7.05781e-06,4.30919e-08,0.309683,0.00189939,-6.92853e-06,4.20744e-08,0.311575,0.00188566,-6.80231e-06,5.68321e-08,0.313454,0.00187223,-6.63181e-06,2.86195e-08,0.31532,0.00185905,-6.54595e-06,3.73075e-08,0.317172,0.00184607,-6.43403e-06,6.05684e-08,0.319012,0.00183338,-6.25233e-06,1.84426e-08,0.320839,0.00182094,-6.197e-06,4.44757e-08,0.322654,0.00180867,-6.06357e-06,4.20729e-08,0.324456,0.00179667,-5.93735e-06,2.56511e-08,0.326247,0.00178488,-5.8604e-06,3.41368e-08,0.328026,0.00177326,-5.75799e-06,4.64177e-08,0.329794,0.00176188,-5.61874e-06,1.86107e-08,0.33155,0.0017507,-5.5629e-06,2.81511e-08,0.333295,0.00173966,-5.47845e-06,4.75987e-08,0.335029,0.00172884,-5.33565e-06,1.98726e-08,0.336753,0.00171823,-5.27604e-06,2.19226e-08,0.338466,0.00170775,-5.21027e-06,4.14483e-08,0.340169,0.00169745,-5.08592e-06,2.09017e-08,0.341861,0.00168734,-5.02322e-06,2.39561e-08,0.343543,0.00167737,-4.95135e-06,3.22852e-08,0.345216,0.00166756,-4.85449e-06,2.57173e-08,0.346878,0.00165793,-4.77734e-06,1.38569e-08,0.348532,0.00164841,-4.73577e-06,3.80634e-08,0.350175,0.00163906,-4.62158e-06,1.27043e-08,0.35181,0.00162985,-4.58347e-06,3.03279e-08,0.353435,0.00162078,-4.49249e-06,1.49961e-08,0.355051,0.00161184,-4.4475e-06,2.88977e-08,0.356659,0.00160303,-4.3608e-06,1.84241e-08,0.358257,0.00159436,-4.30553e-06,1.6616e-08,0.359848,0.0015858,-4.25568e-06,3.43218e-08,0.361429,0.00157739,-4.15272e-06,-4.89172e-09,0.363002,0.00156907,-4.16739e-06,4.48498e-08,0.364567,0.00156087,-4.03284e-06,4.30676e-09,0.366124,0.00155282,-4.01992e-06,2.73303e-08,0.367673,0.00154486,-3.93793e-06,5.58036e-09,0.369214,0.001537,-3.92119e-06,3.97554e-08,0.370747,0.00152928,-3.80193e-06,-1.55904e-08,0.372272,0.00152163,-3.8487e-06,5.24081e-08,0.37379,0.00151409,-3.69147e-06,-1.52272e-08,0.375301,0.00150666,-3.73715e-06,3.83028e-08,0.376804,0.0014993,-3.62225e-06,1.10278e-08,0.378299,0.00149209,-3.58916e-06,6.99326e-09,0.379788,0.00148493,-3.56818e-06,2.06038e-08,0.381269,0.00147786,-3.50637e-06,2.98009e-08,0.382744,0.00147093,-3.41697e-06,-2.05978e-08,0.384211,0.00146404,-3.47876e-06,5.25899e-08,0.385672,0.00145724,-3.32099e-06,-1.09471e-08,0.387126,0.00145056,-3.35383e-06,2.10009e-08,0.388573,0.00144392,-3.29083e-06,1.63501e-08,0.390014,0.00143739,-3.24178e-06,3.00641e-09,0.391448,0.00143091,-3.23276e-06,3.12282e-08,0.392875,0.00142454,-3.13908e-06,-8.70932e-09,0.394297,0.00141824,-3.16521e-06,3.34114e-08,0.395712,0.00141201,-3.06497e-06,-5.72754e-09,0.397121,0.00140586,-3.08215e-06,1.9301e-08,0.398524,0.00139975,-3.02425e-06,1.7931e-08,0.39992,0.00139376,-2.97046e-06,-1.61822e-09,0.401311,0.00138781,-2.97531e-06,1.83442e-08,0.402696,0.00138192,-2.92028e-06,1.76485e-08,0.404075,0.00137613,-2.86733e-06,4.68617e-10,0.405448,0.00137039,-2.86593e-06,1.02794e-08,0.406816,0.00136469,-2.83509e-06,1.80179e-08,0.408178,0.00135908,-2.78104e-06,7.05594e-09,0.409534,0.00135354,-2.75987e-06,1.33633e-08,0.410885,0.00134806,-2.71978e-06,-9.04568e-10,0.41223,0.00134261,-2.72249e-06,2.0057e-08,0.41357,0.00133723,-2.66232e-06,1.00841e-08,0.414905,0.00133194,-2.63207e-06,-7.88835e-10,0.416234,0.00132667,-2.63444e-06,2.28734e-08,0.417558,0.00132147,-2.56582e-06,-1.29785e-09,0.418877,0.00131633,-2.56971e-06,1.21205e-08,0.420191,0.00131123,-2.53335e-06,1.24202e-08,0.421499,0.0013062,-2.49609e-06,-2.19681e-09,0.422803,0.0013012,-2.50268e-06,2.61696e-08,0.424102,0.00129628,-2.42417e-06,-1.30747e-08,0.425396,0.00129139,-2.46339e-06,2.6129e-08,0.426685,0.00128654,-2.38501e-06,-2.03454e-09,0.427969,0.00128176,-2.39111e-06,1.18115e-08,0.429248,0.00127702,-2.35567e-06,1.43932e-08,0.430523,0.00127235,-2.31249e-06,-9.77965e-09,0.431793,0.00126769,-2.34183e-06,2.47253e-08,0.433058,0.00126308,-2.26766e-06,2.85278e-10,0.434319,0.00125855,-2.2668e-06,3.93614e-09,0.435575,0.00125403,-2.25499e-06,1.37722e-08,0.436827,0.00124956,-2.21368e-06,5.79803e-10,0.438074,0.00124513,-2.21194e-06,1.37112e-08,0.439317,0.00124075,-2.1708e-06,4.17973e-09,0.440556,0.00123642,-2.15826e-06,-6.27703e-10,0.44179,0.0012321,-2.16015e-06,2.81332e-08,0.44302,0.00122787,-2.07575e-06,-2.24985e-08,0.444246,0.00122365,-2.14324e-06,3.20586e-08,0.445467,0.00121946,-2.04707e-06,-1.6329e-08,0.446685,0.00121532,-2.09605e-06,3.32573e-08,0.447898,0.00121122,-1.99628e-06,-2.72927e-08,0.449107,0.00120715,-2.07816e-06,4.6111e-08,0.450312,0.00120313,-1.93983e-06,-3.79416e-08,0.451514,0.00119914,-2.05365e-06,4.60507e-08,0.452711,0.00119517,-1.9155e-06,-2.7052e-08,0.453904,0.00119126,-1.99666e-06,3.23551e-08,0.455093,0.00118736,-1.89959e-06,-1.29613e-08,0.456279,0.00118352,-1.93848e-06,1.94905e-08,0.45746,0.0011797,-1.88e-06,-5.39588e-09,0.458638,0.00117593,-1.89619e-06,2.09282e-09,0.459812,0.00117214,-1.88991e-06,2.68267e-08,0.460982,0.00116844,-1.80943e-06,-1.99925e-08,0.462149,0.00116476,-1.86941e-06,2.3341e-08,0.463312,0.00116109,-1.79939e-06,-1.37674e-08,0.464471,0.00115745,-1.84069e-06,3.17287e-08,0.465627,0.00115387,-1.7455e-06,-2.37407e-08,0.466779,0.00115031,-1.81673e-06,3.34315e-08,0.467927,0.00114677,-1.71643e-06,-2.05786e-08,0.469073,0.00114328,-1.77817e-06,1.90802e-08,0.470214,0.00113978,-1.72093e-06,3.86247e-09,0.471352,0.00113635,-1.70934e-06,-4.72759e-09,0.472487,0.00113292,-1.72352e-06,1.50478e-08,0.473618,0.00112951,-1.67838e-06,4.14108e-09,0.474746,0.00112617,-1.66595e-06,-1.80986e-09,0.47587,0.00112283,-1.67138e-06,3.09816e-09,0.476991,0.0011195,-1.66209e-06,1.92198e-08,0.478109,0.00111623,-1.60443e-06,-2.03726e-08,0.479224,0.00111296,-1.66555e-06,3.2468e-08,0.480335,0.00110973,-1.56814e-06,-2.00922e-08,0.481443,0.00110653,-1.62842e-06,1.80983e-08,0.482548,0.00110333,-1.57413e-06,7.30362e-09,0.48365,0.0011002,-1.55221e-06,-1.75107e-08,0.484749,0.00109705,-1.60475e-06,3.29373e-08,0.485844,0.00109393,-1.50594e-06,-2.48315e-08,0.486937,0.00109085,-1.58043e-06,3.65865e-08,0.488026,0.0010878,-1.47067e-06,-3.21078e-08,0.489112,0.00108476,-1.56699e-06,3.22397e-08,0.490195,0.00108172,-1.47027e-06,-7.44391e-09,0.491276,0.00107876,-1.49261e-06,-2.46428e-09,0.492353,0.00107577,-1.5e-06,1.73011e-08,0.493427,0.00107282,-1.4481e-06,-7.13552e-09,0.494499,0.0010699,-1.4695e-06,1.1241e-08,0.495567,0.001067,-1.43578e-06,-8.02637e-09,0.496633,0.0010641,-1.45986e-06,2.08645e-08,0.497695,0.00106124,-1.39726e-06,-1.58271e-08,0.498755,0.0010584,-1.44475e-06,1.26415e-08,0.499812,0.00105555,-1.40682e-06,2.48655e-08,0.500866,0.00105281,-1.33222e-06,-5.24988e-08,0.501918,0.00104999,-1.48972e-06,6.59206e-08,0.502966,0.00104721,-1.29196e-06,-3.237e-08,0.504012,0.00104453,-1.38907e-06,3.95479e-09,0.505055,0.00104176,-1.3772e-06,1.65509e-08,0.506096,0.00103905,-1.32755e-06,-1.05539e-08,0.507133,0.00103637,-1.35921e-06,2.56648e-08,0.508168,0.00103373,-1.28222e-06,-3.25007e-08,0.509201,0.00103106,-1.37972e-06,4.47336e-08,0.51023,0.00102844,-1.24552e-06,-2.72245e-08,0.511258,0.00102587,-1.32719e-06,4.55952e-09,0.512282,0.00102323,-1.31352e-06,8.98645e-09,0.513304,0.00102063,-1.28656e-06,1.90992e-08,0.514323,0.00101811,-1.22926e-06,-2.57786e-08,0.51534,0.00101557,-1.30659e-06,2.44104e-08,0.516355,0.00101303,-1.23336e-06,-1.22581e-08,0.517366,0.00101053,-1.27014e-06,2.4622e-08,0.518376,0.00100806,-1.19627e-06,-2.66253e-08,0.519383,0.00100559,-1.27615e-06,2.22744e-08,0.520387,0.00100311,-1.20932e-06,-2.8679e-09,0.521389,0.00100068,-1.21793e-06,-1.08029e-08,0.522388,0.000998211,-1.25034e-06,4.60795e-08,0.523385,0.000995849,-1.1121e-06,-5.4306e-08,0.52438,0.000993462,-1.27502e-06,5.19354e-08,0.525372,0.000991067,-1.11921e-06,-3.42262e-08,0.526362,0.000988726,-1.22189e-06,2.53646e-08,0.52735,0.000986359,-1.14579e-06,-7.62782e-09,0.528335,0.000984044,-1.16868e-06,5.14668e-09,0.529318,0.000981722,-1.15324e-06,-1.29589e-08,0.530298,0.000979377,-1.19211e-06,4.66888e-08,0.531276,0.000977133,-1.05205e-06,-5.45868e-08,0.532252,0.000974865,-1.21581e-06,5.24495e-08,0.533226,0.000972591,-1.05846e-06,-3.60019e-08,0.534198,0.000970366,-1.16647e-06,3.19537e-08,0.535167,0.000968129,-1.07061e-06,-3.2208e-08,0.536134,0.000965891,-1.16723e-06,3.72738e-08,0.537099,0.000963668,-1.05541e-06,2.32205e-09,0.538061,0.000961564,-1.04844e-06,-4.65618e-08,0.539022,0.000959328,-1.18813e-06,6.47159e-08,0.53998,0.000957146,-9.93979e-07,-3.3488e-08,0.540936,0.000955057,-1.09444e-06,9.63166e-09,0.54189,0.000952897,-1.06555e-06,-5.03871e-09,0.542842,0.000950751,-1.08066e-06,1.05232e-08,0.543792,0.000948621,-1.04909e-06,2.25503e-08,0.544739,0.000946591,-9.81444e-07,-4.11195e-08,0.545685,0.000944504,-1.1048e-06,2.27182e-08,0.546628,0.000942363,-1.03665e-06,9.85146e-09,0.54757,0.000940319,-1.00709e-06,-2.51938e-09,0.548509,0.000938297,-1.01465e-06,2.25858e-10,0.549446,0.000936269,-1.01397e-06,1.61598e-09,0.550381,0.000934246,-1.00913e-06,-6.68983e-09,0.551315,0.000932207,-1.0292e-06,2.51434e-08,0.552246,0.000930224,-9.53765e-07,-3.42793e-08,0.553175,0.000928214,-1.0566e-06,5.23688e-08,0.554102,0.000926258,-8.99497e-07,-5.59865e-08,0.555028,0.000924291,-1.06746e-06,5.23679e-08,0.555951,0.000922313,-9.10352e-07,-3.42763e-08,0.556872,0.00092039,-1.01318e-06,2.51326e-08,0.557792,0.000918439,-9.37783e-07,-6.64954e-09,0.558709,0.000916543,-9.57732e-07,1.46554e-09,0.559625,0.000914632,-9.53335e-07,7.87281e-10,0.560538,0.000912728,-9.50973e-07,-4.61466e-09,0.56145,0.000910812,-9.64817e-07,1.76713e-08,0.56236,0.000908935,-9.11804e-07,-6.46564e-09,0.563268,0.000907092,-9.312e-07,8.19121e-09,0.564174,0.000905255,-9.06627e-07,-2.62992e-08,0.565078,0.000903362,-9.85524e-07,3.74007e-08,0.565981,0.000901504,-8.73322e-07,-4.0942e-09,0.566882,0.000899745,-8.85605e-07,-2.1024e-08,0.56778,0.00089791,-9.48677e-07,2.85854e-08,0.568677,0.000896099,-8.62921e-07,-3.3713e-08,0.569573,0.000894272,-9.64059e-07,4.6662e-08,0.570466,0.000892484,-8.24073e-07,-3.37258e-08,0.571358,0.000890734,-9.25251e-07,2.86365e-08,0.572247,0.00088897,-8.39341e-07,-2.12155e-08,0.573135,0.000887227,-9.02988e-07,-3.37913e-09,0.574022,0.000885411,-9.13125e-07,3.47319e-08,0.574906,0.000883689,-8.08929e-07,-1.63394e-08,0.575789,0.000882022,-8.57947e-07,-2.8979e-08,0.57667,0.00088022,-9.44885e-07,7.26509e-08,0.57755,0.000878548,-7.26932e-07,-8.28106e-08,0.578427,0.000876845,-9.75364e-07,7.97774e-08,0.579303,0.000875134,-7.36032e-07,-5.74849e-08,0.580178,0.00087349,-9.08486e-07,3.09529e-08,0.58105,0.000871765,-8.15628e-07,-6.72206e-09,0.581921,0.000870114,-8.35794e-07,-4.06451e-09,0.582791,0.00086843,-8.47987e-07,2.29799e-08,0.583658,0.000866803,-7.79048e-07,-2.82503e-08,0.584524,0.00086516,-8.63799e-07,3.04167e-08,0.585388,0.000863524,-7.72548e-07,-3.38119e-08,0.586251,0.000861877,-8.73984e-07,4.52264e-08,0.587112,0.000860265,-7.38305e-07,-2.78842e-08,0.587972,0.000858705,-8.21958e-07,6.70567e-09,0.58883,0.000857081,-8.01841e-07,1.06161e-09,0.589686,0.000855481,-7.98656e-07,-1.09521e-08,0.590541,0.00085385,-8.31512e-07,4.27468e-08,0.591394,0.000852316,-7.03272e-07,-4.08257e-08,0.592245,0.000850787,-8.25749e-07,1.34677e-09,0.593095,0.000849139,-8.21709e-07,3.54387e-08,0.593944,0.000847602,-7.15393e-07,-2.38924e-08,0.59479,0.0008461,-7.8707e-07,5.26143e-10,0.595636,0.000844527,-7.85491e-07,2.17879e-08,0.596479,0.000843021,-7.20127e-07,-2.80733e-08,0.597322,0.000841497,-8.04347e-07,3.09005e-08,0.598162,0.000839981,-7.11646e-07,-3.5924e-08,0.599002,0.00083845,-8.19418e-07,5.3191e-08,0.599839,0.000836971,-6.59845e-07,-5.76307e-08,0.600676,0.000835478,-8.32737e-07,5.81227e-08,0.60151,0.000833987,-6.58369e-07,-5.56507e-08,0.602344,0.000832503,-8.25321e-07,4.52706e-08,0.603175,0.000830988,-6.89509e-07,-6.22236e-09,0.604006,0.000829591,-7.08176e-07,-2.03811e-08,0.604834,0.000828113,-7.6932e-07,2.8142e-08,0.605662,0.000826659,-6.84894e-07,-3.25822e-08,0.606488,0.000825191,-7.8264e-07,4.25823e-08,0.607312,0.000823754,-6.54893e-07,-1.85376e-08,0.608135,0.000822389,-7.10506e-07,-2.80365e-08,0.608957,0.000820883,-7.94616e-07,7.1079e-08,0.609777,0.000819507,-5.81379e-07,-7.74655e-08,0.610596,0.000818112,-8.13775e-07,5.9969e-08,0.611413,0.000816665,-6.33868e-07,-4.32013e-08,0.612229,0.000815267,-7.63472e-07,5.32313e-08,0.613044,0.0008139,-6.03778e-07,-5.05148e-08,0.613857,0.000812541,-7.55323e-07,2.96187e-08,0.614669,0.000811119,-6.66466e-07,-8.35545e-09,0.615479,0.000809761,-6.91533e-07,3.80301e-09,0.616288,0.00080839,-6.80124e-07,-6.85666e-09,0.617096,0.000807009,-7.00694e-07,2.36237e-08,0.617903,0.000805678,-6.29822e-07,-2.80336e-08,0.618708,0.000804334,-7.13923e-07,2.8906e-08,0.619511,0.000802993,-6.27205e-07,-2.79859e-08,0.620314,0.000801655,-7.11163e-07,2.34329e-08,0.621114,0.000800303,-6.40864e-07,-6.14108e-09,0.621914,0.000799003,-6.59287e-07,1.13151e-09,0.622712,0.000797688,-6.55893e-07,1.61507e-09,0.62351,0.000796381,-6.51048e-07,-7.59186e-09,0.624305,0.000795056,-6.73823e-07,2.87524e-08,0.6251,0.000793794,-5.87566e-07,-4.7813e-08,0.625893,0.000792476,-7.31005e-07,4.32901e-08,0.626685,0.000791144,-6.01135e-07,-6.13814e-09,0.627475,0.000789923,-6.19549e-07,-1.87376e-08,0.628264,0.000788628,-6.75762e-07,2.14837e-08,0.629052,0.000787341,-6.11311e-07,-7.59265e-09,0.629839,0.000786095,-6.34089e-07,8.88692e-09,0.630625,0.000784854,-6.07428e-07,-2.7955e-08,0.631409,0.000783555,-6.91293e-07,4.33285e-08,0.632192,0.000782302,-5.61307e-07,-2.61497e-08,0.632973,0.000781101,-6.39757e-07,1.6658e-09,0.633754,0.000779827,-6.34759e-07,1.94866e-08,0.634533,0.000778616,-5.76299e-07,-2.00076e-08,0.635311,0.000777403,-6.36322e-07,9.39091e-10,0.636088,0.000776133,-6.33505e-07,1.62512e-08,0.636863,0.000774915,-5.84751e-07,-6.33937e-09,0.637638,0.000773726,-6.03769e-07,9.10609e-09,0.638411,0.000772546,-5.76451e-07,-3.00849e-08,0.639183,0.000771303,-6.66706e-07,5.1629e-08,0.639953,0.000770125,-5.11819e-07,-5.7222e-08,0.640723,0.000768929,-6.83485e-07,5.80497e-08,0.641491,0.000767736,-5.09336e-07,-5.57674e-08,0.642259,0.000766551,-6.76638e-07,4.58105e-08,0.643024,0.000765335,-5.39206e-07,-8.26541e-09,0.643789,0.000764231,-5.64002e-07,-1.27488e-08,0.644553,0.000763065,-6.02249e-07,-3.44168e-10,0.645315,0.00076186,-6.03281e-07,1.41254e-08,0.646077,0.000760695,-5.60905e-07,3.44727e-09,0.646837,0.000759584,-5.50563e-07,-2.79144e-08,0.647596,0.000758399,-6.34307e-07,4.86057e-08,0.648354,0.000757276,-4.88489e-07,-4.72989e-08,0.64911,0.000756158,-6.30386e-07,2.13807e-08,0.649866,0.000754961,-5.66244e-07,2.13808e-08,0.65062,0.000753893,-5.02102e-07,-4.7299e-08,0.651374,0.000752746,-6.43999e-07,4.86059e-08,0.652126,0.000751604,-4.98181e-07,-2.79154e-08,0.652877,0.000750524,-5.81927e-07,3.45089e-09,0.653627,0.000749371,-5.71575e-07,1.41119e-08,0.654376,0.00074827,-5.29239e-07,-2.93748e-10,0.655123,0.00074721,-5.3012e-07,-1.29368e-08,0.65587,0.000746111,-5.68931e-07,-7.56355e-09,0.656616,0.000744951,-5.91621e-07,4.3191e-08,0.65736,0.000743897,-4.62048e-07,-4.59911e-08,0.658103,0.000742835,-6.00022e-07,2.15642e-08,0.658846,0.0007417,-5.35329e-07,1.93389e-08,0.659587,0.000740687,-4.77312e-07,-3.93152e-08,0.660327,0.000739615,-5.95258e-07,1.87126e-08,0.661066,0.00073848,-5.3912e-07,2.40695e-08,0.661804,0.000737474,-4.66912e-07,-5.53859e-08,0.662541,0.000736374,-6.33069e-07,7.82648e-08,0.663277,0.000735343,-3.98275e-07,-7.88593e-08,0.664012,0.00073431,-6.34853e-07,5.83585e-08,0.664745,0.000733215,-4.59777e-07,-3.53656e-08,0.665478,0.000732189,-5.65874e-07,2.34994e-08,0.66621,0.000731128,-4.95376e-07,9.72743e-10,0.66694,0.00073014,-4.92458e-07,-2.73903e-08,0.66767,0.000729073,-5.74629e-07,4.89839e-08,0.668398,0.000728071,-4.27677e-07,-4.93359e-08,0.669126,0.000727068,-5.75685e-07,2.91504e-08,0.669853,0.000726004,-4.88234e-07,-7.66109e-09,0.670578,0.000725004,-5.11217e-07,1.49392e-09,0.671303,0.000723986,-5.06735e-07,1.68533e-09,0.672026,0.000722978,-5.01679e-07,-8.23525e-09,0.672749,0.00072195,-5.26385e-07,3.12556e-08,0.67347,0.000720991,-4.32618e-07,-5.71825e-08,0.674191,0.000719954,-6.04166e-07,7.8265e-08,0.67491,0.00071898,-3.69371e-07,-7.70634e-08,0.675628,0.00071801,-6.00561e-07,5.11747e-08,0.676346,0.000716963,-4.47037e-07,-8.42615e-09,0.677062,0.000716044,-4.72315e-07,-1.747e-08,0.677778,0.000715046,-5.24725e-07,1.87015e-08,0.678493,0.000714053,-4.68621e-07,2.26856e-09,0.679206,0.000713123,-4.61815e-07,-2.77758e-08,0.679919,0.000712116,-5.45142e-07,4.92298e-08,0.68063,0.000711173,-3.97453e-07,-4.99339e-08,0.681341,0.000710228,-5.47255e-07,3.12967e-08,0.682051,0.000709228,-4.53365e-07,-1.56481e-08,0.68276,0.000708274,-5.00309e-07,3.12958e-08,0.683467,0.000707367,-4.06422e-07,-4.99303e-08,0.684174,0.000706405,-5.56213e-07,4.9216e-08,0.68488,0.00070544,-4.08565e-07,-2.77245e-08,0.685585,0.00070454,-4.91738e-07,2.07748e-09,0.686289,0.000703562,-4.85506e-07,1.94146e-08,0.686992,0.00070265,-4.27262e-07,-2.01314e-08,0.687695,0.000701735,-4.87656e-07,1.50616e-09,0.688396,0.000700764,-4.83137e-07,1.41067e-08,0.689096,0.00069984,-4.40817e-07,1.67168e-09,0.689795,0.000698963,-4.35802e-07,-2.07934e-08,0.690494,0.000698029,-4.98182e-07,2.18972e-08,0.691192,0.000697099,-4.32491e-07,-7.19092e-09,0.691888,0.000696212,-4.54064e-07,6.86642e-09,0.692584,0.000695325,-4.33464e-07,-2.02747e-08,0.693279,0.000694397,-4.94288e-07,1.46279e-08,0.693973,0.000693452,-4.50405e-07,2.13678e-08,0.694666,0.000692616,-3.86301e-07,-4.04945e-08,0.695358,0.000691721,-5.07785e-07,2.14009e-08,0.696049,0.00069077,-4.43582e-07,1.44955e-08,0.69674,0.000689926,-4.00096e-07,-1.97783e-08,0.697429,0.000689067,-4.5943e-07,5.01296e-09,0.698118,0.000688163,-4.44392e-07,-2.73521e-10,0.698805,0.000687273,-4.45212e-07,-3.91893e-09,0.699492,0.000686371,-4.56969e-07,1.59493e-08,0.700178,0.000685505,-4.09121e-07,-2.73351e-10,0.700863,0.000684686,-4.09941e-07,-1.4856e-08,0.701548,0.000683822,-4.54509e-07,9.25979e-11,0.702231,0.000682913,-4.54231e-07,1.44855e-08,0.702913,0.000682048,-4.10775e-07,1.56992e-09,0.703595,0.000681231,-4.06065e-07,-2.07652e-08,0.704276,0.000680357,-4.68361e-07,2.18864e-08,0.704956,0.000679486,-4.02701e-07,-7.17595e-09,0.705635,0.000678659,-4.24229e-07,6.81748e-09,0.706313,0.000677831,-4.03777e-07,-2.0094e-08,0.70699,0.000676963,-4.64059e-07,1.39538e-08,0.707667,0.000676077,-4.22197e-07,2.38835e-08,0.708343,0.000675304,-3.50547e-07,-4.98831e-08,0.709018,0.000674453,-5.00196e-07,5.64395e-08,0.709692,0.000673622,-3.30878e-07,-5.66657e-08,0.710365,0.00067279,-5.00875e-07,5.1014e-08,0.711037,0.000671942,-3.47833e-07,-2.81809e-08,0.711709,0.000671161,-4.32376e-07,2.10513e-09,0.712379,0.000670303,-4.2606e-07,1.97604e-08,0.713049,0.00066951,-3.66779e-07,-2.15422e-08,0.713718,0.000668712,-4.31406e-07,6.8038e-09,0.714387,0.000667869,-4.10994e-07,-5.67295e-09,0.715054,0.00066703,-4.28013e-07,1.5888e-08,0.715721,0.000666222,-3.80349e-07,1.72576e-09,0.716387,0.000665467,-3.75172e-07,-2.27911e-08,0.717052,0.000664648,-4.43545e-07,2.9834e-08,0.717716,0.00066385,-3.54043e-07,-3.69401e-08,0.718379,0.000663031,-4.64864e-07,5.83219e-08,0.719042,0.000662277,-2.89898e-07,-7.71382e-08,0.719704,0.000661465,-5.21313e-07,7.14171e-08,0.720365,0.000660637,-3.07061e-07,-2.97161e-08,0.721025,0.000659934,-3.96209e-07,-1.21575e-08,0.721685,0.000659105,-4.32682e-07,1.87412e-08,0.722343,0.000658296,-3.76458e-07,-3.2029e-09,0.723001,0.000657533,-3.86067e-07,-5.9296e-09,0.723659,0.000656743,-4.03856e-07,2.69213e-08,0.724315,0.000656016,-3.23092e-07,-4.21511e-08,0.724971,0.000655244,-4.49545e-07,2.24737e-08,0.725625,0.000654412,-3.82124e-07,1.18611e-08,0.726279,0.000653683,-3.46541e-07,-1.03132e-08,0.726933,0.000652959,-3.7748e-07,-3.02128e-08,0.727585,0.000652114,-4.68119e-07,7.15597e-08,0.728237,0.000651392,-2.5344e-07,-7.72119e-08,0.728888,0.000650654,-4.85075e-07,5.8474e-08,0.729538,0.000649859,-3.09654e-07,-3.74746e-08,0.730188,0.000649127,-4.22077e-07,3.18197e-08,0.730837,0.000648379,-3.26618e-07,-3.01997e-08,0.731485,0.000647635,-4.17217e-07,2.93747e-08,0.732132,0.000646888,-3.29093e-07,-2.76943e-08,0.732778,0.000646147,-4.12176e-07,2.17979e-08,0.733424,0.000645388,-3.46783e-07,1.07292e-10,0.734069,0.000644695,-3.46461e-07,-2.22271e-08,0.734713,0.000643935,-4.13142e-07,2.91963e-08,0.735357,0.000643197,-3.25553e-07,-3.49536e-08,0.736,0.000642441,-4.30414e-07,5.10133e-08,0.736642,0.000641733,-2.77374e-07,-4.98904e-08,0.737283,0.000641028,-4.27045e-07,2.93392e-08,0.737924,0.000640262,-3.39028e-07,-7.86156e-09,0.738564,0.000639561,-3.62612e-07,2.10703e-09,0.739203,0.000638842,-3.56291e-07,-5.6653e-10,0.739842,0.000638128,-3.57991e-07,1.59086e-10,0.740479,0.000637412,-3.57513e-07,-6.98321e-11,0.741116,0.000636697,-3.57723e-07,1.20214e-10,0.741753,0.000635982,-3.57362e-07,-4.10987e-10,0.742388,0.000635266,-3.58595e-07,1.5237e-09,0.743023,0.000634553,-3.54024e-07,-5.68376e-09,0.743657,0.000633828,-3.71075e-07,2.12113e-08,0.744291,0.00063315,-3.07441e-07,-1.95569e-08,0.744924,0.000632476,-3.66112e-07,-2.58816e-09,0.745556,0.000631736,-3.73877e-07,2.99096e-08,0.746187,0.000631078,-2.84148e-07,-5.74454e-08,0.746818,0.000630337,-4.56484e-07,8.06629e-08,0.747448,0.000629666,-2.14496e-07,-8.63922e-08,0.748077,0.000628978,-4.73672e-07,8.60918e-08,0.748706,0.000628289,-2.15397e-07,-7.91613e-08,0.749334,0.000627621,-4.5288e-07,5.17393e-08,0.749961,0.00062687,-2.97663e-07,-8.58662e-09,0.750588,0.000626249,-3.23422e-07,-1.73928e-08,0.751214,0.00062555,-3.75601e-07,1.85532e-08,0.751839,0.000624855,-3.19941e-07,2.78479e-09,0.752463,0.000624223,-3.11587e-07,-2.96923e-08,0.753087,0.000623511,-4.00664e-07,5.63799e-08,0.75371,0.000622879,-2.31524e-07,-7.66179e-08,0.754333,0.000622186,-4.61378e-07,7.12778e-08,0.754955,0.000621477,-2.47545e-07,-2.96794e-08,0.755576,0.000620893,-3.36583e-07,-1.21648e-08,0.756196,0.000620183,-3.73077e-07,1.87339e-08,0.756816,0.000619493,-3.16875e-07,-3.16622e-09,0.757435,0.00061885,-3.26374e-07,-6.0691e-09,0.758054,0.000618179,-3.44581e-07,2.74426e-08,0.758672,0.000617572,-2.62254e-07,-4.40968e-08,0.759289,0.000616915,-3.94544e-07,2.97352e-08,0.759906,0.000616215,-3.05338e-07,-1.52393e-08,0.760522,0.000615559,-3.51056e-07,3.12221e-08,0.761137,0.000614951,-2.5739e-07,-5.00443e-08,0.761751,0.000614286,-4.07523e-07,4.9746e-08,0.762365,0.00061362,-2.58285e-07,-2.97303e-08,0.762979,0.000613014,-3.47476e-07,9.57079e-09,0.763591,0.000612348,-3.18764e-07,-8.55287e-09,0.764203,0.000611685,-3.44422e-07,2.46407e-08,0.764815,0.00061107,-2.705e-07,-3.04053e-08,0.765426,0.000610437,-3.61716e-07,3.73759e-08,0.766036,0.000609826,-2.49589e-07,-5.94935e-08,0.766645,0.000609149,-4.28069e-07,8.13889e-08,0.767254,0.000608537,-1.83902e-07,-8.72483e-08,0.767862,0.000607907,-4.45647e-07,8.87901e-08,0.76847,0.000607282,-1.79277e-07,-8.90983e-08,0.769077,0.000606656,-4.46572e-07,8.87892e-08,0.769683,0.000606029,-1.80204e-07,-8.72446e-08,0.770289,0.000605407,-4.41938e-07,8.13752e-08,0.770894,0.000604768,-1.97812e-07,-5.94423e-08,0.771498,0.000604194,-3.76139e-07,3.71848e-08,0.772102,0.000603553,-2.64585e-07,-2.96922e-08,0.772705,0.000602935,-3.53661e-07,2.19793e-08,0.773308,0.000602293,-2.87723e-07,1.37955e-09,0.77391,0.000601722,-2.83585e-07,-2.74976e-08,0.774512,0.000601072,-3.66077e-07,4.9006e-08,0.775112,0.000600487,-2.19059e-07,-4.93171e-08,0.775712,0.000599901,-3.67011e-07,2.90531e-08,0.776312,0.000599254,-2.79851e-07,-7.29081e-09,0.776911,0.000598673,-3.01724e-07,1.10077e-10,0.777509,0.00059807,-3.01393e-07,6.85053e-09,0.778107,0.000597487,-2.80842e-07,-2.75123e-08,0.778704,0.000596843,-3.63379e-07,4.35939e-08,0.779301,0.000596247,-2.32597e-07,-2.7654e-08,0.779897,0.000595699,-3.15559e-07,7.41741e-09,0.780492,0.00059509,-2.93307e-07,-2.01562e-09,0.781087,0.000594497,-2.99354e-07,6.45059e-10,0.781681,0.000593901,-2.97418e-07,-5.64635e-10,0.782275,0.000593304,-2.99112e-07,1.61347e-09,0.782868,0.000592711,-2.94272e-07,-5.88926e-09,0.78346,0.000592105,-3.1194e-07,2.19436e-08,0.784052,0.000591546,-2.46109e-07,-2.22805e-08,0.784643,0.000590987,-3.1295e-07,7.57368e-09,0.785234,0.000590384,-2.90229e-07,-8.01428e-09,0.785824,0.00058978,-3.14272e-07,2.44834e-08,0.786414,0.000589225,-2.40822e-07,-3.03148e-08,0.787003,0.000588652,-3.31766e-07,3.7171e-08,0.787591,0.0005881,-2.20253e-07,-5.87646e-08,0.788179,0.000587483,-3.96547e-07,7.86782e-08,0.788766,0.000586926,-1.60512e-07,-7.71342e-08,0.789353,0.000586374,-3.91915e-07,5.10444e-08,0.789939,0.000585743,-2.38782e-07,-7.83422e-09,0.790524,0.000585242,-2.62284e-07,-1.97076e-08,0.791109,0.000584658,-3.21407e-07,2.70598e-08,0.791693,0.000584097,-2.40228e-07,-2.89269e-08,0.792277,0.000583529,-3.27008e-07,2.90431e-08,0.792861,0.000582963,-2.39879e-07,-2.76409e-08,0.793443,0.0005824,-3.22802e-07,2.1916e-08,0.794025,0.00058182,-2.57054e-07,-4.18368e-10,0.794607,0.000581305,-2.58309e-07,-2.02425e-08,0.795188,0.000580727,-3.19036e-07,2.17838e-08,0.795768,0.000580155,-2.53685e-07,-7.28814e-09,0.796348,0.000579625,-2.75549e-07,7.36871e-09,0.796928,0.000579096,-2.53443e-07,-2.21867e-08,0.797506,0.000578523,-3.20003e-07,2.17736e-08,0.798085,0.000577948,-2.54683e-07,-5.30296e-09,0.798662,0.000577423,-2.70592e-07,-5.61698e-10,0.799239,0.00057688,-2.72277e-07,7.54977e-09,0.799816,0.000576358,-2.49627e-07,-2.96374e-08,0.800392,0.00057577,-3.38539e-07,5.1395e-08,0.800968,0.000575247,-1.84354e-07,-5.67335e-08,0.801543,0.000574708,-3.54555e-07,5.63297e-08,0.802117,0.000574168,-1.85566e-07,-4.93759e-08,0.802691,0.000573649,-3.33693e-07,2.19646e-08,0.803264,0.000573047,-2.678e-07,2.1122e-08,0.803837,0.000572575,-2.04433e-07,-4.68482e-08,0.804409,0.000572026,-3.44978e-07,4.70613e-08,0.804981,0.000571477,-2.03794e-07,-2.21877e-08,0.805552,0.000571003,-2.70357e-07,-1.79153e-08,0.806123,0.000570408,-3.24103e-07,3.42443e-08,0.806693,0.000569863,-2.2137e-07,1.47556e-10,0.807263,0.000569421,-2.20928e-07,-3.48345e-08,0.807832,0.000568874,-3.25431e-07,1.99812e-08,0.808401,0.000568283,-2.65487e-07,1.45143e-08,0.808969,0.000567796,-2.21945e-07,-1.84338e-08,0.809536,0.000567297,-2.77246e-07,-3.83608e-10,0.810103,0.000566741,-2.78397e-07,1.99683e-08,0.81067,0.000566244,-2.18492e-07,-1.98848e-08,0.811236,0.000565747,-2.78146e-07,-3.38976e-11,0.811801,0.000565191,-2.78248e-07,2.00204e-08,0.812366,0.000564695,-2.18187e-07,-2.04429e-08,0.812931,0.000564197,-2.79516e-07,2.1467e-09,0.813495,0.000563644,-2.73076e-07,1.18561e-08,0.814058,0.000563134,-2.37507e-07,1.00334e-08,0.814621,0.000562689,-2.07407e-07,-5.19898e-08,0.815183,0.000562118,-3.63376e-07,7.87163e-08,0.815745,0.000561627,-1.27227e-07,-8.40616e-08,0.816306,0.000561121,-3.79412e-07,7.87163e-08,0.816867,0.000560598,-1.43263e-07,-5.19898e-08,0.817428,0.000560156,-2.99233e-07,1.00335e-08,0.817988,0.000559587,-2.69132e-07,1.18559e-08,0.818547,0.000559085,-2.33564e-07,2.14764e-09,0.819106,0.000558624,-2.27122e-07,-2.04464e-08,0.819664,0.000558108,-2.88461e-07,2.00334e-08,0.820222,0.000557591,-2.28361e-07,-8.24277e-11,0.820779,0.000557135,-2.28608e-07,-1.97037e-08,0.821336,0.000556618,-2.87719e-07,1.92925e-08,0.821893,0.000556101,-2.29841e-07,2.13831e-09,0.822448,0.000555647,-2.23427e-07,-2.78458e-08,0.823004,0.000555117,-3.06964e-07,4.96402e-08,0.823559,0.000554652,-1.58043e-07,-5.15058e-08,0.824113,0.000554181,-3.12561e-07,3.71737e-08,0.824667,0.000553668,-2.0104e-07,-3.75844e-08,0.82522,0.000553153,-3.13793e-07,5.35592e-08,0.825773,0.000552686,-1.53115e-07,-5.74431e-08,0.826326,0.000552207,-3.25444e-07,5.7004e-08,0.826878,0.000551728,-1.54433e-07,-5.13635e-08,0.827429,0.000551265,-3.08523e-07,2.92406e-08,0.82798,0.000550735,-2.20801e-07,-5.99424e-09,0.828531,0.000550276,-2.38784e-07,-5.26363e-09,0.829081,0.000549782,-2.54575e-07,2.70488e-08,0.82963,0.000549354,-1.73429e-07,-4.33268e-08,0.83018,0.000548878,-3.03409e-07,2.7049e-08,0.830728,0.000548352,-2.22262e-07,-5.26461e-09,0.831276,0.000547892,-2.38056e-07,-5.99057e-09,0.831824,0.000547397,-2.56027e-07,2.92269e-08,0.832371,0.000546973,-1.68347e-07,-5.13125e-08,0.832918,0.000546482,-3.22284e-07,5.68139e-08,0.833464,0.000546008,-1.51843e-07,-5.67336e-08,0.83401,0.000545534,-3.22043e-07,5.09113e-08,0.834555,0.000545043,-1.6931e-07,-2.77022e-08,0.8351,0.000544621,-2.52416e-07,2.92924e-10,0.835644,0.000544117,-2.51537e-07,2.65305e-08,0.836188,0.000543694,-1.71946e-07,-4.68105e-08,0.836732,0.00054321,-3.12377e-07,4.15021e-08,0.837275,0.000542709,-1.87871e-07,1.13355e-11,0.837817,0.000542334,-1.87837e-07,-4.15474e-08,0.838359,0.000541833,-3.12479e-07,4.69691e-08,0.838901,0.000541349,-1.71572e-07,-2.71196e-08,0.839442,0.000540925,-2.52931e-07,1.90462e-09,0.839983,0.000540425,-2.47217e-07,1.95011e-08,0.840523,0.000539989,-1.88713e-07,-2.03045e-08,0.841063,0.00053955,-2.49627e-07,2.11216e-09,0.841602,0.000539057,-2.4329e-07,1.18558e-08,0.842141,0.000538606,-2.07723e-07,1.00691e-08,0.842679,0.000538221,-1.77516e-07,-5.21324e-08,0.843217,0.00053771,-3.33913e-07,7.92513e-08,0.843755,0.00053728,-9.6159e-08,-8.60587e-08,0.844292,0.000536829,-3.54335e-07,8.61696e-08,0.844828,0.000536379,-9.58263e-08,-7.98057e-08,0.845364,0.000535948,-3.35243e-07,5.42394e-08,0.8459,0.00053544,-1.72525e-07,-1.79426e-08,0.846435,0.000535041,-2.26353e-07,1.75308e-08,0.84697,0.000534641,-1.73761e-07,-5.21806e-08,0.847505,0.000534137,-3.30302e-07,7.19824e-08,0.848038,0.000533692,-1.14355e-07,-5.69349e-08,0.848572,0.000533293,-2.8516e-07,3.65479e-08,0.849105,0.000532832,-1.75516e-07,-2.96519e-08,0.849638,0.000532392,-2.64472e-07,2.2455e-08,0.85017,0.000531931,-1.97107e-07,-5.63451e-10,0.850702,0.000531535,-1.98797e-07,-2.02011e-08,0.851233,0.000531077,-2.59401e-07,2.17634e-08,0.851764,0.000530623,-1.94111e-07,-7.24794e-09,0.852294,0.000530213,-2.15854e-07,7.22832e-09,0.852824,0.000529803,-1.94169e-07,-2.16653e-08,0.853354,0.00052935,-2.59165e-07,1.98283e-08,0.853883,0.000528891,-1.9968e-07,1.95678e-09,0.854412,0.000528497,-1.9381e-07,-2.76554e-08,0.85494,0.000528027,-2.76776e-07,4.90603e-08,0.855468,0.00052762,-1.29596e-07,-4.93764e-08,0.855995,0.000527213,-2.77725e-07,2.92361e-08,0.856522,0.000526745,-1.90016e-07,-7.96341e-09,0.857049,0.000526341,-2.13907e-07,2.61752e-09,0.857575,0.000525922,-2.06054e-07,-2.50665e-09,0.8581,0.000525502,-2.13574e-07,7.40906e-09,0.858626,0.000525097,-1.91347e-07,-2.71296e-08,0.859151,0.000524633,-2.72736e-07,4.15048e-08,0.859675,0.000524212,-1.48221e-07,-1.96802e-08,0.860199,0.000523856,-2.07262e-07,-2.23886e-08,0.860723,0.000523375,-2.74428e-07,4.96299e-08,0.861246,0.000522975,-1.25538e-07,-5.69216e-08,0.861769,0.000522553,-2.96303e-07,5.88473e-08,0.862291,0.000522137,-1.19761e-07,-5.92584e-08,0.862813,0.00052172,-2.97536e-07,5.8977e-08,0.863334,0.000521301,-1.20605e-07,-5.74403e-08,0.863855,0.000520888,-2.92926e-07,5.15751e-08,0.864376,0.000520457,-1.38201e-07,-2.96506e-08,0.864896,0.000520091,-2.27153e-07,7.42277e-09,0.865416,0.000519659,-2.04885e-07,-4.05057e-11,0.865936,0.00051925,-2.05006e-07,-7.26074e-09,0.866455,0.000518818,-2.26788e-07,2.90835e-08,0.866973,0.000518451,-1.39538e-07,-4.94686e-08,0.867492,0.000518024,-2.87944e-07,4.95814e-08,0.868009,0.000517597,-1.39199e-07,-2.96479e-08,0.868527,0.000517229,-2.28143e-07,9.40539e-09,0.869044,0.000516801,-1.99927e-07,-7.9737e-09,0.86956,0.000516378,-2.23848e-07,2.24894e-08,0.870077,0.000515997,-1.5638e-07,-2.23793e-08,0.870592,0.000515617,-2.23517e-07,7.42302e-09,0.871108,0.000515193,-2.01248e-07,-7.31283e-09,0.871623,0.000514768,-2.23187e-07,2.18283e-08,0.872137,0.000514387,-1.57702e-07,-2.03959e-08,0.872652,0.000514011,-2.1889e-07,1.50711e-10,0.873165,0.000513573,-2.18437e-07,1.97931e-08,0.873679,0.000513196,-1.59058e-07,-1.97183e-08,0.874192,0.000512819,-2.18213e-07,-5.24324e-10,0.874704,0.000512381,-2.19786e-07,2.18156e-08,0.875217,0.000512007,-1.54339e-07,-2.71336e-08,0.875728,0.000511616,-2.3574e-07,2.71141e-08,0.87624,0.000511226,-1.54398e-07,-2.17182e-08,0.876751,0.000510852,-2.19552e-07,1.54131e-10,0.877262,0.000510414,-2.1909e-07,2.11017e-08,0.877772,0.000510039,-1.55785e-07,-2.49562e-08,0.878282,0.000509652,-2.30654e-07,1.91183e-08,0.878791,0.000509248,-1.73299e-07,8.08751e-09,0.8793,0.000508926,-1.49036e-07,-5.14684e-08,0.879809,0.000508474,-3.03441e-07,7.85766e-08,0.880317,0.000508103,-6.77112e-08,-8.40242e-08,0.880825,0.000507715,-3.19784e-07,7.87063e-08,0.881333,0.000507312,-8.36649e-08,-5.19871e-08,0.88184,0.000506988,-2.39626e-07,1.00327e-08,0.882346,0.000506539,-2.09528e-07,1.18562e-08,0.882853,0.000506156,-1.73959e-07,2.14703e-09,0.883359,0.000505814,-1.67518e-07,-2.04444e-08,0.883864,0.000505418,-2.28851e-07,2.00258e-08,0.88437,0.00050502,-1.68774e-07,-5.42855e-11,0.884874,0.000504682,-1.68937e-07,-1.98087e-08,0.885379,0.000504285,-2.28363e-07,1.96842e-08,0.885883,0.000503887,-1.6931e-07,6.76342e-10,0.886387,0.000503551,-1.67281e-07,-2.23896e-08,0.88689,0.000503149,-2.3445e-07,2.92774e-08,0.887393,0.000502768,-1.46618e-07,-3.51152e-08,0.887896,0.00050237,-2.51963e-07,5.15787e-08,0.888398,0.00050202,-9.72271e-08,-5.19903e-08,0.8889,0.00050167,-2.53198e-07,3.71732e-08,0.889401,0.000501275,-1.41678e-07,-3.70978e-08,0.889902,0.00050088,-2.52972e-07,5.16132e-08,0.890403,0.000500529,-9.81321e-08,-5.01459e-08,0.890903,0.000500183,-2.4857e-07,2.9761e-08,0.891403,0.000499775,-1.59287e-07,-9.29351e-09,0.891903,0.000499428,-1.87167e-07,7.41301e-09,0.892402,0.000499076,-1.64928e-07,-2.03585e-08,0.892901,0.000498685,-2.26004e-07,1.44165e-08,0.893399,0.000498276,-1.82754e-07,2.22974e-08,0.893898,0.000497978,-1.15862e-07,-4.40013e-08,0.894395,0.000497614,-2.47866e-07,3.44985e-08,0.894893,0.000497222,-1.44371e-07,-3.43882e-08,0.89539,0.00049683,-2.47535e-07,4.34497e-08,0.895886,0.000496465,-1.17186e-07,-2.02012e-08,0.896383,0.00049617,-1.7779e-07,-2.22497e-08,0.896879,0.000495748,-2.44539e-07,4.95952e-08,0.897374,0.000495408,-9.57532e-08,-5.69217e-08,0.89787,0.000495045,-2.66518e-07,5.88823e-08,0.898364,0.000494689,-8.98713e-08,-5.93983e-08,0.898859,0.000494331,-2.68066e-07,5.95017e-08,0.899353,0.000493973,-8.95613e-08,-5.9399e-08,0.899847,0.000493616,-2.67758e-07,5.8885e-08,0.90034,0.000493257,-9.11033e-08,-5.69317e-08,0.900833,0.000492904,-2.61898e-07,4.96326e-08,0.901326,0.000492529,-1.13001e-07,-2.23893e-08,0.901819,0.000492236,-1.80169e-07,-1.968e-08,0.902311,0.000491817,-2.39209e-07,4.15047e-08,0.902802,0.000491463,-1.14694e-07,-2.71296e-08,0.903293,0.000491152,-1.96083e-07,7.409e-09,0.903784,0.000490782,-1.73856e-07,-2.50645e-09,0.904275,0.000490427,-1.81376e-07,2.61679e-09,0.904765,0.000490072,-1.73525e-07,-7.96072e-09,0.905255,0.000489701,-1.97407e-07,2.92261e-08,0.905745,0.000489394,-1.09729e-07,-4.93389e-08,0.906234,0.000489027,-2.57746e-07,4.89204e-08,0.906723,0.000488658,-1.10985e-07,-2.71333e-08,0.907211,0.000488354,-1.92385e-07,8.30861e-12,0.907699,0.00048797,-1.9236e-07,2.71001e-08,0.908187,0.000487666,-1.1106e-07,-4.88041e-08,0.908675,0.000487298,-2.57472e-07,4.89069e-08,0.909162,0.000486929,-1.10751e-07,-2.76143e-08,0.909649,0.000486625,-1.93594e-07,1.9457e-09,0.910135,0.000486244,-1.87757e-07,1.98315e-08,0.910621,0.000485928,-1.28262e-07,-2.16671e-08,0.911107,0.000485606,-1.93264e-07,7.23216e-09,0.911592,0.000485241,-1.71567e-07,-7.26152e-09,0.912077,0.000484877,-1.93352e-07,2.18139e-08,0.912562,0.000484555,-1.2791e-07,-2.03895e-08,0.913047,0.000484238,-1.89078e-07,1.39494e-10,0.913531,0.000483861,-1.8866e-07,1.98315e-08,0.914014,0.000483543,-1.29165e-07,-1.98609e-08,0.914498,0.000483225,-1.88748e-07,7.39912e-12,0.914981,0.000482847,-1.88726e-07,1.98313e-08,0.915463,0.000482529,-1.29232e-07,-1.9728e-08,0.915946,0.000482212,-1.88416e-07,-5.24035e-10,0.916428,0.000481833,-1.89988e-07,2.18241e-08,0.916909,0.000481519,-1.24516e-07,-2.71679e-08,0.917391,0.000481188,-2.06019e-07,2.72427e-08,0.917872,0.000480858,-1.24291e-07,-2.21985e-08,0.918353,0.000480543,-1.90886e-07,1.94644e-09,0.918833,0.000480167,-1.85047e-07,1.44127e-08,0.919313,0.00047984,-1.41809e-07,7.39438e-12,0.919793,0.000479556,-1.41787e-07,-1.44423e-08,0.920272,0.000479229,-1.85114e-07,-1.84291e-09,0.920751,0.000478854,-1.90642e-07,2.18139e-08,0.92123,0.000478538,-1.25201e-07,-2.58081e-08,0.921708,0.00047821,-2.02625e-07,2.18139e-08,0.922186,0.00047787,-1.37183e-07,-1.84291e-09,0.922664,0.00047759,-1.42712e-07,-1.44423e-08,0.923141,0.000477262,-1.86039e-07,7.34701e-12,0.923618,0.00047689,-1.86017e-07,1.44129e-08,0.924095,0.000476561,-1.42778e-07,1.94572e-09,0.924572,0.000476281,-1.36941e-07,-2.21958e-08,0.925048,0.000475941,-2.03528e-07,2.72327e-08,0.925523,0.000475615,-1.2183e-07,-2.71304e-08,0.925999,0.00047529,-2.03221e-07,2.16843e-08,0.926474,0.000474949,-1.38168e-07,-2.16005e-12,0.926949,0.000474672,-1.38175e-07,-2.16756e-08,0.927423,0.000474331,-2.03202e-07,2.71001e-08,0.927897,0.000474006,-1.21902e-07,-2.71201e-08,0.928371,0.000473681,-2.03262e-07,2.17757e-08,0.928845,0.00047334,-1.37935e-07,-3.78028e-10,0.929318,0.000473063,-1.39069e-07,-2.02636e-08,0.929791,0.000472724,-1.9986e-07,2.18276e-08,0.930263,0.000472389,-1.34377e-07,-7.44231e-09,0.930736,0.000472098,-1.56704e-07,7.94165e-09,0.931208,0.000471809,-1.32879e-07,-2.43243e-08,0.931679,0.00047147,-2.05851e-07,2.97508e-08,0.932151,0.000471148,-1.16599e-07,-3.50742e-08,0.932622,0.000470809,-2.21822e-07,5.09414e-08,0.933092,0.000470518,-6.89976e-08,-4.94821e-08,0.933563,0.000470232,-2.17444e-07,2.77775e-08,0.934033,0.00046988,-1.34111e-07,-2.02351e-09,0.934502,0.000469606,-1.40182e-07,-1.96835e-08,0.934972,0.000469267,-1.99232e-07,2.11529e-08,0.935441,0.000468932,-1.35774e-07,-5.32332e-09,0.93591,0.000468644,-1.51743e-07,1.40413e-10,0.936378,0.000468341,-1.51322e-07,4.76166e-09,0.936846,0.000468053,-1.37037e-07,-1.9187e-08,0.937314,0.000467721,-1.94598e-07,1.23819e-08,0.937782,0.000467369,-1.57453e-07,2.92642e-08,0.938249,0.000467142,-6.96601e-08,-6.98342e-08,0.938716,0.000466793,-2.79163e-07,7.12586e-08,0.939183,0.000466449,-6.53869e-08,-3.63863e-08,0.939649,0.000466209,-1.74546e-07,1.46818e-08,0.940115,0.000465904,-1.305e-07,-2.2341e-08,0.940581,0.000465576,-1.97523e-07,1.50774e-08,0.941046,0.000465226,-1.52291e-07,2.16359e-08,0.941511,0.000464986,-8.73832e-08,-4.20162e-08,0.941976,0.000464685,-2.13432e-07,2.72198e-08,0.942441,0.00046434,-1.31773e-07,-7.2581e-09,0.942905,0.000464055,-1.53547e-07,1.81263e-09,0.943369,0.000463753,-1.48109e-07,7.58386e-12,0.943832,0.000463457,-1.48086e-07,-1.84298e-09,0.944296,0.000463155,-1.53615e-07,7.36433e-09,0.944759,0.00046287,-1.31522e-07,-2.76143e-08,0.945221,0.000462524,-2.14365e-07,4.34883e-08,0.945684,0.000462226,-8.39003e-08,-2.71297e-08,0.946146,0.000461977,-1.65289e-07,5.42595e-09,0.946608,0.000461662,-1.49012e-07,5.42593e-09,0.947069,0.000461381,-1.32734e-07,-2.71297e-08,0.94753,0.000461034,-2.14123e-07,4.34881e-08,0.947991,0.000460736,-8.36585e-08,-2.76134e-08,0.948452,0.000460486,-1.66499e-07,7.36083e-09,0.948912,0.000460175,-1.44416e-07,-1.82993e-09,0.949372,0.000459881,-1.49906e-07,-4.11073e-11,0.949832,0.000459581,-1.50029e-07,1.99434e-09,0.950291,0.000459287,-1.44046e-07,-7.93627e-09,0.950751,0.000458975,-1.67855e-07,2.97507e-08,0.951209,0.000458728,-7.86029e-08,-5.1462e-08,0.951668,0.000458417,-2.32989e-07,5.6888e-08,0.952126,0.000458121,-6.2325e-08,-5.68806e-08,0.952584,0.000457826,-2.32967e-07,5.14251e-08,0.953042,0.000457514,-7.86914e-08,-2.96107e-08,0.953499,0.000457268,-1.67523e-07,7.41296e-09,0.953956,0.000456955,-1.45285e-07,-4.11262e-11,0.954413,0.000456665,-1.45408e-07,-7.24847e-09,0.95487,0.000456352,-1.67153e-07,2.9035e-08,0.955326,0.000456105,-8.00484e-08,-4.92869e-08,0.955782,0.000455797,-2.27909e-07,4.89032e-08,0.956238,0.000455488,-8.11994e-08,-2.71166e-08,0.956693,0.000455244,-1.62549e-07,-4.13678e-11,0.957148,0.000454919,-1.62673e-07,2.72821e-08,0.957603,0.000454675,-8.0827e-08,-4.94824e-08,0.958057,0.000454365,-2.29274e-07,5.14382e-08,0.958512,0.000454061,-7.49597e-08,-3.7061e-08,0.958965,0.0004538,-1.86143e-07,3.72013e-08,0.959419,0.000453539,-7.45389e-08,-5.21396e-08,0.959873,0.000453234,-2.30958e-07,5.21476e-08,0.960326,0.000452928,-7.45146e-08,-3.72416e-08,0.960778,0.000452667,-1.8624e-07,3.72143e-08,0.961231,0.000452407,-7.45967e-08,-5.20109e-08,0.961683,0.000452101,-2.30629e-07,5.16199e-08,0.962135,0.000451795,-7.57696e-08,-3.52595e-08,0.962587,0.000451538,-1.81548e-07,2.98133e-08,0.963038,0.000451264,-9.2108e-08,-2.43892e-08,0.963489,0.000451007,-1.65276e-07,8.13892e-09,0.96394,0.000450701,-1.40859e-07,-8.16647e-09,0.964391,0.000450394,-1.65358e-07,2.45269e-08,0.964841,0.000450137,-9.17775e-08,-3.03367e-08,0.965291,0.000449863,-1.82787e-07,3.7215e-08,0.965741,0.000449609,-7.11424e-08,-5.89188e-08,0.96619,0.00044929,-2.47899e-07,7.92509e-08,0.966639,0.000449032,-1.01462e-08,-7.92707e-08,0.967088,0.000448773,-2.47958e-07,5.90181e-08,0.967537,0.000448455,-7.0904e-08,-3.75925e-08,0.967985,0.0004482,-1.83681e-07,3.17471e-08,0.968433,0.000447928,-8.84401e-08,-2.97913e-08,0.968881,0.000447662,-1.77814e-07,2.78133e-08,0.969329,0.000447389,-9.4374e-08,-2.18572e-08,0.969776,0.000447135,-1.59946e-07,1.10134e-11,0.970223,0.000446815,-1.59913e-07,2.18132e-08,0.97067,0.000446561,-9.44732e-08,-2.76591e-08,0.971116,0.000446289,-1.7745e-07,2.92185e-08,0.971562,0.000446022,-8.97948e-08,-2.96104e-08,0.972008,0.000445753,-1.78626e-07,2.96185e-08,0.972454,0.000445485,-8.97706e-08,-2.92588e-08,0.972899,0.000445218,-1.77547e-07,2.78123e-08,0.973344,0.000444946,-9.41103e-08,-2.23856e-08,0.973789,0.000444691,-1.61267e-07,2.12559e-09,0.974233,0.000444374,-1.5489e-07,1.38833e-08,0.974678,0.000444106,-1.13241e-07,1.94591e-09,0.975122,0.000443886,-1.07403e-07,-2.16669e-08,0.975565,0.000443606,-1.72404e-07,2.5117e-08,0.976009,0.000443336,-9.70526e-08,-1.91963e-08,0.976452,0.000443085,-1.54642e-07,-7.93627e-09,0.976895,0.000442752,-1.7845e-07,5.09414e-08,0.977338,0.000442548,-2.56262e-08,-7.66201e-08,0.97778,0.000442266,-2.55486e-07,7.67249e-08,0.978222,0.000441986,-2.53118e-08,-5.14655e-08,0.978664,0.000441781,-1.79708e-07,9.92773e-09,0.979106,0.000441451,-1.49925e-07,1.17546e-08,0.979547,0.000441186,-1.14661e-07,2.65868e-09,0.979988,0.000440965,-1.06685e-07,-2.23893e-08,0.980429,0.000440684,-1.73853e-07,2.72939e-08,0.980869,0.000440419,-9.19716e-08,-2.71816e-08,0.98131,0.000440153,-1.73516e-07,2.18278e-08,0.98175,0.000439872,-1.08033e-07,-5.24833e-10,0.982189,0.000439654,-1.09607e-07,-1.97284e-08,0.982629,0.000439376,-1.68793e-07,1.98339e-08,0.983068,0.000439097,-1.09291e-07,-2.62901e-12,0.983507,0.000438879,-1.09299e-07,-1.98234e-08,0.983946,0.000438601,-1.68769e-07,1.96916e-08,0.984384,0.000438322,-1.09694e-07,6.6157e-10,0.984823,0.000438105,-1.0771e-07,-2.23379e-08,0.985261,0.000437823,-1.74723e-07,2.90855e-08,0.985698,0.00043756,-8.74669e-08,-3.43992e-08,0.986136,0.000437282,-1.90665e-07,4.89068e-08,0.986573,0.000437048,-4.39442e-08,-4.20188e-08,0.98701,0.000436834,-1.7e-07,-4.11073e-11,0.987446,0.000436494,-1.70124e-07,4.21832e-08,0.987883,0.00043628,-4.35742e-08,-4.94824e-08,0.988319,0.000436044,-1.92021e-07,3.6537e-08,0.988755,0.00043577,-8.24102e-08,-3.70611e-08,0.989191,0.000435494,-1.93593e-07,5.21026e-08,0.989626,0.000435263,-3.72855e-08,-5.21402e-08,0.990061,0.000435032,-1.93706e-07,3.7249e-08,0.990496,0.000434756,-8.19592e-08,-3.72512e-08,0.990931,0.000434481,-1.93713e-07,5.21511e-08,0.991365,0.00043425,-3.72595e-08,-5.21439e-08,0.991799,0.000434019,-1.93691e-07,3.72152e-08,0.992233,0.000433743,-8.20456e-08,-3.71123e-08,0.992667,0.000433468,-1.93382e-07,5.16292e-08,0.9931,0.000433236,-3.84947e-08,-5.01953e-08,0.993533,0.000433008,-1.89081e-07,2.99427e-08,0.993966,0.00043272,-9.92525e-08,-9.9708e-09,0.994399,0.000432491,-1.29165e-07,9.94051e-09,0.994831,0.000432263,-9.93434e-08,-2.97912e-08,0.995263,0.000431975,-1.88717e-07,4.96198e-08,0.995695,0.000431746,-3.98578e-08,-4.94785e-08,0.996127,0.000431518,-1.88293e-07,2.9085e-08,0.996558,0.000431229,-1.01038e-07,-7.25675e-09,0.996989,0.000431005,-1.22809e-07,-5.79945e-11,0.99742,0.000430759,-1.22983e-07,7.48873e-09,0.997851,0.000430536,-1.00516e-07,-2.98969e-08,0.998281,0.000430245,-1.90207e-07,5.24942e-08,0.998711,0.000430022,-3.27246e-08,-6.08706e-08,0.999141,0.000429774,-2.15336e-07,7.17788e-08,0.999571,0.000429392,0.,0.};$/;"	m	namespace:cv::gpu::device::color_detail
c_str	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
cache_line_size	/usr/local/include/opencv2/ml/ml.hpp	/^    int cache_line_size;$/;"	m	class:CvSVMSolver
cache_size	/usr/local/include/opencv2/ml/ml.hpp	/^    int cache_size;$/;"	m	class:CvSVMSolver
calc	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calc(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int tid)$/;"	f	struct:cv::gpu::device::vec_distance_detail::VecDiffCachedCalculator
calc	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::gpu::device::VecDiffCachedRegister
calc	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::gpu::device::VecDiffGlobal
calcCheck	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcCheck(const T1*, const T2*, int, Dist&, int)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcCheck	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ void calcCheck(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int ind)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcVecDiffCached	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    __device__ __forceinline__ void calcVecDiffCached(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::gpu::device
calcVecDiffGlobal	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^    __device__ void calcVecDiffGlobal(const T1* vec1, const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::gpu::device
calcWithoutCheck	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcWithoutCheck(const T1*, const T2*, Dist&)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcWithoutCheck	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ void calcWithoutCheck(const T1* vecCached, const T2* vecGlob, Dist& dist)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calc_func	/usr/local/include/opencv2/ml/ml.hpp	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel
calc_rho_func	/usr/local/include/opencv2/ml/ml.hpp	/^    CalcRho calc_rho_func;$/;"	m	class:CvSVMSolver
calc_var_importance	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvRTParams
call	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::gpu::device::transform_detail::TransformDispatcher
call	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::gpu::device::transform_detail::TransformDispatcher
callback	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvCallback callback;$/;"	m	union:__anon276
cam_params_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat cam_params_;$/;"	m	class:cv::detail::BundleAdjusterBase
camera	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera
cameraCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     cameraCount;$/;"	m	class:CvCalibFilter
cameraParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvCamera cameraParams[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
cameras	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<detail::CameraParams> cameras() const { return cameras_; }$/;"	f	class:cv::Stitcher
cameras_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<detail::CameraParams> cameras_;$/;"	m	class:cv::Stitcher
can_use_gpu_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    bool can_use_gpu_;$/;"	m	class:cv::detail::MultiBandBlender
cand_weight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder
cannyBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    CannyBuf cannyBuf;$/;"	m	struct:cv::gpu::HoughCirclesBuf
cannyBuf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    CannyBuf cannyBuf_;$/;"	m	class:cv::gpu::GeneralizedHough_GPU
cap	/usr/local/include/opencv2/highgui/highgui.hpp	/^    Ptr<CvCapture> cap;$/;"	m	class:cv::VideoCapture
capacity	/usr/local/include/opencv2/core/operations.hpp	/^        size_t capacity;$/;"	m	struct:cv::Vector::Hdr
capacity	/usr/local/include/opencv2/core/operations.hpp	/^    size_t capacity() const { return hdr.capacity; }$/;"	f	class:cv::Vector
capacity	/usr/local/include/opencv2/flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNResultSet
capacity	/usr/local/include/opencv2/flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNSimpleResultSet
capacity	/usr/local/include/opencv2/flann/result_set.h	/^    size_t capacity;$/;"	m	class:cvflann::RadiusResultSet
capacity_	/usr/local/include/opencv2/flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
capacity_	/usr/local/include/opencv2/flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNUniqueResultSet
capture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	v
capture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);$/;"	v
capture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	v
capture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	v
capture	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
captureSession	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) AVCaptureSession* captureSession;$/;"	v
captureSessionLoaded	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, readonly) BOOL captureSessionLoaded;$/;"	v
cascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	v
cascadeForTracking	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        cv::CascadeClassifier cascadeForTracking;$/;"	m	class:DetectionBasedTracker
cast	/usr/local/include/opencv2/flann/any.h	/^    T& cast()$/;"	f	struct:cvflann::any
cast	/usr/local/include/opencv2/flann/any.h	/^    const T& cast() const$/;"	f	struct:cvflann::any
cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^            template <typename VecS> static __device__ __forceinline__ VecD cast(const VecS& v)$/;"	f	struct:cv::gpu::device::vec_math_detail::SatCastHelper
cat_count	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData
cat_map	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData
cat_ofs	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData
cat_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
cb	/usr/local/include/opencv2/contrib/contrib.hpp	/^        BundleAdjustCallback cb;$/;"	m	class:cv::LevMarqSparse
cbBounds	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar cbBounds[3];$/;"	m	struct:CvBGCodeBookModel
cb_index_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    float cb_index_;$/;"	m	class:cvflann::KMeansIndex
cbmap	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBGCodeBookElem** cbmap;$/;"	m	struct:CvBGCodeBookModel
cctable	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat
ce	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* ce;$/;"	m	struct:CvCliqueFinder
cellSize	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP Size cellSize;$/;"	m	struct:cv::HOGDescriptor
cell_bit_size_	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    static const unsigned int cell_bit_size_ = CHAR_BIT * sizeof(size_t);$/;"	m	class:cvflann::DynamicBitset
cell_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size cell_size;$/;"	m	struct:cv::gpu::HOGDescriptor
cell_size	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size cell_size;$/;"	m	struct:cv::ocl::HOGDescriptor
center	/usr/local/include/opencv2/core/types_c.h	/^    CvPoint2D32f center;  \/* Center of the box.                          *\/$/;"	m	struct:CvBox2D
center_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Point3d center_;$/;"	m	class:cv::GlCamera
centersAlgFunction	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    typedef void (HierarchicalClusteringIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::HierarchicalClusteringIndex
centersAlgFunction	/usr/local/include/opencv2/flann/kmeans_index.h	/^    typedef void (KMeansIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::KMeansIndex
centers_init_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
centers_init_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::KMeansIndex
centre	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double value, centre;$/;"	m	class:CvFuzzyCurve
chain	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge
channelSeq	/usr/local/include/opencv2/core/types_c.h	/^    char channelSeq[4];     \/* ditto *\/$/;"	m	struct:_IplImage
channels	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline int GpuMat::channels() const$/;"	f	class:cv::gpu::GpuMat
channels	/usr/local/include/opencv2/core/mat.hpp	/^inline int Mat::channels() const { return CV_MAT_CN(flags); }$/;"	f	class:cv::Mat
channels	/usr/local/include/opencv2/core/mat.hpp	/^inline int SparseMat::channels() const$/;"	f	class:cv::SparseMat
channels	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::channels() const$/;"	f	class:cv::Mat_
channels	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::channels() const$/;"	f	class:cv::SparseMat_
channels	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int channels() const { return CV_MAT_CN(type_); }$/;"	f	class:cv::ogl::Buffer
channels	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int channels() const { return CV_MAT_CN(type_); }$/;"	f	class:cv::GlBuffer
channels	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int channels() const { return CV_MAT_CN(type_); }$/;"	f	class:cv::GlTexture
channels	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::channels() const$/;"	f	class:cv::Seq
channels	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        int channels;$/;"	m	struct:cv::gpu::device::SingleMaskChannels
channels	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int channels() const { return image ? image->nChannels : 0; }$/;"	f	class:CvImage
channels	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int channels() const { return matrix ? CV_MAT_CN(matrix->type) : 0; }$/;"	f	class:CvMatrix
channels	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline int oclMat::channels() const$/;"	f	class:cv::ocl::oclMat
check	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        template <> struct StaticAssert<true> {static __CV_GPU_HOST_DEVICE__ void check(){}};$/;"	f	struct:cv::gpu::StaticAssert
check	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^            __OPENCV_GPU_HOST_DEVICE__ static void check() {};$/;"	f	struct:cv::gpu::device::Static
check	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int)$/;"	f	struct:cv::gpu::device::WithOutMask
check	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int, int)$/;"	f	struct:cv::gpu::device::WithOutMask
check	/usr/local/include/opencv2/ml/ml.hpp	/^#undef check$/;"	d
child	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int child;$/;"	m	struct:CvHaarStageClassifier
child1	/usr/local/include/opencv2/flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child1	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
child2	/usr/local/include/opencv2/flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child2	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
children	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int children[8];$/;"	m	struct:cv::Octree::Node
children	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<vector<int> > children;$/;"	m	class:cv::of2::FabMap2
childs	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^        Node** childs;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
childs	/usr/local/include/opencv2/flann/kmeans_index.h	/^        KMeansNode** childs;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
chooseCenters	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::HierarchicalClusteringIndex
chooseCenters	/usr/local/include/opencv2/flann/kmeans_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::KMeansIndex
chooseCentersGonzales	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void chooseCentersGonzales(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersGonzales	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void chooseCentersGonzales(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersKMeanspp	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void chooseCentersKMeanspp(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersKMeanspp	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void chooseCentersKMeanspp(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersRandom	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void chooseCentersRandom(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersRandom	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void chooseCentersRandom(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
choose_policy	/usr/local/include/opencv2/flann/any.h	/^struct choose_policy$/;"	s	namespace:cvflann::anyimpl
choose_policy	/usr/local/include/opencv2/flann/any.h	/^struct choose_policy<T*>$/;"	s	namespace:cvflann::anyimpl
choose_policy	/usr/local/include/opencv2/flann/any.h	/^struct choose_policy<any>$/;"	s	namespace:cvflann::anyimpl
chromaFormat	/usr/local/include/opencv2/gpu/gpu.hpp	/^        ChromaFormat chromaFormat;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
clCxt	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Context *clCxt;$/;"	m	class:cv::ocl::oclMat
clCxt	/usr/local/include/opencv2/ocl/ocl.hpp	/^            static auto_ptr<Context> clCxt;$/;"	m	class:cv::ocl::Context
clTree	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    Mat clTree;$/;"	m	class:cv::of2::FabMap
classCounters	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<int> classCounters;$/;"	m	class:cv::FernClassifier
classID	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        int classID;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
classNames	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    vector<string> classNames;$/;"	m	class:cv::LatentSvmDetector
class_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int class_count;$/;"	m	class:CvGBTrees
class_id	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int class_id; \/\/!< object class (if the keypoints need to be clustered by an object they belong to)$/;"	m	class:cv::KeyPoint
class_id	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  std::string class_id;$/;"	m	struct:cv::linemod::Match
class_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int class_idx;$/;"	m	struct:CvDTreeNode
class_labels	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* class_labels;$/;"	m	class:CvGBTrees
class_labels	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* class_labels;$/;"	m	class:CvSVM
class_map	/usr/local/include/opencv2/ml/ml.hpp	/^    std::map<std::string, int> class_map;$/;"	m	class:CvMLData
class_templates	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  TemplatesMap class_templates;$/;"	m	class:cv::linemod::Detector
class_weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams
class_weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* class_weights;$/;"	m	class:CvSVM
classes	/usr/local/include/opencv2/legacy/legacy.hpp	/^    inline int classes() const { return classes_; }$/;"	f	class:cv::RTreeClassifier
classes	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int classes() { return classes_; }$/;"	f	class:cv::RandomizedTree
classes_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int classes_;$/;"	m	class:cv::RTreeClassifier
classes_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int classes_;$/;"	m	class:cv::RandomizedTree
classifier	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Ptr<FernClassifier> classifier;$/;"	m	class:cv::FernDescriptorMatcher
classifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier
classifier_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    RTreeClassifier classifier_;$/;"	m	class:cv::CalonderDescriptorExtractor
classifiers	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        vector<DTree> classifiers;$/;"	m	class:cv::CascadeClassifier::Data
clear	/usr/local/include/opencv2/core/operations.hpp	/^    void clear() { resize(0); }$/;"	f	class:cv::Vector
clear	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::clear()$/;"	f	class:cv::Seq
clear	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void clear()$/;"	f	class:cvflann::DynamicBitset
clear	/usr/local/include/opencv2/flann/heap.h	/^    void clear()$/;"	f	class:cvflann::Heap
clear	/usr/local/include/opencv2/flann/result_set.h	/^    inline void clear()$/;"	f	class:cvflann::RadiusUniqueResultSet
clear	/usr/local/include/opencv2/flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
clear	/usr/local/include/opencv2/flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNUniqueResultSet
clear	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void clear() { detach(); }$/;"	f	class:CvImage
clear	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void clear()$/;"	f	class:CvMatrix
clipInt	/usr/local/include/opencv2/ts/ts.hpp	/^inline int clipInt( int val, int min_val, int max_val )$/;"	f	namespace:cvtest
clone	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::clone() const$/;"	f	class:cv::gpu::GpuMat
clone	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::clone() const$/;"	f	class:cv::SparseMat_
clone	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::clone() const$/;"	f	class:cv::Mat
clone	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat SparseMat::clone() const$/;"	f	class:cv::SparseMat
clone	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::clone() const$/;"	f	class:cv::Mat_
clone	/usr/local/include/opencv2/core/operations.hpp	/^    Vector<_Tp> clone() const$/;"	f	class:cv::Vector
clone	/usr/local/include/opencv2/core/operations.hpp	/^    static void* clone(const void* ptr)$/;"	f	struct:cv::RTTIImpl
clone	/usr/local/include/opencv2/core/types_c.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo
clone	/usr/local/include/opencv2/flann/any.h	/^    virtual void clone(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
clone	/usr/local/include/opencv2/flann/any.h	/^    virtual void clone(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
clone	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage clone() { return CvImage(image ? cvCloneImage(image) : 0); }$/;"	f	class:CvImage
clone	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix clone() { return CvMatrix(matrix ? cvCloneMat(matrix) : 0); }$/;"	f	class:CvMatrix
clone	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::clone() const$/;"	f	class:cv::ocl::oclMat
clone_op	/usr/local/include/opencv2/features2d/features2d.hpp	/^        static Mat clone_op( Mat m ) { return m.clone(); }$/;"	f	class:cv::GenericDescriptorMatcher::KeyPointCollection
clone_op	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static Mat clone_op( Mat m ) { return m.clone(); }$/;"	f	class:cv::DescriptorMatcher
cls_labels	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat*  cls_labels;$/;"	m	class:CvNormalBayesClassifier
clusterCount	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int clusterCount;$/;"	m	class:cv::BOWKMeansTrainer
clusterSize	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double clusterSize;$/;"	m	class:cv::of2::BOWMSCTrainer
clusteringDistance	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double clusteringDistance;$/;"	m	class:cv::LDetector
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon175
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon176
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon177
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=2};$/;"	e	enum:cv::gpu::device::VecTraits::__anon178
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=3};$/;"	e	enum:cv::gpu::device::VecTraits::__anon179
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=4};$/;"	e	enum:cv::gpu::device::VecTraits::__anon180
cn	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        enum {cn=8};$/;"	e	enum:cv::gpu::device::VecTraits::__anon181
code	/usr/local/include/opencv2/core/core.hpp	/^    int code; \/\/\/< error code @see CVStatus$/;"	m	class:cv::Exception
code	/usr/local/include/opencv2/imgproc/types_c.h	/^    char      code;$/;"	m	struct:CvChainPtReader
code	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^        int code;$/;"	m	struct:perf::CvtColorInfo
code	/usr/local/include/opencv2/ts/ts.hpp	/^    int code;$/;"	m	struct:cvtest::TestInfo
codec	/usr/local/include/opencv2/gpu/gpu.hpp	/^        Codec codec;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
coef0	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams
coeffObjectSizeToTrack	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            float coeffObjectSizeToTrack;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffObjectSpeedUsingInPrediction	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            float coeffObjectSpeedUsingInPrediction;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffTrackingWindowSize	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            float coeffTrackingWindowSize;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera
coi	/usr/local/include/opencv2/core/types_c.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI
coi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int coi() const { return !image || !image->roi ? 0 : image->roi->coi; }$/;"	f	class:CvImage
col	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::col(int x) const$/;"	f	class:cv::gpu::GpuMat
col	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::col(int x) const { return Mat(*this, Range::all(), Range(x, x+1)); }$/;"	f	class:cv::Mat
col	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::col(int x) const$/;"	f	class:cv::Mat_
col	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, 1> Matx<_Tp, m, n>::col(int j) const$/;"	f	class:cv::Matx
col	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::col(int x) const$/;"	f	class:cv::ocl::oclMat
colRange	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::colRange(Range r) const$/;"	f	class:cv::gpu::GpuMat
colRange	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::gpu::GpuMat
colRange	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::colRange(const Range& r) const$/;"	f	class:cv::Mat
colRange	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::colRange(int startcol, int endcol) const$/;"	f	class:cv::Mat
colRange	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::colRange(const Range &r) const$/;"	f	class:cv::ocl::oclMat
colRange	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::ocl::oclMat
collectGarbage	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesFinder
collectGarbage	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesMatcher
color	/usr/local/include/opencv2/core/core_c.h	/^  CvScalar color;       \/\/Qt:ColorFont -> cvScalar(blue_component, green_component, red\\_component[, alpha_component])$/;"	m	struct:CvFont
color	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape
colorMode	/usr/local/include/opencv2/contrib/retina.hpp	/^               bool colorMode, normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
colorModel	/usr/local/include/opencv2/core/types_c.h	/^    char colorModel[4];     \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage
color_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Buffer color_;$/;"	m	class:cv::ogl::Arrays
color_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    GlBuffer color_;$/;"	m	class:cv::GlArrays
color_detail	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^    namespace color_detail$/;"	n	namespace:cv::gpu::device
colors_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat colors_;$/;"	m	class:cv::gpu::GMG_GPU
colors_	/usr/local/include/opencv2/video/background_segm.hpp	/^    cv::Mat_<unsigned int> colors_;$/;"	m	class:cv::BackgroundSubtractorGMG
cols	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            int cols;$/;"	m	struct:cv::gpu::PtrStepSz
cols	/usr/local/include/opencv2/core/gpumat.hpp	/^        int rows, cols;$/;"	m	class:cv::gpu::GpuMat
cols	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int cols() const { return cols_; }$/;"	f	class:cv::ogl::Buffer
cols	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int cols() const { return cols_; }$/;"	f	class:cv::ogl::Texture2D
cols	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int cols() const { return cols_; }$/;"	f	class:cv::GlBuffer
cols	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int cols() const { return cols_; }$/;"	f	class:cv::GlTexture
cols	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int cols() const { return vertex_.cols(); }$/;"	f	class:cv::GlArrays
cols	/usr/local/include/opencv2/core/types_c.h	/^        int cols;$/;"	m	union:CvMat::__anon48
cols	/usr/local/include/opencv2/core/types_c.h	/^    int cols;$/;"	m	struct:CvMat
cols	/usr/local/include/opencv2/flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::Matrix
cols	/usr/local/include/opencv2/flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::UntypedMatrix
cols	/usr/local/include/opencv2/flann/saving.h	/^    size_t cols;$/;"	m	struct:cvflann::IndexHeader
cols	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int rows, cols;$/;"	m	class:cv::gpu::CudaMem
cols	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int cols() const { return matrix ? matrix->cols : 0; }$/;"	f	class:CvMatrix
cols	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int rows, cols;$/;"	m	class:cv::ocl::oclMat
cols_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int cols_;$/;"	m	class:cv::ogl::Buffer
cols_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int cols_;$/;"	m	class:cv::ogl::Texture2D
cols_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int cols_;$/;"	m	class:cv::GlBuffer
cols_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int cols_;$/;"	m	class:cv::GlTexture
columnBorderType	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int rowBorderType, columnBorderType;$/;"	m	class:cv::FilterEngine
columnFilter	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Ptr<BaseColumnFilter> columnFilter;$/;"	m	class:cv::FilterEngine
comLen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos
comparators	/usr/local/include/opencv2/ts/ts_perf.hpp	/^namespace comparators$/;"	n	namespace:perf
compatible	/usr/local/include/opencv2/flann/any.h	/^    bool compatible(const any& x) const$/;"	f	struct:cvflann::any
completeSymmFlag	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    bool completeSymmFlag;$/;"	m	class:CvLevMarq
complexity	/usr/local/include/opencv2/ml/ml.hpp	/^    int complexity;$/;"	m	struct:CvDTreeNode
component	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<int> component() const { return indices_; }$/;"	f	class:cv::Stitcher
compose_resol_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double compose_resol_;$/;"	m	class:cv::Stitcher
compositingResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double compositingResol() const { return compose_resol_; }$/;"	f	class:cv::Stitcher
compressionMethod	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int compressionMethod;$/;"	m	class:cv::FernDescriptorMatcher::Params
compressionMethod	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int compressionMethod;$/;"	m	class:cv::FernClassifier
compute	/usr/local/include/opencv2/core/mat.hpp	/^    SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w, Matx<_Tp, m, nm>& u, Matx<_Tp, n, nm>& vt )$/;"	f	class:cv::SVD
compute	/usr/local/include/opencv2/core/mat.hpp	/^SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w )$/;"	f	class:cv::SVD
computeBoundingBox	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void computeBoundingBox(BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
computeClustering	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void computeClustering(NodePtr node, int* dsindices, int indices_length, int branching, int level)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeClustering	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void computeClustering(KMeansNodePtr node, int* indices, int indices_length, int branching, int level)$/;"	f	class:cvflann::KMeansIndex
computeDistanceRaport	/usr/local/include/opencv2/flann/index_testing.h	/^typename Distance::ResultType computeDistanceRaport(const Matrix<typename Distance::ElementType>& inputData, typename Distance::ElementType* target,$/;"	f	namespace:cvflann
computeImpl	/usr/local/include/opencv2/legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::computeImpl( const Mat& image,$/;"	f	class:cv::CalonderDescriptorExtractor
computeInitialDistances	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    DistanceType computeInitialDistances(const ElementType* vec, std::vector<DistanceType>& dists)$/;"	f	class:cvflann::KDTreeSingleIndex
computeLabels	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void computeLabels(int* dsindices, int indices_length,  int* centers, int centers_length, int* labels, DistanceType& cost)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeMinMax	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void computeMinMax(int* ind, int count, int dim, ElementType& min_elem, ElementType& max_elem)$/;"	f	class:cvflann::KDTreeSingleIndex
computeNodeStatistics	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void computeNodeStatistics(KMeansNodePtr node, int* indices, int indices_length)$/;"	f	class:cvflann::KMeansIndex
compute_ground_truth	/usr/local/include/opencv2/flann/ground_truth.h	/^void compute_ground_truth(const Matrix<typename Distance::ElementType>& dataset, const Matrix<typename Distance::ElementType>& testset, Matrix<int>& matches,$/;"	f	namespace:cvflann
condens	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvConDensUpdateByTime( CvConDensation* condens);$/;"	v
condens	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvReleaseConDensation( CvConDensation** condens );$/;"	v
condensed_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int condensed_idx;$/;"	m	struct:CvDTreeSplit
confThresh	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    double confThresh() const { return conf_thresh_; }$/;"	f	class:cv::detail::BundleAdjusterBase
conf_thresh_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    double conf_thresh_;$/;"	m	class:cv::detail::BundleAdjusterBase
conf_thresh_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double conf_thresh_;$/;"	m	class:cv::Stitcher
confidence	/usr/local/include/opencv2/features2d/features2d.hpp	/^      double confidence;$/;"	m	struct:cv::SimpleBlobDetector::Center
confidence	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    double confidence;                  \/\/ Confidence two images are from the same panorama$/;"	m	struct:cv::detail::MatchesInfo
confidences	/usr/local/include/opencv2/gpu/gpu.hpp	/^   vector<double> confidences;$/;"	m	struct:cv::gpu::HOGConfidence
confidences	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^   vector<double> confidences;$/;"	m	struct:cv::DetectionROI
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<double, 2> Vec<double, 2>::conj() const$/;"	f	class:cv::Vec
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<double, 4> Vec<double, 4>::conj() const$/;"	f	class:cv::Vec
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<float, 2> Vec<float, 2>::conj() const$/;"	f	class:cv::Vec
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<float, 4> Vec<float, 4>::conj() const$/;"	f	class:cv::Vec
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp> Complex<_Tp>::conj() const$/;"	f	class:cv::Complex
conj	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::conj() const$/;"	f	class:cv::Scalar_
conjugate	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> Vec<_Tp, 2> conjugate(const Vec<_Tp, 2>& v)$/;"	f	namespace:cv
conjugate	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> Vec<_Tp, 4> conjugate(const Vec<_Tp, 4>& v)$/;"	f	namespace:cv
constBorderRow	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<uchar> constBorderRow;$/;"	m	class:cv::FilterEngine
constBorderValue	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<uchar> constBorderValue;$/;"	m	class:cv::FilterEngine
const_iterator	/usr/local/include/opencv2/core/operations.hpp	/^    typedef const _Tp* const_iterator;$/;"	t	class:cv::Vector
const_iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_pointer	/usr/local/include/opencv2/core/core.hpp	/^    typedef const value_type* const_pointer;$/;"	t	class:cv::Allocator
const_reference	/usr/local/include/opencv2/core/core.hpp	/^    typedef const value_type& const_reference;$/;"	t	class:cv::Allocator
const_reference	/usr/local/include/opencv2/core/operations.hpp	/^    typedef const _Tp& const_reference;$/;"	t	class:cv::Vector
construct	/usr/local/include/opencv2/core/core.hpp	/^    void construct(pointer p, const _Tp& v) { new(static_cast<void*>(p)) _Tp(v); }$/;"	f	class:cv::Allocator
container_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
contains	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool Rect_<_Tp>::contains(const Point_<_Tp>& pt) const$/;"	f	class:cv::Rect_
context	/usr/local/include/opencv2/ts/ts.hpp	/^    int context;$/;"	m	struct:cvtest::MatComparator
contour	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	v
contour	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp
contour	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvContour* contour;$/;"	m	struct:CvLCMNode
contour1mask_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contour2mask_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contours_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<std::vector<Point> > contours_;$/;"	m	class:cv::detail::DpSeamFinder
contrastThreshold	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW double contrastThreshold;$/;"	m	class:cv::SIFT
controlMatrix	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat controlMatrix;      \/\/!< control matrix (B) (not used if there is no control)$/;"	m	class:cv::KalmanFilter
control_matrix	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman
copy	/usr/local/include/opencv2/flann/result_set.h	/^    virtual void copy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
copy	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void copy(InIt beg, InIt end, OutIt out)$/;"	f	struct:cv::gpu::device::Block
copy	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void copy(const PointerTuple& svals, const ReferenceTuple& val, unsigned int tid, unsigned int delta)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
copy	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void copy(const PointerTuple&, const ReferenceTuple&, unsigned int, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
copy	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt copy(InIt beg, InIt end, OutIt out)$/;"	f	struct:cv::gpu::device::Warp
copy	/usr/local/include/opencv2/ts/ts_gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copyShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void copyShfl(const ReferenceTuple& val, unsigned int delta, int width)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
copyShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void copyShfl(const ReferenceTuple&, unsigned int, int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
copyTo	/usr/local/include/opencv2/core/operations.hpp	/^    void copyTo(Vector<_Tp>& vec) const$/;"	f	class:cv::Vector
copyTo	/usr/local/include/opencv2/core/operations.hpp	/^    void copyTo(std::vector<_Tp>& vec) const$/;"	f	class:cv::Vector
copyTo	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::copyTo(vector<_Tp>& vec, const Range& range) const$/;"	f	class:cv::Seq
copyVals	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyVals(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& svals,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
copyVals	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyVals(volatile V* svals, V& val, unsigned int tid, unsigned int delta)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
copyValsShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyValsShfl(V& val, unsigned int delta, int width)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
copyValsShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void copyValsShfl(const thrust::tuple<VR0, VR1, VR2, VR3, VR4, VR5, VR6, VR7, VR8, VR9>& val,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
copy_from_value	/usr/local/include/opencv2/flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
copy_from_value	/usr/local/include/opencv2/flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::small_any_policy
corners	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  CvMat *corners;$/;"	m	struct:CvDataMatrixCode
corners_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        const Point *corners_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
corners_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Point> corners_;$/;"	m	class:cv::detail::PairwiseSeamFinder
cost	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvMat* cost;$/;"	m	struct:CvStereoBMState
costFunc_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    CostFunction costFunc_;$/;"	m	class:cv::detail::DpSeamFinder
costFunction	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    CostFunction costFunction() const { return costFunc_; }$/;"	f	class:cv::detail::DpSeamFinder
cost_type_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    int cost_type_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
count	/usr/local/include/opencv2/core/core_c.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator
count	/usr/local/include/opencv2/core/types_c.h	/^    int    count;             \/* Number of elements in the block.           *\/$/;"	m	struct:CvSeqBlock
count	/usr/local/include/opencv2/flann/heap.h	/^    int count;$/;"	m	class:cvflann::Heap
count	/usr/local/include/opencv2/flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNResultSet
count	/usr/local/include/opencv2/flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNSimpleResultSet
count	/usr/local/include/opencv2/flann/result_set.h	/^    size_t count;$/;"	m	class:cvflann::RadiusResultSet
count	/usr/local/include/opencv2/ml/ml.hpp	/^        int count;$/;"	m	union:CvTrainTestSplit::__anon299
count	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** count;$/;"	m	class:CvNormalBayesClassifier
count	/usr/local/include/opencv2/ml/ml.hpp	/^    int dims, count;$/;"	m	struct:CvVectors
count	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade
count	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int  count;$/;"	m	struct:CvHaarStageClassifier
count	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int count;$/;"	m	struct:CvHaarClassifier
countCorrectMatches	/usr/local/include/opencv2/flann/index_testing.h	/^inline int countCorrectMatches(int* neighbors, int* groundTruth, int n)$/;"	f	namespace:cvflann
countFrames	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel
count_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int count_;$/;"	m	class:cv::gpu::FAST_GPU
counter	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int64 counter;$/;"	m	class:cv::TickMeter
counter	/usr/local/include/opencv2/ocl/ocl.hpp	/^            void *counter;$/;"	m	struct:cv::ocl::CannyBuf
counter_	/usr/local/include/opencv2/flann/random.h	/^    int counter_;$/;"	m	class:cvflann::UniqueRandom
counts	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData
covMatType	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int covMatType;$/;"	m	class:cv::EM
cov_mat_type	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_PROP_RW int cov_mat_type;$/;"	m	struct:CvEMParams
cov_rotate_mats	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvNormalBayesClassifier
covs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const CvMat** covs;$/;"	m	struct:CvEMParams
covs	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP vector<Mat> covs;$/;"	m	class:cv::EM
covsEigenValues	/usr/local/include/opencv2/ml/ml.hpp	/^    vector<Mat> covsEigenValues;$/;"	m	class:cv::EM
covsHdrs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    std::vector<CvMat> covsHdrs;$/;"	m	class:CvEM
covsPtrs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    std::vector<CvMat*> covsPtrs;$/;"	m	class:CvEM
covsRotateMats	/usr/local/include/opencv2/ml/ml.hpp	/^    vector<Mat> covsRotateMats;$/;"	m	class:cv::EM
create	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline void GpuMat::create(Size size_, int type_)$/;"	f	class:cv::gpu::GpuMat
create	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::create(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
create	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::create(Size _sz, int _type)$/;"	f	class:cv::Mat
create	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::create(int _rows, int _cols, int _type)$/;"	f	class:cv::Mat
create	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(Size _sz)$/;"	f	class:cv::Mat_
create	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
create	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(int _rows, int _cols)$/;"	f	class:cv::Mat_
create	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    void create(Size asize, Format aformat, bool autoRelease = false) { create(asize.height, asize.width, aformat, autoRelease); }$/;"	f	class:cv::ogl::Texture2D
create	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    void create(Size asize, int atype, Target target = ARRAY_BUFFER, bool autoRelease = false) { create(asize.height, asize.width, atype, target, autoRelease); }$/;"	f	class:cv::ogl::Buffer
create	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^inline void GlBuffer::create(Size _size, int _type) { create(_size.height, _size.width, _type, usage()); }$/;"	f	class:cv::GlBuffer
create	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^inline void GlBuffer::create(Size _size, int _type, Usage _usage) { create(_size.height, _size.width, _type, _usage); }$/;"	f	class:cv::GlBuffer
create	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^inline void GlBuffer::create(int _rows, int _cols, int _type) { create(_rows, _cols, _type, usage()); }$/;"	f	class:cv::GlBuffer
create	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^inline void GlTexture::create(Size _size, int _type) { create(_size.height, _size.width, _type); }$/;"	f	class:cv::GlTexture
create	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp> Algorithm::create(const string& name)$/;"	f	class:cv::Algorithm
create	/usr/local/include/opencv2/flann/all_indices.h	/^    static NNIndex<Distance>* create(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	struct:cvflann::index_creator
create	/usr/local/include/opencv2/flann/object_factory.h	/^    ObjectCreator create(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
create	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void create( CvSize _size, int _depth, int _channels )$/;"	f	class:CvImage
create	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void create( int _rows, int _cols, int _type )$/;"	f	class:CvMatrix
create	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void oclMat::create(Size _size, int _type)$/;"	f	class:cv::ocl::oclMat
create	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    void create(int num_vertices) { edges_.assign(num_vertices, std::list<GraphEdge>()); }$/;"	f	class:cv::detail::Graph
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CompressedRectilinearPortraitWarper(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearPortraitWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CompressedRectilinearWarper(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CylindricalWarper(scale); }$/;"	f	class:cv::CylindricalWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CylindricalWarperGpu(scale); }$/;"	f	class:cv::CylindricalWarperGpu
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::FisheyeWarper(scale); }$/;"	f	class:cv::FisheyeWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::MercatorWarper(scale); }$/;"	f	class:cv::MercatorWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PaniniPortraitWarper(scale, a, b); }$/;"	f	class:cv::PaniniPortraitWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PaniniWarper(scale, a, b); }$/;"	f	class:cv::PaniniWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PlaneWarper(scale); }$/;"	f	class:cv::PlaneWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PlaneWarperGpu(scale); }$/;"	f	class:cv::PlaneWarperGpu
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::SphericalWarper(scale); }$/;"	f	class:cv::SphericalWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::SphericalWarperGpu(scale); }$/;"	f	class:cv::SphericalWarperGpu
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::StereographicWarper(scale); }$/;"	f	class:cv::StereographicWarper
create	/usr/local/include/opencv2/stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::TransverseMercatorWarper(scale); }$/;"	f	class:cv::TransverseMercatorWarper
createContinuous	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat createContinuous(Size size, int type)$/;"	f	namespace:cv::gpu
createContinuous	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat createContinuous(int rows, int cols, int type)$/;"	f	namespace:cv::gpu
createContinuous	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline void createContinuous(Size size, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
create_index_by_type	/usr/local/include/opencv2/flann/all_indices.h	/^NNIndex<Distance>* create_index_by_type(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	namespace:cvflann
criteria	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvTermCriteria criteria;$/;"	m	class:CvLevMarq
criteria	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvTermCriteria criteria;$/;"	m	class:cv::LevMarqSparse
cross	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::cross(const Mat_& m) const$/;"	f	class:cv::Mat_
cross	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<double, 3> Vec<double, 3>::cross(const Vec<double, 3>& v) const$/;"	f	class:cv::Vec
cross	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline Vec<float, 3> Vec<float, 3>::cross(const Vec<float, 3>& v) const$/;"	f	class:cv::Vec
cross	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::cross(const Vec<_Tp, cn>&) const$/;"	f	class:cv::Vec
cross	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp> Point3_<_Tp>::cross(const Point3_<_Tp>& pt) const$/;"	f	class:cv::Point3_
cross	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline double Point_<_Tp>::cross(const Point_& pt) const$/;"	f	class:cv::Point_
crossCheck	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool crossCheck;$/;"	m	class:cv::BFMatcher
ctable	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat
cudaSafeCall	/usr/local/include/opencv2/gpu/device/common.hpp	/^    #define cudaSafeCall(/;"	d
curMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        PtrStepb curMask;$/;"	m	struct:cv::gpu::device::MaskCollection
curPos_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int curPos_;$/;"	m	class:cv::videostab::StabilizerBase
curStabilizedPos_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int curStabilizedPos_;$/;"	m	class:cv::videostab::StabilizerBase
cur_weight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder
curidx	/usr/local/include/opencv2/core/types_c.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator
curr_center	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Point2f curr_center;$/;"	m	class:cv::CvHybridTracker
current10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currentIter	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    unsigned int currentIter;$/;"	m	class:perf::TestBase
currentTestNodeName	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    std::string currentTestNodeName;$/;"	m	class:perf::Regression
current_comp	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder
current_test_info	/usr/local/include/opencv2/ts/ts.hpp	/^    TestInfo current_test_info;$/;"	m	class:cvtest::TS
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currline	/usr/local/include/opencv2/legacy/compat.hpp	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f
currline	/usr/local/include/opencv2/legacy/compat.hpp	/^    schar*  currline;$/;"	m	struct:_CvPixelPosition8s
currline	/usr/local/include/opencv2/legacy/compat.hpp	/^    uchar*  currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u
curves	/usr/local/include/opencv2/contrib/contrib.hpp	/^    std::vector<CvFuzzyCurve> curves;$/;"	m	class:CvFuzzyFunction
cv	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/contrib/contrib.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/contrib/retina.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/core.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/eigen.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/gpumat.hpp	/^namespace cv { namespace gpu$/;"	n
cv	/usr/local/include/opencv2/core/internal.hpp	/^namespace cv { namespace ogl {$/;"	n
cv	/usr/local/include/opencv2/core/internal.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/mat.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/opengl_interop.hpp	/^namespace cv { namespace gpu {$/;"	n
cv	/usr/local/include/opencv2/core/opengl_interop.hpp	/^namespace cv { namespace ogl {$/;"	n
cv	/usr/local/include/opencv2/core/opengl_interop.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/operations.hpp	/^  namespace cv { CV_EXPORTS int _interlockedExchangeAdd(int* addr, int delta); }$/;"	n
cv	/usr/local/include/opencv2/core/operations.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/core/wimage.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/features2d/features2d.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/flann/flann.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/flann/miniflann.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/gpu/device/block.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/common.hpp	/^namespace cv { namespace gpu$/;"	n
cv	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^namespace cv { namespace gpu$/;"	n
cv	/usr/local/include/opencv2/gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	/usr/local/include/opencv2/gpu/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n
cv	/usr/local/include/opencv2/gpu/stream_accessor.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/highgui/highgui.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/legacy/legacy.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/ml/ml.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/nonfree/features2d.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/nonfree/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n
cv	/usr/local/include/opencv2/nonfree/nonfree.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/nonfree/ocl.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/ocl/ocl.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/photo/photo.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/autocalib.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/util.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/stitcher.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/stitching/warpers.hpp	/^namespace cv {$/;"	n
cv	/usr/local/include/opencv2/superres/optical_flow.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/superres/superres.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/ts/gpu_test.hpp	/^namespace cv { namespace gpu$/;"	n
cv	/usr/local/include/opencv2/ts/ts_perf.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/video/background_segm.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/video/tracking.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/video/video.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/deblurring.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/fast_marching_inl.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/frame_source.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/global_motion.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/inpainting.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/log.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^namespace cv$/;"	n
cv	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^namespace cv$/;"	n
cv2eigen	/usr/local/include/opencv2/core/eigen.hpp	/^void cv2eigen( const Mat& src,$/;"	f	namespace:cv
cv2eigen	/usr/local/include/opencv2/core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, 1, _cols>& src,$/;"	f	namespace:cv
cv2eigen	/usr/local/include/opencv2/core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, 1>& src,$/;"	f	namespace:cv
cv2eigen	/usr/local/include/opencv2/core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, _cols>& src,$/;"	f	namespace:cv
cv3dTracker2dTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE Cv3dTracker2dTrackedObject cv3dTracker2dTrackedObject(int id, CvPoint2D32f p)$/;"	f
cv3dTrackerTrackedObject	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE Cv3dTrackerTrackedObject cv3dTrackerTrackedObject(int id, CvPoint3D32f p)$/;"	f
cvAXPY	/usr/local/include/opencv2/core/core_c.h	/^#define cvAXPY(/;"	d
cvAbs	/usr/local/include/opencv2/core/core_c.h	/^#define cvAbs(/;"	d
cvAbsDiff	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvAbsDiff( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	f
cvAbsDiffS	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvAbsDiffS( const CvArr* src, CvArr* dst, CvScalar value );$/;"	f
cvAccMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvAccMask /;"	d
cvAddSearchPath	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvAddSearchPath(/;"	d
cvAddText	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvAddText(const CvArr* img, const char* text, CvPoint org, CvFont *arg2);$/;"	f
cvAlign	/usr/local/include/opencv2/core/internal.hpp	/^CV_INLINE int cvAlign( int size, int align )$/;"	f
cvAlignPtr	/usr/local/include/opencv2/core/internal.hpp	/^CV_INLINE void* cvAlignPtr( const void* ptr, int align CV_DEFAULT(32) )$/;"	f
cvAlloc	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	f
cvAttrList	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),$/;"	f
cvAttrValue	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(const char*) cvAttrValue( const CvAttrList* attr, const char* attr_name );$/;"	f
cvAvg	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar)  cvAvg( const CvArr* arr, const CvArr* mask CV_DEFAULT(NULL) );$/;"	f
cvBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline CvBlob cvBlob(float x,float y, float w, float h)$/;"	f
cvBoundingRect	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvRect)  cvBoundingRect( CvArr* points, int update CV_DEFAULT(0) );$/;"	f
cvBoxPoints	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void) cvBoxPoints( CvBox2D box, CvPoint2D32f pt[4] );$/;"	f
cvBronKerbosch	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvBronKerbosch( CvGraph* graph );*\/$/;"	f
cvCalcBackProject	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^#define  cvCalcBackProject(/;"	d
cvCalcBackProjectPatch	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^#define  cvCalcBackProjectPatch(/;"	d
cvCalcDecompCoeff	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(double)  cvCalcDecompCoeff( IplImage* obj, IplImage* eigObj, IplImage* avg );$/;"	f
cvCalcHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,$/;"	f
cvCalcHistMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvCalcHistMask(/;"	d
cvCalcMatMulDeriv	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void) cvCalcMatMulDeriv( const CvMat* A, const CvMat* B, CvMat* dABdA, CvMat* dABdB );$/;"	f
cvCalcPGH	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvCalcPGH( const CvSeq* contour, CvHistogram* hist );$/;"	f
cvCalcSubdivVoronoi2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvCalcSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	f
cvCaptureFromAVI	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvCaptureFromAVI /;"	d
cvCaptureFromCAM	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvCaptureFromCAM /;"	d
cvCaptureFromFile	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvCaptureFromFile /;"	d
cvCbrt	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(float)  cvCbrt( float value );$/;"	f
cvCeil	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  int  cvCeil( double value )$/;"	f
cvChangeSeqBlock	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvChangeSeqBlock( void* reader, int direction );$/;"	f
cvCheckArray	/usr/local/include/opencv2/core/core_c.h	/^#define cvCheckArray /;"	d
cvCheckChessboard	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(int) cvCheckChessboard(IplImage* src, CvSize size);$/;"	f
cvCheckContourConvexity	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	f
cvCheckHardwareSupport	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvCheckHardwareSupport(int feature);$/;"	f
cvClearGraph	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	f
cvClearHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	f
cvClearMemStorage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	f
cvClearND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvClearND( CvArr* arr, const int* idx );$/;"	f
cvClearSeq	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	f
cvClearSet	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	f
cvClearSubdivVoronoi2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvClearSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	f
cvClipLine	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvClipLine( CvSize img_size, CvPoint* pt1, CvPoint* pt2 );$/;"	f
cvClone	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvClone( const void* struct_ptr );$/;"	f
cvCloneGraph	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvGraph*) cvCloneGraph( const CvGraph* graph, CvMemStorage* storage );$/;"	f
cvCloneImage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	f
cvCloneMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	f
cvCloneMatND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	f
cvCloneSeq	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE CvSeq* cvCloneSeq( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))$/;"	f
cvCloneSparseMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	f
cvCmp	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvCmp( const CvArr* src1, const CvArr* src2, CvArr* dst, int cmp_op );$/;"	f
cvCmpS	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvCmpS( const CvArr* src, double value, CvArr* dst, int cmp_op );$/;"	f
cvColorToScalar	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar)  cvColorToScalar( double packed_color, int arrtype );$/;"	f
cvCompleteSymm	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCompleteSymm( CvMat* matrix, int LtoR CV_DEFAULT(0) );$/;"	f
cvComputePerspectiveMap	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvComputePerspectiveMap( const double coeffs[3][3], CvArr* rectMapX, CvArr* rectMapY );$/;"	f
cvConDensInitSampleSet	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvConDensInitSampleSet( CvConDensation* condens, CvMat* lower_bound, CvMat* upper_bound );$/;"	f
cvConDensUpdateByTime	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvConDensUpdateByTime( CvConDensation* condens);$/;"	f
cvContourMoments	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvContourMoments(/;"	d
cvContourPerimeter	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CV_INLINE double cvContourPerimeter( const void* contour )$/;"	f
cvConvert	/usr/local/include/opencv2/core/core_c.h	/^#define cvConvert(/;"	d
cvConvertImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvConvertImage( const CvArr* src, CvArr* dst, int flags CV_DEFAULT(0));$/;"	f
cvConvertPointsHomogeneous	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void) cvConvertPointsHomogeneous( const CvMat* src, CvMat* dst );$/;"	f
cvConvertPointsHomogenious	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvConvertPointsHomogenious /;"	d
cvCopyHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvCopyHist( const CvHistogram* src, CvHistogram** dst );$/;"	f
cvCopyImage	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvCopyImage(/;"	d
cvCountNonZero	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	f
cvCreate2DHMM	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvEHMM*)  cvCreate2DHMM( int* stateNumber, int* numMix, int obsSize );$/;"	f
cvCreateAVIWriter	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvCreateAVIWriter /;"	d
cvCreateBGCodeBookModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvBGCodeBookModel*) cvCreateBGCodeBookModel( void );$/;"	f
cvCreateBlobTrackerAuto	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline CvBlobTrackerAuto* cvCreateBlobTrackerAuto(int type, void* param)$/;"	f
cvCreateButton	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvCreateButton( const char* button_name CV_DEFAULT(NULL),CvButtonCallback on_change CV_DEFAULT(NULL), void* userdata CV_DEFAULT(NULL) , int button_type CV_DEFAULT(CV_PUSH_BUTTON), int initial_button_state CV_DEFAULT(0));$/;"	f
cvCreateCameraCapture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(CvCapture*) cvCreateCameraCapture( int index );$/;"	f
cvCreateChildMemStorage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	f
cvCreateData	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	f
cvCreateFileCapture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(CvCapture*) cvCreateFileCapture( const char* filename );$/;"	f
cvCreateGLCMImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(IplImage*) cvCreateGLCMImage( CvGLCM* GLCM, int step );$/;"	f
cvCreateImage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(IplImage*)  cvCreateImage( CvSize size, int depth, int channels );$/;"	f
cvCreateImageData	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvCreateImageData /;"	d
cvCreateImageHeader	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(IplImage*)  cvCreateImageHeader( CvSize size, int depth, int channels );$/;"	f
cvCreateKDTree	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(struct CvFeatureTree*) cvCreateKDTree(CvMat* desc);$/;"	f
cvCreateMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMat*)  cvCreateMat( int rows, int cols, int type );$/;"	f
cvCreateMatHeader	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMat*)  cvCreateMatHeader( int rows, int cols, int type );$/;"	f
cvCreateMatND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMatND*)  cvCreateMatND( int dims, const int* sizes, int type );$/;"	f
cvCreateMatNDHeader	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMatND*)  cvCreateMatNDHeader( int dims, const int* sizes, int type );$/;"	f
cvCreateMemStorage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMemStorage*)  cvCreateMemStorage( int block_size CV_DEFAULT(0));$/;"	f
cvCreateObsInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvImgObsInfo*)  cvCreateObsInfo( CvSize numObs, int obsSize );$/;"	f
cvCreatePOSITObject	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(CvPOSITObject*)  cvCreatePOSITObject( CvPoint3D32f* points, int point_count );$/;"	f
cvCreateProb	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline CvProb* cvCreateProb(int type, int dim, CvSize size = cvSize(1,1), void* \/*param*\/ = NULL)$/;"	f
cvCreateSeqBlock	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	f
cvCreateSparseMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSparseMat*)  cvCreateSparseMat( int dims, const int* sizes, int type );$/;"	f
cvCreateStereoGCState	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvStereoGCState*) cvCreateStereoGCState( int numberOfDisparities, int maxIters );$/;"	f
cvCreateSubdivDelaunay2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2D* cvCreateSubdivDelaunay2D( CvRect rect, CvMemStorage* storage )$/;"	f
cvCrossProduct	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCrossProduct( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	f
cvCvtColor	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvCvtColor( const CvArr* src, CvArr* dst, int code );$/;"	f
cvCvtPixToPlane	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvCvtPixToPlane /;"	d
cvCvtPlaneToPix	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvCvtPlaneToPix /;"	d
cvCvtScale	/usr/local/include/opencv2/core/core_c.h	/^#define cvCvtScale /;"	d
cvCvtScaleAbs	/usr/local/include/opencv2/core/core_c.h	/^#define cvCvtScaleAbs /;"	d
cvDCT	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvDCT( const CvArr* src, CvArr* dst, int flags );$/;"	f
cvDeInterlace	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvDeInterlace( const CvArr* frame, CvArr* fieldEven, CvArr* fieldOdd );$/;"	f
cvDecRefData	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  void  cvDecRefData( CvArr* arr )$/;"	f
cvDecodeImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(IplImage*) cvDecodeImage( const CvMat* buf, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	f
cvDecodeImageM	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(CvMat*) cvDecodeImageM( const CvMat* buf, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	f
cvDeleteMoire	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvDeleteMoire( IplImage*  img );$/;"	f
cvDestroyAllWindows	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvDestroyAllWindows(void);$/;"	f
cvDestroyWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvDestroyWindow( const char* name );$/;"	f
cvDet	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	f
cvDetectedBlob	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^CV_INLINE CvDetectedBlob cvDetectedBlob( float x, float y, float w, float h, int ID = 0, float response = 0.0F )$/;"	f
cvDisplayOverlay	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvDisplayOverlay(const char* name, const char* text, int delayms CV_DEFAULT(0));$/;"	f
cvDisplayStatusBar	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvDisplayStatusBar(const char* name, const char* text, int delayms CV_DEFAULT(0));$/;"	f
cvDotProduct	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double)  cvDotProduct( const CvArr* src1, const CvArr* src2 );$/;"	f
cvDrawCircle	/usr/local/include/opencv2/core/core_c.h	/^#define cvDrawCircle /;"	d
cvDrawEllipse	/usr/local/include/opencv2/core/core_c.h	/^#define cvDrawEllipse /;"	d
cvDrawLine	/usr/local/include/opencv2/core/core_c.h	/^#define cvDrawLine /;"	d
cvDrawPolyLine	/usr/local/include/opencv2/core/core_c.h	/^#define cvDrawPolyLine /;"	d
cvDrawRect	/usr/local/include/opencv2/core/core_c.h	/^#define cvDrawRect /;"	d
cvEViterbi	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(float)  cvEViterbi( CvImgObsInfo* obs_info, CvEHMM* hmm );$/;"	f
cvEllipseBox	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  void  cvEllipseBox( CvArr* img, CvBox2D box, CvScalar color,$/;"	f
cvEndFindCliques	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvEndFindCliques( CvCliqueFinder* finder );$/;"	f
cvEndFindContours	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	f
cvEndWriteSeq	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	f
cvEndWriteStruct	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	f
cvEqualizeHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvEqualizeHist( const CvArr* src, CvArr* dst );$/;"	f
cvErrorFromIppStatus	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvErrorFromIppStatus( int ipp_status );$/;"	f
cvErrorStr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(const char*) cvErrorStr( int status );$/;"	f
cvExp	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvExp( const CvArr* src, CvArr* dst );$/;"	f
cvExtractMSER	/usr/local/include/opencv2/legacy/compat.hpp	/^CVAPI(void) cvExtractMSER( CvArr* _img, CvArr* _mask, CvSeq** contours, CvMemStorage* storage, CvMSERParams params );$/;"	f
cvFFT	/usr/local/include/opencv2/core/core_c.h	/^#define cvFFT /;"	d
cvFastArctan	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(float) cvFastArctan( float y, float x );$/;"	f
cvFindGraphEdge	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvGraphEdge*)  cvFindGraphEdge( const CvGraph* graph, int start_idx, int end_idx );$/;"	f
cvFindNearestPoint2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvSubdiv2DPoint*) cvFindNearestPoint2D( CvSubdiv2D* subdiv, CvPoint2D32f pt );$/;"	f
cvFindNextContour	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	f
cvFindNextMaximalClique	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) cvFindNextMaximalClique( CvCliqueFinder* finder, int* clock_rest CV_DEFAULT(0) );$/;"	f
cvFindType	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvTypeInfo*) cvFindType( const char* type_name );$/;"	f
cvFirstType	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvTypeInfo*) cvFirstType(void);$/;"	f
cvFitEllipse2	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvBox2D) cvFitEllipse2( const CvArr* points );$/;"	f
cvFloor	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  int  cvFloor( double value )$/;"	f
cvFlushSeqWriter	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	f
cvFont	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )$/;"	f
cvFontQt	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(CvFont) cvFontQt(const char* nameFont, int pointSize CV_DEFAULT(-1), CvScalar color CV_DEFAULT(cvScalarAll(0)), int weight CV_DEFAULT(CV_FONT_NORMAL),  int style CV_DEFAULT(CV_STYLE_NORMAL), int spacing CV_DEFAULT(0));$/;"	f
cvFree	/usr/local/include/opencv2/core/core_c.h	/^#define cvFree(/;"	d
cvFree_	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)   cvFree_( void* ptr );$/;"	f
cvFuncName	/usr/local/include/opencv2/core/core_c.h	/^#define cvFuncName /;"	d
cvGet1D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvGet1D( const CvArr* arr, int idx0 );$/;"	f
cvGet2D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvGet2D( const CvArr* arr, int idx0, int idx1 );$/;"	f
cvGet3D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvGet3D( const CvArr* arr, int idx0, int idx1, int idx2 );$/;"	f
cvGetAt	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetAt /;"	d
cvGetCaptureDomain	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);$/;"	f
cvGetCaptureProperty	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(double) cvGetCaptureProperty( CvCapture* capture, int property_id );$/;"	f
cvGetCentralMoment	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(double)  cvGetCentralMoment( CvMoments* moments, int x_order, int y_order );$/;"	f
cvGetCol	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  CvMat*  cvGetCol( const CvArr* arr, CvMat* submat, int col )$/;"	f
cvGetDimSize	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvGetDimSize( const CvArr* arr, int index );$/;"	f
cvGetDims	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvGetDims( const CvArr* arr, int* sizes CV_DEFAULT(NULL) );$/;"	f
cvGetElemType	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	f
cvGetErrMode	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetErrMode( void );$/;"	f
cvGetErrStatus	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvGetErrStatus( void );$/;"	f
cvGetFileNodeName	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	f
cvGetGLCMDescriptor	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(double) cvGetGLCMDescriptor( CvGLCM* GLCM, int step, int descriptor );$/;"	f
cvGetGraphVtx	/usr/local/include/opencv2/core/core_c.h	/^#define cvGetGraphVtx(/;"	d
cvGetHistValue_1D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetHistValue_1D(/;"	d
cvGetHistValue_2D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetHistValue_2D(/;"	d
cvGetHistValue_3D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetHistValue_3D(/;"	d
cvGetHistValue_nD	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetHistValue_nD(/;"	d
cvGetHuMoments	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void) cvGetHuMoments( CvMoments*  moments, CvHuMoments*  hu_moments );$/;"	f
cvGetImage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(IplImage*) cvGetImage( const CvArr* arr, IplImage* image_header );$/;"	f
cvGetImageCOI	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	f
cvGetImageROI	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvRect) cvGetImageROI( const IplImage* image );$/;"	f
cvGetImageRawData	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetImageRawData /;"	d
cvGetMatSize	/usr/local/include/opencv2/core/internal.hpp	/^CV_INLINE  CvSize  cvGetMatSize( const CvMat* mat )$/;"	f
cvGetND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvGetND( const CvArr* arr, const int* idx );$/;"	f
cvGetNextSparseNode	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE CvSparseNode* cvGetNextSparseNode( CvSparseMatIterator* mat_iterator )$/;"	f
cvGetNumThreads	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetNumThreads( void );$/;"	f
cvGetOptimalDFTSize	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetOptimalDFTSize( int size0 );$/;"	f
cvGetPtrAt	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvGetPtrAt /;"	d
cvGetReal1D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvGetReal1D( const CvArr* arr, int idx0 );$/;"	f
cvGetReal2D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvGetReal2D( const CvArr* arr, int idx0, int idx1 );$/;"	f
cvGetReal3D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvGetReal3D( const CvArr* arr, int idx0, int idx1, int idx2 );$/;"	f
cvGetRealND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvGetRealND( const CvArr* arr, const int* idx );$/;"	f
cvGetRectSubPix	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvGetRectSubPix( const CvArr* src, CvArr* dst, CvPoint2D32f center );$/;"	f
cvGetRow	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  CvMat*  cvGetRow( const CvArr* arr, CvMat* submat, int row )$/;"	f
cvGetSeqElem	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(schar*)  cvGetSeqElem( const CvSeq* seq, int index );$/;"	f
cvGetSeqReaderPos	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	f
cvGetSetElem	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE CvSetElem* cvGetSetElem( const CvSet* set_header, int idx )$/;"	f
cvGetSize	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSize) cvGetSize( const CvArr* arr );$/;"	f
cvGetSpatialMoment	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(double)  cvGetSpatialMoment( CvMoments* moments, int x_order, int y_order );$/;"	f
cvGetSubArr	/usr/local/include/opencv2/core/core_c.h	/^#define cvGetSubArr /;"	d
cvGetSubRect	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMat*) cvGetSubRect( const CvArr* arr, CvMat* submat, CvRect rect );$/;"	f
cvGetThreadNum	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetThreadNum( void );$/;"	f
cvGetTickCount	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int64)  cvGetTickCount( void );$/;"	f
cvGetTickFrequency	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvGetTickFrequency( void );$/;"	f
cvGetTrackbarPos	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvGetTrackbarPos( const char* trackbar_name, const char* window_name );$/;"	f
cvGetWindowHandle	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void*) cvGetWindowHandle( const char* name );$/;"	f
cvGetWindowName	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(const char*) cvGetWindowName( void* window_handle );$/;"	f
cvGetWindowProperty	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(double) cvGetWindowProperty(const char* name, int prop_id);$/;"	f
cvGrabFrame	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	f
cvGraphEdgeIdx	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphEdgeIdx(/;"	d
cvGraphFindEdge	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphFindEdge /;"	d
cvGraphFindEdgeByPtr	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphFindEdgeByPtr /;"	d
cvGraphGetEdgeCount	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphGetEdgeCount(/;"	d
cvGraphGetVtxCount	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphGetVtxCount(/;"	d
cvGraphRemoveEdge	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvGraphRemoveEdge( CvGraph* graph, int start_idx, int end_idx );$/;"	f
cvGraphRemoveVtx	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGraphRemoveVtx( CvGraph* graph, int index );$/;"	f
cvGraphRemoveVtxByPtr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGraphRemoveVtxByPtr( CvGraph* graph, CvGraphVtx* vtx );$/;"	f
cvGraphVtxDegree	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGraphVtxDegree( const CvGraph* graph, int vtx_idx );$/;"	f
cvGraphVtxDegreeByPtr	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGraphVtxDegreeByPtr( const CvGraph* graph, const CvGraphVtx* vtx );$/;"	f
cvGraphVtxIdx	/usr/local/include/opencv2/core/core_c.h	/^#define cvGraphVtxIdx(/;"	d
cvIncRefData	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  int  cvIncRefData( CvArr* arr )$/;"	f
cvInitSubdivDelaunay2D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvInitSubdivDelaunay2D( CvSubdiv2D* subdiv, CvRect rect );$/;"	f
cvInitSystem	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvInitSystem( int argc, char** argv );$/;"	f
cvInsertNodeIntoTree	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvInsertNodeIntoTree( void* node, void* parent, void* frame );$/;"	f
cvIntegralImage	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvIntegralImage /;"	d
cvInv	/usr/local/include/opencv2/core/core_c.h	/^#define cvInv /;"	d
cvInvSqrt	/usr/local/include/opencv2/core/types_c.h	/^#define cvInvSqrt(/;"	d
cvIplDepth	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE int cvIplDepth( int type )$/;"	f
cvIsInf	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE int cvIsInf( double value )$/;"	f
cvIsNaN	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE int cvIsNaN( double value )$/;"	f
cvKalmanCorrect	/usr/local/include/opencv2/video/tracking.hpp	/^CVAPI(const CvMat*)  cvKalmanCorrect( CvKalman* kalman, const CvMat* measurement );$/;"	f
cvKalmanUpdateByMeasurement	/usr/local/include/opencv2/video/tracking.hpp	/^#define cvKalmanUpdateByMeasurement /;"	d
cvKalmanUpdateByTime	/usr/local/include/opencv2/video/tracking.hpp	/^#define cvKalmanUpdateByTime /;"	d
cvLSHAdd	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvLSHAdd(struct CvLSH* lsh, const CvMat* data, CvMat* indices CV_DEFAULT(0));$/;"	f
cvLSHRemove	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvLSHRemove(struct CvLSH* lsh, const CvMat* indices);$/;"	f
cvLUT	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvLUT( const CvArr* src, CvArr* dst, const CvArr* lut );$/;"	f
cvLoadImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(IplImage*) cvLoadImage( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	f
cvLoadImageM	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(CvMat*) cvLoadImageM( const char* filename, int iscolor CV_DEFAULT(CV_LOAD_IMAGE_COLOR));$/;"	f
cvLoadLatentSvmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CVAPI(CvLatentSvmDetector*) cvLoadLatentSvmDetector(const char* filename);$/;"	f
cvLoadWindowParameters	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvLoadWindowParameters(const char* name);$/;"	f
cvLog	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvLog( const CvArr* src, CvArr* dst );$/;"	f
cvMahalanobis	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double)  cvMahalanobis( const CvArr* vec1, const CvArr* vec2, const CvArr* mat );$/;"	f
cvMahalonobis	/usr/local/include/opencv2/core/core_c.h	/^#define cvMahalonobis /;"	d
cvMake2DPoints	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMake2DPoints /;"	d
cvMake3DPoints	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMake3DPoints /;"	d
cvMat	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE CvMat cvMat( int rows, int cols, int type, void* data CV_DEFAULT(NULL))$/;"	f
cvMatMul	/usr/local/include/opencv2/core/core_c.h	/^#define cvMatMul(/;"	d
cvMatMulAdd	/usr/local/include/opencv2/core/core_c.h	/^#define cvMatMulAdd(/;"	d
cvMatMulAddEx	/usr/local/include/opencv2/core/core_c.h	/^#define cvMatMulAddEx /;"	d
cvMatMulAddS	/usr/local/include/opencv2/core/core_c.h	/^#define cvMatMulAddS /;"	d
cvMatchContours	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMatchContours /;"	d
cvMax	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvMax( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	f
cvMaxRect	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvRect)  cvMaxRect( const CvRect* rect1, const CvRect* rect2 );$/;"	f
cvMaxS	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvMaxS( const CvArr* src, double value, CvArr* dst );$/;"	f
cvMeanMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMeanMask /;"	d
cvMean_StdDevMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMean_StdDevMask(/;"	d
cvMemStorageAlloc	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvMemStorageAlloc( CvMemStorage* storage, size_t size );$/;"	f
cvMin	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvMin( const CvArr* src1, const CvArr* src2, CvArr* dst );$/;"	f
cvMinMaxLocMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMinMaxLocMask(/;"	d
cvMinS	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvMinS( const CvArr* src, double value, CvArr* dst );$/;"	f
cvMirror	/usr/local/include/opencv2/core/core_c.h	/^#define cvMirror /;"	d
cvMoments	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void) cvMoments( const CvArr* arr, CvMoments* moments, int binary CV_DEFAULT(0));$/;"	f
cvMoveWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvMoveWindow( const char* name, int x, int y );$/;"	f
cvMultiplyAccMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvMultiplyAccMask /;"	d
cvNamedWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvNamedWindow( const char* name, int flags CV_DEFAULT(CV_WINDOW_AUTOSIZE) );$/;"	f
cvNextGraphItem	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	f
cvNextNArraySlice	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	f
cvNextTreeNode	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	f
cvNormMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvNormMask(/;"	d
cvNormalizeHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvNormalizeHist( CvHistogram* hist, double factor );$/;"	f
cvNot	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvNot( const CvArr* src, CvArr* dst );$/;"	f
cvPoint	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint  cvPoint( int x, int y )$/;"	f
cvPoint2D32f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )$/;"	f
cvPoint2D64f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint2D64f  cvPoint2D64f( double x, double y )$/;"	f
cvPoint3D32f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )$/;"	f
cvPoint3D64f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint3D64f  cvPoint3D64f( double x, double y, double z )$/;"	f
cvPointFrom32f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint  cvPointFrom32f( CvPoint2D32f point )$/;"	f
cvPointTo32f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPointTo32f( CvPoint point )$/;"	f
cvPow	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvPow( const CvArr* src, CvArr* dst, double power );$/;"	f
cvPrevTreeNode	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	f
cvPseudoInv	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvPseudoInv /;"	d
cvPtr1D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(uchar*) cvPtr1D( const CvArr* arr, int idx0, int* type CV_DEFAULT(NULL));$/;"	f
cvPtr2D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(uchar*) cvPtr2D( const CvArr* arr, int idx0, int idx1, int* type CV_DEFAULT(NULL) );$/;"	f
cvQueryFrame	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	f
cvQueryHistValue_1D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvQueryHistValue_1D(/;"	d
cvQueryHistValue_2D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvQueryHistValue_2D(/;"	d
cvQueryHistValue_3D	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvQueryHistValue_3D(/;"	d
cvQueryHistValue_nD	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvQueryHistValue_nD(/;"	d
cvROIToRect	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvRect  cvROIToRect( IplROI roi )$/;"	f
cvRandInt	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE unsigned cvRandInt( CvRNG* rng )$/;"	f
cvRandNext	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvRandNext(/;"	d
cvRandReal	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE double cvRandReal( CvRNG* rng )$/;"	f
cvRange	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvArr*)  cvRange( CvArr* mat, double start, double end );$/;"	f
cvRawDataToScalar	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRawDataToScalar( const void* data, int type, CvScalar* scalar );$/;"	f
cvReadByName	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE void* cvReadByName( CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadChainPoint	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvPoint) cvReadChainPoint( CvChainPtReader* reader );$/;"	f
cvReadInt	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )$/;"	f
cvReadIntByName	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadReal	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE double cvReadReal( const CvFileNode* node, double default_value CV_DEFAULT(0.) )$/;"	f
cvReadRealByName	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadString	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE const char* cvReadString( const CvFileNode* node,$/;"	f
cvReadStringByName	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE const char* cvReadStringByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvRealScalar	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvScalar  cvRealScalar( double val0 )$/;"	f
cvRect	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvRect  cvRect( int x, int y, int width, int height )$/;"	f
cvRectIntersection	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^CV_INLINE CvRect cvRectIntersection( const CvRect r1, const CvRect r2 )$/;"	f
cvRectToROI	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )$/;"	f
cvRefineForegroundMaskBySegm	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvRefineForegroundMaskBySegm( CvSeq* segments, CvBGStatModel*  bg_model );$/;"	f
cvRegisterModule	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvRegisterModule( const CvModuleInfo* module_info );$/;"	f
cvRegisterType	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	f
cvRelease	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRelease( void** struct_ptr );$/;"	f
cvRelease2DHMM	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvRelease2DHMM( CvEHMM** hmm );$/;"	f
cvReleaseBGCodeBookModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGCodeBookModel( CvBGCodeBookModel** model );$/;"	f
cvReleaseBGStatModel	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGStatModel( CvBGStatModel** bg_model );$/;"	f
cvReleaseBlobTrackAnalysis	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackAnalysis(CvBlobTrackAnalysis** pBTPP)$/;"	f
cvReleaseBlobTrackGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackGen(CvBlobTrackGen** pBTGen)$/;"	f
cvReleaseBlobTrackPostProc	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackPostProc(CvBlobTrackPostProc** pBTPP)$/;"	f
cvReleaseBlobTrackerAuto	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackerAuto(CvBlobTrackerAuto** ppT)$/;"	f
cvReleaseBlobTrackerOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackerOne(CvBlobTrackerOne **ppT )$/;"	f
cvReleaseCapture	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	f
cvReleaseConDensation	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvReleaseConDensation( CvConDensation** condens );$/;"	f
cvReleaseData	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	f
cvReleaseFaceTracker	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseFaceTracker(CvFaceTracker** ppFaceTracker);$/;"	f
cvReleaseFeatureTree	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseFeatureTree(struct CvFeatureTree* tr);$/;"	f
cvReleaseFileStorage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	f
cvReleaseGLCM	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseGLCM( CvGLCM** GLCM, int flag CV_DEFAULT(CV_GLCM_ALL));$/;"	f
cvReleaseGraphScanner	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	f
cvReleaseHaarClassifierCascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	f
cvReleaseHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	f
cvReleaseImage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	f
cvReleaseImageData	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvReleaseImageData /;"	d
cvReleaseImageHeader	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	f
cvReleaseKalman	/usr/local/include/opencv2/video/tracking.hpp	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	f
cvReleaseLSH	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseLSH(struct CvLSH** lsh);$/;"	f
cvReleaseLatentSvmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector);$/;"	f
cvReleaseLinearContorModelStorage	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) cvReleaseLinearContorModelStorage(CvGraph** Graph);$/;"	f
cvReleaseMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	f
cvReleaseMatHeader	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvReleaseMatHeader /;"	d
cvReleaseMatND	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  void  cvReleaseMatND( CvMatND** mat )$/;"	f
cvReleaseMemStorage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	f
cvReleaseObsInfo	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvReleaseObsInfo( CvImgObsInfo** obs_info );$/;"	f
cvReleasePOSITObject	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	f
cvReleaseProb	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^inline void cvReleaseProb(CvProb** ppProb){ppProb[0]->Release();ppProb[0]=NULL;}$/;"	f
cvReleasePyramid	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvReleasePyramid( CvMat*** pyramid, int extra_layers );$/;"	f
cvReleaseSparseMat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	f
cvReleaseStereoBMState	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void) cvReleaseStereoBMState( CvStereoBMState** state );$/;"	f
cvReleaseStereoGCState	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseStereoGCState( CvStereoGCState** state );$/;"	f
cvReleaseStructuringElement	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	f
cvReleaseVideoWriter	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	f
cvRemoveMemoryManager	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvRemoveMemoryManager /;"	d
cvRemoveNodeFromTree	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRemoveNodeFromTree( void* node, void* frame );$/;"	f
cvRepeat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRepeat( const CvArr* src, CvArr* dst );$/;"	f
cvResetImageROI	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	f
cvReshapeND	/usr/local/include/opencv2/core/core_c.h	/^#define cvReshapeND(/;"	d
cvResizeWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvResizeWindow( const char* name, int width, int height );$/;"	f
cvRestoreMemStoragePos	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvRestoreMemStoragePos( CvMemStorage* storage, CvMemStoragePos* pos );$/;"	f
cvRetrieveFrame	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(IplImage*) cvRetrieveFrame( CvCapture* capture, int streamIdx CV_DEFAULT(0) );$/;"	f
cvRound	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  int  cvRound( double value )$/;"	f
cvRunningAvgMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvRunningAvgMask(/;"	d
cvSURFParams	/usr/local/include/opencv2/legacy/compat.hpp	/^CVAPI(CvSURFParams) cvSURFParams( double hessianThreshold, int extended CV_DEFAULT(0) );$/;"	f
cvSURFPoint	/usr/local/include/opencv2/legacy/compat.hpp	/^CV_INLINE CvSURFPoint cvSURFPoint( CvPoint2D32f pt, int laplacian,$/;"	f
cvSaveMemStoragePos	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSaveMemStoragePos( const CvMemStorage* storage, CvMemStoragePos* pos );$/;"	f
cvSaveWindowParameters	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSaveWindowParameters(const char* name);$/;"	f
cvScalar	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvScalar  cvScalar( double val0, double val1 CV_DEFAULT(0),$/;"	f
cvScalarAll	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvScalar  cvScalarAll( double val0123 )$/;"	f
cvScale	/usr/local/include/opencv2/core/core_c.h	/^#define cvScale /;"	d
cvSeqInsertSlice	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSeqInsertSlice( CvSeq* seq, int before_index, const CvArr* from_arr );$/;"	f
cvSeqInvert	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	f
cvSeqPop	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSeqPop( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	f
cvSeqPopFront	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSeqPopFront( CvSeq* seq, void* element CV_DEFAULT(NULL));$/;"	f
cvSeqPush	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(schar*)  cvSeqPush( CvSeq* seq, const void* element CV_DEFAULT(NULL));$/;"	f
cvSeqPushFront	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(schar*)  cvSeqPushFront( CvSeq* seq, const void* element CV_DEFAULT(NULL));$/;"	f
cvSeqRemove	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSeqRemove( CvSeq* seq, int index );$/;"	f
cvSeqRemoveSlice	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSeqRemoveSlice( CvSeq* seq, CvSlice slice );$/;"	f
cvSeqSort	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSeqSort( CvSeq* seq, CvCmpFunc func, void* userdata CV_DEFAULT(NULL) );$/;"	f
cvSet1D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSet1D( CvArr* arr, int idx0, CvScalar value );$/;"	f
cvSet2D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSet2D( CvArr* arr, int idx0, int idx1, CvScalar value );$/;"	f
cvSet3D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSet3D( CvArr* arr, int idx0, int idx1, int idx2, CvScalar value );$/;"	f
cvSetAt	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvSetAt(/;"	d
cvSetCaptureProperty	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int)    cvSetCaptureProperty( CvCapture* capture, int property_id, double value );$/;"	f
cvSetData	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetData( CvArr* arr, void* data, int step );$/;"	f
cvSetErrMode	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvSetErrMode( int mode );$/;"	f
cvSetErrStatus	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetErrStatus( int status );$/;"	f
cvSetHistThresh	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvSetHistThresh /;"	d
cvSetIdentity	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetIdentity( CvArr* mat, CvScalar value CV_DEFAULT(cvRealScalar(1)) );$/;"	f
cvSetImageCOI	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetImageCOI( IplImage* image, int coi );$/;"	f
cvSetImageData	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvSetImageData /;"	d
cvSetImageROI	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetImageROI( IplImage* image, CvRect rect );$/;"	f
cvSetND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetND( CvArr* arr, const int* idx, CvScalar value );$/;"	f
cvSetNew	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  CvSetElem* cvSetNew( CvSet* set_header )$/;"	f
cvSetNumThreads	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetNumThreads( int threads CV_DEFAULT(0) );$/;"	f
cvSetOpenGlContext	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetOpenGlContext(const char* window_name);$/;"	f
cvSetOpenGlDrawCallback	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetOpenGlDrawCallback(const char* window_name, CvOpenGlDrawCallback callback, void* userdata CV_DEFAULT(NULL));$/;"	f
cvSetPostprocessFuncWin32	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvSetPostprocessFuncWin32(/;"	d
cvSetPostprocessFuncWin32_	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetPostprocessFuncWin32_(const void* callback);$/;"	f
cvSetPreprocessFuncWin32	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvSetPreprocessFuncWin32(/;"	d
cvSetPreprocessFuncWin32_	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetPreprocessFuncWin32_(const void* callback);$/;"	f
cvSetReal1D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetReal1D( CvArr* arr, int idx0, double value );$/;"	f
cvSetReal2D	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetReal2D( CvArr* arr, int idx0, int idx1, double value );$/;"	f
cvSetRealND	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSetRealND( CvArr* arr, const int* idx, double value );$/;"	f
cvSetRemove	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)   cvSetRemove( CvSet* set_header, int index );$/;"	f
cvSetRemoveByPtr	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )$/;"	f
cvSetSeqBlockSize	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetSeqBlockSize( CvSeq* seq, int delta_elems );$/;"	f
cvSetTrackbarPos	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetTrackbarPos( const char* trackbar_name, const char* window_name, int pos );$/;"	f
cvSetWindowProperty	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvSetWindowProperty(const char* name, int prop_id, double prop_value);$/;"	f
cvSetZero	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	f
cvShowImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvShowImage( const char* name, const CvArr* image );$/;"	f
cvSize	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvSize  cvSize( int width, int height )$/;"	f
cvSize2D32f	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )$/;"	f
cvSlice	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvSlice  cvSlice( int start, int end )$/;"	f
cvSliceLength	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvSliceLength( CvSlice slice, const CvSeq* seq );$/;"	f
cvSolveCubic	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int) cvSolveCubic( const CvMat* coeffs, CvMat* roots );$/;"	f
cvSqrt	/usr/local/include/opencv2/core/types_c.h	/^#define cvSqrt(/;"	d
cvSquareAccMask	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvSquareAccMask /;"	d
cvStackAlloc	/usr/local/include/opencv2/core/internal.hpp	/^#  define cvStackAlloc(/;"	d
cvStarDetectorParams	/usr/local/include/opencv2/legacy/compat.hpp	/^CV_INLINE CvStarDetectorParams cvStarDetectorParams($/;"	f
cvStarKeypoint	/usr/local/include/opencv2/legacy/compat.hpp	/^CV_INLINE CvStarKeypoint cvStarKeypoint(CvPoint pt, int size, float response)$/;"	f
cvStartAppendToSeq	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvStartAppendToSeq( CvSeq* seq, CvSeqWriter* writer );$/;"	f
cvStartLoop	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvStartLoop(int (*pt2Func)(int argc, char *argv[]), int argc, char* argv[]);$/;"	f
cvStartNextStream	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	f
cvStartReadChainPoints	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void) cvStartReadChainPoints( CvChain* chain, CvChainPtReader* reader );$/;"	f
cvStartWindowThread	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvStartWindowThread( void );$/;"	f
cvStopLoop	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvStopLoop( void );$/;"	f
cvSubS	/usr/local/include/opencv2/core/core_c.h	/^CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	f
cvSubdiv2DEdgeDst	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeDst( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DEdgeOrg	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeOrg( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DGetEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DGetEdge( CvSubdiv2DEdge edge, CvNextEdgeType type )$/;"	f
cvSubdiv2DNextEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DNextEdge( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DRotateEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DRotateEdge( CvSubdiv2DEdge edge, int rotate )$/;"	f
cvSubdiv2DSymEdge	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DSymEdge( CvSubdiv2DEdge edge )$/;"	f
cvSubdivDelaunay2DInsert	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(CvSubdiv2DPoint*)  cvSubdivDelaunay2DInsert( CvSubdiv2D* subdiv, CvPoint2D32f pt);$/;"	f
cvSubstituteContour	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)   cvSubstituteContour( CvContourScanner scanner, CvSeq* new_contour );$/;"	f
cvSum	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar)  cvSum( const CvArr* arr );$/;"	f
cvT	/usr/local/include/opencv2/core/core_c.h	/^#define cvT /;"	d
cvTermCriteria	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )$/;"	f
cvThreshHist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvThreshHist( CvHistogram* hist, double threshold );$/;"	f
cvTrace	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvTrace( const CvArr* mat );$/;"	f
cvTranspose	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvTranspose( const CvArr* src, CvArr* dst );$/;"	f
cvTriangleArea	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE  double  cvTriangleArea( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )$/;"	f
cvTypeOf	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvTypeInfo*) cvTypeOf( const void* struct_ptr );$/;"	f
cvUniformImgSegm	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvUniformImgSegm( CvImgObsInfo* obs_info, CvEHMM* ehmm );$/;"	f
cvUnregisterType	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvUnregisterType( const char* type_name );$/;"	f
cvUnsupportedFormat	/usr/local/include/opencv2/core/internal.hpp	/^#define  cvUnsupportedFormat /;"	d
cvUpdateMHIByTime	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvUpdateMHIByTime /;"	d
cvUpdateWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvUpdateWindow(const char* window_name);$/;"	f
cvUseOptimized	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvUseOptimized( int on_off );$/;"	f
cvWaitKey	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvWaitKey(int delay CV_DEFAULT(0));$/;"	f
cvWarpPerspectiveQMatrix	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvWarpPerspectiveQMatrix /;"	d
cvWatershed	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void) cvWatershed( const CvArr* image, CvArr* markers );$/;"	f
cvWriteFrame	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(int) cvWriteFrame( CvVideoWriter* writer, const IplImage* image );$/;"	f
cvWriteInt	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvWriteInt( CvFileStorage* fs, const char* name, int value );$/;"	f
cvWriteReal	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvWriteReal( CvFileStorage* fs, const char* name, double value );$/;"	f
cvWriteToAVI	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvWriteToAVI /;"	d
cvZero	/usr/local/include/opencv2/core/core_c.h	/^#define cvZero /;"	d
cv_Tn	/usr/local/include/opencv2/ml/ml.hpp	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode
cv_folds	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int   cv_folds;$/;"	m	struct:CvDTreeParams
cv_heap	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData
cv_node_error	/usr/local/include/opencv2/ml/ml.hpp	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode
cv_node_risk	/usr/local/include/opencv2/ml/ml.hpp	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode
cv_stricmp	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define cv_stricmp /;"	d
cv_strnicmp	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define cv_strnicmp /;"	d
cvarrToMatND	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat cvarrToMatND(const CvArr* arr, bool copyData=false, int coiMode=0)$/;"	f	namespace:cv
cvflann	/usr/local/include/opencv2/flann/all_indices.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/allocator.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/any.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/autotuned_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/composite_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/defines.h	/^namespace cvflann {$/;"	n
cvflann	/usr/local/include/opencv2/flann/dist.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/dummy.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^namespace cvflann {$/;"	n
cvflann	/usr/local/include/opencv2/flann/flann.hpp	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/flann_base.hpp	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/general.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/ground_truth.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/hdf5.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/heap.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/index_testing.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/kdtree_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/kmeans_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/linear_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/logger.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/lsh_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/lsh_table.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/matrix.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/nn_index.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/object_factory.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/params.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/random.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/result_set.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/sampling.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/saving.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/simplex_downhill.h	/^namespace cvflann$/;"	n
cvflann	/usr/local/include/opencv2/flann/timer.h	/^namespace cvflann$/;"	n
cvmAdd	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmAdd(/;"	d
cvmAlloc	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmAlloc /;"	d
cvmAllocArray	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmAllocArray /;"	d
cvmCopy	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmCopy(/;"	d
cvmCrossProduct	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmCrossProduct(/;"	d
cvmDet	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmDet(/;"	d
cvmDotProduct	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmDotProduct(/;"	d
cvmEigenVV	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmEigenVV(/;"	d
cvmFree	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmFree /;"	d
cvmFreeArray	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmFreeArray /;"	d
cvmGet	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  double  cvmGet( const CvMat* mat, int row, int col )$/;"	f
cvmInvert	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmInvert(/;"	d
cvmMahalanobis	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmMahalanobis(/;"	d
cvmMul	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmMul(/;"	d
cvmMulTransposed	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmMulTransposed(/;"	d
cvmScale	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmScale(/;"	d
cvmSet	/usr/local/include/opencv2/core/types_c.h	/^CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )$/;"	f
cvmSetIdentity	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmSetIdentity(/;"	d
cvmSetZero	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmSetZero(/;"	d
cvmSub	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmSub(/;"	d
cvmTrace	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmTrace(/;"	d
cvmTranspose	/usr/local/include/opencv2/legacy/compat.hpp	/^#define cvmTranspose(/;"	d
cvmat_allowed	/usr/local/include/opencv2/ts/ts.hpp	/^    bool cvmat_allowed;$/;"	m	class:cvtest::ArrayTest
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ uchar cvt(uint t)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52GrayConverter
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(const uchar3& src)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5Converter
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint src)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5Converter
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint t)$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5Converter
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uchar3& dst)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGBConverter
cvt	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uint& dst)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGBConverter
cvtest	/usr/local/include/opencv2/ts/gpu_test.hpp	/^namespace cvtest$/;"	n
cvtest	/usr/local/include/opencv2/ts/ts.hpp	/^namespace cvtest$/;"	n
cvvAddSearchPath	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvAddSearchPath /;"	d
cvvConvertImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvConvertImage /;"	d
cvvCreateTrackbar	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvCreateTrackbar /;"	d
cvvDestroyWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvDestroyWindow /;"	d
cvvInitSystem	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvInitSystem /;"	d
cvvLoadImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvLoadImage(/;"	d
cvvNamedWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvNamedWindow /;"	d
cvvResizeWindow	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvResizeWindow /;"	d
cvvSaveImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvSaveImage /;"	d
cvvShowImage	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvShowImage /;"	d
cvvWaitKey	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvWaitKey(/;"	d
cvvWaitKeyEx	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define cvvWaitKeyEx(/;"	d
cycle	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      cycle;$/;"	m	class:cv::StereoVar
cyrillic	/usr/local/include/opencv2/core/core_c.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont
d	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
d	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
d1	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d2	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d2	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
d2	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
d3	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d4	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
dMax_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    float dMax_;                         \/\/ short pair maximum distance$/;"	m	class:cv::BRISK
dMin_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    float dMin_;                         \/\/ long pair maximum distance$/;"	m	class:cv::BRISK
d_dst_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_dst_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_dst_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_keypoints_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat d_keypoints_;$/;"	m	class:cv::gpu::FAST_GPU
d_keypoints_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat d_keypoints_;$/;"	m	class:cv::gpu::ORB_GPU
d_src_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_src_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_src_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_xmap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_xmap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_xmap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_ymap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_ymap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_ymap_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
data	/usr/local/include/opencv2/contrib/contrib.hpp	/^        void* data;$/;"	m	class:cv::LevMarqSparse
data	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            T* data;$/;"	m	struct:cv::gpu::DevPtr
data	/usr/local/include/opencv2/core/gpumat.hpp	/^        uchar* data;$/;"	m	class:cv::gpu::GpuMat
data	/usr/local/include/opencv2/core/operations.hpp	/^        _Tp* data;$/;"	m	struct:cv::Vector::Hdr
data	/usr/local/include/opencv2/core/types_c.h	/^    schar* data;              \/* Pointer to the first element of the block. *\/$/;"	m	struct:CvSeqBlock
data	/usr/local/include/opencv2/core/types_c.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon51
data	/usr/local/include/opencv2/core/types_c.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon46
data	/usr/local/include/opencv2/core/types_c.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon49
data	/usr/local/include/opencv2/flann/matrix.h	/^    T* data;$/;"	m	class:cvflann::Matrix
data	/usr/local/include/opencv2/flann/matrix.h	/^    void* data;$/;"	m	class:cvflann::UntypedMatrix
data	/usr/local/include/opencv2/gpu/gpu.hpp	/^    uchar* data;$/;"	m	class:cv::gpu::CudaMem
data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const uchar* data() const { return image ? (const uchar*)image->imageData : 0; }$/;"	f	class:CvImage
data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const uchar* data() const { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix
data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar* data() { return image ? (uchar*)image->imageData : 0; }$/;"	f	class:CvImage
data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar* data() { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix
data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void* data;$/;"	m	union:__anon276
data	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvBoost
data	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvDTree
data	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvGBTrees
data	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvRTrees
data	/usr/local/include/opencv2/ml/ml.hpp	/^    float* data;$/;"	m	struct:CvSVMKernelRow
data	/usr/local/include/opencv2/ml/ml.hpp	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon283
data	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    Data data;$/;"	m	class:cv::CascadeClassifier
data	/usr/local/include/opencv2/ocl/ocl.hpp	/^            uchar *data;$/;"	m	class:cv::ocl::oclMat
dataOrder	/usr/local/include/opencv2/core/types_c.h	/^    int  dataOrder;         \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage
data_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    Matrix<ElementType> data_;$/;"	m	class:cvflann::KDTreeSingleIndex
data_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_path	/usr/local/include/opencv2/ts/ts.hpp	/^    string data_path;$/;"	m	class:cvtest::TS
data_root	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData
data_type	/usr/local/include/opencv2/flann/saving.h	/^    flann_datatype_t data_type;$/;"	m	struct:cvflann::IndexHeader
data_weight	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float data_weight;$/;"	m	class:cv::gpu::StereoBeliefPropagation
data_weight	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float data_weight;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
data_weight	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float data_weight;$/;"	m	class:cv::ocl::StereoBeliefPropagation
dataend	/usr/local/include/opencv2/core/gpumat.hpp	/^        uchar* dataend;$/;"	m	class:cv::gpu::GpuMat
dataend	/usr/local/include/opencv2/gpu/gpu.hpp	/^    uchar* dataend;$/;"	m	class:cv::gpu::CudaMem
dataend	/usr/local/include/opencv2/ocl/ocl.hpp	/^            uchar *dataend;$/;"	m	class:cv::ocl::oclMat
datas	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> datas;$/;"	m	class:cv::gpu::StereoBeliefPropagation
datas	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<oclMat> datas;$/;"	m	class:cv::ocl::StereoBeliefPropagation
dataset	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    const Matrix<ElementType> dataset;$/;"	m	class:cvflann::HierarchicalClusteringIndex
dataset_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::AutotunedIndex
dataset_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeIndex
dataset_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeSingleIndex
dataset_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KMeansIndex
dataset_	/usr/local/include/opencv2/flann/linear_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LinearIndex
dataset_	/usr/local/include/opencv2/flann/lsh_index.h	/^    Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LshIndex
datastart	/usr/local/include/opencv2/core/gpumat.hpp	/^        uchar* datastart;$/;"	m	class:cv::gpu::GpuMat
datastart	/usr/local/include/opencv2/core/operations.hpp	/^        _Tp* datastart;$/;"	m	struct:cv::Vector::Hdr
datastart	/usr/local/include/opencv2/gpu/gpu.hpp	/^    uchar* datastart;$/;"	m	class:cv::gpu::CudaMem
datastart	/usr/local/include/opencv2/ocl/ocl.hpp	/^            uchar *datastart;$/;"	m	class:cv::ocl::oclMat
db	/usr/local/include/opencv2/core/types_c.h	/^        double* db;$/;"	m	union:CvMat::__anon46
db	/usr/local/include/opencv2/core/types_c.h	/^        double* db;$/;"	m	union:CvMatND::__anon49
db	/usr/local/include/opencv2/ml/ml.hpp	/^        double** db;$/;"	m	union:CvVectors::__anon283
dcn	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^        int dcn;$/;"	m	struct:perf::CvtColorInfo
dd	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Ptr<Feature2D> dd;$/;"	m	class:cv::CvFeatureTracker
ddot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline double Matx<_Tp, m, n>::ddot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
ddot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline double Point3_<_Tp>::ddot(const Point3_& pt) const$/;"	f	class:cv::Point3_
ddot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline double Point_<_Tp>::ddot(const Point_& pt) const$/;"	f	class:cv::Point_
deallocate	/usr/local/include/opencv2/core/core.hpp	/^    void deallocate(pointer p, size_type) {fastFree(p); }$/;"	f	class:cv::Allocator
deallocate	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> static inline void deallocate(_Tp* ptr, size_t)$/;"	f	namespace:cv
deallocate	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline void AutoBuffer<_Tp, fixed_size>::deallocate()$/;"	f	class:cv::AutoBuffer
death_test_count	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
deblur	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void deblur(int \/*idx*\/, Mat &\/*frame*\/) {}$/;"	f	class:cv::videostab::NullDeblurer
deblurer_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurer_;$/;"	m	class:cv::videostab::StabilizerBase
deblurrer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurrer() const { return deblurer_; }$/;"	f	class:cv::videostab::StabilizerBase
decisionThreshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float decisionThreshold;$/;"	m	class:cv::gpu::GMG_GPU
decisionThreshold	/usr/local/include/opencv2/video/background_segm.hpp	/^    double  decisionThreshold;$/;"	m	class:cv::BackgroundSubtractorGMG
decision_func	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMDecisionFunc* decision_func;$/;"	m	class:CvSVM
declare	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    _declareHelper declare;$/;"	m	class:perf::TestBase
defaultAVCaptureDevicePosition	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) AVCaptureDevicePosition defaultAVCaptureDevicePosition;$/;"	v
defaultAVCaptureSessionPreset	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, strong) NSString *const defaultAVCaptureSessionPreset;$/;"	v
defaultAVCaptureVideoOrientation	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) AVCaptureVideoOrientation defaultAVCaptureVideoOrientation;$/;"	v
defaultFPS	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) int defaultFPS;$/;"	v
default_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:std::tr1::ThreadLocal
default_func_addr	/usr/local/include/opencv2/core/types_c.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo
default_model_name	/usr/local/include/opencv2/ml/ml.hpp	/^    const char* default_model_name;$/;"	m	class:CvStatModel
default_result_printer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
defined_test_names_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
degree	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams
delegate	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) id<CvPhotoCameraDelegate> delegate;$/;"	v
delegate	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) id<CvVideoCameraDelegate> delegate;$/;"	v
delete_obj	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::delete_obj()$/;"	f	class:cv::Ptr
delimiter	/usr/local/include/opencv2/ml/ml.hpp	/^    char delimiter;$/;"	m	class:CvMLData
delta	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int delta;$/;"	m	class:cv::MSER
delta	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float delta;   \/\/ Affects color and color co-occurrence quantization, typically set to 2.$/;"	m	struct:cv::gpu::FGDStatModel::Params
delta	/usr/local/include/opencv2/legacy/compat.hpp	/^    int delta;$/;"	m	struct:CvMSERParams
delta	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  delta;		\/* Affects color and color co-occurrence quantization, typically set to 2.					*\/$/;"	m	struct:CvFGDStatModelParams
delta	/usr/local/include/opencv2/ml/ml.hpp	/^    float delta;$/;"	m	class:CvGBTrees
deltaP	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* deltaP; \/\/computed increase of parameters (result of normal system solution )$/;"	m	class:cv::LevMarqSparse
deltas	/usr/local/include/opencv2/imgproc/types_c.h	/^    schar     deltas[8][2];$/;"	m	struct:CvChainPtReader
denorm_min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type denorm_min()  { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
density	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double density;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depart	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
depth	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline int GpuMat::depth() const$/;"	f	class:cv::gpu::GpuMat
depth	/usr/local/include/opencv2/core/mat.hpp	/^inline int Mat::depth() const { return CV_MAT_DEPTH(flags); }$/;"	f	class:cv::Mat
depth	/usr/local/include/opencv2/core/mat.hpp	/^inline int SparseMat::depth() const$/;"	f	class:cv::SparseMat
depth	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::depth() const$/;"	f	class:cv::Mat_
depth	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::depth() const$/;"	f	class:cv::SparseMat_
depth	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int depth() const { return CV_MAT_DEPTH(type_); }$/;"	f	class:cv::ogl::Buffer
depth	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int depth() const { return CV_MAT_DEPTH(type_); }$/;"	f	class:cv::GlBuffer
depth	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int depth() const { return CV_MAT_DEPTH(type_); }$/;"	f	class:cv::GlTexture
depth	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::depth() const$/;"	f	class:cv::Seq
depth	/usr/local/include/opencv2/core/types_c.h	/^    int  depth;             \/* Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage
depth	/usr/local/include/opencv2/imgproc/types_c.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect
depth	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int depth() const { return image ? image->depth : 0; }$/;"	f	class:CvImage
depth	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int depth() const { return matrix ? CV_MAT_DEPTH(matrix->type) : 0; }$/;"	f	class:CvMatrix
depth	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int depth() { return depth_; }$/;"	f	class:cv::RandomizedTree
depth	/usr/local/include/opencv2/ml/ml.hpp	/^    int depth;$/;"	m	struct:CvDTreeNode
depth	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline int oclMat::depth() const$/;"	f	class:cv::ocl::oclMat
depthHigh	/usr/local/include/opencv2/contrib/contrib.hpp	/^        unsigned int depthLow, depthHigh;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depthLow	/usr/local/include/opencv2/contrib/contrib.hpp	/^        unsigned int depthLow, depthHigh;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depth_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int depth_;$/;"	m	class:cv::RandomizedTree
depth_point	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect
derivAperture	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP int derivAperture;$/;"	m	struct:cv::HOGDescriptor
derivLambda	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double derivLambda; \/\/unused$/;"	m	class:cv::gpu::PyrLKOpticalFlow
derivLambda	/usr/local/include/opencv2/ocl/ocl.hpp	/^            double derivLambda;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
desc	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(struct CvFeatureTree*) cvCreateKDTree(CvMat* desc);$/;"	v
descriptionPairs	/usr/local/include/opencv2/features2d/features2d.hpp	/^    DescriptionPair descriptionPairs[NB_PAIRS];$/;"	m	class:cv::FREAK
descriptorExtractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> descriptorExtractor;$/;"	m	class:cv::OpponentColorDescriptorExtractor
descriptorSize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    inline int descriptorSize() const { return kBytes; }$/;"	f	class:cv::gpu::ORB_GPU
descriptorSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual int descriptorSize() const { return classifier_.classes(); }$/;"	f	class:cv::CalonderDescriptorExtractor
descriptorType	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual int descriptorType() const { return DataType<T>::type; }$/;"	f	class:cv::CalonderDescriptorExtractor
descriptors	/usr/local/include/opencv2/features2d/features2d.hpp	/^    vector<Mat> descriptors;$/;"	m	class:cv::BOWTrainer
descriptors	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Mat descriptors;$/;"	m	struct:cv::detail::ImageFeatures
descriptors_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    gpu::GpuMat descriptors_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
destroy	/usr/local/include/opencv2/core/core.hpp	/^    void destroy(pointer p) { p->~_Tp(); }$/;"	f	class:cv::Allocator
det	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat det, trace;$/;"	m	class:cv::gpu::SURF_GPU
det	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat det, trace;$/;"	m	class:cv::ocl::SURF_OCL
detach	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void detach()$/;"	f	class:CvImage
detail	/usr/local/include/opencv2/gpu/gpu.hpp	/^namespace detail$/;"	n	namespace:cv::gpu
detail	/usr/local/include/opencv2/stitching/detail/autocalib.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/util.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detectResultRoi	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalPortraitWarper
detectResultRoi	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalWarper
detectResultRoi	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::PlanePortraitWarper
detectResultRoi	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detectResultRoiByBorder	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoiByBorder(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detector	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<FeatureDetector> detector;$/;"	m	class:cv::GridAdaptedFeatureDetector
detector	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<FeatureDetector> detector;$/;"	m	class:cv::PyramidAdaptedFeatureDetector
detector	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat detector;$/;"	m	struct:cv::gpu::HOGDescriptor
detector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector);$/;"	v
detector	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat detector;$/;"	m	struct:cv::ocl::HOGDescriptor
detector	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector() const { return detector_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
detector_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::detail::SurfFeaturesFinder
detector_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
detectors	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    vector<CvLatentSvmDetector*> detectors;$/;"	m	class:cv::LatentSvmDetector
determinant	/usr/local/include/opencv2/core/operations.hpp	/^double determinant(const Matx<_Tp, m, m>& a)$/;"	f	namespace:cv
device	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^        namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/block.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/common.hpp	/^    namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^    namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
deviceID	/usr/local/include/opencv2/core/gpumat.hpp	/^        int deviceID() const { return device_id_; }$/;"	f	class:cv::gpu::DeviceInfo
device_id_	/usr/local/include/opencv2/core/gpumat.hpp	/^        int device_id_;$/;"	m	class:cv::gpu::DeviceInfo
devices_	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        std::vector<cv::gpu::DeviceInfo> devices_;$/;"	m	class:cvtest::DeviceManager
dextractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> dextractor;$/;"	m	class:cv::BOWImgDescriptorExtractor
dft_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size dft_size;$/;"	m	struct:cv::gpu::ConvolveBuf
diag	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::diag(const Mat& d)$/;"	f	class:cv::Mat
diag	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::diag(int d) const$/;"	f	class:cv::Mat_
diag	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::diag(const typename Matx<_Tp,m,n>::diag_type& d)$/;"	f	class:cv::Matx
diag	/usr/local/include/opencv2/core/operations.hpp	/^typename Matx<_Tp, m, n>::diag_type Matx<_Tp, m, n>::diag() const$/;"	f	class:cv::Matx
diff_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat diff_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
difference_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int difference_threshold;$/;"	m	class:cv::linemod::DepthNormal
difference_type	/usr/local/include/opencv2/core/core.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::Allocator
difference_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
dim	/usr/local/include/opencv2/core/types_c.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon50
dim_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    size_t dim_;$/;"	m	class:cvflann::KDTreeSingleIndex
dims	/usr/local/include/opencv2/core/core_c.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator
dims	/usr/local/include/opencv2/core/mat.hpp	/^inline int SparseMat::dims() const$/;"	f	class:cv::SparseMat
dims	/usr/local/include/opencv2/core/types_c.h	/^    int dims;$/;"	m	struct:CvMatND
dims	/usr/local/include/opencv2/core/types_c.h	/^    int dims;$/;"	m	struct:CvSparseMat
dims	/usr/local/include/opencv2/ml/ml.hpp	/^    int dims, count;$/;"	m	struct:CvVectors
dir	/usr/local/include/opencv2/legacy/compat.hpp	/^    float        dir;$/;"	m	struct:CvSURFPoint
direction	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData
disc_single_jump	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float disc_single_jump;$/;"	m	class:cv::gpu::StereoBeliefPropagation
disc_single_jump	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float disc_single_jump;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
disc_single_jump	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float disc_single_jump;$/;"	m	class:cv::ocl::StereoBeliefPropagation
discardFloatPosteriors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void discardFloatPosteriors() { freePosteriors(1); }$/;"	f	class:cv::RandomizedTree
disp	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvMat* disp;$/;"	m	struct:CvStereoBMState
disp12MaxDiff	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int disp12MaxDiff;$/;"	m	class:cv::StereoSGBM
disp12MaxDiff	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int disp12MaxDiff;$/;"	m	struct:CvStereoBMState
dispLeft	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* dispLeft;$/;"	m	struct:CvStereoGCState
dispRight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* dispRight;$/;"	m	struct:CvStereoGCState
disp_matches	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat disp_matches;$/;"	m	class:cv::CvFeatureTracker
dist	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        float dist;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
distThresh	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float distThresh() const { return distThresh_; }$/;"	f	class:cv::videostab::MotionInpainter
distThresh_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float distThresh_;$/;"	m	class:cv::videostab::MotionInpainter
distType	/usr/local/include/opencv2/flann/miniflann.hpp	/^    cvflann::flann_distance_t distType;$/;"	m	class:cv::flann::Index
distType	/usr/local/include/opencv2/gpu/gpu.hpp	/^    DistType distType;$/;"	m	class:cv::gpu::BruteForceMatcher_GPU_base
distType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            DistType distType;$/;"	m	class:cv::ocl::BruteForceMatcher_OCL_base
dist_	/usr/local/include/opencv2/flann/result_set.h	/^        DistanceType dist_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
dist_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    cv::Mat_<float> dist_; \/\/ distance map$/;"	m	class:cv::videostab::FastMarchingMethod
dist_indices_	/usr/local/include/opencv2/flann/result_set.h	/^    std::set<DistIndex> dist_indices_;$/;"	m	class:cvflann::UniqueResultSet
distance	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW float distance;$/;"	m	struct:cv::DMatch
distance	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    Distance distance;$/;"	m	class:cvflann::HierarchicalClusteringIndex
distanceMap	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    Mat distanceMap() const { return dist_; }$/;"	f	class:cv::videostab::FastMarchingMethod
distance_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    Distance distance_;$/;"	m	class:cvflann::AutotunedIndex
distance_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeIndex
distance_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeSingleIndex
distance_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KMeansIndex
distance_	/usr/local/include/opencv2/flann/linear_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LinearIndex
distance_	/usr/local/include/opencv2/flann/lsh_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LshIndex
distance_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int distance_threshold;$/;"	m	class:cv::linemod::DepthNormal
distortion	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera
distortion	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float distortion[4];$/;"	m	struct:Cv3dTrackerCameraIntrinsics
dists	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNResultSet
dists	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNSimpleResultSet
dists	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::RadiusResultSet
disttype	/usr/local/include/opencv2/legacy/compat.hpp	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState
divUp	/usr/local/include/opencv2/gpu/device/common.hpp	/^    __host__ __device__ __forceinline__ int divUp(int total, int grain)$/;"	f	namespace:cv::gpu
divfeat	/usr/local/include/opencv2/flann/kdtree_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeIndex::Node
divfeat	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divhigh	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divideTree	/usr/local/include/opencv2/flann/kdtree_index.h	/^    NodePtr divideTree(int* ind, int count)$/;"	f	class:cvflann::KDTreeIndex
divideTree	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    NodePtr divideTree(int left, int right, BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
divides	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ divides():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::divides
divides	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ divides(const divides& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::divides
divides	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct divides : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
divlow	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divval	/usr/local/include/opencv2/flann/kdtree_index.h	/^        DistanceType divval;$/;"	m	struct:cvflann::KDTreeIndex::Node
dmatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<DescriptorMatcher> dmatcher;$/;"	m	class:cv::BOWImgDescriptorExtractor
doCorrectionForInclusion	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion() const { return doCorrectionForInclusion_; }$/;"	f	class:cv::videostab::StabilizerBase
doCorrectionForInclusion_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion_;$/;"	m	class:cv::videostab::StabilizerBase
doDeblurring_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool doDeblurring_;$/;"	m	class:cv::videostab::StabilizerBase
doInpainting_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool doInpainting_;$/;"	m	class:cv::videostab::StabilizerBase
do_wave_correct_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    bool do_wave_correct_;$/;"	m	class:cv::Stitcher
dot	/usr/local/include/opencv2/core/operations.hpp	/^dot(const Vector<_Tp>& v1, const Vector<_Tp>& v2)$/;"	f	namespace:cv
dot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline _Tp Matx<_Tp, m, n>::dot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
dot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp Point3_<_Tp>::dot(const Point3_& pt) const$/;"	f	class:cv::Point3_
dot	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp Point_<_Tp>::dot(const Point_& pt) const$/;"	f	class:cv::Point_
double8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    struct double8$/;"	s	namespace:cv::gpu::device
dst	/usr/local/include/opencv2/core/core_c.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner
dstType	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
dstY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
dst_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Mat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_band_weights_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    std::vector<Mat> dst_band_weights_;$/;"	m	class:cv::detail::MultiBandBlender
dst_img_idx	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/ Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
dst_mask_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Mat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_pyr_laplace_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    std::vector<Mat> dst_pyr_laplace_;$/;"	m	class:cv::detail::MultiBandBlender
dst_roi_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Rect dst_roi_;$/;"	m	class:cv::detail::Blender
dst_roi_final_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Rect dst_roi_final_;$/;"	m	class:cv::detail::MultiBandBlender
dst_weight_map_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Mat dst_weight_map_;$/;"	m	class:cv::detail::FeatherBlender
dummy_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	/usr/local/include/opencv2/ts/ts_gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dx	/usr/local/include/opencv2/core/core_c.h	/^    float       dx;       \/* horizontal interval between letters *\/$/;"	m	struct:CvFont
dx	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat dx, dy;$/;"	m	struct:cv::gpu::CannyBuf
dx	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx, dy;$/;"	m	struct:cv::ocl::CannyBuf
dx1	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int dx1, dx2;$/;"	m	class:cv::FilterEngine
dx2	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int dx1, dx2;$/;"	m	class:cv::FilterEngine
dx_	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
dx_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dx_buf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx_buf, dy_buf;$/;"	m	struct:cv::ocl::CannyBuf
dx_buf_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx_buf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dx_calcBuf_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx_calcBuf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dy	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat dx, dy;$/;"	m	struct:cv::gpu::CannyBuf
dy	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx, dy;$/;"	m	struct:cv::ocl::CannyBuf
dy_	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
dy_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dy_buf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dx_buf, dy_buf;$/;"	m	struct:cv::ocl::CannyBuf
dy_buf_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dy_buf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dy_calcBuf_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat dy_calcBuf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
ea	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** ea; \/\/ sum_i  AijT * e_ij , used as right part of normal equation$/;"	m	class:cv::LevMarqSparse
eb	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** eb; \/\/ sum_j  BijT * e_ij , used as right part of normal equation$/;"	m	class:cv::LevMarqSparse
edge	/usr/local/include/opencv2/core/core_c.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner
edgeBlurSize	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int edgeBlurSize;$/;"	m	class:cv::MSER
edgeBlurSize	/usr/local/include/opencv2/legacy/compat.hpp	/^    int edgeBlurSize;$/;"	m	struct:CvMSERParams
edgeBuf	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* edgeBuf;$/;"	m	struct:CvStereoGCState
edgeBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat edgeBuf;$/;"	m	struct:cv::ocl::CannyBuf
edgeThreshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int edgeThreshold;$/;"	m	class:cv::ORB
edgeThreshold	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW double edgeThreshold;$/;"	m	class:cv::SIFT
edgeThreshold_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int edgeThreshold_;$/;"	m	class:cv::gpu::ORB_GPU
edge_threshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float edge_threshold;$/;"	m	class:cv::gpu::DisparityBilateralFilter
edge_weights	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder
edges	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat edges;$/;"	m	struct:cv::gpu::HoughCirclesBuf
edges_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat edges_;$/;"	m	class:cv::gpu::GeneralizedHough_GPU
edges_	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
edges_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    std::vector<std::pair<int,int> > edges_;$/;"	m	class:cv::detail::BundleAdjusterBase
edges_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::set<std::pair<int, int> > edges_;$/;"	m	class:cv::detail::DpSeamFinder
edges_	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    std::vector< std::list<GraphEdge> > edges_;$/;"	m	class:cv::detail::Graph
effect_size	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size effect_size;$/;"	m	struct:cv::ocl::HOGDescriptor
egvals	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float egvals[2];$/;"	m	struct:CvContourOrientation
egvects	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float egvects[4];$/;"	m	struct:CvContourOrientation
ehmm	/usr/local/include/opencv2/legacy/legacy.hpp	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon277	typeref:struct:CvEHMM::__anon277::CvEHMM
eig_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat eig_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
eigen2cv	/usr/local/include/opencv2/core/eigen.hpp	/^void eigen2cv( const Eigen::Matrix<_Tp, _rows, _cols, _options, _maxRows, _maxCols>& src, Mat& dst )$/;"	f	namespace:cv
eigenvalues	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat eigenvalues() const { return _eigenvalues; }$/;"	f	class:cv::LDA
eigenvectors	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat eigenvectors() const { return _eigenvectors; };$/;"	f	class:cv::LDA
elapsed_time	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elemSize	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ size_t elemSize() const { return elem_size; }$/;"	f	struct:cv::gpu::DevPtr
elemSize	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline size_t GpuMat::elemSize() const$/;"	f	class:cv::gpu::GpuMat
elemSize	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t Mat::elemSize() const { return dims > 0 ? step.p[dims-1] : 0; }$/;"	f	class:cv::Mat
elemSize	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::elemSize() const$/;"	f	class:cv::SparseMat
elemSize	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::elemSize() const$/;"	f	class:cv::Mat_
elemSize	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int elemSize() const { return CV_ELEM_SIZE(type_); }$/;"	f	class:cv::ogl::Buffer
elemSize	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int elemSize() const { return CV_ELEM_SIZE(type_); }$/;"	f	class:cv::GlBuffer
elemSize	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int elemSize() const { return CV_ELEM_SIZE(type_); }$/;"	f	class:cv::GlTexture
elemSize	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::elemSize() const$/;"	f	class:cv::Seq
elemSize	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline size_t oclMat::elemSize() const$/;"	f	class:cv::ocl::oclMat
elemSize1	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline size_t GpuMat::elemSize1() const$/;"	f	class:cv::gpu::GpuMat
elemSize1	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t Mat::elemSize1() const { return CV_ELEM_SIZE1(flags); }$/;"	f	class:cv::Mat
elemSize1	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::elemSize1() const$/;"	f	class:cv::SparseMat
elemSize1	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::elemSize1() const$/;"	f	class:cv::Mat_
elemSize1	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int elemSize1() const { return CV_ELEM_SIZE1(type_); }$/;"	f	class:cv::ogl::Buffer
elemSize1	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int elemSize1() const { return CV_ELEM_SIZE1(type_); }$/;"	f	class:cv::GlBuffer
elemSize1	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int elemSize1() const { return CV_ELEM_SIZE1(type_); }$/;"	f	class:cv::GlTexture
elemSize1	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline size_t oclMat::elemSize1() const$/;"	f	class:cv::ocl::oclMat
elem_size	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            enum { elem_size = sizeof(elem_type) };$/;"	e	enum:cv::gpu::DevPtr::__anon42
elem_type	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            typedef T elem_type;$/;"	t	struct:cv::gpu::DevPtr
elem_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef typename B::result_type elem_type;$/;"	t	struct:cv::gpu::device::BorderReader
elem_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef typename BrdConstant<D>::result_type elem_type;$/;"	t	struct:cv::gpu::device::BorderReader
elem_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::AreaFilter
elem_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::CubicFilter
elem_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::IntegerAreaFilter
elem_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::LinearFilter
elem_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::PointFilter
elem_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        typedef char elem_type;$/;"	t	struct:cv::gpu::device::VecTraits
elem_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        typedef schar elem_type;$/;"	t	struct:cv::gpu::device::VecTraits
element	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	v
element_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
element_wise_relative_error	/usr/local/include/opencv2/ts/ts.hpp	/^    bool element_wise_relative_error;$/;"	m	class:cvtest::ArrayTest
ellipseAngle	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ellipseAngle;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ellipseHeight	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ellipseWidth	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
emObj	/usr/local/include/opencv2/legacy/legacy.hpp	/^    cv::EM emObj;$/;"	m	class:CvEM
empty	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline bool GpuMat::empty() const$/;"	f	class:cv::gpu::GpuMat
empty	/usr/local/include/opencv2/core/mat.hpp	/^inline bool Mat::empty() const { return data == 0 || total() == 0; }$/;"	f	class:cv::Mat
empty	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::ogl::Buffer
empty	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::ogl::Texture2D
empty	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    bool empty() const { return size_ == 0; }$/;"	f	class:cv::ogl::Arrays
empty	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::GlBuffer
empty	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::GlTexture
empty	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline bool empty() const { return vertex_.empty(); }$/;"	f	class:cv::GlArrays
empty	/usr/local/include/opencv2/core/operations.hpp	/^    bool empty() const { return hdr.size == 0; }$/;"	f	class:cv::Vector
empty	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::empty() const { return node == 0; }$/;"	f	class:cv::FileNode
empty	/usr/local/include/opencv2/core/operations.hpp	/^inline bool Range::empty() const { return start == end; }$/;"	f	class:cv::Range
empty	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool Ptr<_Tp>::empty() const { return obj == 0; }$/;"	f	class:cv::Ptr
empty	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool Seq<_Tp>::empty() const$/;"	f	class:cv::Seq
empty	/usr/local/include/opencv2/flann/any.h	/^    bool empty() const$/;"	f	struct:cvflann::any
empty	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    bool empty() const$/;"	f	class:cvflann::DynamicBitset
empty	/usr/local/include/opencv2/flann/heap.h	/^    bool empty()$/;"	f	class:cvflann::Heap
empty	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual bool empty() const { return m_train_feature_count <= 0 ? true : false; }$/;"	f	class:cv::OneWayDescriptorBase
empty	/usr/local/include/opencv2/legacy/legacy.hpp	/^bool CalonderDescriptorExtractor<T>::empty() const$/;"	f	class:cv::CalonderDescriptorExtractor
empty	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline bool oclMat::empty() const$/;"	f	class:cv::ocl::oclMat
empty	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    bool empty() const { return inpainters_.empty(); }$/;"	f	class:cv::videostab::InpaintingPipeline
empty_any	/usr/local/include/opencv2/flann/any.h	/^struct empty_any$/;"	s	namespace:cvflann::anyimpl
end	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int begin, end;$/;"	m	struct:cv::Octree::Node
end	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator SparseMat::end() const$/;"	f	class:cv::SparseMat
end	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator SparseMat::end()$/;"	f	class:cv::SparseMat
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat::end() const$/;"	f	class:cv::Mat
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat_<_Tp>::end() const$/;"	f	class:cv::Mat_
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat::end()$/;"	f	class:cv::Mat
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat_<_Tp>::end()$/;"	f	class:cv::Mat_
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat::end() const$/;"	f	class:cv::SparseMat
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::end() const$/;"	f	class:cv::SparseMat_
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat::end()$/;"	f	class:cv::SparseMat
end	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat_<_Tp>::end()$/;"	f	class:cv::SparseMat_
end	/usr/local/include/opencv2/core/operations.hpp	/^    _Tp* end() { return hdr.data + hdr.size; }$/;"	f	class:cv::Vector
end	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp* end() const { return hdr.data + hdr.size; }$/;"	f	class:cv::Vector
end	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNodeIterator FileNode::end() const$/;"	f	class:cv::FileNode
end	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::end() const$/;"	f	class:cv::Seq
end	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect
end	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	/usr/local/include/opencv2/ts/ts_gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end1	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos
end10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
endY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
end_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index	/usr/local/include/opencv2/core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
end_index_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
ensemble	/usr/local/include/opencv2/ml/ml.hpp	/^    CvBoost* ensemble;$/;"	m	class:CvBoostTree
ensureSizeIsEnough	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline void ensureSizeIsEnough(Size size, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
ensureSizeIsEnough	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void ensureSizeIsEnough(Size size, int type, oclMat &m)$/;"	f	namespace:cv::ocl
ensureSizeIsEnough	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void ensureSizeIsEnough(int rows, int cols, int type, oclMat &m)$/;"	f	namespace:cv::ocl
epipole	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera
eps	/usr/local/include/opencv2/ml/ml.hpp	/^    double eps;$/;"	m	class:CvSVMSolver
eps	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float eps; \/\/ max outliers ratio$/;"	m	struct:cv::videostab::RansacParams
epsilon	/usr/local/include/opencv2/core/types_c.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria
epsilon	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type epsilon() { return 1.192092896e-07f\/*FLT_EPSILON*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
epsilon	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type epsilon() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
epsilon	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double epsilon;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
epsilon	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double epsilon;$/;"	m	class:cv::EM
equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ equal_to():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::equal_to
equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ equal_to(const equal_to& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::equal_to
equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
err	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> err;$/;"	m	class:CvLevMarq
err	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* err; \/\/error X-hX$/;"	m	class:cv::LevMarqSparse
err	/usr/local/include/opencv2/core/core.hpp	/^    string err; \/\/\/< error description$/;"	m	class:cv::Exception
err	/usr/local/include/opencv2/core/types_c.h	/^    int  err;$/;"	m	struct:CvLineIterator
err1_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err1_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
err2_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err2_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
errNorm	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
errNorm	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double prevErrNorm, errNorm;$/;"	m	class:cv::LevMarqSparse
errorCovPost	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat errorCovPost;       \/\/!< posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)$/;"	m	class:cv::KalmanFilter
errorCovPre	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat errorCovPre;        \/\/!< priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*\/$/;"	m	class:cv::KalmanFilter
error_cov_post	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman
error_cov_pre	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman
errors_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
escape_iters_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int escape_iters_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
estimateBuildParams	/usr/local/include/opencv2/flann/autotuned_index.h	/^    IndexParams estimateBuildParams()$/;"	f	class:cvflann::AutotunedIndex
estimateMotion	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    virtual void estimateMotion() { \/* do nothing as motion was estimation in pre-pass *\/ }$/;"	f	class:cv::videostab::TwoPassStabilizer
estimateSearchParams	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float estimateSearchParams(SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
etalonParamCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     etalonParamCount;$/;"	m	class:CvCalibFilter
etalonParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double* etalonParams;$/;"	m	class:CvCalibFilter
etalonPointCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     etalonPointCount;$/;"	m	class:CvCalibFilter
etalonPoints	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f* etalonPoints;$/;"	m	class:CvCalibFilter
etalonType	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvCalibEtalonType  etalonType;$/;"	m	class:CvCalibFilter
evaluate_kdtree	/usr/local/include/opencv2/flann/autotuned_index.h	/^    void evaluate_kdtree(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
evaluate_kmeans	/usr/local/include/opencv2/flann/autotuned_index.h	/^    void evaluate_kmeans(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
exit_code_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exploreNodeBranches	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int exploreNodeBranches(KMeansNodePtr node, const ElementType* q, DistanceType* domain_distances, Heap<BranchSt>* heap)$/;"	f	class:cvflann::KMeansIndex
exponent_bits	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
exposureCompensator	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::ExposureCompensator> exposureCompensator() { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposureCompensator	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::ExposureCompensator> exposureCompensator() const { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposure_comp_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::ExposureCompensator> exposure_comp_;$/;"	m	class:cv::Stitcher
extAll	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool extAll; \/\/ true if all pairs need to be extracted for pairs selection$/;"	m	class:cv::FREAK
extended	/usr/local/include/opencv2/legacy/compat.hpp	/^    int    extended;$/;"	m	struct:CvSURFParams
extended	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW bool extended;$/;"	m	class:cv::SURF
extended	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    bool extended;$/;"	m	class:cv::gpu::SURF_GPU
extended	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            bool extended;$/;"	m	class:cv::ocl::SURF_OCL
extended_I0	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat extended_I0;$/;"	m	class:cv::gpu::FastOpticalFlowBM
extended_I1	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat extended_I1;$/;"	m	class:cv::gpu::FastOpticalFlowBM
extended_src_buffer	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat buffer, extended_src_buffer;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
extract_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int extract_threshold;$/;"	m	class:cv::linemod::DepthNormal
extractor	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> extractor;$/;"	m	class:cv::VectorDescriptorMatcher
extractor_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Ptr<DescriptorExtractor> extractor_;$/;"	m	class:cv::detail::SurfFeaturesFinder
eye	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::eye(Size sz)$/;"	f	class:cv::Mat_
eye	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::eye(int rows, int cols)$/;"	f	class:cv::Mat_
eye	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::eye()$/;"	f	class:cv::Matx
eye_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Point3d eye_;$/;"	m	class:cv::GlCamera
f	/usr/local/include/opencv2/core/types_c.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon51
f	/usr/local/include/opencv2/core/types_c.h	/^    double f;$/;"	m	union:Cv64suf
f	/usr/local/include/opencv2/core/types_c.h	/^    float f;$/;"	m	union:Cv32suf
f	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    Feature f;$/;"	m	struct:cv::linemod::QuantizedPyramid::Candidate
f0	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	/usr/local/include/opencv2/ts/ts_gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
fCT	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float fCT; \/\/CT - complexity reduction prior$/;"	m	class:cv::gpu::MOG2_GPU
fCT	/usr/local/include/opencv2/video/background_segm.hpp	/^    float fCT;\/\/CT - complexity reduction prior$/;"	m	class:cv::BackgroundSubtractorMOG2
fHistogram	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvHistogram *fHistogram;$/;"	m	class:CvAdaptiveSkinDetector::Histogram
fHistogramMergeFactor	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double fHistogramMergeFactor, fHuePercentCovered;$/;"	m	class:CvAdaptiveSkinDetector
fHuePercentCovered	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double fHistogramMergeFactor, fHuePercentCovered;$/;"	m	class:CvAdaptiveSkinDetector
fTau	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float fTau;$/;"	m	class:cv::gpu::MOG2_GPU
fTau	/usr/local/include/opencv2/video/background_segm.hpp	/^    float fTau;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarInit	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float fVarInit;$/;"	m	class:cv::gpu::MOG2_GPU
fVarInit	/usr/local/include/opencv2/video/background_segm.hpp	/^    float fVarInit;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarMax	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float fVarMax;$/;"	m	class:cv::gpu::MOG2_GPU
fVarMax	/usr/local/include/opencv2/video/background_segm.hpp	/^    float fVarMax;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarMin	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float fVarMin;$/;"	m	class:cv::gpu::MOG2_GPU
fVarMin	/usr/local/include/opencv2/video/background_segm.hpp	/^    float fVarMin;$/;"	m	class:cv::BackgroundSubtractorMOG2
f_param1	/usr/local/include/opencv2/ml/ml.hpp	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP
f_param2	/usr/local/include/opencv2/ml/ml.hpp	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP
factory_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failure_message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
family	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline const std::string& family() const { return family_; }$/;"	f	class:cv::GlFont
family_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    std::string family_;$/;"	m	class:cv::GlFont
fastDetector_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    FAST_GPU fastDetector_;$/;"	m	class:cv::gpu::ORB_GPU
fastPyramids	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool fastPyramids;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline double fast_abs(double v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline float fast_abs(float v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline int fast_abs(int v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline int fast_abs(schar v) { return std::abs((int)v); }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline int fast_abs(short v) { return std::abs((int)v); }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline int fast_abs(uchar v) { return v; }$/;"	f	namespace:cv
fast_abs	/usr/local/include/opencv2/core/operations.hpp	/^inline int fast_abs(ushort v) { return v; }$/;"	f	namespace:cv
fatally_failed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
featureEvaluator	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    Ptr<FeatureEvaluator> featureEvaluator;$/;"	m	class:cv::CascadeClassifier
featureIdx	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int featureIdx;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
featureScaleLevels	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int featureScaleLevels;$/;"	m	class:cv::DenseFeatureDetector
featureScaleMul	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double featureScaleMul;$/;"	m	class:cv::DenseFeatureDetector
featureType	/usr/local/include/opencv2/flann/miniflann.hpp	/^    int featureType;$/;"	m	class:cv::flann::Index
featureType	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        int featureType;$/;"	m	class:cv::CascadeClassifier::Data
feature_size_	/usr/local/include/opencv2/flann/lsh_index.h	/^    unsigned int feature_size_;$/;"	m	class:cvflann::LshIndex
feature_type	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int feature_type; \/\/ Feature type to use$/;"	m	struct:cv::CvFeatureTrackerParams
features	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    vector<Point2f> features[2];$/;"	m	class:cv::CvFeatureTracker
features	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<Feature> features;$/;"	m	class:cv::FernClassifier
features	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  std::vector<Feature> features;$/;"	m	struct:cv::linemod::Template
featuresFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::FeaturesFinder> featuresFinder() { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::FeaturesFinder> featuresFinder() const { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresMatcher	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::FeaturesMatcher> featuresMatcher() { return features_matcher_; }$/;"	f	class:cv::Stitcher
featuresMatcher	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::FeaturesMatcher> featuresMatcher() const { return features_matcher_; }$/;"	f	class:cv::Stitcher
features_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    const ImageFeatures *features_;$/;"	m	class:cv::detail::BundleAdjusterBase
features_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<detail::ImageFeatures> features_;$/;"	m	class:cv::Stitcher
features_finder_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::FeaturesFinder> features_finder_;$/;"	m	class:cv::Stitcher
features_matcher_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::FeaturesMatcher> features_matcher_;$/;"	m	class:cv::Stitcher
feed	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    void feed(const std::vector<Point> &\/*corners*\/, const std::vector<Mat> &\/*images*\/,$/;"	f	class:cv::detail::NoExposureCompensator
fernClassifier	/usr/local/include/opencv2/legacy/legacy.hpp	/^    FernClassifier fernClassifier;$/;"	m	class:cv::PlanarObjectDetector
fi	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW float    fi;$/;"	m	class:cv::StereoVar
file	/usr/local/include/opencv2/core/core.hpp	/^    string file; \/\/\/< source file name where the error has occured$/;"	m	class:cv::Exception
file	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const char*        const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::string& file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_name	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* file_name() const {$/;"	f	class:testing::TestPartResult
file_name_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string file_name_;$/;"	m	class:testing::TestPartResult
filename	/usr/local/include/opencv2/legacy/legacy.hpp	/^        string filename;$/;"	m	class:cv::FernDescriptorMatcher::Params
fill	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void fill(It beg, It end, const T& value)$/;"	f	struct:cv::gpu::device::Block
fill	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ void fill(It beg, It end, const T& value)$/;"	f	struct:cv::gpu::device::Warp
fill_xor_mask	/usr/local/include/opencv2/flann/lsh_index.h	/^    void fill_xor_mask(lsh::BucketKey key, int lowest_index, unsigned int level,$/;"	f	class:cvflann::LshIndex
filter2D	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Ptr<BaseFilter> filter2D;$/;"	m	class:cv::FilterEngine
filterByArea	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW bool filterByArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByCircularity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW bool filterByCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByColor	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW bool filterByColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByConvexity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW bool filterByConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByInertia	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW bool filterByInertia;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterDX	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::gpu::CannyBuf
filterDX	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::ocl::CannyBuf
filterDY	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::gpu::CannyBuf
filterDY	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::ocl::CannyBuf
filters	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvLSVMFilterObject** filters;$/;"	m	struct:CvLatentSvmDetector
find	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    void find(const std::vector<Mat>&, const std::vector<Point>&, std::vector<Mat>&) {}$/;"	f	class:cv::detail::NoSeamFinder
findExactNN	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void findExactNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec)$/;"	f	class:cvflann::KMeansIndex
findLargestObject	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool findLargestObject;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
findNN	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void findNN(NodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNN	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void findNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::KMeansIndex
findNeighbors	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
findNeighbors	/usr/local/include/opencv2/flann/composite_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::CompositeIndex
findNeighbors	/usr/local/include/opencv2/flann/flann_base.hpp	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::Index
findNeighbors	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNeighbors	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeIndex
findNeighbors	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeSingleIndex
findNeighbors	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KMeansIndex
findNeighbors	/usr/local/include/opencv2/flann/linear_index.h	/^    void findNeighbors(ResultSet<DistanceType>& resultSet, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LinearIndex
findNeighbors	/usr/local/include/opencv2/flann/lsh_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LshIndex
find_nearest	/usr/local/include/opencv2/flann/ground_truth.h	/^void find_nearest(const Matrix<typename Distance::ElementType>& dataset, typename Distance::ElementType* query, int* matches, int nn,$/;"	f	namespace:cvflann
fineFunction	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float fineFunction[4];$/;"	m	struct:CvLSVMFilterObject
finished_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
first	/usr/local/include/opencv2/core/core_c.h	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule
first	/usr/local/include/opencv2/core/core_c.h	/^    static CvTypeInfo* first;$/;"	m	struct:CvType
first	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int first;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
firstCall_	/usr/local/include/opencv2/superres/superres.hpp	/^            bool firstCall_;$/;"	m	class:cv::superres::SuperResolution
firstEdge	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        int firstEdge;$/;"	m	struct:cv::Subdiv2D::Vertex
firstLevel	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int firstLevel;$/;"	m	class:cv::ORB
firstLevel_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int firstLevel_;$/;"	m	class:cv::gpu::ORB_GPU
fixp	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder
fixture_class_id_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
fjac	/usr/local/include/opencv2/contrib/contrib.hpp	/^        void (*fjac)(int i, int j, Mat& point_params, Mat& cam_params, Mat& A, Mat& B, void* data);$/;"	m	class:cv::LevMarqSparse
fl	/usr/local/include/opencv2/core/types_c.h	/^        float* fl;$/;"	m	union:CvMat::__anon46
fl	/usr/local/include/opencv2/core/types_c.h	/^        float* fl;$/;"	m	union:CvMatND::__anon49
fl	/usr/local/include/opencv2/ml/ml.hpp	/^        float** fl;$/;"	m	union:CvVectors::__anon283
flConfidence	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation
flCumulative	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation
flNewSamples	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation
flSamples	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation
flag_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    cv::Mat_<uchar> flag_; \/\/ flag map$/;"	m	class:cv::videostab::FastMarchingMethod
flags	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      flags;$/;"	m	class:cv::StereoVar
flags	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int flags;$/;"	m	class:cv::of2::FabMap
flags	/usr/local/include/opencv2/core/gpumat.hpp	/^        int flags;$/;"	m	class:cv::gpu::GpuMat
flags	/usr/local/include/opencv2/core/mat.hpp	/^    int flags;$/;"	m	class:cv::MatExpr
flags	/usr/local/include/opencv2/core/types_c.h	/^    int flags;$/;"	m	struct:CvTypeInfo
flags	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int flags;$/;"	m	class:cv::BOWKMeansTrainer
flags	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int flags;$/;"	m	class:cv::gpu::CudaMem
flags	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int flags;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
flags	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade
flags	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int flags;$/;"	m	class:cv::ocl::oclMat
flann	/usr/local/include/opencv2/flann/flann.hpp	/^namespace flann$/;"	n	namespace:cv
flann	/usr/local/include/opencv2/flann/miniflann.hpp	/^namespace flann$/;"	n	namespace:cv
flannIndex	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<flann::Index> flannIndex;$/;"	m	class:cv::FlannBasedMatcher
flann_algorithm_t	/usr/local/include/opencv2/flann/defines.h	/^enum flann_algorithm_t$/;"	g	namespace:cvflann
flann_centers_init_t	/usr/local/include/opencv2/flann/defines.h	/^enum flann_centers_init_t$/;"	g	namespace:cvflann
flann_datatype_t	/usr/local/include/opencv2/flann/defines.h	/^enum flann_datatype_t$/;"	g	namespace:cvflann
flann_distance_t	/usr/local/include/opencv2/flann/defines.h	/^enum flann_distance_t$/;"	g	namespace:cvflann
flann_log_level_t	/usr/local/include/opencv2/flann/defines.h	/^enum flann_log_level_t$/;"	g	namespace:cvflann
flattenedThreadId	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ int flattenedThreadId()$/;"	f	struct:cv::gpu::device::Block
flowErrorThreshold	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float flowErrorThreshold() const { return flowErrorThreshold_; }$/;"	f	class:cv::videostab::MotionInpainter
flowErrorThreshold_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float flowErrorThreshold_;$/;"	m	class:cv::videostab::MotionInpainter
flowErrors_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowMask_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<uchar> flowMask_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
flowY_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowY_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
fmm_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::ColorAverageInpainter
fmm_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::MotionInpainter
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon31
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon34
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	e	enum:cv::DataDepth::__anon40
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	e	enum:cv::DataDepth::__anon39
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon37
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon33
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	e	enum:cv::DataDepth::__anon36
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon32
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon38
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	e	enum:cv::DataDepth::__anon35
fmt	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	e	enum:cv::DataDepth::__anon41
fmt	/usr/local/include/opencv2/core/operations.hpp	/^    const Formatter* fmt;$/;"	m	struct:cv::Formatted
fn_2d	/usr/local/include/opencv2/core/internal.hpp	/^    void*   fn_2d[CV_DEPTH_MAX*4];$/;"	m	struct:CvBigFuncTable
fn_2d	/usr/local/include/opencv2/core/internal.hpp	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable
focal	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    double focal; \/\/ Focal length$/;"	m	struct:cv::detail::CameraParams
focal_length	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float focal_length[2];$/;"	m	struct:Cv3dTrackerCameraIntrinsics
font_face	/usr/local/include/opencv2/core/core_c.h	/^    int         font_face;    \/\/Qt: bool italic         \/* =CV_FONT_* *\/$/;"	m	struct:CvFont
forEach	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^B Graph::forEach(B body) const$/;"	f	class:cv::detail::Graph
foreground	/usr/local/include/opencv2/gpu/gpu.hpp	/^    cv::gpu::GpuMat foreground;$/;"	m	class:cv::gpu::FGDStatModel
foreground_regions	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector< std::vector<cv::Point> > foreground_regions;$/;"	m	class:cv::gpu::FGDStatModel
forest	/usr/local/include/opencv2/ml/ml.hpp	/^    CvRTrees* forest;$/;"	m	class:CvForestTree
format	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Format format() const { return format_; }$/;"	f	class:cv::ogl::Texture2D
format	/usr/local/include/opencv2/core/operations.hpp	/^static inline Formatted format(const Mat& mtx, const char* fmt,$/;"	f	namespace:cv
format	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Formatted format(const vector<Point3_<_Tp> >& vec,$/;"	f	namespace:cv
format	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Formatted format(const vector<Point_<_Tp> >& vec,$/;"	f	namespace:cv
format_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Format format_;$/;"	m	class:cv::ogl::Texture2D
fov_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double fov_;$/;"	m	class:cv::GlCamera
fps	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    double fps() { return reader_.get(CV_CAP_PROP_FPS); }$/;"	f	class:cv::videostab::VideoFileSource
fraction_bits	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
frame0_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frame1_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
frame1_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frameCount	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    int frameCount() { return static_cast<int>(reader_.get(CV_CAP_PROP_FRAME_COUNT)); }$/;"	f	class:cv::videostab::VideoFileSource
frameCount_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int frameCount_;$/;"	m	class:cv::videostab::TwoPassStabilizer
frameMask_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Mat frameMask_;$/;"	m	class:cv::videostab::StabilizerBase
frameNum_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int frameNum_;$/;"	m	class:cv::gpu::GMG_GPU
frameNum_	/usr/local/include/opencv2/video/background_segm.hpp	/^    int frameNum_;$/;"	m	class:cv::BackgroundSubtractorGMG
frameQueue_	/usr/local/include/opencv2/gpu/gpu.hpp	/^        detail::FrameQueue* frameQueue_;$/;"	m	class:cv::gpu::VideoReader_GPU::VideoSource
frameSize	/usr/local/include/opencv2/video/background_segm.hpp	/^    Size frameSize;$/;"	m	class:cv::BackgroundSubtractorMOG
frameSize	/usr/local/include/opencv2/video/background_segm.hpp	/^    Size frameSize;$/;"	m	class:cv::BackgroundSubtractorMOG2
frameSize_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::GMG_GPU
frameSize_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::MOG2_GPU
frameSize_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::MOG_GPU
frameSize_	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::VIBE_GPU
frameSize_	/usr/local/include/opencv2/video/background_segm.hpp	/^    cv::Size frameSize_;$/;"	m	class:cv::BackgroundSubtractorGMG
frameSize_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Size frameSize_;$/;"	m	class:cv::videostab::StabilizerBase
frameSource	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource() const { return frameSource_; }$/;"	f	class:cv::videostab::StabilizerBase
frameSource_	/usr/local/include/opencv2/superres/superres.hpp	/^            Ptr<FrameSource> frameSource_;$/;"	m	class:cv::superres::SuperResolution
frameSource_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource_;$/;"	m	class:cv::videostab::StabilizerBase
frameType	/usr/local/include/opencv2/video/background_segm.hpp	/^    int frameType;$/;"	m	class:cv::BackgroundSubtractorMOG
frameType	/usr/local/include/opencv2/video/background_segm.hpp	/^    int frameType;$/;"	m	class:cv::BackgroundSubtractorMOG2
frameType_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int frameType_;$/;"	m	class:cv::gpu::MOG2_GPU
frameType_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int frameType_;$/;"	m	class:cv::gpu::MOG_GPU
frames	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::DeblurerBase
frames	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::InpainterBase
framesAccepted	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     framesAccepted;$/;"	m	class:CvCalibFilter
framesTotal	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     framesTotal;$/;"	m	class:CvCalibFilter
frames_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat frames_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
frames_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::DeblurerBase
frames_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::InpainterBase
frames_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<Mat> frames_;$/;"	m	class:cv::videostab::StabilizerBase
free	/usr/local/include/opencv2/flann/matrix.h	/^    FLANN_DEPRECATED void free()$/;"	f	class:cvflann::Matrix
freeList	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBGCodeBookElem* freeList;$/;"	m	struct:CvBGCodeBookModel
freePoint	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int freePoint;$/;"	m	class:cv::Subdiv2D
freeQEdge	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int freeQEdge;$/;"	m	class:cv::Subdiv2D
free_centers	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void free_centers(KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
free_coef	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float free_coef;$/;"	m	struct:cv::gpu::HOGDescriptor
free_coef	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float free_coef;$/;"	m	struct:cv::ocl::HOGDescriptor
free_space	/usr/local/include/opencv2/core/types_c.h	/^    int free_space;               \/* Remaining free space in current block.   *\/$/;"	m	struct:CvMemStorage
free_space	/usr/local/include/opencv2/core/types_c.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos
freq	/usr/local/include/opencv2/ts/ts.hpp	/^    double t, freq;$/;"	m	class:cvtest::BadArgTest
frequency	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double frequency;$/;"	m	struct:perf::performance_metrics
from	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
front	/usr/local/include/opencv2/core/operations.hpp	/^    _Tp& front() { CV_DbgAssert(!empty()); return hdr.data[0]; }$/;"	f	class:cv::Vector
front	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp& front() const { CV_DbgAssert(!empty()); return hdr.data[0]; }$/;"	f	class:cv::Vector
front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::front()$/;"	f	class:cv::Seq
front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::front() const$/;"	f	class:cv::Seq
fs	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	v
fs	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	v
fs	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	v
fs	/usr/local/include/opencv2/core/operations.hpp	/^    FileStorage* fs;$/;"	m	class:cv::VecWriterProxy
fs	/usr/local/include/opencv2/core/operations.hpp	/^    FileStorage* fs;$/;"	m	class:cv::WriteStructContext
ft_params	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams ft_params;$/;"	m	struct:cv::CvHybridTrackerParams
ft_tracker_weight	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    float ft_tracker_weight;$/;"	m	struct:cv::CvHybridTrackerParams
fttracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvFeatureTracker* fttracker;$/;"	m	class:cv::CvHybridTracker
full	/usr/local/include/opencv2/flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNResultSet
full	/usr/local/include/opencv2/flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNSimpleResultSet
full	/usr/local/include/opencv2/flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::RadiusResultSet
full	/usr/local/include/opencv2/flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::RadiusUniqueResultSet
full	/usr/local/include/opencv2/flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::UniqueResultSet
fullDP	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW bool fullDP;$/;"	m	class:cv::StereoSGBM
full_img_sizes_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<cv::Size> full_img_sizes_;$/;"	m	class:cv::Stitcher
full_pattern_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
func	/usr/local/include/opencv2/contrib/contrib.hpp	/^        void (*func)(int i, int j, Mat& point_params, Mat& cam_params, Mat& estim, void* data);$/;"	m	class:cv::LevMarqSparse
func	/usr/local/include/opencv2/core/core.hpp	/^    string func; \/\/\/< function name. Available only when the compiler supports __func__ macro$/;"	m	class:cv::Exception
func_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const UserThreadFunc func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
func_addr	/usr/local/include/opencv2/core/types_c.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo
func_names	/usr/local/include/opencv2/core/types_c.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo
func_tab	/usr/local/include/opencv2/core/types_c.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo
functional_detail	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    namespace functional_detail$/;"	n	namespace:cv::gpu::device
fundMatr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera
fuzzyController	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvFuzzyController fuzzyController;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
fuzzyInput1	/usr/local/include/opencv2/contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyInput1, *fuzzyInput2;$/;"	m	class:CvFuzzyRule
fuzzyInput2	/usr/local/include/opencv2/contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyInput1, *fuzzyInput2;$/;"	m	class:CvFuzzyRule
fuzzyOutput	/usr/local/include/opencv2/contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyOutput;$/;"	m	class:CvFuzzyRule
fuzzyResizer	/usr/local/include/opencv2/contrib/contrib.hpp	/^        FuzzyResizer *fuzzyResizer;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
g10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
gSum_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
g_point	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvGaussBGPoint*            g_point;$/;"	m	struct:CvGaussBGModel
g_values	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint
gain	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman
gain	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat gain;               \/\/!< Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)$/;"	m	class:cv::KalmanFilter
gain_maps_	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    std::vector<Mat_<float> > gain_maps_;$/;"	m	class:cv::detail::BlocksGainCompensator
gains_	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    Mat_<double> gains_;$/;"	m	class:cv::detail::GainCompensator
gamma	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float gamma;$/;"	m	class:cv::SpinImageModel
gamma	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float gamma;$/;"	m	class:cv::gpu::BroxOpticalFlow
gamma	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams
gammaCorrection	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP bool gammaCorrection;$/;"	m	struct:cv::HOGDescriptor
gamma_correction	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool gamma_correction;$/;"	m	struct:cv::gpu::HOGDescriptor
gamma_correction	/usr/local/include/opencv2/ocl/ocl.hpp	/^            bool gamma_correction;$/;"	m	struct:cv::ocl::HOGDescriptor
gamma_shift	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            gamma_shift = 3,$/;"	e	enum:cv::gpu::device::color_detail::__anon68
ganglionCellsSensitivity	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
gcd	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp gcd(_Tp a, _Tp b)$/;"	f	namespace:cv
get	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline typename ParamType<_Tp>::member_type Algorithm::get(const char* _name) const$/;"	f	class:cv::Algorithm
get	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline typename ParamType<_Tp>::member_type Algorithm::get(const string& _name) const$/;"	f	class:cv::Algorithm
get	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
getAlpha	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 3>::vec_type& vec)$/;"	f	namespace:cv::gpu::device::color_detail
getAlpha	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 4>::vec_type& vec)$/;"	f	namespace:cv::gpu::device::color_detail
getBucketFromKey	/usr/local/include/opencv2/flann/lsh_table.h	/^    inline const Bucket* getBucketFromKey(BucketKey key) const$/;"	f	class:cvflann::lsh::LshTable
getCenterOrdering	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void getCenterOrdering(KMeansNodePtr node, const ElementType* q, int* sort_indices)$/;"	f	class:cvflann::KMeansIndex
getClusterCenters	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int getClusterCenters(Matrix<DistanceType>& centers)$/;"	f	class:cvflann::KMeansIndex
getData	/usr/local/include/opencv2/legacy/legacy.hpp	/^inline uchar* getData(IplImage* image)$/;"	f	namespace:cv
getDistanceToBorder	/usr/local/include/opencv2/flann/kmeans_index.h	/^    DistanceType getDistanceToBorder(DistanceType* p, DistanceType* c, DistanceType* q)$/;"	f	class:cvflann::KMeansIndex
getExactNeighbors	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void getExactNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getFirstTopLevelNode	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode FileStorage::getFirstTopLevelNode() const$/;"	f	class:cv::FileStorage
getFloatSignature	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void getFloatSignature(IplImage *patch, float *sig) const { getSignature(patch, sig); }$/;"	f	class:cv::RTreeClassifier
getIndex	/usr/local/include/opencv2/flann/flann_base.hpp	/^    FLANN_DEPRECATED NNIndex<Distance>* getIndex()$/;"	f	class:cvflann::Index
getIndexParameters	/usr/local/include/opencv2/flann/flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters() { return nnIndex->getIndexParameters(); }$/;"	f	class:cv::flann::GenericIndex
getIndexParameters	/usr/local/include/opencv2/flann/flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters()$/;"	f	class:cv::flann::Index_
getIndexParameters	/usr/local/include/opencv2/flann/flann_base.hpp	/^    FLANN_DEPRECATED  const IndexParams* getIndexParameters()$/;"	f	class:cvflann::Index
getKey	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t getKey(const ElementType* \/*feature*\/) const$/;"	f	class:cvflann::lsh::LshTable
getKey	/usr/local/include/opencv2/flann/lsh_table.h	/^inline size_t LshTable<unsigned char>::getKey(const unsigned char* feature) const$/;"	f	class:cvflann::lsh::LshTable
getLikelihood	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_WRAP inline double getLikelihood() const { return emObj.isTrained() ? logLikelihood : DBL_MAX; }$/;"	f	class:CvEM
getMesh	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mesh3D& getMesh() { return mesh; }$/;"	f	class:cv::SpinImageModel
getMesh	/usr/local/include/opencv2/contrib/contrib.hpp	/^        const Mesh3D& getMesh() const { return mesh; }$/;"	f	class:cv::SpinImageModel
getMinEigenVals	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool getMinEigenVals;  \/\/unused$/;"	m	class:cv::gpu::PyrLKOpticalFlow
getMinEigenVals	/usr/local/include/opencv2/ocl/ocl.hpp	/^            bool getMinEigenVals;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
getMinVarianceClusters	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int getMinVarianceClusters(KMeansNodePtr root, KMeansNodePtr* clusters, int clusters_length, DistanceType& varianceValue)$/;"	f	class:cvflann::KMeansIndex
getModalities	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  const std::vector< Ptr<Modality> >& getModalities() const { return modalities; }$/;"	f	class:cv::linemod::Detector
getNeighbors	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void getNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, int maxCheck, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getNeighbors	/usr/local/include/opencv2/flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, ResultSet<DistanceType>& result)$/;"	f	class:cvflann::LshIndex
getNeighbors	/usr/local/include/opencv2/flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, bool \/*do_radius*\/, float radius, bool do_k, unsigned int k_nn,$/;"	f	class:cvflann::LshIndex
getNextId	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            static int getNextId()$/;"	f	struct:DetectionBasedTracker::TrackedObject
getNodes	/usr/local/include/opencv2/contrib/contrib.hpp	/^        const vector<Node>& getNodes() const { return nodes; }$/;"	f	class:cv::Octree
getParameters	/usr/local/include/opencv2/flann/autotuned_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::AutotunedIndex
getParameters	/usr/local/include/opencv2/flann/composite_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::CompositeIndex
getParameters	/usr/local/include/opencv2/flann/flann.hpp	/^        ::cvflann::IndexParams getParameters() { return nnIndex->getParameters(); }$/;"	f	class:cv::flann::GenericIndex
getParameters	/usr/local/include/opencv2/flann/flann.hpp	/^        ::cvflann::IndexParams getParameters()$/;"	f	class:cv::flann::Index_
getParameters	/usr/local/include/opencv2/flann/flann_base.hpp	/^    IndexParams getParameters() const$/;"	f	class:cvflann::Index
getParameters	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getParameters	/usr/local/include/opencv2/flann/kdtree_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeIndex
getParameters	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeSingleIndex
getParameters	/usr/local/include/opencv2/flann/kmeans_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KMeansIndex
getParameters	/usr/local/include/opencv2/flann/linear_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LinearIndex
getParameters	/usr/local/include/opencv2/flann/lsh_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LshIndex
getPosteriorByIndex	/usr/local/include/opencv2/legacy/legacy.hpp	/^inline const float* RandomizedTree::getPosteriorByIndex(int index) const$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex	/usr/local/include/opencv2/legacy/legacy.hpp	/^inline float* RandomizedTree::getPosteriorByIndex(int index)$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex2	/usr/local/include/opencv2/legacy/legacy.hpp	/^inline const uchar* RandomizedTree::getPosteriorByIndex2(int index) const$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex2	/usr/local/include/opencv2/legacy/legacy.hpp	/^inline uchar* RandomizedTree::getPosteriorByIndex2(int index)$/;"	f	class:cv::RandomizedTree
getScale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float getScale() const { return 1.f; }$/;"	f	class:cv::detail::RotationWarper
getScale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float getScale() const { return projector_.scale; }$/;"	f	class:cv::detail::RotationWarperBase
getSearchParameters	/usr/local/include/opencv2/flann/autotuned_index.h	/^    SearchParams getSearchParameters() const$/;"	f	class:cvflann::AutotunedIndex
getSpeedup	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float getSpeedup() const$/;"	f	class:cvflann::AutotunedIndex
getSpinCount	/usr/local/include/opencv2/contrib/contrib.hpp	/^        size_t getSpinCount() const { return spinImages.rows; }$/;"	f	class:cv::SpinImageModel
getSpinImage	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat getSpinImage(size_t index) const { return spinImages.row((int)index); }$/;"	f	class:cv::SpinImageModel
getSpinNormal	/usr/local/include/opencv2/contrib/contrib.hpp	/^        const Point3f& getSpinNormal(size_t index) const { return mesh.normals[subset[index]]; }$/;"	f	class:cv::SpinImageModel
getSpinVertex	/usr/local/include/opencv2/contrib/contrib.hpp	/^        const Point3f& getSpinVertex(size_t index) const { return mesh.vtx[subset[index]]; }$/;"	f	class:cv::SpinImageModel
getStats	/usr/local/include/opencv2/flann/lsh_table.h	/^inline LshStats LshTable<unsigned char>::getStats() const$/;"	f	class:cvflann::lsh::LshTable
getT	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int getT(int pyramid_level) const { return T_at_level[pyramid_level]; }$/;"	f	class:cv::linemod::Detector
getType	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual flann_algorithm_t getType() const$/;"	f	class:cvflann::AutotunedIndex
getType	/usr/local/include/opencv2/flann/composite_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::CompositeIndex
getType	/usr/local/include/opencv2/flann/flann_base.hpp	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::Index
getType	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getType	/usr/local/include/opencv2/flann/kdtree_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeIndex
getType	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeSingleIndex
getType	/usr/local/include/opencv2/flann/kmeans_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KMeansIndex
getType	/usr/local/include/opencv2/flann/linear_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LinearIndex
getType	/usr/local/include/opencv2/flann/lsh_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LshIndex
get_back_project	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual IplImage* get_back_project()$/;"	f	class:CvCamShiftTracker
get_center	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f get_center() const \/\/ center of the object$/;"	f	class:CvCamShiftTracker
get_current_test_info	/usr/local/include/opencv2/ts/ts.hpp	/^    const TestInfo* get_current_test_info() { return &current_test_info; }$/;"	f	class:cvtest::TS
get_data_path	/usr/local/include/opencv2/ts/ts.hpp	/^    const string& get_data_path() const { return data_path; }$/;"	f	class:cvtest::TS
get_err_code	/usr/local/include/opencv2/ts/ts.hpp	/^    int get_err_code() { return current_test_info.code; }$/;"	f	class:cvtest::TS
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type()$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<char>() { return H5T_NATIVE_CHAR; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<double>() { return H5T_NATIVE_DOUBLE; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<float>() { return H5T_NATIVE_FLOAT; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<int>() { return H5T_NATIVE_INT; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<long>() { return H5T_NATIVE_LONG; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<short int>() { return H5T_NATIVE_SHORT; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<unsigned char>() { return H5T_NATIVE_UCHAR; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<unsigned int>() { return H5T_NATIVE_UINT; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<unsigned long>() { return H5T_NATIVE_ULONG; }$/;"	f	namespace:cvflann::__anon65
get_hdf5_type	/usr/local/include/opencv2/flann/hdf5.h	/^hid_t get_hdf5_type<unsigned short int>() { return H5T_NATIVE_USHORT; }$/;"	f	namespace:cvflann::__anon65
get_hist_dims	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     get_hist_dims( int* dims = 0 ) const \/\/ returns number of histogram dimensions and sets$/;"	f	class:CvCamShiftTracker
get_layer_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int get_layer_count() { return layer_sizes ? layer_sizes->cols : 0; }$/;"	f	class:CvANN_MLP
get_layer_sizes	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvMat* get_layer_sizes() { return layer_sizes; }$/;"	f	class:CvANN_MLP
get_length	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   get_length() const \/\/ the larger linear size of the object$/;"	f	class:CvCamShiftTracker
get_length_subbuf	/usr/local/include/opencv2/ml/ml.hpp	/^    inline size_t get_length_subbuf() const$/;"	f	struct:CvDTreeTrainData
get_log_likelihood	/usr/local/include/opencv2/legacy/legacy.hpp	/^    inline double get_log_likelihood() const { return getLikelihood(); }$/;"	f	class:CvEM
get_max_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     get_max_ch_val( int channel ) const \/\/ get the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
get_min_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     get_min_ch_val( int channel ) const \/\/ get the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
get_minor	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::get_minor(int i, int j) const$/;"	f	class:cv::Matx
get_name	/usr/local/include/opencv2/ts/ts.hpp	/^    const string& get_name() const { return name; }$/;"	f	class:cvtest::BaseTest
get_num_valid	/usr/local/include/opencv2/ml/ml.hpp	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode
get_orientation	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   get_orientation() const \/\/ orientation of the object in degrees$/;"	f	class:CvCamShiftTracker
get_param	/usr/local/include/opencv2/flann/params.h	/^T get_param(const IndexParams& params, std::string name)$/;"	f	namespace:cvflann
get_param	/usr/local/include/opencv2/flann/params.h	/^T get_param(const IndexParams& params, std::string name, const T& default_value)$/;"	f	namespace:cvflann
get_params	/usr/local/include/opencv2/ml/ml.hpp	/^    virtual CvSVMParams get_params() const { return params; };$/;"	f	class:CvSVM
get_policy	/usr/local/include/opencv2/flann/any.h	/^base_any_policy* get_policy()$/;"	f	namespace:cvflann::anyimpl
get_rng	/usr/local/include/opencv2/ts/ts.hpp	/^    RNG& get_rng() { return rng; }$/;"	f	class:cvtest::TS
get_row_func	/usr/local/include/opencv2/ml/ml.hpp	/^    GetRow get_row_func;$/;"	m	class:CvSVMSolver
get_size	/usr/local/include/opencv2/flann/any.h	/^    virtual ::size_t get_size() { return sizeof(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
get_test_case_count_scale	/usr/local/include/opencv2/ts/ts.hpp	/^    double get_test_case_count_scale() { return params.test_case_count_scale; }$/;"	f	class:cvtest::TS
get_threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     get_threshold() const \/\/ thresholding value that applied to back project$/;"	f	class:CvCamShiftTracker
get_value	/usr/local/include/opencv2/flann/any.h	/^    virtual void* get_value(void** src) { return *src; }$/;"	f	struct:cvflann::anyimpl::big_any_policy
get_value	/usr/local/include/opencv2/flann/any.h	/^    virtual void* get_value(void** src) { return reinterpret_cast<void*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
get_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_WRAP int get_var_count() const { return var_idx ? var_idx->cols : var_all; }$/;"	f	class:CvSVM
get_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    virtual int get_var_count() const {return data ? data->var_count : 0;}$/;"	f	class:CvForestTree
get_weights	/usr/local/include/opencv2/ml/ml.hpp	/^    double* get_weights(int layer)$/;"	f	class:CvANN_MLP
get_width	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   get_width() const \/\/ the smaller linear size of the object$/;"	f	class:CvCamShiftTracker
get_window	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvRect get_window() const \/\/ bounding rectangle for the object$/;"	f	class:CvCamShiftTracker
get_work_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int get_work_var_count() const {return work_var_count;}$/;"	f	struct:CvDTreeTrainData
gmean	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double gmean;$/;"	m	struct:perf::performance_metrics
gpu	/usr/local/include/opencv2/core/core.hpp	/^namespace gpu {$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^    namespace gpu$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/core/gpumat.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/core/opengl_interop.hpp	/^namespace cv { namespace gpu {$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/block.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/common.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/static_check.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/gpu/stream_accessor.hpp	/^    namespace gpu$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/nonfree/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n	namespace:cv
gpu	/usr/local/include/opencv2/ts/gpu_test.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
grad	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
grad	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat grad, qangle;$/;"	m	struct:cv::ocl::HOGDescriptor
grad_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
grad_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat grad_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
gradx1_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
gradx2_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
grady1_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
grady2_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
graph	/usr/local/include/opencv2/core/core_c.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner
graph	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	v
graph	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder
grayFrame_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
grayImg	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat*  grayImg;$/;"	m	class:CvCalibFilter
gray_image_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    gpu::GpuMat gray_image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
grayscaleMode	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL grayscaleMode;$/;"	v
greater	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ greater():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater
greater	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ greater(const greater& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater
greater	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct greater : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
greater_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ greater_equal():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater_equal
greater_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ greater_equal(const greater_equal& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater_equal
greater_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct greater_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
greek	/usr/local/include/opencv2/core/core_c.h	/^    const int*  greek;$/;"	m	struct:CvFont
gridCols	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int gridCols;$/;"	m	class:cv::GridAdaptedFeatureDetector
gridRows	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int gridRows;$/;"	m	class:cv::GridAdaptedFeatureDetector
grid_size	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Size grid_size;$/;"	m	class:cv::detail::OrbFeaturesFinder
gstddev	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double gstddev;\/\/stddev for log(time)$/;"	m	struct:perf::performance_metrics
gt_matches_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    Matrix<int> gt_matches_;$/;"	m	class:cvflann::AutotunedIndex
gtest_flag_saver_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
h	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob
h1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int h1, h2;$/;"	m	struct:lsh_hash
h2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int h1, h2;$/;"	m	struct:lsh_hash
hX	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* hX; \/\/current measurement extimation given new parameter vector$/;"	m	class:cv::LevMarqSparse
h_range	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    vector<float> h_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
haar_feature	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier
haight	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::gpu::device::AreaFilter
half	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ T half() { return (T)(max()\/2 + 1); }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
half	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ float half() { return 0.5f; }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
harrisK	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double harrisK;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
has_new_fatal_failure	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_owner_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool has_owner_;$/;"	m	class:std::tr1::MutexBase
has_type	/usr/local/include/opencv2/flann/any.h	/^    bool has_type()$/;"	f	struct:cvflann::any
hash	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::hash(const int* idx) const$/;"	f	class:cv::SparseMat
hash	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::hash(int i0) const$/;"	f	class:cv::SparseMat
hash	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::hash(int i0, int i1) const$/;"	f	class:cv::SparseMat
hash	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::hash(int i0, int i1, int i2) const$/;"	f	class:cv::SparseMat
hashsize	/usr/local/include/opencv2/core/types_c.h	/^    int hashsize;$/;"	m	struct:CvSparseMat
hashtable	/usr/local/include/opencv2/core/types_c.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat
hashval	/usr/local/include/opencv2/core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode
hashval	/usr/local/include/opencv2/core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode
have_active_cat_vars	/usr/local/include/opencv2/ml/ml.hpp	/^    bool have_active_cat_vars;$/;"	m	class:CvBoost
have_labels	/usr/local/include/opencv2/ml/ml.hpp	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData
have_priors	/usr/local/include/opencv2/ml/ml.hpp	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData
have_subsample	/usr/local/include/opencv2/ml/ml.hpp	/^    bool have_subsample;$/;"	m	class:CvBoost
hcellsSpatialConstant	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
hcellsTemporalConstant	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
hdr	/usr/local/include/opencv2/core/core_c.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator
hdr	/usr/local/include/opencv2/core/operations.hpp	/^    Hdr hdr;$/;"	m	class:cv::Vector
hdr_refcount	/usr/local/include/opencv2/core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMat
hdr_refcount	/usr/local/include/opencv2/core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND
hdr_refcount	/usr/local/include/opencv2/core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat
header_	/usr/local/include/opencv2/core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageView
header_	/usr/local/include/opencv2/core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageViewC
header_size	/usr/local/include/opencv2/core/types_c.h	/^    int header_size;$/;"	m	struct:CvTypeInfo
heap	/usr/local/include/opencv2/core/types_c.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet
heap	/usr/local/include/opencv2/flann/heap.h	/^    std::vector<T> heap;$/;"	m	class:cvflann::Heap
height	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
height	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int height() const { return height_; }$/;"	f	class:cv::GlFont
height	/usr/local/include/opencv2/core/types_c.h	/^        int height;$/;"	m	union:CvMat::__anon47
height	/usr/local/include/opencv2/core/types_c.h	/^    float height;$/;"	m	struct:CvSize2D32f
height	/usr/local/include/opencv2/core/types_c.h	/^    int  height;            \/* Image height in pixels.                          *\/$/;"	m	struct:_IplImage
height	/usr/local/include/opencv2/core/types_c.h	/^    int  height;$/;"	m	struct:_IplROI
height	/usr/local/include/opencv2/core/types_c.h	/^    int height;$/;"	m	struct:CvRect
height	/usr/local/include/opencv2/core/types_c.h	/^    int height;$/;"	m	struct:CvSize
height	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BorderReader
height	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdColConstant
height	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdColWrap
height	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdConstant
height	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdWrap
height	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int height;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
height	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u
height	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     height;$/;"	m	struct:_CvPixelPosition32f
height	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     height;$/;"	m	struct:_CvPixelPosition8s
height	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int height() const { return image ? image->height : 0; }$/;"	f	class:CvImage
height	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int height;$/;"	m	struct:cv::linemod::Template
height_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int height_;$/;"	m	class:cv::GlFont
hessian	/usr/local/include/opencv2/legacy/compat.hpp	/^    float        hessian;$/;"	m	struct:CvSURFPoint
hessianThreshold	/usr/local/include/opencv2/legacy/compat.hpp	/^    double hessianThreshold;$/;"	m	struct:CvSURFParams
hessianThreshold	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW double hessianThreshold;$/;"	m	class:cv::SURF
hessianThreshold	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    double hessianThreshold;$/;"	m	class:cv::gpu::SURF_GPU
hessianThreshold	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            float hessianThreshold;$/;"	m	class:cv::ocl::SURF_OCL
hid_cascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade
hierarchicalClustering	/usr/local/include/opencv2/flann/flann.hpp	/^FLANN_DEPRECATED int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params)$/;"	f	namespace:cv::flann
hierarchicalClustering	/usr/local/include/opencv2/flann/flann.hpp	/^int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params,$/;"	f	namespace:cv::flann
hierarchicalClustering	/usr/local/include/opencv2/flann/flann_base.hpp	/^int hierarchicalClustering(const Matrix<typename Distance::ElementType>& points, Matrix<typename Distance::ResultType>& centers,$/;"	f	namespace:cvflann
high	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
hist	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    MatND hist;$/;"	m	class:cv::CvMeanShiftTracker
hist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	v
hist	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	v
histogramHueMotion	/usr/local/include/opencv2/contrib/contrib.hpp	/^    Histogram histogramHueMotion, skinHueHistogram;$/;"	m	class:CvAdaptiveSkinDetector
histogramNormType	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP int histogramNormType;$/;"	m	struct:cv::HOGDescriptor
history	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int history;$/;"	m	class:cv::gpu::MOG2_GPU
history	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int history;$/;"	m	class:cv::gpu::MOG_GPU
history	/usr/local/include/opencv2/video/background_segm.hpp	/^    int history;$/;"	m	class:cv::BackgroundSubtractorMOG
history	/usr/local/include/opencv2/video/background_segm.hpp	/^    int history;$/;"	m	class:cv::BackgroundSubtractorMOG2
hmm	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvRelease2DHMM( CvEHMM** hmm );$/;"	v
horizontalCellsGain	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
horizontalEdgeBottom	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
horizontalEdgeTop	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
hscale	/usr/local/include/opencv2/core/core_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
hsv	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat hsv, hue;$/;"	m	class:cv::CvMeanShiftTracker
hu1	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu2	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu3	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu4	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu5	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu6	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu7	/usr/local/include/opencv2/imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hue	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat hsv, hue;$/;"	m	class:cv::CvMeanShiftTracker
hypot_sqr_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ hypot_sqr_func() : binary_function<T, T, float>(){}$/;"	f	struct:cv::gpu::device::hypot_sqr_func
hypot_sqr_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ hypot_sqr_func(const hypot_sqr_func& other) : binary_function<T, T, float>(){}$/;"	f	struct:cv::gpu::device::hypot_sqr_func
hypot_sqr_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template<typename T> struct hypot_sqr_func : binary_function<T, T, float>$/;"	s	namespace:cv::gpu::device
i	/usr/local/include/opencv2/core/types_c.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon51
i	/usr/local/include/opencv2/core/types_c.h	/^        int* i;$/;"	m	union:CvMat::__anon46
i	/usr/local/include/opencv2/core/types_c.h	/^        int* i;$/;"	m	union:CvMatND::__anon49
i	/usr/local/include/opencv2/core/types_c.h	/^    int i;$/;"	m	union:Cv32suf
i	/usr/local/include/opencv2/core/types_c.h	/^    int64 i;$/;"	m	union:Cv64suf
i	/usr/local/include/opencv2/features2d/features2d.hpp	/^        uchar i; \/\/ index of the first point$/;"	m	struct:cv::FREAK::DescriptionPair
i	/usr/local/include/opencv2/features2d/features2d.hpp	/^        uchar i; \/\/ index of the first point$/;"	m	struct:cv::FREAK::OrientationPair
i	/usr/local/include/opencv2/features2d/features2d.hpp	/^        unsigned int i;  \/\/ index of the first pattern point$/;"	m	struct:cv::BRISK::BriskLongPair
i	/usr/local/include/opencv2/features2d/features2d.hpp	/^        unsigned int i;  \/\/ index of the first pattern point$/;"	m	struct:cv::BRISK::BriskShortPair
i	/usr/local/include/opencv2/ml/ml.hpp	/^    int* i;$/;"	m	struct:CvPair16u32s
iInput	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvFuzzyFunction iInput, iOutput;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
iOutput	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvFuzzyFunction iInput, iOutput;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
icv1DMixSegmL2	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icv1DMixSegmL2( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm );*\/$/;"	f
icvComputeCoeffForStereo	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera);$/;"	f
icvComputeRestStereoParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvComputeRestStereoParams(CvStereoCamera *stereoparams);$/;"	f
icvComputeStereoParamsForCameras	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvComputeStereoParamsForCameras(CvStereoCamera* stereoCamera);$/;"	f
icvDefinePointPosition	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(float) icvDefinePointPosition(CvPoint2D32f point1,CvPoint2D32f point2,CvPoint2D32f point);$/;"	f
icvDrawMosaic	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  icvDrawMosaic( CvSubdiv2D* subdiv, IplImage* src, IplImage* dst );$/;"	f
icvEstimate1DHMMStateParams	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icvEstimate1DHMMStateParams( CvImgObsInfo** obs_info_array, int num_img, CvEHMM* hmm);$/;"	f
icvEstimate1DObsProb	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icvEstimate1DObsProb( CvImgObsInfo* obs_info, CvEHMM* hmm );$/;"	f
icvGetAngleLine	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvGetAngleLine( CvPoint2D64f startPoint, CvSize imageSize,CvPoint2D64f *point1,CvPoint2D64f *point2);$/;"	f
icvGetCrossLineDirect	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvGetCrossLineDirect(CvPoint2D32f p1,CvPoint2D32f p2,float a,float b,float c,CvPoint2D32f* cross);$/;"	f
icvGetCrossPieceVector	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvGetCrossPieceVector(CvPoint2D32f p1_start,CvPoint2D32f p1_end,CvPoint2D32f v2_start,CvPoint2D32f v2_end,CvPoint2D32f *cross);$/;"	f
icvGetDistanceFromPointToDirect	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetDistanceFromPointToDirect( CvPoint2D64f point,double* lineCoef,double*dist);$/;"	f
icvGetNormalDirect	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetNormalDirect(double* direct,CvPoint2D64f point,double* normDirect);$/;"	f
icvGetPieceLength	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetPieceLength(CvPoint2D64f point1,CvPoint2D64f point2,double* dist);$/;"	f
icvGetPieceLength3D	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetPieceLength3D(CvPoint3D64f point1,CvPoint3D64f point2,double* dist);$/;"	f
icvGetQuadsTransformStruct	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera);$/;"	f
icvGetVect	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(double) icvGetVect(CvPoint2D64f basePoint,CvPoint2D64f point1,CvPoint2D64f point2);$/;"	f
icvInit1DMixSegm	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icvInit1DMixSegm( Cv1DObsInfo** obs_info_array, int num_img, CvEHMM* hmm);$/;"	f
icvRelease1DHMM	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icvRelease1DHMM( CvEHMM** phmm );$/;"	f
icvSqDist2D32f	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE double icvSqDist2D32f( CvPoint2D32f pt1, CvPoint2D32f pt2 )$/;"	f
icvSubdiv2DCheck	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)   icvSubdiv2DCheck( CvSubdiv2D* subdiv );$/;"	f
icvUniform1DSegm	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)  icvUniform1DSegm( Cv1DObsInfo* obs_info, CvEHMM* hmm );$/;"	f
icvViterbi	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(float)  icvViterbi( Cv1DObsInfo* obs_info, CvEHMM* hmm);$/;"	f
id	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int id;$/;"	m	struct:DetectionBasedTracker::TrackedObject
id	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ unsigned int id()$/;"	f	struct:cv::gpu::device::Block
id	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int id;$/;"	m	struct:Cv3dTracker2dTrackedObject
id	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int id;$/;"	m	struct:Cv3dTrackerTrackedObject
identity	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ identity():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::identity
identity	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ identity(const identity& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::identity
identity	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct identity : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row_high	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row_low	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idxoffset	/usr/local/include/opencv2/core/types_c.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvRect) cvGetImageROI( const IplImage* image );$/;"	v
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	v
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	v
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	v
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	v
image	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	v
image	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage* image;$/;"	m	class:CvImage
image	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage* image;$/;"	m	struct:cv::BaseKeypoint
imageData	/usr/local/include/opencv2/core/types_c.h	/^    char *imageData;        \/* Pointer to aligned image data.         *\/$/;"	m	struct:_IplImage
imageDataOrigin	/usr/local/include/opencv2/core/types_c.h	/^    char *imageDataOrigin;  \/* Pointer to very origin of image data$/;"	m	struct:_IplImage
imageHeight	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) int imageHeight;$/;"	v
imageId	/usr/local/include/opencv2/core/types_c.h	/^    void  *imageId;                 \/* "           " *\/$/;"	m	struct:_IplImage
imagePyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> imagePyr_;$/;"	m	class:cv::gpu::ORB_GPU
imageSize	/usr/local/include/opencv2/core/types_c.h	/^    int  imageSize;         \/* Image data size in bytes$/;"	m	struct:_IplImage
imageWidth	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int imageWidth;$/;"	m	class:cv::SpinImageModel
imageWidth	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) int imageWidth;$/;"	v
image_	/usr/local/include/opencv2/core/wimage.hpp	/^    IplImage* image_;$/;"	m	class:cv::WImage
image_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    gpu::GpuMat image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
image_block	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
image_scale	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat image_scale;$/;"	m	struct:cv::ocl::HOGDescriptor
image_scales	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> image_scales;$/;"	m	struct:cv::gpu::HOGDescriptor
image_spect	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
image_sqsums	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> image_sqsums;$/;"	m	struct:cv::gpu::MatchTemplateBuf
image_sqsums	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<oclMat> image_sqsums;$/;"	m	struct:cv::ocl::MatchTemplateBuf
image_sums	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> image_sums;$/;"	m	struct:cv::gpu::MatchTemplateBuf
image_sums	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<oclMat> image_sums;$/;"	m	struct:cv::ocl::MatchTemplateBuf
imagef	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat imagef, templf;$/;"	m	struct:cv::gpu::MatchTemplateBuf
imagef	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat imagef, templf;$/;"	m	struct:cv::ocl::MatchTemplateBuf
images	/usr/local/include/opencv2/features2d/features2d.hpp	/^        vector<Mat> images;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
images	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> images;$/;"	m	struct:cv::gpu::MatchTemplateBuf
images	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<oclMat> images;$/;"	m	struct:cv::ocl::MatchTemplateBuf
images_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Mat> images_;$/;"	m	class:cv::detail::PairwiseSeamFinder
imax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int imax, imin;$/;"	m	struct:CvContourOrientation
img	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvDeleteMoire( IplImage*  img );$/;"	v
imgDescriptors	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<Mat> imgDescriptors;$/;"	m	class:cv::of2::ChowLiuTree
imgFilteredFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgGrayFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgHSVFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgHueFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgIdx	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int imgIdx;      \/\/test index$/;"	m	struct:cv::of2::IMatch
imgIdx	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int imgIdx;   \/\/ train image index$/;"	m	struct:cv::DMatch
imgLastGrayFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgMotionFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgSaturationFrame	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgShrinked	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize  imgSize;$/;"	m	class:CvCalibFilter
imgSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera
imgTemp	/usr/local/include/opencv2/contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
img_idx	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int img_idx;$/;"	m	struct:cv::detail::ImageFeatures
img_size	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Size img_size;$/;"	m	struct:cv::detail::ImageFeatures
imgs_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<cv::Mat> imgs_;$/;"	m	class:cv::Stitcher
imin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int imax, imin;$/;"	m	struct:CvContourOrientation
impl	/usr/local/include/opencv2/gpu/gpu.hpp	/^    CascadeClassifierImpl* impl;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
impl	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Impl *impl;$/;"	m	class:cv::gpu::Stream
impl	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    class CvObjectDetectorImpl* impl;$/;"	m	class:CvObjectDetector	typeref:class:CvObjectDetector::CvObjectDetectorImpl
impl	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Impl *impl;$/;"	m	class:cv::ocl::Info
impl	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Info::Impl* impl;$/;"	m	class:cv::ocl::Context
impl	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::ogl::Buffer
impl_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::ogl::Texture2D
impl_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::GlBuffer
impl_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::GlTexture
impl_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::FGDStatModel
impl_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::VideoReader_GPU
impl_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::VideoWriter_GPU
impl_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Ptr<FeaturesMatcher> impl_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
impl_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Ptr<PairwiseSeamFinder> impl_;$/;"	m	class:cv::detail::GraphCutSeamFinder
impl_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
increment_death_test_count	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
ind1	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
index	/usr/local/include/opencv2/core/core_c.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner
index	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::index(const _Tp& elem) const$/;"	f	class:cv::Seq
index	/usr/local/include/opencv2/flann/miniflann.hpp	/^    void* index;$/;"	m	class:cv::flann::Index
index	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::gpu::device::WarpScan
index	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
index	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int index1;$/;"	m	struct:CvLCMEdge
index2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int index2;$/;"	m	struct:CvLCMEdge
indexOf	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    int& indexOf(const DXY &dxy) { return index_(dxy.y, dxy.x); }$/;"	f	class:cv::videostab::FastMarchingMethod
indexParams	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<flann::IndexParams> indexParams;$/;"	m	class:cv::FlannBasedMatcher
index_	/usr/local/include/opencv2/flann/result_set.h	/^        unsigned int index_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
index_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    cv::Mat_<int> index_; \/\/ index of point in the narrow band$/;"	m	class:cv::videostab::FastMarchingMethod
index_creator	/usr/local/include/opencv2/flann/all_indices.h	/^struct index_creator$/;"	s	namespace:cvflann
index_creator	/usr/local/include/opencv2/flann/all_indices.h	/^struct index_creator<False,False,Distance>$/;"	s	namespace:cvflann
index_creator	/usr/local/include/opencv2/flann/all_indices.h	/^struct index_creator<False,VectorSpace,Distance>$/;"	s	namespace:cvflann
index_params_	/usr/local/include/opencv2/flann/composite_index.h	/^    const IndexParams index_params_;$/;"	m	class:cvflann::CompositeIndex
index_params_	/usr/local/include/opencv2/flann/flann_base.hpp	/^    IndexParams index_params_;$/;"	m	class:cvflann::Index
index_params_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeIndex
index_params_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeSingleIndex
index_params_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KMeansIndex
index_params_	/usr/local/include/opencv2/flann/linear_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LinearIndex
index_params_	/usr/local/include/opencv2/flann/lsh_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LshIndex
index_type	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            typedef int index_type;$/;"	t	struct:cv::gpu::DevPtr
index_type	/usr/local/include/opencv2/flann/saving.h	/^    flann_algorithm_t index_type;$/;"	m	struct:cvflann::IndexHeader
index_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef typename Ptr2D::index_type index_type;$/;"	t	struct:cv::gpu::device::BorderReader
index_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::AreaFilter
index_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::CubicFilter
index_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::IntegerAreaFilter
index_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::LinearFilter
index_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::PointFilter
indices	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^        int* indices;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
indices	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int** indices;$/;"	m	class:cvflann::HierarchicalClusteringIndex
indices	/usr/local/include/opencv2/flann/kmeans_index.h	/^        int* indices;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
indices	/usr/local/include/opencv2/flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNResultSet
indices	/usr/local/include/opencv2/flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNSimpleResultSet
indices	/usr/local/include/opencv2/flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::RadiusResultSet
indices_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int* indices_;$/;"	m	class:cvflann::KMeansIndex
indices_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<int> indices_;$/;"	m	class:cv::Stitcher
inf_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    float inf_;$/;"	m	class:cv::videostab::FastMarchingMethod
infinity	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type infinity() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
info	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        double info;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
info	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    typedef struct info {$/;"	s	class:cv::of2::ChowLiuTree
info	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    } info;$/;"	t	class:cv::of2::ChowLiuTree	typeref:struct:cv::of2::ChowLiuTree::info
info	/usr/local/include/opencv2/core/core_c.h	/^    CvModuleInfo* info;$/;"	m	struct:CvModule
info	/usr/local/include/opencv2/core/core_c.h	/^    CvTypeInfo* info;$/;"	m	struct:CvType
info	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	v
info	/usr/local/include/opencv2/core/types_c.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo
init	/usr/local/include/opencv2/flann/random.h	/^    void init(int n)$/;"	f	class:cvflann::UniqueRandom
init	/usr/local/include/opencv2/flann/result_set.h	/^    void init()$/;"	f	class:cvflann::RadiusResultSet
init	/usr/local/include/opencv2/flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNResultSet
init	/usr/local/include/opencv2/flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNSimpleResultSet
init	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
init	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr){}$/;"	f	struct:cv::gpu::device::WarpScan
initEmpty	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::initEmpty()$/;"	f	class:cv::Mat
initFeatureScale	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double initFeatureScale;$/;"	m	class:cv::DenseFeatureDetector
initImgBound	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int initImgBound;$/;"	m	class:cv::DenseFeatureDetector
initXyStep	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int initXyStep;$/;"	m	class:cv::DenseFeatureDetector
init_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
init_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
init_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
initialize	/usr/local/include/opencv2/flann/lsh_table.h	/^    void initialize(size_t key_size)$/;"	f	class:cvflann::lsh::LshTable
initializeMask	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        virtual void initializeMask(const cv::Mat& \/*src*\/) {};$/;"	f	class:cv::CascadeClassifier::MaskGenerator
inliers_mask	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    std::vector<uchar> inliers_mask;    \/\/ Geometrically consistent matches mask$/;"	m	struct:cv::detail::MatchesInfo
innerParameters	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        InnerParameters innerParameters;$/;"	m	class:DetectionBasedTracker
inner_iterations	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int inner_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
inpaint	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void inpaint(int \/*idx*\/, Mat &\/*frame*\/, Mat &\/*mask*\/) {}$/;"	f	class:cv::videostab::NullInpainter
inpainter	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter() const { return inpainter_; }$/;"	f	class:cv::videostab::StabilizerBase
inpainter_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter_;$/;"	m	class:cv::videostab::StabilizerBase
inpainters_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    std::vector<Ptr<InpainterBase> > inpainters_;$/;"	m	class:cv::videostab::InpaintingPipeline
inpaintingMask_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Mat inpaintingMask_;$/;"	m	class:cv::videostab::StabilizerBase
inputData	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    SizeVector inputData;$/;"	m	class:perf::TestBase
insert	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp& elem)$/;"	f	class:cv::Seq
insert	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp* elems, size_t count)$/;"	f	class:cv::Seq
insert	/usr/local/include/opencv2/flann/heap.h	/^    void insert(T value)$/;"	f	class:cvflann::Heap
inside	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool Point_<_Tp>::inside( const Rect_<_Tp>& r ) const$/;"	f	class:cv::Point_
instance	/usr/local/include/opencv2/flann/logger.h	/^    static Logger& instance()$/;"	f	class:cvflann::Logger
instance	/usr/local/include/opencv2/flann/object_factory.h	/^    static ThisClass& instance()$/;"	f	class:cvflann::ObjectFactory
instantiations_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int64	/usr/local/include/opencv2/core/types_c.h	/^   typedef __int64 int64;$/;"	t
int64	/usr/local/include/opencv2/core/types_c.h	/^   typedef int64_t int64;$/;"	t
intBuffer	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
intBuffer	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
interactionRadius	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int interactionRadius;$/;"	m	struct:CvStereoGCState
internal	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal2	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
interp	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int interp;$/;"	m	class:cv::LogPolar_Interp
inv	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::inv(int method) const$/;"	f	class:cv::Matx
invCovsEigenValues	/usr/local/include/opencv2/ml/ml.hpp	/^    vector<Mat> invCovsEigenValues;$/;"	m	class:cv::EM
invMask_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat invMask_;$/;"	m	class:cv::videostab::ColorInpainter
inv_V_star	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat** inv_V_star; \/\/inverse of V*$/;"	m	class:cv::LevMarqSparse
inv_eigen_values	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** inv_eigen_values;$/;"	m	class:CvNormalBayesClassifier
inv_sqrt_m00	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments
inv_var	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState
inversed	/usr/local/include/opencv2/ml/ml.hpp	/^    int inversed;$/;"	m	struct:CvDTreeSplit
iplHeight	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE int iplHeight( const IplImage* img )$/;"	f
iplWidth	/usr/local/include/opencv2/legacy/legacy.hpp	/^CV_INLINE int iplWidth( const IplImage* img )$/;"	f
iplimage_allowed	/usr/local/include/opencv2/ts/ts.hpp	/^    bool iplimage_allowed;$/;"	m	class:cvtest::ArrayTest
ippiSize	/usr/local/include/opencv2/core/internal.hpp	/^CV_INLINE IppiSize ippiSize(int width, int height)$/;"	f
isAligned	/usr/local/include/opencv2/gpu/device/common.hpp	/^    static inline bool isAligned(size_t step, size_t size)$/;"	f	namespace:cv::gpu
isAligned	/usr/local/include/opencv2/gpu/device/common.hpp	/^    template <typename T> static inline bool isAligned(const T* ptr, size_t size)$/;"	f	namespace:cv::gpu
isArith	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isArith          = isIntegral || isFloat };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon173
isCalibrated	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool    isCalibrated;$/;"	m	class:CvCalibFilter
isConst	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isConst          = type_traits_detail::UnConst<T>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon165
isContinuous	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline bool GpuMat::isContinuous() const$/;"	f	class:cv::gpu::GpuMat
isContinuous	/usr/local/include/opencv2/core/mat.hpp	/^inline bool Mat::isContinuous() const { return (flags & CONTINUOUS_FLAG) != 0; }$/;"	f	class:cv::Mat
isContinuous	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline bool oclMat::isContinuous() const$/;"	f	class:cv::ocl::oclMat
isDeviceArch11_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool isDeviceArch11_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
isDeviceArch11_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool isDeviceArch11_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
isDeviceArch11_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            bool isDeviceArch11_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
isFloat	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isFloat          = type_traits_detail::IsFloat<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon172
isInstance	/usr/local/include/opencv2/core/operations.hpp	/^    static int isInstance(const void* ptr)$/;"	f	struct:cv::RTTIImpl
isInt	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isInt() const { return type() == INT; }$/;"	f	class:cv::FileNode
isIntegral	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isIntegral       = type_traits_detail::IsIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon171
isLeaf	/usr/local/include/opencv2/contrib/contrib.hpp	/^            bool isLeaf;$/;"	m	struct:cv::Octree::Node
isMap	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isMap() const { return type() == MAP; }$/;"	f	class:cv::FileNode
isMaskSupported	/usr/local/include/opencv2/features2d/features2d.hpp	/^    virtual bool isMaskSupported() const { return true; }$/;"	f	class:cv::BFMatcher
isNamed	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isNamed() const { return !node ? false : (node->tag & NAMED) != 0; }$/;"	f	class:cv::FileNode
isNone	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isNone() const { return type() == NONE; }$/;"	f	class:cv::FileNode
isPointer	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isPointer        = type_traits_detail::PointerTraits<typename type_traits_detail::ReferenceTraits<UnqualifiedType>::type>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon168
isPrePassDone_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool isPrePassDone_;$/;"	m	class:cv::videostab::TwoPassStabilizer
isReal	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isReal() const { return type() == REAL; }$/;"	f	class:cv::FileNode
isReal	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool Scalar_<_Tp>::isReal() const$/;"	f	class:cv::Scalar_
isReference	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isReference      = type_traits_detail::ReferenceTraits<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon167
isSeparable	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    bool isSeparable() const { return (const BaseFilter*)filter2D == 0; }$/;"	f	class:cv::FilterEngine
isSeq	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isSeq() const { return type() == SEQ; }$/;"	f	class:cv::FileNode
isSignedInt	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isSignedInt      = type_traits_detail::IsSignedIntergral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon170
isString	/usr/local/include/opencv2/core/operations.hpp	/^inline bool FileNode::isString() const { return type() == STR; }$/;"	f	class:cv::FileNode
isStumpBased	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        bool isStumpBased;$/;"	m	class:cv::CascadeClassifier::Data
isSubmatrix	/usr/local/include/opencv2/core/mat.hpp	/^inline bool Mat::isSubmatrix() const { return (flags & SUBMATRIX_FLAG) != 0; }$/;"	f	class:cv::Mat
isThreadSafe	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    bool isThreadSafe() const { return is_thread_safe_; }$/;"	f	class:cv::detail::FeaturesMatcher
isUnsignedInt	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isUnsignedInt    = type_traits_detail::IsUnsignedIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon169
isVec	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isVec            = type_traits_detail::IsVec<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon174
isVolatile	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum { isVolatile       = type_traits_detail::UnVolatile<T>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon166
is_buf_16u	/usr/local/include/opencv2/ml/ml.hpp	/^    int is_buf_16u;$/;"	m	struct:CvDTreeTrainData
is_classifier	/usr/local/include/opencv2/ml/ml.hpp	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData
is_disabled_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_focals_estimated_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    bool is_focals_estimated_;$/;"	m	class:cv::detail::HomographyBasedEstimator
is_full_	/usr/local/include/opencv2/flann/result_set.h	/^    bool is_full_;$/;"	m	class:cvflann::UniqueResultSet
is_instance	/usr/local/include/opencv2/core/types_c.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming2
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::HammingLUT
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::HammingLUT2
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::MaxDistance
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HellingerDistance
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::KL_Divergence
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L1
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2_Simple
is_kdtree_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::MinkowskiDistance
is_nan	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_obj_without_holes	/usr/local/include/opencv2/gpu/gpu.hpp	/^        bool is_obj_without_holes; \/\/ If TRUE we ignore holes within foreground blobs. Defaults to TRUE.$/;"	m	struct:cv::gpu::FGDStatModel::Params
is_obj_without_holes	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    is_obj_without_holes;\/* If TRUE we ignore holes within foreground blobs. Defaults to TRUE.						*\/$/;"	m	struct:CvFGDStatModelParams
is_pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_signed	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        static const bool is_signed = (char)-1 == -1;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        static const bool is_signed = (signed char)-1 == -1;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        static const bool is_signed = false;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        static const bool is_signed = true;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        static const bool is_signed;$/;"	m	struct:cv::gpu::device::numeric_limits
is_thread_safe_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    bool is_thread_safe_;$/;"	m	class:cv::detail::FeaturesMatcher
is_trained_dyn_model	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat
is_trained_st_model	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat
is_valid	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool is_valid() { return image != 0; }$/;"	f	class:CvImage
is_valid	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool is_valid() { return matrix != 0; }$/;"	f	class:CvMatrix
is_valid_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming2
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::HammingLUT
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::HammingLUT2
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HellingerDistance
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::KL_Divergence
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L1
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2_Simple
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MaxDistance
is_vector_space_distance	/usr/local/include/opencv2/flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MinkowskiDistance
it	/usr/local/include/opencv2/core/operations.hpp	/^    FileNodeIterator* it;$/;"	m	class:cv::VecReaderProxy
iterations	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int iterations;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
iterationsLimitDefault	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    static unsigned int iterationsLimitDefault;$/;"	m	class:perf::TestBase
iterations_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int iterations_;$/;"	m	class:cvflann::KMeansIndex
iterator	/usr/local/include/opencv2/core/operations.hpp	/^    typedef _Tp* iterator;$/;"	t	class:cv::Vector
iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iters	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int iters;$/;"	m	class:CvLevMarq
iters	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int iters;$/;"	m	class:cv::LevMarqSparse
iters	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::DisparityBilateralFilter
iters	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
iters	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::StereoBeliefPropagation
iters	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
iters	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int iters;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
iters	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int iters;$/;"	m	class:cv::ocl::StereoBeliefPropagation
ittr	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int ittr;$/;"	m	class:cv::CvFeatureTracker
ittr	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int ittr;$/;"	m	class:cv::CvHybridTracker
j	/usr/local/include/opencv2/features2d/features2d.hpp	/^        uchar j; \/\/ index of the second point$/;"	m	struct:cv::FREAK::DescriptionPair
j	/usr/local/include/opencv2/features2d/features2d.hpp	/^        uchar j; \/\/ index of the second point$/;"	m	struct:cv::FREAK::OrientationPair
j	/usr/local/include/opencv2/features2d/features2d.hpp	/^        unsigned int j;  \/\/ index of other pattern point$/;"	m	struct:cv::BRISK::BriskLongPair
j	/usr/local/include/opencv2/features2d/features2d.hpp	/^        unsigned int j;  \/\/ index of other pattern point$/;"	m	struct:cv::BRISK::BriskShortPair
join_new	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
k	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double k;$/;"	m	class:cv::GFTTDetector
k	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder
k	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float k[9];$/;"	m	struct:cv::detail::ProjectorBase
kArray	/usr/local/include/opencv2/flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBitCount	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBitsetHash	/usr/local/include/opencv2/flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBytes	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon55
kBytes	/usr/local/include/opencv2/gpu/gpu.hpp	/^    enum { kBytes = 32 };$/;"	e	enum:cv::gpu::ORB_GPU::__anon204
kChannels	/usr/local/include/opencv2/core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageBufferC::__anon53
kChannels	/usr/local/include/opencv2/core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageC::__anon52
kChannels	/usr/local/include/opencv2/core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageViewC::__anon54
kConvertibleToInteger	/usr/local/include/opencv2/ts/ts_gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCopy	/usr/local/include/opencv2/ts/ts_gtest.h	/^  kCopy        \/\/ The NativeArray makes a copy of the native array and$/;"	e	enum:testing::internal::RelationToSource
kDeathTestStyleFlag	/usr/local/include/opencv2/ts/ts_gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestUseFork	/usr/local/include/opencv2/ts/ts_gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kExponentBitCount	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	/usr/local/include/opencv2/ts/ts_gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFractionBitCount	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHash	/usr/local/include/opencv2/flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kInternalRunDeathTestFlag	/usr/local/include/opencv2/ts/ts_gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kMaxBiggestInt	/usr/local/include/opencv2/ts/ts_gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxRange	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	/usr/local/include/opencv2/ts/ts_gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kNonFatalFailure	/usr/local/include/opencv2/ts/ts_gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	/usr/local/include/opencv2/ts/ts_gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kProtobuf	/usr/local/include/opencv2/ts/ts_gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	/usr/local/include/opencv2/ts/ts_gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kReference	/usr/local/include/opencv2/ts/ts_gtest.h	/^  kReference,  \/\/ The NativeArray references the native array.$/;"	e	enum:testing::internal::RelationToSource
kSignBitMask	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSuccess	/usr/local/include/opencv2/ts/ts_gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
k_rinv	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float k_rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
kalman	/usr/local/include/opencv2/video/tracking.hpp	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	v
kdtree_index_	/usr/local/include/opencv2/flann/composite_index.h	/^    KDTreeIndex<Distance>* kdtree_index_;$/;"	m	class:cvflann::CompositeIndex
keep_floats_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool keep_floats_;$/;"	m	class:cv::RTreeClassifier
kernel	/usr/local/include/opencv2/contrib/contrib.hpp	/^            kernel() { w = 0; }$/;"	f	struct:cv::LogPolar_Overlapping::kernel
kernel	/usr/local/include/opencv2/contrib/contrib.hpp	/^        struct kernel$/;"	s	class:cv::LogPolar_Overlapping
kernel	/usr/local/include/opencv2/contrib/contrib.hpp	/^    SearchWindow kernel;$/;"	m	class:CvFuzzyMeanShiftTracker
kernel	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVM
kernel	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVMSolver
kernel_type	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int         kernel_type;$/;"	m	struct:CvSVMParams
key	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
keyPointsCount_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<int> keyPointsCount_;$/;"	m	class:cv::gpu::ORB_GPU
keyPointsPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> keyPointsPyr_;$/;"	m	class:cv::gpu::ORB_GPU
key_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string key_;$/;"	m	class:testing::TestProperty
key_bitset_	/usr/local/include/opencv2/flann/lsh_table.h	/^    DynamicBitset key_bitset_;$/;"	m	class:cvflann::lsh::LshTable
key_size_	/usr/local/include/opencv2/flann/lsh_index.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::LshIndex
key_size_	/usr/local/include/opencv2/flann/lsh_table.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::lsh::LshTable
keypoints	/usr/local/include/opencv2/features2d/features2d.hpp	/^        vector<vector<KeyPoint> > keypoints;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
keypoints	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    std::vector<KeyPoint> keypoints;$/;"	m	struct:cv::detail::ImageFeatures
keypointsPrev_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<KeyPoint> keypointsPrev_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
keypointsRatio	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double keypointsRatio;$/;"	m	class:cv::gpu::FAST_GPU
keypointsRatio	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    float keypointsRatio;$/;"	m	class:cv::gpu::SURF_GPU
keypointsRatio	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            float keypointsRatio;$/;"	m	class:cv::ocl::SURF_OCL
keypoints_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    gpu::GpuMat keypoints_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
kmeans_index_	/usr/local/include/opencv2/flann/composite_index.h	/^    KMeansIndex<Distance>* kmeans_index_;$/;"	m	class:cvflann::CompositeIndex
knnSearch	/usr/local/include/opencv2/flann/flann.hpp	/^void GenericIndex<Distance>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	/usr/local/include/opencv2/flann/flann.hpp	/^void GenericIndex<Distance>::knnSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	/usr/local/include/opencv2/flann/flann.hpp	/^void Index_<T>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	/usr/local/include/opencv2/flann/flann.hpp	/^void Index_<T>::knnSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	/usr/local/include/opencv2/flann/flann_base.hpp	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::Index
knnSearch	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::KDTreeSingleIndex
knnSearch	/usr/local/include/opencv2/flann/lsh_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::LshIndex
knnSearch	/usr/local/include/opencv2/flann/nn_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
kpLoc_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat kpLoc_;$/;"	m	class:cv::gpu::FAST_GPU
ksize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size ksize;$/;"	m	class:cv::gpu::BaseFilter_GPU
ksize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseColumnFilter_GPU
ksize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseRowFilter_GPU
ksize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Size ksize;$/;"	m	class:cv::BaseFilter
ksize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Size ksize;$/;"	m	class:cv::FilterEngine
ksize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseColumnFilter
ksize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseRowFilter
ksize	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size ksize;$/;"	m	class:cv::ocl::BaseFilter_GPU
ksize	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
ksize	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
l	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
l	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
l	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int l;$/;"	m	struct:CvLSVMFilterPosition
l	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
l2	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
l2	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
lab	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
lab_shift	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            lab_shift = xyz_shift,$/;"	e	enum:cv::gpu::device::color_detail::__anon68
lab_shift2	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            lab_shift2 = (lab_shift + gamma_shift),$/;"	e	enum:cv::gpu::device::color_detail::__anon68
label	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int label; \/\/\/< Quantization$/;"	m	struct:cv::linemod::Feature
labels	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMat* labels;$/;"	m	class:cv::CvHybridTracker
labels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat labels, labels_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
labels	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat labels;$/;"	m	struct:cv::ocl::HOGDescriptor
labels_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<int> labels_;$/;"	m	class:cv::detail::DpSeamFinder
labels_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat labels, labels_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
labels_host	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Mat labels_host;$/;"	m	struct:cv::gpu::HOGDescriptor
labels_host	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Mat labels_host;$/;"	m	struct:cv::ocl::HOGDescriptor
lambda	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW float    lambda;$/;"	m	class:cv::StereoVar
lambda	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double lambda;$/;"	m	class:cv::LevMarqSparse
lambda	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float lambda;$/;"	m	class:cv::SpinImageModel
lambda	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double lambda;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
lambda	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float lambda1;$/;"	m	class:cv::CvAffinePose
lambda2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float lambda2;$/;"	m	class:cv::CvAffinePose
lambdaLg10	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int lambdaLg10;$/;"	m	class:CvLevMarq
lambdaMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double lambdaMin, lambdaMax;$/;"	m	class:cv::PatchGenerator
lambdaMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double lambdaMin, lambdaMax;$/;"	m	class:cv::PatchGenerator
laneId	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ unsigned int laneId()$/;"	f	struct:cv::gpu::device::Warp
laplacian	/usr/local/include/opencv2/legacy/compat.hpp	/^    int          laplacian;$/;"	m	struct:CvSURFPoint
largeSize	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int largeSize;$/;"	m	class:cv::SelfSimDescriptor
last	/usr/local/include/opencv2/core/core_c.h	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule
last	/usr/local/include/opencv2/core/core_c.h	/^    static CvTypeInfo* last;$/;"	m	struct:CvType
lastPositions	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            PositionsVector lastPositions;$/;"	m	struct:DetectionBasedTracker::TrackedObject
lastTime	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    int64 lastTime;$/;"	m	class:perf::TestBase
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReflect
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReflect101
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReplicate
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReflect
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReflect101
last_col	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReplicate
last_death_test_message_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static std::string last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReflect
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReflect101
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReplicate
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReflect
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReflect101
last_row	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReplicate
latestCounts	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     latestCounts[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
latestPoints	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f* latestPoints[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
layer0_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat layer0_;$/;"	m	class:cv::gpu::ImagePyramid
layer_sizes	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* layer_sizes;$/;"	m	class:CvANN_MLP
ldetector	/usr/local/include/opencv2/legacy/legacy.hpp	/^    LDetector ldetector;$/;"	m	class:cv::PlanarObjectDetector
ldh	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldw	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldy	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
leBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
leBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat minSSD, leBuf, riBuf;$/;"	m	class:cv::ocl::StereoBM_OCL
leaf_counts_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<int> leaf_counts_;$/;"	m	class:cv::RandomizedTree
leaf_max_size_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    int leaf_max_size_;$/;"	m	class:cvflann::KDTreeSingleIndex
leaf_size_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int leaf_size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
learnMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar learnMax[3];$/;"	m	struct:CvBGCodeBookElem
learnMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar learnMin[3];$/;"	m	struct:CvBGCodeBookElem
learningRate	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float learningRate;$/;"	m	class:cv::gpu::GMG_GPU
learningRate	/usr/local/include/opencv2/video/background_segm.hpp	/^    double  learningRate;$/;"	m	class:cv::BackgroundSubtractorGMG
leaves	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        vector<float> leaves;$/;"	m	class:cv::CascadeClassifier::Data
leavesPerStruct	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int leavesPerStruct;$/;"	m	class:cv::FernClassifier
left	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
left	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
left	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
left	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
left	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* left;$/;"	m	struct:CvStereoGCState
left	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode
left	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int left;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
left	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int* left;$/;"	m	struct:CvHaarClassifier
left_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double left_;$/;"	m	class:cv::GlCamera
len	/usr/local/include/opencv2/core/types_c.h	/^    int len;$/;"	m	struct:CvString
len1	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos
len2	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos
length	/usr/local/include/opencv2/flann/heap.h	/^    int length;$/;"	m	class:cvflann::Heap
less	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ less():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less
less	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ less(const less& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less
less	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct less : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
less_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ less_equal():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less_equal
less_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ less_equal(const less_equal& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less_equal
less_equal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct less_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
level	/usr/local/include/opencv2/core/core_c.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator
level	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^        int level;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
level	/usr/local/include/opencv2/flann/kmeans_index.h	/^        int level;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
level	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM
levels	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      levels;$/;"	m	class:cv::StereoVar
levels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int levels;$/;"	m	class:cv::gpu::StereoBeliefPropagation
levels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int levels;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
levels	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int levels;$/;"	m	class:cv::ocl::StereoBeliefPropagation
likelihood	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double likelihood;  \/\/raw loglikelihood$/;"	m	struct:cv::of2::IMatch
line	/usr/local/include/opencv2/core/core.hpp	/^    int line; \/\/\/< line number in the source file where the error has occured$/;"	m	class:cv::Exception
line	/usr/local/include/opencv2/ts/ts_gtest.h	/^    int                const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
lineCoeffs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera
lineThresholdBinarized	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int lineThresholdBinarized;$/;"	m	class:cv::StarDetector
lineThresholdBinarized	/usr/local/include/opencv2/legacy/compat.hpp	/^    int lineThresholdBinarized;$/;"	m	struct:CvStarDetectorParams
lineThresholdProjected	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int lineThresholdProjected;$/;"	m	class:cv::StarDetector
lineThresholdProjected	/usr/local/include/opencv2/legacy/compat.hpp	/^    int lineThresholdProjected;$/;"	m	struct:CvStarDetectorParams
line_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_number	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
line_type	/usr/local/include/opencv2/core/core_c.h	/^    int         line_type;    \/\/Qt: PointSize$/;"	m	struct:CvFont
linearSimilarityMotionStd	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    static RansacParams linearSimilarityMotionStd() { return RansacParams(4, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
linemod	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^namespace linemod {$/;"	n	namespace:cv
link_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	/usr/local/include/opencv2/ts/ts_gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
list	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat list;$/;"	m	struct:cv::gpu::HoughCirclesBuf
list	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat list;$/;"	m	struct:cv::gpu::HoughLinesBuf
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loadFromSmem(const PointerTuple& smem, const ValTuple& val, unsigned int tid)$/;"	f	struct:cv::gpu::device::reduce_detail::For
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loadFromSmem(const PointerTuple&, const ValTuple&, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_detail::For
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void loadFromSmem(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::gpu::device::reduce_detail
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& val, unsigned int tid)$/;"	f	namespace:cv::gpu::device::reduce_detail
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loadFromSmem(const PointerTuple& smem, const ReferenceTuple& data, unsigned int tid)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loadFromSmem(const PointerTuple&, const ReferenceTuple&, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadFromSmem(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
loadFromSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadFromSmem(volatile T* smem, T& data, unsigned int tid)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
loadIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
loadIndex	/usr/local/include/opencv2/flann/composite_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
loadIndex	/usr/local/include/opencv2/flann/flann_base.hpp	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::Index
loadIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
loadIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
loadIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
loadIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
loadIndex	/usr/local/include/opencv2/flann/linear_index.h	/^    void loadIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
loadIndex	/usr/local/include/opencv2/flann/lsh_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loadToSmem(const PointerTuple& smem, const ValTuple& val, unsigned int tid)$/;"	f	struct:cv::gpu::device::reduce_detail::For
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loadToSmem(const PointerTuple&, const ValTuple&, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_detail::For
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void loadToSmem(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::gpu::device::reduce_detail
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void loadToSmem(volatile T* smem, T& val, unsigned int tid)$/;"	f	namespace:cv::gpu::device::reduce_detail
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loadToSmem(const PointerTuple& smem, const ReferenceTuple& data, unsigned int tid)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loadToSmem(const PointerTuple&, const ReferenceTuple&, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadToSmem(const thrust::tuple<VP0, VP1, VP2, VP3, VP4, VP5, VP6, VP7, VP8, VP9>& smem,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
loadToSmem	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void loadToSmem(volatile T* smem, T& data, unsigned int tid)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
load_from_file	/usr/local/include/opencv2/flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann
load_from_file	/usr/local/include/opencv2/flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann::mpi
load_header	/usr/local/include/opencv2/flann/saving.h	/^inline IndexHeader load_header(FILE* stream)$/;"	f	namespace:cvflann
load_saved_index	/usr/local/include/opencv2/flann/flann_base.hpp	/^NNIndex<Distance>* load_saved_index(const Matrix<typename Distance::ElementType>& dataset, const std::string& filename, Distance distance)$/;"	f	namespace:cvflann
load_tree	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void load_tree(FILE* stream, NodePtr& node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
load_tree	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeIndex
load_tree	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeSingleIndex
load_tree	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void load_tree(FILE* stream, KMeansNodePtr& node)$/;"	f	class:cvflann::KMeansIndex
load_value	/usr/local/include/opencv2/flann/saving.h	/^void load_value(FILE* stream, T& value, size_t count = 1)$/;"	f	namespace:cvflann
load_value	/usr/local/include/opencv2/flann/saving.h	/^void load_value(FILE* stream, cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
load_value	/usr/local/include/opencv2/flann/saving.h	/^void load_value(FILE* stream, std::vector<T>& value)$/;"	f	namespace:cvflann
loaded_	/usr/local/include/opencv2/flann/flann_base.hpp	/^    bool loaded_;$/;"	m	class:cvflann::Index
loaded_from	/usr/local/include/opencv2/core/types_c.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo
loc	/usr/local/include/opencv2/flann/allocator.h	/^    void*   loc;      \/* Current location in block to next allocate memory. *\/$/;"	m	class:cvflann::PooledAllocator
loc0	/usr/local/include/opencv2/ts/ts.hpp	/^    vector<int> loc0;$/;"	m	struct:cvtest::MatComparator
localAdaptintegration_k	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
localAdaptintegration_tau	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
locateROI	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void oclMat::locateROI( Size &wholeSize, Point &ofs ) const$/;"	f	class:cv::ocl::oclMat
location	/usr/local/include/opencv2/features2d/features2d.hpp	/^      Point2d location;$/;"	m	struct:cv::SimpleBlobDetector::Center
locations	/usr/local/include/opencv2/gpu/gpu.hpp	/^   vector<Point> locations;$/;"	m	struct:cv::gpu::HOGConfidence
locations	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^   vector<cv::Point> locations;$/;"	m	struct:cv::DetectionROI
log	/usr/local/include/opencv2/flann/logger.h	/^    static int log(int level, const char* fmt, ...)$/;"	f	class:cvflann::Logger
log	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<ILog> log() const { return log_; }$/;"	f	class:cv::videostab::StabilizerBase
logLevel	/usr/local/include/opencv2/flann/logger.h	/^    int logLevel;$/;"	m	class:cvflann::Logger
logLikelihood	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double logLikelihood;$/;"	m	class:CvEM
logWeightDivDet	/usr/local/include/opencv2/ml/ml.hpp	/^    Mat logWeightDivDet;$/;"	m	class:cv::EM
log_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<ILog> log_;$/;"	m	class:cv::videostab::StabilizerBase
log_var_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState
log_verbosity	/usr/local/include/opencv2/flann/flann_base.hpp	/^inline void log_verbosity(int level)$/;"	f	namespace:cvflann
logical_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_and():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_and
logical_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_and(const logical_and& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_and
logical_and	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct logical_and : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
logical_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_not():unary_function<T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_not
logical_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_not(const logical_not& other):unary_function<T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_not
logical_not	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct logical_not : unary_function<T, bool>$/;"	s	namespace:cv::gpu::device
logical_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_or():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_or
logical_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_or(const logical_or& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_or
logical_or	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct logical_or : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
longPairs_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    BriskLongPair* longPairs_;             \/\/ d>_dMin$/;"	m	class:cv::BRISK
loop	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loop(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::gpu::device::reduce_detail::Unroll
loop	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loop(Pointer, Reference, unsigned int, Op)$/;"	f	struct:cv::gpu::device::reduce_detail::Unroll
loop	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loop(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::Unroll
loop	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loop(KP, KR, VP, VR, unsigned int, Cmp)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::Unroll
loopShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loopShfl(Reference val, Op op, unsigned int N)$/;"	f	struct:cv::gpu::device::reduce_detail::Unroll
loopShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void loopShfl(Reference, Op, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_detail::Unroll
loopShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loopShfl(KR key, VR val, Cmp cmp, unsigned int N)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::Unroll
loopShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void loopShfl(KR, VR, Cmp, unsigned int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::Unroll
loss_function_type	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int loss_function_type;$/;"	m	struct:CvGBTreesParams
low	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
low_pass_gain	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    float low_pass_gain;    \/\/ low pass gain$/;"	m	struct:cv::CvMotionModel
low_pass_gain	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    float low_pass_gain;$/;"	m	struct:cv::CvHybridTrackerParams
lru_list	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernelRow lru_list;$/;"	m	class:CvSVMSolver
lsh	/usr/local/include/opencv2/flann/lsh_table.h	/^namespace lsh$/;"	n	namespace:cvflann
lsh_hash	/usr/local/include/opencv2/legacy/legacy.hpp	/^struct lsh_hash {$/;"	s
m	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float m[3][3];$/;"	m	struct:CvMatrix3
m	/usr/local/include/opencv2/ts/ts.hpp	/^    const Mat* m;$/;"	m	struct:cvtest::MatInfo
m00	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m00	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m00	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m01	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m01	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m01	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m02	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m02	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m02	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m03	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m03	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m10	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m10	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m10	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m11	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m11	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m11	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m12	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m20	/usr/local/include/opencv2/contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m20	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m20	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m21	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m30	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m30	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
mBias	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double mBias;$/;"	m	class:cv::of2::FabMap
m_Wnd	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int         m_Wnd;$/;"	m	class:CvVSModule
m_affine_poses	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvAffinePose* m_affine_poses; \/\/ an array of poses$/;"	m	class:cv::OneWayDescriptor
m_back_project	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*  m_back_project;$/;"	m	class:CvCamShiftTracker
m_box	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBox2D    m_box;$/;"	m	class:CvCamShiftTracker
m_center	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint m_center; \/\/ the coordinates of the feature (the center of the input image ROI)$/;"	m	class:cv::OneWayDescriptor
m_color_planes	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*  m_color_planes[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_comp	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvConnectedComp m_comp;$/;"	m	class:CvCamShiftTracker
m_descriptors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    OneWayDescriptor* m_descriptors; \/\/ array of train feature descriptors$/;"	m	class:cv::OneWayDescriptorBase
m_feature_name	/usr/local/include/opencv2/legacy/legacy.hpp	/^    string m_feature_name; \/\/ the name of the feature associated with the descriptor$/;"	m	class:cv::OneWayDescriptor
m_hist	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvHistogram* m_hist;$/;"	m	class:CvCamShiftTracker
m_hist_ranges	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float*     m_hist_ranges[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_hist_ranges_data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float      m_hist_ranges_data[CV_MAX_DIM][2];$/;"	m	class:CvCamShiftTracker
m_image	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    IplImage* m_image;$/;"	m	class:CvImageDrawer
m_input_patch	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage* m_input_patch;$/;"	m	class:cv::OneWayDescriptor
m_mask	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*  m_mask;$/;"	m	class:CvCamShiftTracker
m_max_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int        m_max_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_min_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int        m_min_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_object_feature_count	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_object_feature_count; \/\/ the number of the positive features$/;"	m	class:cv::OneWayDescriptorObject
m_pElemFormat	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char            m_pElemFormat[1024];$/;"	m	class:CvBlobSeq
m_pMem	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobSeq
m_pMem	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobTrackSeq
m_pModuleName	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*       m_pModuleName;$/;"	m	class:CvVSModule
m_pModuleTypeName	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*       m_pModuleTypeName;$/;"	m	class:CvVSModule
m_pNickName	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*       m_pNickName;$/;"	m	class:CvVSModule
m_pParamList	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvDefParam*   m_pParamList;$/;"	m	class:CvVSModule
m_pSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobSeq
m_pSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobTrackSeq
m_part_id	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* m_part_id; \/\/ contains part id for each of object descriptors$/;"	m	class:cv::OneWayDescriptorObject
m_patch_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize m_patch_size; \/\/ patch size$/;"	m	class:cv::OneWayDescriptorBase
m_patch_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize m_patch_size; \/\/ size of each image$/;"	m	class:cv::OneWayDescriptor
m_pca_avg	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* m_pca_avg; \/\/ PCA average Vector for small patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_coeffs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat** m_pca_coeffs; \/\/ an array of length m_pose_count containing pca decomposition of the patch in different poses$/;"	m	class:cv::OneWayDescriptor
m_pca_descriptors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    OneWayDescriptor* m_pca_descriptors; \/\/ an array of PCA descriptors$/;"	m	class:cv::OneWayDescriptorBase
m_pca_descriptors_matrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* m_pca_descriptors_matrix;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_descriptors_tree	/usr/local/include/opencv2/legacy/legacy.hpp	/^    cv::flann::Index* m_pca_descriptors_tree;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_dim_high	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pca_dim_high; \/\/ the number of descriptor pca components to use for generating affine poses$/;"	m	class:cv::OneWayDescriptor
m_pca_dim_high	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pca_dim_high;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_dim_low	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pca_dim_low; \/\/ the number of pca components to use for comparison$/;"	m	class:cv::OneWayDescriptor
m_pca_dim_low	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pca_dim_low;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_eigenvectors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* m_pca_eigenvectors; \/\/ PCA eigenvectors for small patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_hr_avg	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* m_pca_hr_avg; \/\/ PCA average Vector for large patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_hr_eigenvectors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* m_pca_hr_eigenvectors; \/\/ PCA eigenvectors for large patches$/;"	m	class:cv::OneWayDescriptorBase
m_pose_count	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pose_count; \/\/ the number of poses for each descriptor$/;"	m	class:cv::OneWayDescriptorBase
m_pose_count	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pose_count; \/\/ the number of poses$/;"	m	class:cv::OneWayDescriptor
m_poses	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvAffinePose* m_poses; \/\/ array of poses$/;"	m	class:cv::OneWayDescriptorBase
m_pyr_levels	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_pyr_levels;$/;"	m	class:cv::OneWayDescriptorBase
m_samples	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage** m_samples; \/\/ an array of length m_pose_count containing the patch in different poses$/;"	m	class:cv::OneWayDescriptor
m_shape	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvDrawShape m_shape[16];$/;"	m	class:CvImageDrawer
m_temp	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*  m_temp;$/;"	m	class:CvCamShiftTracker
m_threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int        m_threshold;$/;"	m	class:CvCamShiftTracker
m_train_feature_count	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int m_train_feature_count; \/\/ the number of the training features$/;"	m	class:cv::OneWayDescriptorBase
m_train_features	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<KeyPoint> m_train_features; \/\/ train features$/;"	m	class:cv::OneWayDescriptorObject
m_train_patch	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage* m_train_patch;$/;"	m	class:cv::OneWayDescriptor
m_transforms	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat** m_transforms; \/\/ an array of affine transforms corresponding to poses$/;"	m	class:cv::OneWayDescriptor
m_transforms	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat** m_transforms; \/\/ array of affine transformations corresponding to poses$/;"	m	class:cv::OneWayDescriptorBase
mag	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat mag;$/;"	m	struct:cv::gpu::CannyBuf
majorVersion	/usr/local/include/opencv2/core/gpumat.hpp	/^        int majorVersion() const { return majorVersion_; }$/;"	f	class:cv::gpu::DeviceInfo
majorVersion_	/usr/local/include/opencv2/core/gpumat.hpp	/^        int majorVersion_;$/;"	m	class:cv::gpu::DeviceInfo
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(char x) {return x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(const char* x) {return *x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(const schar* v) {return make_char1(v[0]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(schar x) {return make_char1(x);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(const schar* v) {return make_char2(v[0], v[1]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(schar x, schar y) {return make_char2(x, y);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(const schar* v) {return make_char3(v[0], v[1], v[2]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(schar x, schar y, schar z) {return make_char3(x, y, z);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(const schar* v) {return make_char4(v[0], v[1], v[2], v[3]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(schar x, schar y, schar z, schar w) {return make_char4(x, y, z, w);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(const schar* v) {return make_char8(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7) {return make_char8(a0, a1, a2, a3, a4, a5, a6, a7);}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(const schar* x) {return *x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(schar x) {return x;}$/;"	f	struct:cv::gpu::device::VecTraits
make_char8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ char8 make_char8(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7)$/;"	f	namespace:cv::gpu::device
make_double8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ double8 make_double8(double a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7)$/;"	f	namespace:cv::gpu::device
make_float8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ float8 make_float8(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7)$/;"	f	namespace:cv::gpu::device
make_int8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ int8 make_int8(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)$/;"	f	namespace:cv::gpu::device
make_linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_short8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ short8 make_short8(short a0, short a1, short a2, short a3, short a4, short a5, short a6, short a7)$/;"	f	namespace:cv::gpu::device
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
make_uchar8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uchar8 make_uchar8(uchar a0, uchar a1, uchar a2, uchar a3, uchar a4, uchar a5, uchar a6, uchar a7)$/;"	f	namespace:cv::gpu::device
make_uint8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uint8 make_uint8(uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7)$/;"	f	namespace:cv::gpu::device
make_ushort8	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ ushort8 make_ushort8(ushort a0, ushort a1, ushort a2, ushort a3, ushort a4, ushort a5, ushort a6, ushort a7)$/;"	f	namespace:cv::gpu::device
map	/usr/local/include/opencv2/core/types_c.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon51
map	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat map;$/;"	m	struct:cv::gpu::CannyBuf
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CylindricalProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::FisheyeProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::MercatorProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::PlanePortraitProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PlaneProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::SphericalProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::StereographicProjector
mapBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::TransverseMercatorProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CylindricalProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::FisheyeProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::MercatorProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::PlanePortraitProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PlaneProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::SphericalProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::StereographicProjector
mapForward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::TransverseMercatorProjector
mask	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> mask;$/;"	m	class:CvLevMarq
mask	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat mask, maskroi;$/;"	m	class:cv::CvMeanShiftTracker
mask	/usr/local/include/opencv2/core/core_c.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner
mask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::gpu::device::SingleMask
mask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::gpu::device::SingleMaskChannels
mask1	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
mask1	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
mask1_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
mask1_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
mask2_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
maskCollection	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        const PtrStepb* maskCollection;$/;"	m	struct:cv::gpu::device::MaskCollection
maskGenerator	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    Ptr<MaskGenerator> maskGenerator;$/;"	m	class:cv::CascadeClassifier
maskPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> maskPyr_;$/;"	m	class:cv::gpu::ORB_GPU
maskROI	/usr/local/include/opencv2/core/types_c.h	/^    struct _IplImage *maskROI;      \/* Must be NULL. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage
maskSum	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
maskSum	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
mask_	/usr/local/include/opencv2/flann/lsh_table.h	/^    std::vector<size_t> mask_;$/;"	m	class:cvflann::lsh::LshTable
maskroi	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat mask, maskroi;$/;"	m	class:cv::CvMeanShiftTracker
masks_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Mat> masks_;$/;"	m	class:cv::detail::PairwiseSeamFinder
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvScalar) cvTrace( const CvArr* mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	v
mat	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	v
mat	/usr/local/include/opencv2/core/types_c.h	/^    CvMatND mat;                    \/* Embedded matrix header for array histograms. *\/$/;"	m	struct:CvHistogram
mat	/usr/local/include/opencv2/core/types_c.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator
mat	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:Cv3dTrackerCameraInfo
match	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double match;      \/\/normalised probability$/;"	m	struct:cv::of2::IMatch
match_sum	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues
matcher	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Ptr<DescriptorMatcher> matcher;$/;"	m	class:cv::CvFeatureTracker
matcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<DescriptorMatcher> matcher;$/;"	m	class:cv::VectorDescriptorMatcher
matches	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    vector<DMatch> matches;$/;"	m	class:cv::CvFeatureTracker
matches	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    std::vector<DMatch> matches;$/;"	m	struct:cv::detail::MatchesInfo
matches_filter_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
matchingMask	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const cv::Mat& matchingMask() const { return matching_mask_; }$/;"	f	class:cv::Stitcher
matching_mask_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    cv::Mat matching_mask_;$/;"	m	class:cv::Stitcher
matrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* matrix;$/;"	m	class:CvMatrix
matrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera
max	/usr/local/include/opencv2/core/core.hpp	/^#undef max$/;"	d
max	/usr/local/include/opencv2/core/internal.hpp	/^#    undef max$/;"	d
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void max(const Mat_<_Tp>& a, const Mat_<_Tp>& b, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void max(const Mat_<_Tp>& a, double s, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void max(double s, const Mat_<_Tp>& a, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ T max() { return numeric_limits<T>::max(); }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
max	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ float max() { return 1.f; }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return 1.7976931348623158e+308\/*DBL_MAX*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return 3.402823466e+38f\/*FLT_MAX*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return CHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return INT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return LONG_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return SCHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return SHRT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return UCHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return UINT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return ULONG_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return USHRT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return true;  };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return type(); };$/;"	f	struct:cv::gpu::device::numeric_limits
max	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation
maxArea	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxArea	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int maxArea;$/;"	m	class:cv::MSER
maxArea	/usr/local/include/opencv2/legacy/compat.hpp	/^    int maxArea;$/;"	m	struct:CvMSERParams
maxCircularity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxConvexity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxCorners	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int maxCorners;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
maxDisp	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      maxDisp;$/;"	m	class:cv::StereoVar
maxEvolution	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int maxEvolution;$/;"	m	class:cv::MSER
maxEvolution	/usr/local/include/opencv2/legacy/compat.hpp	/^    int maxEvolution;$/;"	m	struct:CvMSERParams
maxFeatures	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int maxFeatures;$/;"	m	class:cv::gpu::GMG_GPU
maxFeatures	/usr/local/include/opencv2/video/background_segm.hpp	/^    int     maxFeatures;$/;"	m	class:cv::BackgroundSubtractorGMG
maxHeight	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
maxInertiaRatio	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxIters	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int maxIters;$/;"	m	struct:CvStereoGCState
maxIters	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int maxIters;$/;"	m	class:cv::EM
maxLevel	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int maxLevel;$/;"	m	class:cv::PyramidAdaptedFeatureDetector
maxLevel	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int maxLevel;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
maxLevel	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int maxLevel;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
maxLevel	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    int maxLevel() const { return maxLevel_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxLevel_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    int maxLevel_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxLevels	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int maxLevels;$/;"	m	struct:cv::Octree::Node
maxObjectSize	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int maxObjectSize;$/;"	m	struct:DetectionBasedTracker::Parameters
maxPoints	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     maxPoints;$/;"	m	class:CvCalibFilter
maxPosBuffer	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat maxPosBuffer;$/;"	m	class:cv::gpu::SURF_GPU
maxPosBuffer	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat maxPosBuffer;$/;"	m	class:cv::ocl::SURF_OCL
maxRmse	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float maxRmse() const { return maxRmse_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
maxRmse_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float maxRmse_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
maxScale	/usr/local/include/opencv2/legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
maxSize	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int maxSize;$/;"	m	class:cv::StarDetector
maxSize	/usr/local/include/opencv2/legacy/compat.hpp	/^    int maxSize;$/;"	m	struct:CvStarDetectorParams
maxThreshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float maxThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxTotalKeypoints	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int maxTotalKeypoints;$/;"	m	class:cv::GridAdaptedFeatureDetector
maxTrackLifetime	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int maxTrackLifetime;$/;"	m	struct:DetectionBasedTracker::Parameters
maxVal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T maxVal;$/;"	m	struct:cv::gpu::device::thresh_binary_func
maxVal	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T maxVal;$/;"	m	struct:cv::gpu::device::thresh_binary_inv_func
maxVal_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float maxVal_, minVal_;$/;"	m	class:cv::gpu::GMG_GPU
maxVal_	/usr/local/include/opencv2/video/background_segm.hpp	/^    double maxVal_;$/;"	m	class:cv::BackgroundSubtractorGMG
maxVariation	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double maxVariation;$/;"	m	class:cv::MSER
maxVariation	/usr/local/include/opencv2/legacy/compat.hpp	/^    float maxVariation;$/;"	m	struct:CvMSERParams
maxWidth	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
maxWidth	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int maxWidth;$/;"	m	class:cv::FilterEngine
max_buf_sz	/usr/local/include/opencv2/ml/ml.hpp	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP
max_c_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
max_categories	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int   max_categories;$/;"	m	struct:CvDTreeParams
max_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP
max_data_term	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float max_data_term;$/;"	m	class:cv::gpu::StereoBeliefPropagation
max_data_term	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float max_data_term;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
max_data_term	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float max_data_term;$/;"	m	class:cv::ocl::StereoBeliefPropagation
max_depth	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int   max_depth;$/;"	m	struct:CvDTreeParams
max_disc_term	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float max_disc_term;$/;"	m	class:cv::gpu::StereoBeliefPropagation
max_disc_term	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float max_disc_term;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
max_disc_term	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float max_disc_term;$/;"	m	class:cv::ocl::StereoBeliefPropagation
max_disc_threshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float max_disc_threshold;$/;"	m	class:cv::gpu::DisparityBilateralFilter
max_features_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int min_features_, max_features_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
max_iter	/usr/local/include/opencv2/core/types_c.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria
max_iter	/usr/local/include/opencv2/ml/ml.hpp	/^    int max_iter;$/;"	m	class:CvSVMSolver
max_k	/usr/local/include/opencv2/ml/ml.hpp	/^    int max_k, var_count;$/;"	m	class:CvKNearest
max_level	/usr/local/include/opencv2/core/core_c.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator
max_log_array_size	/usr/local/include/opencv2/ts/ts.hpp	/^    int max_log_array_size;$/;"	m	class:cvtest::ArrayTest
max_size	/usr/local/include/opencv2/core/core.hpp	/^    size_type max_size() const$/;"	f	class:cv::Allocator
max_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
max_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
max_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
max_val	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double max_val;$/;"	m	struct:CvParamGrid
max_val	/usr/local/include/opencv2/ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
max_val1	/usr/local/include/opencv2/ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
maxdiff	/usr/local/include/opencv2/ts/ts.hpp	/^    double maxdiff;$/;"	m	struct:cvtest::MatComparator
maximum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ maximum() {}$/;"	f	struct:cv::gpu::device::maximum
maximum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ maximum(const maximum&) {}$/;"	f	struct:cv::gpu::device::maximum
maximum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct maximum : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
maxlr	/usr/local/include/opencv2/ml/ml.hpp	/^    double maxlr;$/;"	m	struct:CvDTreeNode
mean	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues
mean	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double mean;$/;"	m	struct:perf::performance_metrics
meanSplit	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void meanSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval)$/;"	f	class:cvflann::KDTreeIndex
mean_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    DistanceType* mean_;$/;"	m	class:cvflann::KDTreeIndex
mean_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat mean_;$/;"	m	class:cv::gpu::MOG2_GPU
mean_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat mean_;$/;"	m	class:cv::gpu::MOG_GPU
mean_radius	/usr/local/include/opencv2/flann/kmeans_index.h	/^        DistanceType mean_radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
means	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const CvMat* means;$/;"	m	struct:CvEMParams
means	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP Mat means;$/;"	m	class:cv::EM
meansHdr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat meansHdr;$/;"	m	class:CvEM
meanshift_profile	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS
measurementMatrix	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat measurementMatrix;  \/\/!< measurement matrix (H)$/;"	m	class:cv::KalmanFilter
measurementNoiseCov	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat measurementNoiseCov;\/\/!< measurement noise covariance matrix (R)$/;"	m	class:cv::KalmanFilter
measurement_matrix	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman
measurement_noise_cov	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman
median	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double median;$/;"	m	struct:perf::performance_metrics
memoryCost	/usr/local/include/opencv2/flann/autotuned_index.h	/^        float memoryCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
memoryCounter	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int memoryCounter;$/;"	m	class:cvflann::HierarchicalClusteringIndex
memoryCounter_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int memoryCounter_;$/;"	m	class:cvflann::KMeansIndex
memory_weight_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float memory_weight_;$/;"	m	class:cvflann::AutotunedIndex
merge	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void merge(const PointerTuple& smem, const ValTuple& val, unsigned int tid, unsigned int delta, const OpTuple& op)$/;"	f	struct:cv::gpu::device::reduce_detail::For
merge	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void merge(const PointerTuple&, const ValTuple&, unsigned int, unsigned int, const OpTuple&)$/;"	f	struct:cv::gpu::device::reduce_detail::For
merge	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void merge(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::gpu::device::reduce_detail
merge	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void merge(volatile T* smem, T& val, unsigned int tid, unsigned int delta, const Op& op)$/;"	f	namespace:cv::gpu::device::reduce_detail
merge	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void merge(const KeyPointerTuple& skeys, const KeyReferenceTuple& key,$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
merge	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void merge(const KeyPointerTuple&, const KeyReferenceTuple&,$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
merge	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(const thrust::tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
merge	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(volatile K* skeys, K& key, volatile V* svals, V& val, const Cmp& cmp, unsigned int tid, unsigned int delta)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
merge	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void merge(volatile K* skeys, K& key,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
merge	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        typedef WarpScan<INCLUSIVE, T, F>  merge;$/;"	t	struct:cv::gpu::device::WarpScan
merge	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        typedef WarpScanNoComp<INCLUSIVE, T, F> merge;$/;"	t	struct:cv::gpu::device::WarpScanNoComp
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void mergeShfl(const ValTuple& val, unsigned int delta, unsigned int width, const OpTuple& op)$/;"	f	struct:cv::gpu::device::reduce_detail::For
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void mergeShfl(const ValTuple&, unsigned int, unsigned int, const OpTuple&)$/;"	f	struct:cv::gpu::device::reduce_detail::For
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void mergeShfl(T& val, unsigned int delta, unsigned int width, const Op& op)$/;"	f	namespace:cv::gpu::device::reduce_detail
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^        __device__ __forceinline__ void mergeShfl(const thrust::tuple<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9>& val,$/;"	f	namespace:cv::gpu::device::reduce_detail
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void mergeShfl(const KeyReferenceTuple& key, const ValReferenceTuple& val, const CmpTuple& cmp, unsigned int delta, int width)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void mergeShfl(const KeyReferenceTuple&, const ValReferenceTuple&, const CmpTuple&, unsigned int, int)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::For
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(K& key, V& val, const Cmp& cmp, unsigned int delta, int width)$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(K& key,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
mergeShfl	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^        __device__ __forceinline__ void mergeShfl(const thrust::tuple<KR0, KR1, KR2, KR3, KR4, KR5, KR6, KR7, KR8, KR9>& key,$/;"	f	namespace:cv::gpu::device::reduce_key_val_detail
mergedDescriptors	/usr/local/include/opencv2/features2d/features2d.hpp	/^        Mat mergedDescriptors;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
mergedDescriptors	/usr/local/include/opencv2/features2d/features2d.hpp	/^    DescriptorCollection mergedDescriptors;$/;"	m	class:cv::FlannBasedMatcher
mergedImgDescriptors	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    Mat mergedImgDescriptors;$/;"	m	class:cv::of2::ChowLiuTree
mesh	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mesh3D mesh;$/;"	m	class:cv::SpinImageModel
message	/usr/local/include/opencv2/ts/ts_gtest.h	/^    std::string const message;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::std
message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
message_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
messages_buffers	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat messages_buffers;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
method_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    int method_;$/;"	m	class:cv::videostab::ColorInpainter
metrics	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    performance_metrics metrics;$/;"	m	class:perf::TestBase
middleSplit	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void middleSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
middleSplit_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void middleSplit_(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
min	/usr/local/include/opencv2/core/core.hpp	/^#undef min$/;"	d
min	/usr/local/include/opencv2/core/internal.hpp	/^#    undef min$/;"	d
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void min(const Mat_<_Tp>& a, const Mat_<_Tp>& b, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void min(const Mat_<_Tp>& a, double s, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> static inline void min(double s, const Mat_<_Tp>& a, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min()  { return type(); };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 0; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 1.175494351e-38f\/*FLT_MIN*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 2.2250738585072014e-308\/*DBL_MIN*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return CHAR_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return INT_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return LONG_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return SCHAR_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return SHRT_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return false; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation
min	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double min;$/;"	m	struct:perf::performance_metrics
minArea	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
minArea	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int minArea;$/;"	m	class:cv::MSER
minArea	/usr/local/include/opencv2/gpu/gpu.hpp	/^        float minArea; \/\/ Discard foreground blobs whose bounding box is smaller than this threshold.$/;"	m	struct:cv::gpu::FGDStatModel::Params
minArea	/usr/local/include/opencv2/legacy/compat.hpp	/^    int minArea;$/;"	m	struct:CvMSERParams
minArea	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
minArea	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float  minArea;		\/* Discard foreground blobs whose bounding box is smaller than this threshold.					*\/$/;"	m	struct:CvFGDStatModelParams
minCircularity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minConvexity	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDetectionPeriod	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int minDetectionPeriod; \/\/the minimal time between run of the big object detector (on the whole frame) in ms (1000 mean 1 sec), default=0$/;"	m	struct:DetectionBasedTracker::Parameters
minDisp	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      minDisp;$/;"	m	class:cv::StereoVar
minDisparity	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int minDisparity;$/;"	m	class:cv::StereoSGBM
minDisparity	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int minDisparity;  \/\/ minimum disparity (can be negative)$/;"	m	struct:CvStereoBMState
minDisparity	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int minDisparity;$/;"	m	struct:CvStereoGCState
minDistBetweenBlobs	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minDistBetweenBlobs;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDist_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        int minDist_;$/;"	m	class:cv::detail::DpSeamFinder::ClosePoints
minDistance	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double minDistance;$/;"	m	class:cv::GFTTDetector
minDistance	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double minDistance;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
minDiversity	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double minDiversity;$/;"	m	class:cv::MSER
minDiversity	/usr/local/include/opencv2/legacy/compat.hpp	/^    float minDiversity;$/;"	m	struct:CvMSERParams
minEigThreshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float minEigThreshold; \/\/unused$/;"	m	class:cv::gpu::PyrLKOpticalFlow
minEigThreshold	/usr/local/include/opencv2/ocl/ocl.hpp	/^            float minEigThreshold;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
minInertiaRatio	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
minInlierRatio	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float minInlierRatio() const { return minInlierRatio_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
minInlierRatio_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float minInlierRatio_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
minMargin	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double minMargin;$/;"	m	class:cv::MSER
minMargin	/usr/local/include/opencv2/legacy/compat.hpp	/^    double minMargin;$/;"	m	struct:CvMSERParams
minMaxbuf_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat minMaxbuf_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
minNeighbors	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int minNeighbors;$/;"	m	class:cv::SpinImageModel
minNeighbors	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int minNeighbors;$/;"	m	struct:DetectionBasedTracker::Parameters
minObjectSize	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int minObjectSize;$/;"	m	struct:DetectionBasedTracker::Parameters
minPoints	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int minPoints;$/;"	m	class:cv::Octree
minRepeatability	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW size_t minRepeatability;$/;"	m	struct:cv::SimpleBlobDetector::Params
minSSD	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
minSSD	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat minSSD, leBuf, riBuf;$/;"	m	class:cv::ocl::StereoBM_OCL
minScale	/usr/local/include/opencv2/legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
minThreshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float minThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
minVal_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float maxVal_, minVal_;$/;"	m	class:cv::gpu::GMG_GPU
minVal_	/usr/local/include/opencv2/video/background_segm.hpp	/^    double minVal_;$/;"	m	class:cv::BackgroundSubtractorGMG
min_disp_th	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int min_disp_th;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
min_features_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int min_features_, max_features_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
min_log_array_size	/usr/local/include/opencv2/ts/ts.hpp	/^    int min_log_array_size;$/;"	m	class:cvtest::ArrayTest
min_sample_count	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int   min_sample_count;$/;"	m	struct:CvDTreeParams
min_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
min_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
min_thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
min_val	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double min_val;$/;"	m	struct:CvParamGrid
min_val	/usr/local/include/opencv2/ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
min_val1	/usr/local/include/opencv2/ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
mindist	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType mindist;     \/* Minimum distance to query for all nodes below. *\/$/;"	m	struct:cvflann::BranchStruct
minimum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ minimum() {}$/;"	f	struct:cv::gpu::device::minimum
minimum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ minimum(const minimum&) {}$/;"	f	struct:cv::gpu::device::minimum
minimum	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct minimum : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
minorVersion	/usr/local/include/opencv2/core/gpumat.hpp	/^        int minorVersion() const { return minorVersion_; }$/;"	f	class:cv::gpu::DeviceInfo
minorVersion_	/usr/local/include/opencv2/core/gpumat.hpp	/^        int minorVersion_;$/;"	m	class:cv::gpu::DeviceInfo
minus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ minus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::minus
minus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ minus(const minus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::minus
minus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct minus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
minus_delta	/usr/local/include/opencv2/core/types_c.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator
minus_step	/usr/local/include/opencv2/core/types_c.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator
miss_ch	/usr/local/include/opencv2/ml/ml.hpp	/^    char miss_ch;$/;"	m	class:CvMLData
missing	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* missing;$/;"	m	class:CvGBTrees
missing	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* missing;$/;"	m	class:CvMLData
missing_mask	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvMat* missing_mask;$/;"	m	struct:CvERTreeTrainData
mix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo
mix	/usr/local/include/opencv2/ml/ml.hpp	/^    bool mix;$/;"	m	class:CvMLData
mix	/usr/local/include/opencv2/ml/ml.hpp	/^    bool mix;$/;"	m	struct:CvTrainTestSplit
modMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar modMax[3];$/;"	m	struct:CvBGCodeBookModel
modMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar modMin[3];$/;"	m	struct:CvBGCodeBookModel
modalities	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  std::vector< Ptr<Modality> > modalities;$/;"	m	class:cv::linemod::Detector
model	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGCodeBookModel( CvBGCodeBookModel** model );$/;"	v
modelPoints	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<KeyPoint> modelPoints;$/;"	m	class:cv::PlanarObjectDetector
modelROI	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Rect modelROI;$/;"	m	class:cv::PlanarObjectDetector
module_info	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvRegisterModule( const CvModuleInfo* module_info );$/;"	v
modulus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ modulus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::modulus
modulus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ modulus(const modulus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::modulus
modulus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct modulus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
mog	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void*                      mog;$/;"	m	struct:CvGaussBGModel
morphologyDefaultBorderValue	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^static inline Scalar morphologyDefaultBorderValue() { return Scalar::all(DBL_MAX); }$/;"	f	namespace:cv
motionEstimator	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IGlobalMotionEstimator> motionEstimator() const { return motionEstimator_; }$/;"	f	class:cv::videostab::StabilizerBase
motionEstimator_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IGlobalMotionEstimator> motionEstimator_;$/;"	m	class:cv::videostab::StabilizerBase
motionFilter	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter() const { return motionFilter_; }$/;"	f	class:cv::videostab::OnePassStabilizer
motionFilter_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter_;$/;"	m	class:cv::videostab::OnePassStabilizer
motionModel	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    MotionModel motionModel() const { return motionModel_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
motionModel_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    MotionModel motionModel_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
motionStabilizer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer() const { return motionStabilizer_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
motionStabilizer_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer_;$/;"	m	class:cv::videostab::TwoPassStabilizer
motion_model	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int motion_model;$/;"	m	struct:cv::CvHybridTrackerParams
motions	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::DeblurerBase
motions	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::InpainterBase
motions_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::DeblurerBase
motions_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::InpainterBase
motions_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<Mat> motions_; \/\/ motions_[i] is the motion from i-th to i+1-th frame$/;"	m	class:cv::videostab::StabilizerBase
move	/usr/local/include/opencv2/flann/any.h	/^    virtual void move(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
move	/usr/local/include/opencv2/flann/any.h	/^    virtual void move(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
mpi	/usr/local/include/opencv2/flann/hdf5.h	/^namespace mpi$/;"	n	namespace:cvflann
ms_params	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMeanShiftTrackerParams ms_params;$/;"	m	struct:cv::CvHybridTrackerParams
ms_tracker_weight	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    float ms_tracker_weight;$/;"	m	struct:cv::CvHybridTrackerParams
msg	/usr/local/include/opencv2/core/core.hpp	/^    string msg; \/\/\/< the formatted error message$/;"	m	class:cv::Exception
msg	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  char msg[4];$/;"	m	struct:CvDataMatrixCode
msg_type	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int msg_type;$/;"	m	class:cv::gpu::StereoBeliefPropagation
msg_type	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int msg_type;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
msg_type	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int msg_type;$/;"	m	class:cv::ocl::StereoBeliefPropagation
mstracker	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMeanShiftTracker* mstracker;$/;"	m	class:cv::CvHybridTracker
mtx	/usr/local/include/opencv2/core/operations.hpp	/^    Mat mtx;$/;"	m	struct:cv::Formatted
mu	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState
mu02	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu02	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu03	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu03	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu11	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu11	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu12	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu20	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu20	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu21	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu30	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu30	/usr/local/include/opencv2/imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mul	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> Matx<_Tp, m, n>::mul(const Matx<_Tp, m, n>& a) const$/;"	f	class:cv::Matx
mul	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::mul(const Vec<_Tp, cn>& v) const$/;"	f	class:cv::Vec
mul	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::mul(const Scalar_<_Tp>& t, double scale ) const$/;"	f	class:cv::Scalar_
multiProcessorCount	/usr/local/include/opencv2/core/gpumat.hpp	/^        int multiProcessorCount() const { return multi_processor_count_; }$/;"	f	class:cv::gpu::DeviceInfo
multi_probe_level_	/usr/local/include/opencv2/flann/lsh_index.h	/^    unsigned int multi_probe_level_;$/;"	m	class:cvflann::LshIndex
multi_processor_count_	/usr/local/include/opencv2/core/gpumat.hpp	/^        int multi_processor_count_;$/;"	m	class:cv::gpu::DeviceInfo
multiplies	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ multiplies():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::multiplies
multiplies	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ multiplies(const multiplies& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::multiplies
multiplies	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct multiplies : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
mustEstTrimRatio_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool mustEstTrimRatio_;$/;"	m	class:cv::videostab::TwoPassStabilizer
mustEstimateTrimaRatio	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    bool mustEstimateTrimaRatio() const { return mustEstTrimRatio_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
mutex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mutex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  pthread_mutex_t mutex_;$/;"	m	class:std::tr1::Notification
mySum	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::gpu::device::L1Dist
mySum	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::gpu::device::L2Dist
mySum	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::gpu::device::HammingDist
mySum	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::gpu::device::L1Dist
nChannels	/usr/local/include/opencv2/core/types_c.h	/^    int  nChannels;         \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage
nCols	/usr/local/include/opencv2/core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel
nCols	/usr/local/include/opencv2/core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP
nFeatures_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nFeatures_;$/;"	m	class:cv::gpu::ORB_GPU
nFrameCount	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nIt	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      nIt;$/;"	m	class:cv::StereoVar
nIters	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    unsigned int nIters;$/;"	m	class:perf::TestBase
nLayers_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nLayers_;$/;"	m	class:cv::gpu::ImagePyramid
nLevels_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nLevels_;$/;"	m	class:cv::gpu::ORB_GPU
nMorphingMethod	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nOctaveLayers	/usr/local/include/opencv2/legacy/compat.hpp	/^    int    nOctaveLayers;$/;"	m	struct:CvSURFParams
nOctaveLayers	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaveLayers;$/;"	m	class:cv::SIFT
nOctaveLayers	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaveLayers;$/;"	m	class:cv::SURF
nOctaveLayers	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int nOctaveLayers;$/;"	m	class:cv::gpu::SURF_GPU
nOctaveLayers	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            int nOctaveLayers;$/;"	m	class:cv::ocl::SURF_OCL
nOctaves	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int nOctaves; \/\/number of octaves$/;"	m	class:cv::FREAK
nOctaves	/usr/local/include/opencv2/legacy/compat.hpp	/^    int    nOctaves;$/;"	m	struct:CvSURFParams
nOctaves	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int nOctaves;$/;"	m	class:cv::LDetector
nOctaves	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaves;$/;"	m	class:cv::SURF
nOctaves	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int nOctaves;$/;"	m	class:cv::gpu::SURF_GPU
nOctaves	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            int nOctaves;$/;"	m	class:cv::ocl::SURF_OCL
nOctaves0	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int nOctaves0;$/;"	m	class:cv::FREAK
nRows	/usr/local/include/opencv2/core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel
nRows	/usr/local/include/opencv2/core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP
nSamplingDivider	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nShadowDetection	/usr/local/include/opencv2/gpu/gpu.hpp	/^    unsigned char nShadowDetection; \/\/do shadow detection - insert this value as the detection result - 127 default value$/;"	m	class:cv::gpu::MOG2_GPU
nShadowDetection	/usr/local/include/opencv2/video/background_segm.hpp	/^    unsigned char nShadowDetection;\/\/do shadow detection - insert this value as the detection result - 127 default value$/;"	m	class:cv::BackgroundSubtractorMOG2
nShiftR	/usr/local/include/opencv2/core/types_c.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel
nSize	/usr/local/include/opencv2/core/types_c.h	/^    int  nSize;             \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage
nSkinHueLowerBound	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nSkinHueUpperBound	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nStartCounter	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nViews	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int nViews;$/;"	m	class:cv::LDetector
n_buckets_	/usr/local/include/opencv2/flann/lsh_table.h	/^    size_t n_buckets_;$/;"	m	struct:cvflann::lsh::LshStats
n_features_per_level_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<size_t> n_features_per_level_;$/;"	m	class:cv::gpu::ORB_GPU
n_gauss	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams
n_rot_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const unsigned int n_rot_;    \/\/ discretization of the rotation look-up$/;"	m	class:cv::BRISK
nactive_vars	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int nactive_vars;$/;"	m	struct:CvRTParams
name	/usr/local/include/opencv2/core/gpumat.hpp	/^        std::string name() const { return name_; }$/;"	f	class:cv::gpu::DeviceInfo
name	/usr/local/include/opencv2/core/types_c.h	/^    const char* name;$/;"	m	struct:CvModuleInfo
name	/usr/local/include/opencv2/ts/ts.hpp	/^    string name;$/;"	m	class:cvtest::BaseTest
name	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
nameFont	/usr/local/include/opencv2/core/core_c.h	/^  const char* nameFont;   \/\/Qt:nameFont$/;"	m	struct:CvFont
name_	/usr/local/include/opencv2/core/gpumat.hpp	/^        std::string name_;$/;"	m	class:cv::gpu::DeviceInfo
name_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string name_;$/;"	m	class:testing::TestCase
narrowBand_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    std::vector<DXY> narrowBand_; \/\/ narrow band heap$/;"	m	class:cv::videostab::FastMarchingMethod
nbSamples	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int nbSamples;         \/\/ number of samples per pixel$/;"	m	class:cv::gpu::VIBE_GPU
nbins	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nbins;$/;"	m	struct:cv::gpu::HOGDescriptor
nbins	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP int nbins;$/;"	m	struct:cv::HOGDescriptor
nbins	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int nbins;$/;"	m	struct:cv::ocl::HOGDescriptor
ncategories	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        int ncategories;$/;"	m	class:cv::CascadeClassifier::Data
nclasses	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int nclasses;$/;"	m	class:cv::FernDescriptorMatcher::Params
nclasses	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int nclasses;$/;"	m	class:cv::FernClassifier
nclasses	/usr/local/include/opencv2/ml/ml.hpp	/^    int nclasses;$/;"	m	class:CvRTrees
nclusters	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_PROP_RW int nclusters;$/;"	m	struct:CvEMParams
nclusters	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int nclusters;$/;"	m	class:cv::EM
ncomps_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    int ncomps_;$/;"	m	class:cv::detail::DpSeamFinder
ndisp	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::DisparityBilateralFilter
ndisp	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoBM_GPU
ndisp	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoBeliefPropagation
ndisp	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
ndisp	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ndisp;$/;"	m	class:cv::ocl::StereoBM_OCL
ndisp	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int ndisp;$/;"	m	class:cv::ocl::StereoBeliefPropagation
ne	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* ne;$/;"	m	struct:CvCliqueFinder
needSwapCameras	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera
negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ negate():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::negate
negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ negate(const negate& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::negate
negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct negate : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
neighbors	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int neighbors;$/;"	m	struct:CvAvgComp
next	/usr/local/include/opencv2/core/operations.hpp	/^inline unsigned RNG::next()$/;"	f	class:cv::RNG
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvAttrList* next;   \/* Pointer to next chunk of the attributes list.                    *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvSeqBlock*  next; \/* Next sequence block.                       *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode
next	/usr/local/include/opencv2/core/types_c.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
next	/usr/local/include/opencv2/flann/random.h	/^    int next()$/;"	f	class:cvflann::UniqueRandom
next	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ void next() const$/;"	f	struct:cv::gpu::device::WithOutMask
next	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ void next()$/;"	f	struct:cv::gpu::device::MaskCollection
next	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        int next[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
next	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam
next	/usr/local/include/opencv2/legacy/legacy.hpp	/^    struct CvBGCodeBookElem* next;$/;"	m	struct:CvBGCodeBookElem	typeref:struct:CvBGCodeBookElem::CvBGCodeBookElem
next	/usr/local/include/opencv2/legacy/legacy.hpp	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D
next	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit
next	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow
next	/usr/local/include/opencv2/ml/ml.hpp	/^    CvVectors* next;$/;"	m	struct:CvVectors
next	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int next;$/;"	m	struct:CvHaarStageClassifier
nextFrame	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    virtual Mat nextFrame() { return Mat(); }$/;"	f	class:cv::videostab::NullFrameSource
nextFrame	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    virtual Mat nextFrame() { return nextStabilizedFrame(); }$/;"	f	class:cv::videostab::OnePassStabilizer
nextPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    vector<GpuMat> nextPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
nextPyr_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            vector<oclMat> nextPyr_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
next_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
nfeatures	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int nfeatures;$/;"	m	class:cv::ORB
nfeatures	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int nfeatures;$/;"	m	class:cv::GFTTDetector
nfeatures	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW int nfeatures;$/;"	m	class:cv::SIFT
nfeatures_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat nfeatures_;$/;"	m	class:cv::gpu::GMG_GPU
nfeatures_	/usr/local/include/opencv2/video/background_segm.hpp	/^    cv::Mat_<int> nfeatures_;$/;"	m	class:cv::BackgroundSubtractorGMG
nframes	/usr/local/include/opencv2/video/background_segm.hpp	/^    int nframes;$/;"	m	class:cv::BackgroundSubtractorMOG
nframes	/usr/local/include/opencv2/video/background_segm.hpp	/^    int nframes;$/;"	m	class:cv::BackgroundSubtractorMOG2
nframes_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nframes_;$/;"	m	class:cv::gpu::MOG2_GPU
nframes_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nframes_;$/;"	m	class:cv::gpu::MOG_GPU
nlevels	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int nlevels;$/;"	m	class:cv::ORB
nlevels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nlevels;$/;"	m	struct:cv::gpu::HOGDescriptor
nlevels	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP int nlevels;$/;"	m	struct:cv::HOGDescriptor
nlevels	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int nlevels;$/;"	m	struct:cv::ocl::HOGDescriptor
nmixtures	/usr/local/include/opencv2/video/background_segm.hpp	/^    int nmixtures;$/;"	m	class:cv::BackgroundSubtractorMOG
nmixtures	/usr/local/include/opencv2/video/background_segm.hpp	/^    int nmixtures;$/;"	m	class:cv::BackgroundSubtractorMOG2
nmixtures_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nmixtures_;$/;"	m	class:cv::gpu::MOG2_GPU
nmixtures_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nmixtures_;$/;"	m	class:cv::gpu::MOG_GPU
nnIndex	/usr/local/include/opencv2/flann/flann.hpp	/^        ::cvflann::Index<Distance>* nnIndex;$/;"	m	class:cv::flann::GenericIndex
nnIndex_	/usr/local/include/opencv2/flann/flann_base.hpp	/^    NNIndex<Distance>* nnIndex_;$/;"	m	class:cvflann::Index
nnIndex_L1	/usr/local/include/opencv2/flann/flann.hpp	/^        ::cvflann::Index< L1<ElementType> >* nnIndex_L1;$/;"	m	class:cv::flann::Index_
nnIndex_L2	/usr/local/include/opencv2/flann/flann.hpp	/^        ::cvflann::Index< L2<ElementType> >* nnIndex_L2;$/;"	m	class:cv::flann::Index_
noLongPairs_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    unsigned int noLongPairs_;             \/\/ number of longParis$/;"	m	class:cv::BRISK
noOfSigBits	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS
noShortPairs_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    unsigned int noShortPairs_;         \/\/ number of shortParis$/;"	m	class:cv::BRISK
nod	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* nod;$/;"	m	struct:CvCliqueFinder
node	/usr/local/include/opencv2/core/core_c.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator
node	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	v
node	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::Node* SparseMat::node(size_t nidx)$/;"	f	class:cv::SparseMat
node	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::Node* SparseMatIterator::node() const$/;"	f	class:cv::SparseMatIterator
node	/usr/local/include/opencv2/core/mat.hpp	/^inline const SparseMat::Node* SparseMat::node(size_t nidx) const$/;"	f	class:cv::SparseMat
node	/usr/local/include/opencv2/core/mat.hpp	/^inline const SparseMat::Node* SparseMatConstIterator::node() const$/;"	f	class:cv::SparseMatConstIterator
node	/usr/local/include/opencv2/core/types_c.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator
node	/usr/local/include/opencv2/flann/result_set.h	/^    T node;           \/* Tree node at which search resumes *\/$/;"	m	struct:cvflann::BranchStruct
nodeCount	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int nodeCount;$/;"	m	struct:cv::CascadeClassifier::Data::DTree
node_heap	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData
node_risk	/usr/local/include/opencv2/ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
nodes	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<Node> nodes;$/;"	m	class:cv::Octree
nodes	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        vector<DTreeNode> nodes;$/;"	m	class:cv::CascadeClassifier::Data
nodes_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<RTreeNode> nodes_;$/;"	m	class:cv::RandomizedTree
noiseRange	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double noiseRange;$/;"	m	class:cv::PatchGenerator
noiseSigma	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float noiseSigma;$/;"	m	class:cv::gpu::MOG_GPU
noiseSigma	/usr/local/include/opencv2/video/background_segm.hpp	/^    double noiseSigma;$/;"	m	class:cv::BackgroundSubtractorMOG
nonfatally_failed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
nonmaxSuppression	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool nonmaxSuppression;$/;"	m	class:cv::FastFeatureDetector
nonmaxSupression	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool nonmaxSupression;$/;"	m	class:cv::gpu::FAST_GPU
nonmax_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool nonmax_;$/;"	m	class:cv::FastAdjuster
norm	/usr/local/include/opencv2/core/operations.hpp	/^double norm(const Matx<_Tp, m, n>& M)$/;"	f	namespace:cv
norm	/usr/local/include/opencv2/core/operations.hpp	/^double norm(const Matx<_Tp, m, n>& M, int normType)$/;"	f	namespace:cv
norm	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline double norm(const Point3_<_Tp>& pt)$/;"	f	namespace:cv
norm	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline double norm(const Point_<_Tp>& pt)$/;"	f	namespace:cv
normInf	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normInf(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normInf	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normInf(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normL1(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL1	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normL1(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline float normL1(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL1	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline int normL1(const uchar* a, const uchar* b, int n)$/;"	f	namespace:cv
normL2	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a)$/;"	f	namespace:cv::detail
normL2	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a, const Point3f& b)$/;"	f	namespace:cv::detail
normL2Sqr	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normL2Sqr(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL2Sqr	/usr/local/include/opencv2/core/operations.hpp	/^_AccTp normL2Sqr(const _Tp* a, int n)$/;"	f	namespace:cv
normL2Sqr	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline float normL2Sqr(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL2sq	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^double normL2sq(const Mat &r)$/;"	f	namespace:cv::detail
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { normType = NORM_HAMMING + (cellsize>1) };$/;"	e	enum:cv::HammingMultilevel::__anon62
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { normType = NORM_HAMMING };$/;"	e	enum:cv::Hamming::__anon61
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { normType = NORM_L1 };$/;"	e	enum:cv::L1::__anon60
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { normType = NORM_L2 };$/;"	e	enum:cv::L2::__anon59
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    enum { normType = NORM_L2SQR };$/;"	e	enum:cv::SL2::__anon58
normType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int normType;$/;"	m	class:cv::BFMatcher
normType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { normType = NORM_HAMMING };$/;"	e	enum:cv::ocl::Hamming::__anon315
normType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { normType = NORM_L1 };$/;"	e	enum:cv::ocl::L1::__anon313
normType	/usr/local/include/opencv2/ocl/ocl.hpp	/^            enum { normType = NORM_L2 };$/;"	e	enum:cv::ocl::L2::__anon314
norm_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat norm_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
normalRadius	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float normalRadius;$/;"	m	class:cv::SpinImageModel
normal_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Buffer normal_;$/;"	m	class:cv::ogl::Arrays
normal_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    GlBuffer normal_;$/;"	m	class:cv::GlArrays
normaliseOutput	/usr/local/include/opencv2/contrib/retina.hpp	/^               bool colorMode, normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
normaliseOutput	/usr/local/include/opencv2/contrib/retina.hpp	/^               bool normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
normalize	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> normalize(const Vec<_Tp, cn>& v)$/;"	f	namespace:cv
normals	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<Point3f> normals;$/;"	m	class:cv::Mesh3D
not1	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Predicate> __host__ __device__ __forceinline__ unary_negate<Predicate> not1(const Predicate& pred)$/;"	f	namespace:cv::gpu::device
not2	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename BinaryPredicate> __host__ __device__ __forceinline__ binary_negate<BinaryPredicate> not2(const BinaryPredicate& pred)$/;"	f	namespace:cv::gpu::device
not_equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ not_equal_to():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::not_equal_to
not_equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ not_equal_to(const not_equal_to& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::not_equal_to
not_equal_to	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct not_equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
notified_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool notified_;$/;"	m	class:std::tr1::Notification
nr_plane	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nr_plane;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
nsamples	/usr/local/include/opencv2/ml/ml.hpp	/^    int nsamples;$/;"	m	class:CvRTrees
nscales	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int nscales;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
nstructs	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int nstructs;$/;"	m	class:cv::FernDescriptorMatcher::Params
nstructs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int nstructs;$/;"	m	class:cv::FernClassifier
ntrees	/usr/local/include/opencv2/ml/ml.hpp	/^    int ntrees;$/;"	m	class:CvRTrees
ntrees	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int ntrees;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
nu	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams
nu02	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu03	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu11	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu12	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu20	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu21	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu30	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
numBands	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    int numBands() const { return actual_num_bands_; }$/;"	f	class:cv::detail::MultiBandBlender
numClasses	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int numClasses() const { return static_cast<int>(class_templates.size()); }$/;"	f	class:cv::linemod::Detector
numDetectedFrames	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numDetectedFrames;$/;"	m	struct:DetectionBasedTracker::TrackedObject
numFeatures	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int numFeatures;$/;"	m	struct:CvLSVMFilterObject
numFramesNotDetected	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numFramesNotDetected;$/;"	m	struct:DetectionBasedTracker::TrackedObject
numInitializationFrames	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int numInitializationFrames;$/;"	m	class:cv::gpu::GMG_GPU
numInitializationFrames	/usr/local/include/opencv2/video/background_segm.hpp	/^    int     numInitializationFrames;$/;"	m	class:cv::BackgroundSubtractorGMG
numIters	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
numIters	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int numIters;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
numLastPositionsToTrack	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numLastPositionsToTrack;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numLevels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int numLevels;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
numSamples	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int numSamples;$/;"	m	class:cv::of2::FabMap
numShifts	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
numStepsToShowWithoutDetecting	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numStepsToShowWithoutDetecting;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numStepsToWaitBeforeFirstShow	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            int numStepsToWaitBeforeFirstShow;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numTrackedSteps	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        int numTrackedSteps;$/;"	m	class:DetectionBasedTracker
numVertices	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    int numVertices() const { return static_cast<int>(edges_.size()); }$/;"	f	class:cv::detail::Graph
num_bands_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
num_cam_param	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int num_cam_param;$/;"	m	class:cv::LevMarqSparse
num_cams	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int num_cams;$/;"	m	class:cv::LevMarqSparse
num_components	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int num_components;$/;"	m	struct:CvLatentSvmDetector
num_err_param	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int num_err_param;$/;"	m	class:cv::LevMarqSparse
num_errs_per_measurement_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    int num_errs_per_measurement_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_features	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  size_t num_features;$/;"	m	class:cv::linemod::ColorGradient
num_features	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  size_t num_features;$/;"	m	class:cv::linemod::DepthNormal
num_filters	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int num_filters;$/;"	m	struct:CvLatentSvmDetector
num_images_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    int num_images_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_inliers	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_inliers;                    \/\/ Number of geometrically consistent matches$/;"	m	struct:cv::detail::MatchesInfo
num_layers_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_layers_descr_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_leaves_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int num_leaves_;$/;"	m	class:cv::RandomizedTree
num_matches_thresh1_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_matches_thresh1_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_matches_thresh2_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_matches_thresh2_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_mix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState
num_octaves_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_octaves_descr_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_params_per_cam_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    int num_params_per_cam_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_part_filters	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int* num_part_filters;$/;"	m	struct:CvLatentSvmDetector
num_point_param	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int num_point_param;$/;"	m	class:cv::LevMarqSparse
num_points	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int num_points;$/;"	m	class:cv::LevMarqSparse
num_quant_bits_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int num_quant_bits_;$/;"	m	class:cv::RTreeClassifier
num_states	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM
num_valid	/usr/local/include/opencv2/ml/ml.hpp	/^    int* num_valid;$/;"	m	struct:CvDTreeNode
numberOfAngles	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int numberOfAngles;$/;"	m	class:cv::SelfSimDescriptor
numberOfDisparities	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int numberOfDisparities;$/;"	m	class:cv::StereoSGBM
numberOfDisparities	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int numberOfDisparities; \/\/ maximum disparity - minimum disparity (> 0)$/;"	m	struct:CvStereoBMState
numberOfDisparities	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int numberOfDisparities;$/;"	m	struct:CvStereoGCState
numberOfDistanceBuckets	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int numberOfDistanceBuckets;$/;"	m	class:cv::SelfSimDescriptor
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<bool>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<char>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<double>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<float>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<int>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<long>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<short>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<signed char>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned char>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned int>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned long>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned short>$/;"	s	namespace:cv::gpu::device
numeric_limits	/usr/local/include/opencv2/gpu/device/limits.hpp	/^    template<class T> struct numeric_limits$/;"	s	namespace:cv::gpu::device
nv_heap	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData
nviews	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int nviews;$/;"	m	class:cv::FernDescriptorMatcher::Params
nzcount	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t SparseMat::nzcount() const$/;"	f	class:cv::SparseMat
obj	/usr/local/include/opencv2/ml/ml.hpp	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo
object	/usr/local/include/opencv2/flann/any.h	/^    void* object;$/;"	m	struct:cvflann::any
object_registry	/usr/local/include/opencv2/flann/object_factory.h	/^    ObjectRegistry object_registry;$/;"	m	class:cvflann::ObjectFactory
obs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo
obsProb	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM
obs_info	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvReleaseObsInfo( CvImgObsInfo** obs_info );$/;"	v
obs_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int obs_size;$/;"	m	struct:CvImgObsInfo
obs_x	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int obs_x;$/;"	m	struct:CvImgObsInfo
obs_y	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int obs_y;$/;"	m	struct:CvImgObsInfo
occlusionCost	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int occlusionCost;$/;"	m	struct:CvStereoGCState
ocl	/usr/local/include/opencv2/nonfree/ocl.hpp	/^    namespace ocl$/;"	n	namespace:cv
ocl	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^    namespace ocl$/;"	n	namespace:cv
ocl	/usr/local/include/opencv2/ocl/ocl.hpp	/^    namespace ocl$/;"	n	namespace:cv
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat() : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0) {}$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type) : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type, const Scalar &_s)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type, void *_data, size_t _step)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const Mat &m)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m, const Range &rRange, const Range &cRange)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m, const Rect &roi)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type) : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type, const Scalar &_s)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type, void *_data, size_t _step)$/;"	f	class:cv::ocl::oclMat
oclMat	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS oclMat$/;"	c	namespace:cv::ocl
oclMatExpr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^                oclMatExpr() : a(oclMat()), b(oclMat()), op(0) {}$/;"	f	class:cv::ocl::oclMatExpr
oclMatExpr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^                oclMatExpr(const oclMat& _a, const oclMat& _b, int _op)$/;"	f	class:cv::ocl::oclMatExpr
oclMatExpr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        class CV_EXPORTS oclMatExpr$/;"	c	namespace:cv::ocl
oclMatExpr	/usr/local/include/opencv2/ocl/ocl.hpp	/^        class CV_EXPORTS oclMatExpr;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
oclchannels	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline int oclMat::oclchannels() const$/;"	f	class:cv::ocl::oclMat
ocltype	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline int oclMat::ocltype() const$/;"	f	class:cv::ocl::oclMat
octave	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int octave; \/\/!< octave (pyramid layer) from which the keypoint has been extracted$/;"	m	class:cv::KeyPoint
octaves	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int octaves;$/;"	m	class:cv::BRISK
octree	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Octree octree;$/;"	m	class:cv::Mesh3D
of2	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^namespace of2 {$/;"	n	namespace:cv
offset	/usr/local/include/opencv2/ml/ml.hpp	/^    int offset;$/;"	m	struct:CvDTreeNode
offset	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int offset;$/;"	m	class:cv::ocl::oclMat
offset1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    short offset1, offset2;$/;"	m	struct:cv::RTreeNode
offset2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    short offset1, offset2;$/;"	m	struct:cv::RTreeNode
ogl	/usr/local/include/opencv2/core/core.hpp	/^namespace ogl {$/;"	n	namespace:cv
ogl	/usr/local/include/opencv2/core/internal.hpp	/^namespace cv { namespace ogl {$/;"	n	namespace:cv
ogl	/usr/local/include/opencv2/core/opengl_interop.hpp	/^namespace cv { namespace ogl {$/;"	n	namespace:cv
oldCascade	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    Ptr<CvHaarClassifierCascade> oldCascade;$/;"	m	class:cv::CascadeClassifier
old_state	/usr/local/include/opencv2/ts/ts.hpp	/^    const uint64 old_state;$/;"	m	struct:cvtest::DefaultRngAuto
ones	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::ones(Size sz)$/;"	f	class:cv::Mat_
ones	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::ones(int rows, int cols)$/;"	f	class:cv::Mat_
ones	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::ones()$/;"	f	class:cv::Matx
oob_error	/usr/local/include/opencv2/ml/ml.hpp	/^    double oob_error;$/;"	m	class:CvRTrees
op	/usr/local/include/opencv2/core/mat.hpp	/^    const MatOp* op;$/;"	m	class:cv::MatExpr
op	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const Op op;$/;"	m	struct:cv::gpu::device::binder1st
op	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const Op op;$/;"	m	struct:cv::gpu::device::binder2nd
op	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^                int op;$/;"	m	class:cv::ocl::oclMatExpr
operator !	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator !(const Range& r)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/mat.hpp	/^inline bool Mat::MSize::operator != (const MSize& sz) const$/;"	f	class:cv::Mat::MSize
operator !=	/usr/local/include/opencv2/core/mat.hpp	/^operator != (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/mat.hpp	/^operator != (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/mat.hpp	/^operator != (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/mat.hpp	/^static inline bool operator != (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^bool operator != (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^bool operator != (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator != (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator != (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool operator != (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator != ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator !=	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	/usr/local/include/opencv2/ts/ts_gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator &	/usr/local/include/opencv2/core/operations.hpp	/^static inline Range operator & (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator & (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/mat.hpp	/^operator &= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/mat.hpp	/^operator &= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator &= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator &= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/operations.hpp	/^static inline Range& operator &= (Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator &= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
operator ()	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__       T& operator ()(int y, int x)       { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrStep
operator ()	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ T& operator ()(int y, int x) { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrElemStep_
operator ()	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T& operator ()(int y, int x) const { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrElemStep_
operator ()	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T& operator ()(int y, int x) const { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrStep
operator ()	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::operator()(Range _rowRange, Range _colRange) const$/;"	f	class:cv::gpu::GpuMat
operator ()	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::operator()(Rect roi) const$/;"	f	class:cv::gpu::GpuMat
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator()(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::operator()( Range _rowRange, Range _colRange ) const$/;"	f	class:cv::Mat
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::operator()(const Range* ranges) const$/;"	f	class:cv::Mat
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^inline Size Mat::MSize::operator()() const$/;"	f	class:cv::Mat::MSize
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Range& _rowRange, const Range& _colRange ) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Range* ranges ) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(Point pt)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(const int* idx)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0, int i1)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(Point pt) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(const int* idx) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0, int i1) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> template<int n> inline _Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx)$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> template<int n> inline const _Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat_
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    Vector operator() (const Range& r) const { return Vector(*this, r); }$/;"	f	class:cv::Vector
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, Matx<_Tp, 2, 2>& b, int) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, const Matx<_Tp, 2, 1>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, Matx<_Tp, 3, 3>& b, int) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, const Matx<_Tp, 3, 1>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, Matx<_Tp, m, m>& b, int method) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, const Matx<_Tp, m, n>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const _Tp& a, const _Tp& b) const { return a < b; }$/;"	f	class:cv::LessThan
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(const _Tp& a, const _Tp& b) const { return a >= b; }$/;"	f	class:cv::GreaterEq
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(int a, int b) const { return arr[a] < arr[b]; }$/;"	f	class:cv::LessThanIdx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    bool operator()(int a, int b) const { return arr[a] >= arr[b]; }$/;"	f	class:cv::GreaterEqIdx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    double operator ()(const Matx<_Tp, 1, 1>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    double operator ()(const Matx<_Tp, 2, 2>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    double operator ()(const Matx<_Tp, 3, 3>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    double operator ()(const Matx<_Tp, m, m>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    void operator()(const vector<_Tp>& vec) const$/;"	f	class:cv::VecWriterProxy
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^    void operator()(vector<_Tp>& vec, size_t count) const$/;"	f	class:cv::VecReaderProxy
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i)$/;"	f	class:cv::Matx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i, int j)$/;"	f	class:cv::Matx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^const _Tp& Matx<_Tp, m, n>::operator ()(int i) const$/;"	f	class:cv::Matx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^const _Tp& Matx<_Tp, m, n>::operator ()(int i, int j) const$/;"	f	class:cv::Matx
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^inline unsigned RNG::operator ()() {return next();}$/;"	f	class:cv::RNG
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^inline unsigned RNG::operator ()(unsigned N) {return (unsigned)uniform(0,N);}$/;"	f	class:cv::RNG
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline _Tp& Vec<_Tp, cn>::operator ()(int i)$/;"	f	class:cv::Vec
operator ()	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline const _Tp& Vec<_Tp, cn>::operator ()(int i) const$/;"	f	class:cv::Vec
operator ()	/usr/local/include/opencv2/core/wimage.hpp	/^    inline T* operator() (int c, int r)  {$/;"	f	class:cv::WImage
operator ()	/usr/local/include/opencv2/core/wimage.hpp	/^    inline const T* operator() (int c, int r) const  {$/;"	f	class:cv::WImage
operator ()	/usr/local/include/opencv2/features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L1
operator ()	/usr/local/include/opencv2/features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L2
operator ()	/usr/local/include/opencv2/features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::SL2
operator ()	/usr/local/include/opencv2/features2d/features2d.hpp	/^    ResultType operator()( const unsigned char* a, const unsigned char* b, int size ) const$/;"	f	struct:cv::Hamming
operator ()	/usr/local/include/opencv2/features2d/features2d.hpp	/^    ResultType operator()( const unsigned char* a, const unsigned char* b, int size ) const$/;"	f	struct:cv::HammingMultilevel
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming2
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::HellingerDistance
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::L2_Simple
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::ChiSquareDistance
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::HistIntersectionDistance
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::KL_Divergence
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L1
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L2
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MaxDistance
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MinkowskiDistance
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(const unsigned char* a, const unsigned char* b, int size) const$/;"	f	struct:cvflann::HammingLUT
operator ()	/usr/local/include/opencv2/flann/dist.h	/^    ResultType operator()(const unsigned char* a, const unsigned char* b, size_t size) const$/;"	f	struct:cvflann::HammingLUT2
operator ()	/usr/local/include/opencv2/flann/heap.h	/^        bool operator()(const T& t_1, const T& t_2) const$/;"	f	struct:cvflann::Heap::CompareT
operator ()	/usr/local/include/opencv2/flann/lsh_index.h	/^        bool operator()(const ScoreIndexPair& left, const ScoreIndexPair& right) const$/;"	f	struct:cvflann::LshIndex::SortScoreIndexPairOnSecond
operator ()	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ D operator ()(index_type y, index_type x) const$/;"	f	struct:cv::gpu::device::BorderReader
operator ()	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ elem_type operator ()(index_type y, index_type x) const$/;"	f	struct:cv::gpu::device::BorderReader
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ T operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(T src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::Lab2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::Luv2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Lab
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<float, dcn>::vec_type operator ()(const typename TypeVec<float, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Luv
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::Lab2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::Luv2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Lab
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<uchar, dcn>::vec_type operator ()(const typename TypeVec<uchar, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Luv
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar3 operator()(ushort src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(ushort src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(const uchar3& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
operator ()	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            __device__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
operator ()	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::AreaFilter
operator ()	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::IntegerAreaFilter
operator ()	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::LinearFilter
operator ()	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::PointFilter
operator ()	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        __device__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::CubicFilter
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ D operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::gpu::device::saturate_cast_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::gpu::device::negate
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_and
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_or
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_xor
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::divides
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::minus
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::modulus
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::multiplies
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::plus
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType src1, typename TypeTraits<T>::ParameterType src2) const$/;"	f	struct:cv::gpu::device::hypot_sqr_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::gpu::device::bit_not
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::maximum
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::minimum
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_binary_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_trunc_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::gpu::device::logical_not
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::equal_to
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::greater
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::greater_equal
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::less
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::less_equal
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::logical_and
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::logical_or
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::not_equal_to
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::first_argument_type>::ParameterType x,$/;"	f	struct:cv::gpu::device::binary_negate
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ char operator ()(char x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ double operator ()(double x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ float operator ()(float x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ int operator ()(int x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ short operator ()(short x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ signed char operator ()(signed char x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ typename Op::result_type operator ()(typename TypeTraits<typename Op::second_argument_type>::ParameterType a) const$/;"	f	struct:cv::gpu::device::binder1st
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T1>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::project1st
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T2>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::project2nd
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T>::ParameterType operator()(typename TypeTraits<T>::ParameterType x) const$/;"	f	struct:cv::gpu::device::identity
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ unsigned char operator ()(unsigned char x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ unsigned int operator ()(unsigned int x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ unsigned short operator ()(unsigned short x) const$/;"	f	struct:cv::gpu::device::abs_func
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __forceinline__ __device__ typename Op::result_type operator ()(typename TypeTraits<typename Op::first_argument_type>::ParameterType a) const$/;"	f	struct:cv::gpu::device::binder2nd
operator ()	/usr/local/include/opencv2/gpu/device/functional.hpp	/^      __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::argument_type>::ParameterType x) const$/;"	f	struct:cv::gpu::device::unary_negate
operator ()	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::gpu::device::WarpScan
operator ()	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
operator ()	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()(volatile T *ptr)$/;"	f	struct:cv::gpu::device::BlockScan
operator ()	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::MaskCollection
operator ()	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::SingleMask
operator ()	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::SingleMaskChannels
operator ()	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int) const$/;"	f	struct:cv::gpu::device::WithOutMask
operator ()	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int, int) const$/;"	f	struct:cv::gpu::device::WithOutMask
operator ()	/usr/local/include/opencv2/legacy/legacy.hpp	/^        template<typename _Tp> bool operator ()(const Mat_<_Tp>& patch) const$/;"	f	struct:cv::FernClassifier::Feature
operator ()	/usr/local/include/opencv2/legacy/legacy.hpp	/^    inline bool operator() (uchar* patch_data) const$/;"	f	struct:cv::RTreeNode
operator ()	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::operator()( Range rRange, Range cRange ) const$/;"	f	class:cv::ocl::oclMat
operator ()	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::operator()( const Rect &roi ) const$/;"	f	class:cv::ocl::oclMat
operator ()	/usr/local/include/opencv2/ocl/ocl.hpp	/^            ResultType operator()( const T *a, const T *b, int size ) const$/;"	f	struct:cv::ocl::L1
operator ()	/usr/local/include/opencv2/ocl/ocl.hpp	/^            ResultType operator()( const T *a, const T *b, int size ) const$/;"	f	struct:cv::ocl::L2
operator ()	/usr/local/include/opencv2/ocl/ocl.hpp	/^            ResultType operator()( const unsigned char *a, const unsigned char *b, int size ) const$/;"	f	struct:cv::ocl::Hamming
operator ()	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    void operator ()(const ImageFeatures &features1, const ImageFeatures &features2,$/;"	f	class:cv::detail::FeaturesMatcher
operator ()	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    void operator ()(const std::vector<ImageFeatures> &features, const std::vector<MatchesInfo> &pairwise_matches,$/;"	f	class:cv::detail::Estimator
operator ()	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        bool operator() (const Point &p1, const Point &p2) const$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
operator ()	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        bool operator() (const std::pair<size_t, size_t> &l, const std::pair<size_t, size_t> &r) const$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
operator ()	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    bool operator()(const cv::KeyPoint& kp1, const cv::KeyPoint& kp2) const$/;"	f	struct:perf::comparators::KeypointGreater
operator ()	/usr/local/include/opencv2/ts/ts_perf.hpp	/^  bool operator()(const cv::Rect_<T>& r1, const cv::Rect_<T>& r2) const$/;"	f	struct:perf::comparators::RectLess_
operator *	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatConstIterator_
operator *	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatIterator_
operator *	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* MatConstIterator::operator *() const { return ptr; }$/;"	f	class:cv::MatConstIterator
operator *	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> MatCommaInitializer_<_Tp>::operator *() const$/;"	f	class:cv::MatCommaInitializer_
operator *	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp MatConstIterator_<_Tp>::operator *() const { return *(_Tp*)(this->ptr); }$/;"	f	class:cv::MatConstIterator_
operator *	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& MatIterator_<_Tp>::operator *() const { return *(_Tp*)(this->ptr); }$/;"	f	class:cv::MatIterator_
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator * (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, 4, 1> operator * (const Matx<_Tp, 4, 4>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> MatxCommaInitializer<_Tp, m, n>::operator *() const$/;"	f	class:cv::MatxCommaInitializer
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (double alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (float alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator * (int alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Point_<_Tp> operator * (const Matx<_Tp, 2, 2>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Scalar operator * (const Matx<_Tp, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Scalar operator * (const Matx<double, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn> VecCommaInitializer<_Tp, cn>::operator *() const$/;"	f	class:cv::VecCommaInitializer
operator *	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, m> operator * (const Matx<_Tp, m, n>& a, const Vec<_Tp, n>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^inline CvFileNode* FileNode::operator *() { return (CvFileNode*)node; }$/;"	f	class:cv::FileNode
operator *	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode FileNodeIterator::operator *() const$/;"	f	class:cv::FileNodeIterator
operator *	/usr/local/include/opencv2/core/operations.hpp	/^inline const CvFileNode* FileNode::operator* () const { return node; }$/;"	f	class:cv::FileNode
operator *	/usr/local/include/opencv2/core/operations.hpp	/^inline uchar* LineIterator::operator *() { return ptr; }$/;"	f	class:cv::LineIterator
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (double alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (float alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^operator * (int alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Vec<_Tp, 4> operator * (const Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp& SeqIterator<_Tp>::operator *()$/;"	f	class:cv::SeqIterator
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline const _Tp& SeqIterator<_Tp>::operator *() const$/;"	f	class:cv::SeqIterator
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (double a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (float a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (int a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (double a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (float a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (int a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator * (_Tp alpha, const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator * (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator * (const Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	/usr/local/include/opencv2/flann/dist.h	/^    T operator*()$/;"	f	struct:cvflann::ZeroIterator
operator *	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, double s)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator *= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^operator *= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Vec<_Tp, 4>& operator *= (Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator *= ( Scalar_<_Tp>& a, _Tp v )$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^operator + (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^operator + (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^operator + (ptrdiff_t ofs, const MatConstIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^operator + (ptrdiff_t ofs, const MatIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^static inline MatConstIterator operator + (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/mat.hpp	/^static inline MatConstIterator operator + (ptrdiff_t ofs, const MatConstIterator& a)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator + (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator + (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^operator + (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^static inline Range operator + (const Range& r1, int delta)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^static inline Range operator + (int delta, const Range& r1)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator + (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator + (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator + (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator + (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatConstIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator MatConstIterator::operator ++(int)$/;"	f	class:cv::MatConstIterator
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator ++()$/;"	f	class:cv::MatConstIterator
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator SparseMatConstIterator::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator SparseMatIterator::operator ++(int)$/;"	f	class:cv::SparseMatIterator
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator& SparseMatIterator::operator ++()$/;"	f	class:cv::SparseMatIterator
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatConstIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatConstIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> MatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatIterator_
operator ++	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatIterator_
operator ++	/usr/local/include/opencv2/core/operations.hpp	/^inline LineIterator LineIterator::operator ++(int)$/;"	f	class:cv::LineIterator
operator ++	/usr/local/include/opencv2/core/operations.hpp	/^inline LineIterator& LineIterator::operator ++()$/;"	f	class:cv::LineIterator
operator ++	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator ++(int) const$/;"	f	class:cv::SeqIterator
operator ++	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator ++()$/;"	f	class:cv::SeqIterator
operator ++	/usr/local/include/opencv2/flann/dist.h	/^    ZeroIterator<T> operator ++(int)$/;"	f	struct:cvflann::ZeroIterator
operator ++	/usr/local/include/opencv2/flann/dist.h	/^    const ZeroIterator<T>& operator ++()$/;"	f	struct:cvflann::ZeroIterator
operator ++	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator +=	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp1, m, n>& operator += (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^operator += (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^operator += (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^operator += (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator +=(int delta)$/;"	f	class:cv::SeqIterator
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator += (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp>& operator += (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +=	/usr/local/include/opencv2/flann/dist.h	/^    ZeroIterator<T>& operator+=(int)$/;"	f	struct:cvflann::ZeroIterator
operator ,	/usr/local/include/opencv2/core/mat.hpp	/^MatCommaInitializer_<_Tp>::operator , (T2 v)$/;"	f	class:cv::MatCommaInitializer_
operator ,	/usr/local/include/opencv2/core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n>& MatxCommaInitializer<_Tp, m, n>::operator , (_T2 value)$/;"	f	class:cv::MatxCommaInitializer
operator ,	/usr/local/include/opencv2/core/operations.hpp	/^VecCommaInitializer<_Tp, cn>& VecCommaInitializer<_Tp, cn>::operator , (_T2 value)$/;"	f	class:cv::VecCommaInitializer
operator -	/usr/local/include/opencv2/core/mat.hpp	/^operator - (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/mat.hpp	/^operator - (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/mat.hpp	/^static inline MatConstIterator operator - (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator - (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^operator - (const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^operator - (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^static inline Range operator - (const Range& r1, int delta)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^static inline ptrdiff_t operator - (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline ptrdiff_t operator - (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator - (const Point3_<_Tp>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator - (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator - (const Point_<_Tp>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator - (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator - (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator - (const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator - (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator - (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator --	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator MatConstIterator::operator --(int)$/;"	f	class:cv::MatConstIterator
operator --	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator --()$/;"	f	class:cv::MatConstIterator
operator --	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatConstIterator_
operator --	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator --()$/;"	f	class:cv::MatConstIterator_
operator --	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> MatIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatIterator_
operator --	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator --()$/;"	f	class:cv::MatIterator_
operator --	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator --(int) const$/;"	f	class:cv::SeqIterator
operator --	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator --()$/;"	f	class:cv::SeqIterator
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator -=	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp1, m, n>& operator -= (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^operator -= (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^operator -= (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^operator -= (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator -=(int delta)$/;"	f	class:cv::SeqIterator
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator -= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp>& operator -= (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ->	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode FileNodeIterator::operator ->() const$/;"	f	class:cv::FileNodeIterator
operator ->	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp* Ptr<_Tp>::operator -> () { return obj; }$/;"	f	class:cv::Ptr
operator ->	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline const _Tp* Ptr<_Tp>::operator -> () const { return obj; }$/;"	f	class:cv::Ptr
operator ->	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator \/ (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<_Tp> operator \/ (_Tp a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<double> operator \/ (const Scalar_<double>& a, double alpha)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<float> operator \/ (const Scalar_<float>& a, float alpha)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /	/usr/local/include/opencv2/core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, double s)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp> operator \/= (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Complex<_Tp>& operator \/= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /=	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator <	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        bool operator<(const WordStats& w) const {$/;"	f	struct:cv::of2::FabMapFBO::WordStats
operator <	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    bool operator<(const IMatch& m) const {$/;"	f	struct:cv::of2::IMatch
operator <	/usr/local/include/opencv2/core/mat.hpp	/^operator < (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator <	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator < (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator <	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool operator<( const DMatch &m ) const$/;"	f	struct:cv::DMatch
operator <	/usr/local/include/opencv2/flann/result_set.h	/^        bool operator<(const DistIndex dist_index) const$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
operator <	/usr/local/include/opencv2/flann/result_set.h	/^    bool operator<(const BranchStruct<T, DistanceType>& rhs) const$/;"	f	struct:cvflann::BranchStruct
operator <	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    bool operator<(const Candidate& rhs) const$/;"	f	struct:cv::linemod::QuantizedPyramid::Candidate
operator <	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  bool operator<(const Match& rhs) const$/;"	f	struct:cv::linemod::Match
operator <	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    bool operator <(const GraphEdge& other) const { return weight < other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator <	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        bool operator <(const DXY &dxy) const { return dist < dxy.dist; }$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
operator <<	/usr/local/include/opencv2/core/mat.hpp	/^operator << (const Mat_<_Tp>& m, T2 val)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n> operator << (const Matx<_Tp, m, n>& mtx, _T2 val)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^VecCommaInitializer<_Tp, cn> operator << (const Vec<_Tp, cn>& vec, _T2 val)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^static inline FileStorage& operator << (FileStorage& fs, char* value)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^static inline FileStorage& operator << (FileStorage& fs, const char* str)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^static inline std::ostream& operator << (std::ostream& out, const Formatted& fmtd)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^static inline std::ostream& operator << (std::ostream& out, const Mat& mtx)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int m, int n> inline std::ostream& operator<<(std::ostream& out, const Matx<_Tp, m, n>& matx)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int n> inline std::ostream& operator<<(std::ostream& out, const Vec<_Tp, n>& vec)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Point3_<_Tp>& p)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Point_<_Tp>& p)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Rect_<_Tp>& rect)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Size_<_Tp>& size)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline FileStorage& operator << (FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline std::ostream& operator << (std::ostream& out,$/;"	f	namespace:cv
operator <<	/usr/local/include/opencv2/flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const any& any_val)$/;"	f	namespace:cvflann
operator <<	/usr/local/include/opencv2/flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const empty_any&)$/;"	f	namespace:cvflann::anyimpl
operator <<	/usr/local/include/opencv2/flann/lsh_table.h	/^inline std::ostream& operator <<(std::ostream& out, const LshStats& stats)$/;"	f	namespace:cvflann::lsh
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message& operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Message& operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	/usr/local/include/opencv2/ts/ts_gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <=	/usr/local/include/opencv2/core/mat.hpp	/^operator <= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator =	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat& GpuMat::operator = (Scalar s)$/;"	f	class:cv::gpu::GpuMat
operator =	/usr/local/include/opencv2/core/mat.hpp	/^    MatConstIterator_<_Tp>::operator = (const MatConstIterator_& it )$/;"	f	class:cv::MatConstIterator_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator = (const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^SparseMatIterator_<_Tp>::operator = (const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::SparseMat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator = (const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat& Mat::operator = (const Mat& m)$/;"	f	class:cv::Mat
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat& Mat::operator = (const MatExpr& e)$/;"	f	class:cv::Mat
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MStep& Mat::MStep::operator = (size_t s)$/;"	f	class:cv::Mat::MStep
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator = (const MatConstIterator& it )$/;"	f	class:cv::MatConstIterator
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat& SparseMat::operator = (const Mat& m)$/;"	f	class:cv::SparseMat
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat& SparseMat::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatConstIterator& SparseMatConstIterator::operator = (const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
operator =	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMatIterator& SparseMatIterator::operator = (const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
operator =	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> Mat_<_Tp>& Mat_<_Tp>::operator = (const MatExpr& e)$/;"	f	class:cv::Mat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator = (const MatIterator_<_Tp>& it )$/;"	f	class:cv::MatIterator_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::Mat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat_& m)$/;"	f	class:cv::Mat_
operator =	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const _Tp& s)$/;"	f	class:cv::Mat_
operator =	/usr/local/include/opencv2/core/operations.hpp	/^    Vector<_Tp>& operator = (const Vector& d)$/;"	f	class:cv::Vector
operator =	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>& Point3_<_Tp>::operator = (const Point3_& pt)$/;"	f	class:cv::Point3_
operator =	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>& Point_<_Tp>::operator = (const Point_& pt)$/;"	f	class:cv::Point_
operator =	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>& Ptr<_Tp>::operator = (const Ptr<_Tp>& _ptr)$/;"	f	class:cv::Ptr
operator =	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>& Rect_<_Tp>::operator = ( const Rect_<_Tp>& r )$/;"	f	class:cv::Rect_
operator =	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>& Size_<_Tp>::operator = (const Size_<_Tp>& sz)$/;"	f	class:cv::Size_
operator =	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageView& operator=(const WImage<T>& img) {$/;"	f	class:cv::WImageView
operator =	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageViewC& operator=(const WImageC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	/usr/local/include/opencv2/core/wimage.hpp	/^    WImageViewC& operator=(const WImageViewC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	/usr/local/include/opencv2/flann/any.h	/^    any& operator=(const T& x)$/;"	f	struct:cvflann::any
operator =	/usr/local/include/opencv2/flann/any.h	/^    any& operator=(const char* x)$/;"	f	struct:cvflann::any
operator =	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvImage& operator = (const CvImage& img)$/;"	f	class:CvImage
operator =	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMatrix& operator = (const CvMatrix& _m)$/;"	f	class:CvMatrix
operator =	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::operator = (const Mat &m)$/;"	f	class:cv::ocl::oclMat
operator =	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::operator = (const oclMat &m)$/;"	f	class:cv::ocl::oclMat
operator =	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat& oclMat::operator = (const oclMatExpr& expr)$/;"	f	class:cv::ocl::oclMat
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator ==	/usr/local/include/opencv2/core/mat.hpp	/^inline bool Mat::MSize::operator == (const MSize& sz) const$/;"	f	class:cv::Mat::MSize
operator ==	/usr/local/include/opencv2/core/mat.hpp	/^operator == (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/mat.hpp	/^operator == (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/mat.hpp	/^operator == (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/mat.hpp	/^static inline bool operator == (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^bool operator == (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^bool operator == (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator == (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^static inline bool operator == (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline bool operator == (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator == ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ==	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  bool operator==(const Match& rhs) const$/;"	f	struct:cv::linemod::Match
operator ==	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	/usr/local/include/opencv2/ts/ts_gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator >	/usr/local/include/opencv2/core/mat.hpp	/^operator > (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    bool operator >(const GraphEdge& other) const { return weight > other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator >=	/usr/local/include/opencv2/core/mat.hpp	/^operator >= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >>	/usr/local/include/opencv2/core/operations.hpp	/^FileNodeIterator& operator >> (FileNodeIterator& it, vector<_Tp>& vec)$/;"	f	namespace:cv
operator >>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline FileNodeIterator& operator >> (FileNodeIterator& it, _Tp& value)$/;"	f	namespace:cv
operator >>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline void operator >> (const FileNode& n, _Tp& value)$/;"	f	namespace:cv
operator >>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline void operator >> (const FileNode& n, vector<_Tp>& vec)$/;"	f	namespace:cv
operator Complex<T2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename T2> inline Complex<_Tp>::operator Complex<T2>() const$/;"	f	class:cv::Complex
operator CvBox2D	/usr/local/include/opencv2/core/operations.hpp	/^inline RotatedRect::operator CvBox2D() const$/;"	f	class:cv::RotatedRect
operator CvMat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::operator CvMat() const$/;"	f	class:cv::Mat
operator CvMat	/usr/local/include/opencv2/core/operations.hpp	/^    operator CvMat() const$/;"	f	class:cv::Vector
operator CvMat*	/usr/local/include/opencv2/legacy/legacy.hpp	/^    operator CvMat* () { return matrix; }$/;"	f	class:CvMatrix
operator CvPoint	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator CvPoint() const$/;"	f	class:cv::Point_
operator CvPoint2D32f	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator CvPoint2D32f() const$/;"	f	class:cv::Point_
operator CvPoint3D32f	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::operator CvPoint3D32f() const$/;"	f	class:cv::Point3_
operator CvRect	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::operator CvRect() const$/;"	f	class:cv::Rect_
operator CvScalar	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::operator CvScalar() const$/;"	f	class:cv::Vec
operator CvScalar	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::operator CvScalar() const$/;"	f	class:cv::Scalar_
operator CvSize	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::operator CvSize() const$/;"	f	class:cv::Size_
operator CvSize2D32f	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::operator CvSize2D32f() const$/;"	f	class:cv::Size_
operator CvSlice	/usr/local/include/opencv2/core/operations.hpp	/^inline Range::operator CvSlice() const$/;"	f	class:cv::Range
operator CvSparseMat*	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::operator CvSparseMat*() const$/;"	f	class:cv::SparseMat_
operator CvTermCriteria	/usr/local/include/opencv2/core/operations.hpp	/^inline TermCriteria::operator CvTermCriteria() const$/;"	f	class:cv::TermCriteria
operator DevMem2D_<T>	/usr/local/include/opencv2/core/gpumat.hpp	/^    template <class T> inline GpuMat::operator DevMem2D_<T>() const$/;"	f	class:cv::gpu::GpuMat
operator IplImage*	/usr/local/include/opencv2/legacy/legacy.hpp	/^    operator IplImage* () { return image; }$/;"	f	class:CvImage
operator Mat	/usr/local/include/opencv2/core/mat.hpp	/^    operator Mat() const$/;"	f	class:cv::MatExpr
operator Mat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::operator Mat() const$/;"	f	class:cv::ocl::oclMat
operator Mat_<T2>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> template<typename T2> inline Mat_<_Tp>::operator Mat_<T2>() const$/;"	f	class:cv::Mat_
operator Mat_<_Tp>	/usr/local/include/opencv2/core/mat.hpp	/^    template<typename _Tp> operator Mat_<_Tp>() const$/;"	f	class:cv::MatExpr
operator Mat_<_Tp>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatCommaInitializer_<_Tp>::operator Mat_<_Tp>() const$/;"	f	class:cv::MatCommaInitializer_
operator Matx<T2, m, n>	/usr/local/include/opencv2/core/operations.hpp	/^inline Matx<_Tp, m, n>::operator Matx<T2, m, n>() const$/;"	f	class:cv::Matx
operator Matx<_Tp, m, n>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int m, int n> inline Mat::operator Matx<_Tp, m, n>() const$/;"	f	class:cv::Mat
operator Matx<typename DataType<_Tp>::channel_type, m, n>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> template<int m, int n> inline Mat_<_Tp>::operator Matx<typename DataType<_Tp>::channel_type, m, n>() const$/;"	f	class:cv::Mat_
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::std::tr1::tuple<T1, T2> >	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator Point3_<_Tp2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Point3_<_Tp>::operator Point3_<_Tp2>() const$/;"	f	class:cv::Point3_
operator Point_<_Tp2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Point_<_Tp>::operator Point_<_Tp2>() const$/;"	f	class:cv::Point_
operator PtrStep<T>	/usr/local/include/opencv2/core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStep<T>() const$/;"	f	class:cv::gpu::GpuMat
operator PtrStepSz<T>	/usr/local/include/opencv2/core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStepSz<T>() const$/;"	f	class:cv::gpu::GpuMat
operator PtrStep_<T>	/usr/local/include/opencv2/core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStep_<T>() const$/;"	f	class:cv::gpu::GpuMat
operator Rect_<_Tp2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Rect_<_Tp>::operator Rect_<_Tp2>() const$/;"	f	class:cv::Rect_
operator Scalar_<T2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename T2> inline Scalar_<_Tp>::operator Scalar_<T2>() const$/;"	f	class:cv::Scalar_
operator Size_<_Tp2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Size_<_Tp>::operator Size_<_Tp2>() const$/;"	f	class:cv::Size_
operator T*	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ operator       T*()       { return data; }$/;"	f	struct:cv::gpu::DevPtr
operator T*	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator T*()$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator Vec<T2, cn>	/usr/local/include/opencv2/core/operations.hpp	/^inline Vec<_Tp, cn>::operator Vec<T2, cn>() const$/;"	f	class:cv::Vec
operator Vec<_Tp, 2>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator Vec<_Tp, 2>() const$/;"	f	class:cv::Point_
operator Vec<_Tp, 3>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::operator Vec<_Tp, 3>() const$/;"	f	class:cv::Point3_
operator Vec<_Tp, n>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp, int n> inline Mat::operator Vec<_Tp, n>() const$/;"	f	class:cv::Mat
operator Vec<typename DataType<_Tp>::channel_type, n>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> template<int n> inline Mat_<_Tp>::operator Vec<typename DataType<_Tp>::channel_type, n>() const$/;"	f	class:cv::Mat_
operator []	/usr/local/include/opencv2/core/mat.hpp	/^inline const int& Mat::MSize::operator[](int i) const { return p[i]; }$/;"	f	class:cv::Mat::MSize
operator []	/usr/local/include/opencv2/core/mat.hpp	/^inline const size_t& Mat::MStep::operator[](int i) const { return p[i]; }$/;"	f	class:cv::Mat::MStep
operator []	/usr/local/include/opencv2/core/mat.hpp	/^inline int& Mat::MSize::operator[](int i) { return p[i]; }$/;"	f	class:cv::Mat::MSize
operator []	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t& Mat::MStep::operator[](int i) { return p[i]; }$/;"	f	class:cv::Mat::MStep
operator []	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* MatConstIterator::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator
operator []	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp MatConstIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator_
operator []	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& MatIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatIterator_
operator []	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat_<_Tp>::operator [](int y)$/;"	f	class:cv::Mat_
operator []	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat_<_Tp>::operator [](int y) const$/;"	f	class:cv::Mat_
operator []	/usr/local/include/opencv2/core/operations.hpp	/^    _Tp& operator [] (size_t i) { CV_DbgAssert( i < size() ); return hdr.data[i]; }$/;"	f	class:cv::Vector
operator []	/usr/local/include/opencv2/core/operations.hpp	/^    const _Tp& operator [] (size_t i) const { CV_DbgAssert( i < size() ); return hdr.data[i]; }$/;"	f	class:cv::Vector
operator []	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline _Tp& Vec<_Tp, cn>::operator [](int i)$/;"	f	class:cv::Vec
operator []	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline const _Tp& Vec<_Tp, cn>::operator [](int i) const$/;"	f	class:cv::Vec
operator []	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::operator [](int idx)$/;"	f	class:cv::Seq
operator []	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::operator [](int idx) const$/;"	f	class:cv::Seq
operator []	/usr/local/include/opencv2/flann/dist.h	/^    T operator[](int)$/;"	f	struct:cvflann::ZeroIterator
operator []	/usr/local/include/opencv2/flann/matrix.h	/^    T* operator[](size_t index) const$/;"	f	class:cvflann::Matrix
operator ^=	/usr/local/include/opencv2/core/mat.hpp	/^operator ^= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator ^=	/usr/local/include/opencv2/core/mat.hpp	/^operator ^= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator ^=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator ^= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator ^=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator ^= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator _Tp*	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::operator _Tp* ()$/;"	f	class:cv::AutoBuffer
operator _Tp*	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::operator _Tp* () { return obj; }$/;"	f	class:cv::Ptr
operator bool	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        inline operator bool() const { return val_; }$/;"	f	class:cvtest::Inverse
operator bool	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        inline operator bool() const { return val_; }$/;"	f	class:cvtest::UseRoi
operator bool	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	/usr/local/include/opencv2/ts/ts_gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator const CvMat*	/usr/local/include/opencv2/legacy/legacy.hpp	/^    operator const CvMat* () const { return matrix; }$/;"	f	class:CvMatrix
operator const IplImage*	/usr/local/include/opencv2/legacy/legacy.hpp	/^    operator const IplImage* () const { return image; }$/;"	f	class:CvImage
operator const T*	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ operator const T*() const { return data; }$/;"	f	struct:cv::gpu::DevPtr
operator const T*	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const T*() const$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator const _Tp*	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::operator const _Tp* () const$/;"	f	class:cv::AutoBuffer
operator const _Tp*	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::operator const _Tp*() const { return obj; }$/;"	f	class:cv::Ptr
operator const double*	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const double*() const$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator const int*	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MSize::operator const int*() const { return p; }$/;"	f	class:cv::Mat::MSize
operator double	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::operator double() const$/;"	f	class:cv::FileNode
operator double	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator double()$/;"	f	class:cv::RNG
operator double*	/usr/local/include/opencv2/gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator double*()$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator float	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::operator float() const$/;"	f	class:cv::FileNode
operator float	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator float() { return next()*2.3283064365386962890625e-10f; }$/;"	f	class:cv::RNG
operator float	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::gpu::device::L1Dist
operator float	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::gpu::device::L2Dist
operator int	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::operator int() const$/;"	f	class:cv::FileNode
operator int	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator int() { return (int)next(); }$/;"	f	class:cv::RNG
operator int	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::gpu::device::HammingDist
operator int	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::gpu::device::L1Dist
operator int	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    operator int() const {return _type;}$/;"	f	class:perf::MatType
operator schar	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator schar() { return (schar)next(); }$/;"	f	class:cv::RNG
operator short	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator short() { return (short)next(); }$/;"	f	class:cv::RNG
operator size_t	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::MStep::operator size_t() const$/;"	f	class:cv::Mat::MStep
operator string	/usr/local/include/opencv2/core/operations.hpp	/^inline FileNode::operator string() const$/;"	f	class:cv::FileNode
operator uchar	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator uchar() { return (uchar)next(); }$/;"	f	class:cv::RNG
operator unsigned	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator unsigned() { return next(); }$/;"	f	class:cv::RNG
operator ushort	/usr/local/include/opencv2/core/operations.hpp	/^inline RNG::operator ushort() { return (ushort)next(); }$/;"	f	class:cv::RNG
operator vector<_Tp>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat::operator vector<_Tp>() const$/;"	f	class:cv::Mat
operator vector<_Tp>	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::operator vector<_Tp>() const$/;"	f	class:cv::Mat_
operator vector<_Tp>	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::operator vector<_Tp>() const$/;"	f	class:cv::Seq
operator |	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator | (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator |=	/usr/local/include/opencv2/core/mat.hpp	/^operator |= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator |=	/usr/local/include/opencv2/core/mat.hpp	/^operator |= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator |=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator |= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator |=	/usr/local/include/opencv2/core/mat.hpp	/^static inline Mat& operator |= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator |=	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator |= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
optFlowEstimator	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> optFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
optFlowEstimator	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::MotionInpainter
optFlowEstimator_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
optFlowEstimator_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::MotionInpainter
optFlowEstimator_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    gpu::PyrLKOpticalFlow optFlowEstimator_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
optimize	/usr/local/include/opencv2/flann/lsh_table.h	/^    void optimize()$/;"	f	class:cvflann::lsh::LshTable
optimizeKDTree	/usr/local/include/opencv2/flann/autotuned_index.h	/^    void optimizeKDTree(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeKMeans	/usr/local/include/opencv2/flann/autotuned_index.h	/^    void optimizeKMeans(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeSimplexDownhill	/usr/local/include/opencv2/flann/simplex_downhill.h	/^float optimizeSimplexDownhill(T* points, int n, F func, float* vals = NULL )$/;"	f	namespace:cvflann
optional_mask	/usr/local/include/opencv2/ts/ts.hpp	/^    bool optional_mask;$/;"	m	class:cvtest::ArrayTest
orb	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Ptr<ORB> orb;$/;"	m	class:cv::detail::OrbFeaturesFinder
ord	/usr/local/include/opencv2/ml/ml.hpp	/^        ord;$/;"	m	union:CvDTreeSplit::__anon291	typeref:struct:CvDTreeSplit::__anon291::__anon292
ord_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
order	/usr/local/include/opencv2/flann/dist.h	/^    int order;$/;"	m	struct:cvflann::MinkowskiDistance
orientationNormalized	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool orientationNormalized; \/\/true if the orientation is normalized, false otherwise$/;"	m	class:cv::FREAK
orientationPairs	/usr/local/include/opencv2/features2d/features2d.hpp	/^    OrientationPair orientationPairs[NB_ORIENPAIRS];$/;"	m	class:cv::FREAK
origWinSize	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        Size origWinSize;$/;"	m	class:cv::CascadeClassifier::Data
orig_response	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* orig_response;$/;"	m	class:CvBoost
orig_response	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* orig_response;$/;"	m	class:CvGBTrees
orig_window_size	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade
origin	/usr/local/include/opencv2/core/types_c.h	/^    CvPoint  origin;$/;"	m	struct:CvChain
origin	/usr/local/include/opencv2/core/types_c.h	/^    int  origin;            \/* 0 - top-left origin,$/;"	m	struct:_IplImage
origin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int origin() const { return image ? image->origin : 0; }$/;"	f	class:CvImage
original	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  CvMat *original;$/;"	m	struct:CvDataMatrixCode
original_num_classes	/usr/local/include/opencv2/legacy/legacy.hpp	/^    inline int original_num_classes() const { return original_num_classes_; }$/;"	f	class:cv::RTreeClassifier
original_num_classes_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int original_num_classes_;$/;"	m	class:cv::RTreeClassifier
original_reporter_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
other	/usr/local/include/opencv2/core/core.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	t	class:cv::Allocator::rebind
out	/usr/local/include/opencv2/contrib/contrib.hpp	/^        std::ostream* out;$/;"	m	class:cv::SpinImageModel
out	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat out;$/;"	m	class:cv::gpu::StereoBeliefPropagation
out	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat out;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
out	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat out;$/;"	m	class:cv::ocl::StereoBeliefPropagation
outer_iterations	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int outer_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
outliers	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    unsigned int outliers;$/;"	m	struct:perf::performance_metrics
outputData	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    SizeVector outputData;$/;"	m	class:perf::TestBase
output_buf	/usr/local/include/opencv2/ts/ts.hpp	/^    std::string output_buf[MAX_IDX];$/;"	m	class:cvtest::TS
owner_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:std::tr1::MutexBase
p	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:Cv3dTracker2dTrackedObject
p	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:Cv3dTrackerTrackedObject
p	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams
p1	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree
p11_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat p11_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
p12_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat p12_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
p2	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree
p21_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat p21_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
p22_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat p22_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
pBD	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobDetector*         pBD;           \/* Selected blob detector module. 					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBT	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTracker*          pBT;           \/* Selected blob tracking module.					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTA	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackAnalysis*    pBTA;          \/* Selected blob trajectory analysis module.                             *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTGen	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackGen*         pBTGen;        \/* Selected blob trajectory generator.				    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTPP	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobTrackPostProc*    pBTPP;         \/* Selected blob trajectory postprocessing module.			    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBlobSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack
pComment	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam
pDouble	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam
pFG	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    CvFGDetector*           pFG;           \/* FGDetector module. If this field is NULL the Process FG mask is used. *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pFloat	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam
pInt	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam
pName	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam
pStr	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam
pairwise_matches_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    const MatchesInfo *pairwise_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
pairwise_matches_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<detail::MatchesInfo> pairwise_matches_;$/;"	m	class:cv::Stitcher
panoConfidenceThresh	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double panoConfidenceThresh() const { return conf_thresh_; }$/;"	f	class:cv::Stitcher
parallel_do	/usr/local/include/opencv2/core/internal.hpp	/^    void parallel_do( Iterator first, Iterator last, const Body& body )$/;"	f	namespace:cv
parallel_for	/usr/local/include/opencv2/core/internal.hpp	/^    void parallel_for( const BlockedRange& range, const Body& body )$/;"	f	namespace:cv
parallel_reduce	/usr/local/include/opencv2/core/internal.hpp	/^    void parallel_reduce( const BlockedRange& range, Body& body )$/;"	f	namespace:cv
param	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> param;$/;"	m	class:CvLevMarq
param	/usr/local/include/opencv2/legacy/compat.hpp	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState
param_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
parameter_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	/usr/local/include/opencv2/ts/ts_gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameters	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        Parameters parameters;$/;"	m	class:DetectionBasedTracker
params	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams params;$/;"	m	class:cv::CvFeatureTracker
params	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvHybridTrackerParams params;$/;"	m	class:cv::CvHybridTracker
params	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMeanShiftTrackerParams params;$/;"	m	class:cv::CvMeanShiftTracker
params	/usr/local/include/opencv2/core/operations.hpp	/^    vector<int> params;$/;"	m	struct:cv::Formatted
params	/usr/local/include/opencv2/features2d/features2d.hpp	/^  Params params;$/;"	m	class:cv::SimpleBlobDetector
params	/usr/local/include/opencv2/flann/autotuned_index.h	/^        IndexParams params;$/;"	m	struct:cvflann::AutotunedIndex::CostData
params	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    IndexParams params;$/;"	m	class:cvflann::HierarchicalClusteringIndex
params	/usr/local/include/opencv2/flann/miniflann.hpp	/^    void* params;$/;"	m	struct:cv::flann::IndexParams
params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel
params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvGaussBGStatModelParams   params;$/;"	m	struct:CvGaussBGModel
params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Params params;$/;"	m	class:cv::FernDescriptorMatcher
params	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Params params;$/;"	m	class:cv::OneWayDescriptorMatcher
params	/usr/local/include/opencv2/ml/ml.hpp	/^    CvANN_MLP_TrainParams params;$/;"	m	class:CvANN_MLP
params	/usr/local/include/opencv2/ml/ml.hpp	/^    CvBoostParams params;$/;"	m	class:CvBoost
params	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData
params	/usr/local/include/opencv2/ml/ml.hpp	/^    CvGBTreesParams params;$/;"	m	class:CvGBTrees
params	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMParams params;$/;"	m	class:CvSVM
params	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvSVMParams* params;$/;"	m	class:CvSVMSolver
params	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel
params	/usr/local/include/opencv2/ts/ts.hpp	/^    TSParams params;$/;"	m	class:cvtest::TS
parasolCells_beta	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parasolCells_k	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parasolCells_tau	/usr/local/include/opencv2/contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parent	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	v
parent	/usr/local/include/opencv2/core/types_c.h	/^    struct  CvMemStorage* parent; \/* We get new blocks from parent as needed. *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage
parent	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode
parent	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int parent;$/;"	m	struct:CvHaarStageClassifier
parent	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    std::vector<int> parent;$/;"	m	class:cv::detail::DisjointSets
parentView	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) UIView* parentView;$/;"	v
part_scores	/usr/local/include/opencv2/gpu/gpu.hpp	/^   vector<double> part_scores[4];$/;"	m	struct:cv::gpu::HOGConfidence
partial_regex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
partition	/usr/local/include/opencv2/core/operations.hpp	/^partition( const vector<_Tp>& _vec, vector<int>& labels,$/;"	f	namespace:cv
passed	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
patchGenerator	/usr/local/include/opencv2/legacy/legacy.hpp	/^        PatchGenerator patchGenerator;$/;"	m	class:cv::FernDescriptorMatcher::Params
patchSize	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int patchSize;$/;"	m	class:cv::ORB
patchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^        Size patchSize;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
patchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int patchSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
patchSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    Size patchSize;$/;"	m	class:cv::FernClassifier
patchSize_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int patchSize_;$/;"	m	class:cv::gpu::ORB_GPU
path_	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    std::string path_;$/;"	m	class:cv::videostab::VideoFileSource
pathname_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string pathname_;$/;"	m	class:testing::internal::FilePath
pattern	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
patternLookup	/usr/local/include/opencv2/features2d/features2d.hpp	/^    vector<PatternPoint> patternLookup; \/\/ look-up table for the pattern points (position+sigma of all points at all scales and orientation)$/;"	m	class:cv::FREAK
patternPoints_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    BriskPatternPoint* patternPoints_;     \/\/[i][rotation][scale]$/;"	m	class:cv::BRISK
patternScale	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double patternScale; \/\/scaling of the pattern$/;"	m	class:cv::FREAK
patternScale0	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double patternScale0;$/;"	m	class:cv::FREAK
patternSizes	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int patternSizes[NB_SCALES]; \/\/ size of the pattern at a specific scale (used to check if a point is within image boundaries)$/;"	m	class:cv::FREAK
pattern_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pattern_;$/;"	m	class:cv::gpu::ORB_GPU
pattern_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
pcaFilename	/usr/local/include/opencv2/legacy/legacy.hpp	/^        string pcaFilename;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
penalization	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      penalization;$/;"	m	class:cv::StereoVar
perf	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^namespace perf$/;"	n
perf	/usr/local/include/opencv2/ts/ts_perf.hpp	/^namespace perf$/;"	n
perform_morphing	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int perform_morphing;     \/\/ Number of erode-dilate-erode foreground-blob cleanup iterations.$/;"	m	struct:cv::gpu::FGDStatModel::Params
perform_morphing	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int    perform_morphing;	\/* Number of erode-dilate-erode foreground-blob cleanup iterations.						*\/$/;"	m	struct:CvFGDStatModelParams
performance_metrics	/usr/local/include/opencv2/ts/ts_perf.hpp	/^typedef struct CV_EXPORTS performance_metrics$/;"	s	namespace:perf
performance_metrics	/usr/local/include/opencv2/ts/ts_perf.hpp	/^} performance_metrics;$/;"	t	namespace:perf	typeref:struct:perf::performance_metrics
perspectiveProjection_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    bool perspectiveProjection_;$/;"	m	class:cv::GlCamera
phi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float phi;$/;"	m	class:cv::CvAffinePose
phiMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double phiMin, phiMax;$/;"	m	class:cv::PatchGenerator
phiMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double phiMin, phiMax;$/;"	m	class:cv::PatchGenerator
photoreceptorsLocalAdaptationSensitivity	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
photoreceptorsSpatialConstant	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
photoreceptorsTemporalConstant	/usr/local/include/opencv2/contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
pitch_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double pitch_;$/;"	m	class:cv::GlCamera
pivot	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^        int pivot;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
pivot	/usr/local/include/opencv2/flann/kmeans_index.h	/^        DistanceType* pivot;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
pix_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int pix_size() const { return image ? ((image->depth & 255)>>3)*image->nChannels : 0; }$/;"	f	class:CvImage
pix_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int pix_size() const { return matrix ? CV_ELEM_SIZE(matrix->type) : 0; }$/;"	f	class:CvMatrix
pixel	/usr/local/include/opencv2/contrib/contrib.hpp	/^            pixel() { u = v = 0; a = 0.; }$/;"	f	struct:cv::LogPolar_Adjacent::pixel
pixel	/usr/local/include/opencv2/contrib/contrib.hpp	/^        struct pixel$/;"	s	class:cv::LogPolar_Adjacent
pixel_stat	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel
planeSplit	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeIndex
planeSplit	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeSingleIndex
plus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ plus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::plus
plus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ plus(const plus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::plus
plus	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct plus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
plus_delta	/usr/local/include/opencv2/core/types_c.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator
plus_step	/usr/local/include/opencv2/core/types_c.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator
pointCount	/usr/local/include/opencv2/features2d/features2d.hpp	/^        int pointCount;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
pointer	/usr/local/include/opencv2/core/core.hpp	/^    typedef value_type* pointer;$/;"	t	class:cv::Allocator
pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
points	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<Point3f> points;$/;"	m	class:cv::Octree
points	/usr/local/include/opencv2/contrib/contrib.hpp	/^    std::vector<CvFuzzyPoint> points;$/;"	m	class:CvFuzzyCurve
points	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvBox2D) cvFitEllipse2( const CvArr* points );$/;"	v
points	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f* points[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
pointsGood_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
pointsPrevGood_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
pointsPrev_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
points_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    unsigned int points_;                 \/\/ total number of collocation points$/;"	m	class:cv::BRISK
points_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
policy	/usr/local/include/opencv2/flann/any.h	/^    anyimpl::base_any_policy* policy;$/;"	m	struct:cvflann::any
polyN	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int polyN;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
polySigma	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double polySigma;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
poly_n	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW int      poly_n;$/;"	m	class:cv::StereoVar
poly_sigma	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW double   poly_sigma;$/;"	m	class:cv::StereoVar
pool	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    PooledAllocator pool;$/;"	m	class:cvflann::HierarchicalClusteringIndex
pool_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeIndex
pool_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeSingleIndex
pool_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KMeansIndex
popMin	/usr/local/include/opencv2/flann/heap.h	/^    bool popMin(T& value)$/;"	f	class:cvflann::Heap
pop_back	/usr/local/include/opencv2/core/operations.hpp	/^    Vector<_Tp>& pop_back()$/;"	f	class:cv::Vector
pop_back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_back()$/;"	f	class:cv::Seq
pop_back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_back(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
pop_front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_front()$/;"	f	class:cv::Seq
pop_front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_front(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
popcnt32	/usr/local/include/opencv2/flann/dist.h	/^    unsigned int popcnt32(uint32_t n) const$/;"	f	struct:cvflann::Hamming2
popcnt64	/usr/local/include/opencv2/flann/dist.h	/^    unsigned int popcnt64(uint64_t n) const$/;"	f	struct:cvflann::Hamming2
portion	/usr/local/include/opencv2/ml/ml.hpp	/^        float portion;$/;"	m	union:CvTrainTestSplit::__anon299
pos	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Point MatConstIterator_<_Tp>::pos() const$/;"	f	class:cv::MatConstIterator_
pos	/usr/local/include/opencv2/core/operations.hpp	/^inline Point LineIterator::pos() const$/;"	f	class:cv::LineIterator
pos_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Point3d pos_;$/;"	m	class:cv::GlCamera
poseCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int poseCount;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
posit_object	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	v
posix	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
posteriors	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<float> posteriors;$/;"	m	class:cv::FernClassifier
posteriors2_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar **posteriors2_;     \/\/ 16-bytes aligned posteriors$/;"	m	class:cv::RandomizedTree
posteriors_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float **posteriors_;        \/\/ 16-bytes aligned posteriors$/;"	m	class:cv::RandomizedTree
posteriors_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    mutable uchar **posteriors_;$/;"	m	class:cv::RTreeClassifier
ppFaceTracker	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseFaceTracker(CvFaceTracker** ppFaceTracker);$/;"	v
ppx	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    double ppx; \/\/ Principal point X$/;"	m	struct:cv::detail::CameraParams
ppy	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    double ppy; \/\/ Principal point Y$/;"	m	struct:cv::detail::CameraParams
preFilterCap	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int preFilterCap;$/;"	m	class:cv::StereoSGBM
preFilterCap	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int preFilterCap; \/\/ the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]$/;"	m	struct:CvStereoBMState
preFilterSize	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int preFilterSize; \/\/ averaging window size: ~5x5..21x21$/;"	m	struct:CvStereoBMState
preFilterType	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int preFilterType; \/\/ =CV_STEREO_BM_NORMALIZED_RESPONSE now$/;"	m	struct:CvStereoBMState
preFilteredImg0	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvMat* preFilteredImg0;$/;"	m	struct:CvStereoBMState
preFilteredImg1	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvMat* preFilteredImg1;$/;"	m	struct:CvStereoBMState
preProcessedFrame_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    Mat preProcessedFrame_;$/;"	m	class:cv::videostab::StabilizerBase
precision	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int precision;$/;"	m	class:cv::of2::FabMapLUT
pred	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const Predicate pred;$/;"	m	struct:cv::gpu::device::binary_negate
pred	/usr/local/include/opencv2/gpu/device/functional.hpp	/^      const Predicate pred;$/;"	m	struct:cv::gpu::device::unary_negate
preset	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int preset;$/;"	m	class:cv::gpu::StereoBM_GPU
preset	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int preset;$/;"	m	class:cv::ocl::StereoBM_OCL
prev	/usr/local/include/opencv2/core/types_c.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
prev	/usr/local/include/opencv2/core/types_c.h	/^    struct CvSeqBlock*  prev; \/* Previous sequence block.                   *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
prev	/usr/local/include/opencv2/core/types_c.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
prev	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow
prevErrNorm	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
prevErrNorm	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double prevErrNorm, errNorm;$/;"	m	class:cv::LevMarqSparse
prevP	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CvMat* prevP; \/\/current already accepted parameter.$/;"	m	class:cv::LevMarqSparse
prevParam	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> prevParam;$/;"	m	class:CvLevMarq
prevPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    vector<GpuMat> prevPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
prevPyr_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            vector<oclMat> prevPyr_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
prevTrainCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int prevTrainCount;$/;"	m	class:cv::FernDescriptorMatcher
prevTrainCount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int prevTrainCount;$/;"	m	class:cv::OneWayDescriptorMatcher
prev_center	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Point2d prev_center;$/;"	m	class:cv::CvFeatureTracker
prev_center	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Point2f prev_center;$/;"	m	class:cv::CvHybridTracker
prev_center	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Point2f prev_center;$/;"	m	class:cv::CvMeanShiftTracker
prev_frame	/usr/local/include/opencv2/legacy/legacy.hpp	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel
prev_image	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat prev_image;$/;"	m	class:cv::CvFeatureTracker
prev_image_bw	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat prev_image_bw;$/;"	m	class:cv::CvFeatureTracker
prev_proj	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Mat prev_proj;$/;"	m	class:cv::CvHybridTracker
prev_trackbox	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    RotatedRect prev_trackbox;$/;"	m	class:cv::CvMeanShiftTracker
prev_trackwindow	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Rect prev_trackwindow;$/;"	m	class:cv::CvFeatureTracker
prev_trackwindow	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Rect prev_trackwindow;$/;"	m	class:cv::CvMeanShiftTracker
prev_window	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    Rect prev_window;$/;"	m	class:cv::CvHybridTracker
principal_point	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:Cv3dTrackerCameraInfo
principal_point	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f principal_point;$/;"	m	struct:Cv3dTrackerCameraIntrinsics
print	/usr/local/include/opencv2/flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(*src); }$/;"	f	struct:cvflann::anyimpl::big_any_policy
print	/usr/local/include/opencv2/flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
print	/usr/local/include/opencv2/flann/any.h	/^template<> inline void big_any_policy<flann_algorithm_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	/usr/local/include/opencv2/flann/any.h	/^template<> inline void big_any_policy<flann_centers_init_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	/usr/local/include/opencv2/videostab/log.hpp	/^    virtual void print(const char * \/*format*\/, ...) {}$/;"	f	class:cv::videostab::NullLog
printFuncAttrib	/usr/local/include/opencv2/gpu/device/funcattrib.hpp	/^    void printFuncAttrib(Func& func)$/;"	f	namespace:cv::gpu::device
print_params	/usr/local/include/opencv2/flann/params.h	/^inline void print_params(const IndexParams& params)$/;"	f	namespace:cvflann
priorMatches	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<IMatch> priorMatches;$/;"	m	class:cv::of2::FabMap
priors	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData
priors	/usr/local/include/opencv2/ml/ml.hpp	/^    const float* priors;$/;"	m	struct:CvDTreeParams
priors_mult	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData
prob	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float prob; \/\/ probability of success$/;"	m	struct:cv::videostab::RansacParams
probs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const CvMat* probs;$/;"	m	struct:CvEMParams
probs	/usr/local/include/opencv2/legacy/legacy.hpp	/^    cv::Mat probs;$/;"	m	class:CvEM
probsHdr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat probsHdr;$/;"	m	class:CvEM
process	/usr/local/include/opencv2/core/mat.hpp	/^process( const Mat_<T1>& m1, Mat_<T2>& m2, Op op )$/;"	f	namespace:cv
process	/usr/local/include/opencv2/core/mat.hpp	/^process( const Mat_<T1>& m1, const Mat_<T2>& m2, Mat_<T3>& m3, Op op )$/;"	f	namespace:cv
process	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  Ptr<QuantizedPyramid> process(const Mat& src,$/;"	f	class:cv::linemod::Modality
processNoiseCov	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat processNoiseCov;    \/\/!< process noise covariance matrix (Q)$/;"	m	class:cv::KalmanFilter
process_noise_cov	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman
productsum	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** productsum;$/;"	m	class:CvNormalBayesClassifier
progress	/usr/local/include/opencv2/ts/ts.hpp	/^    int progress;$/;"	m	class:cvtest::BadArgTest
project1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ project1st():binary_function<T1,T2,T1>(){}$/;"	f	struct:cv::gpu::device::project1st
project1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ project1st(const project1st& other):binary_function<T1,T2,T1>(){}$/;"	f	struct:cv::gpu::device::project1st
project1st	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T1, typename T2> struct project1st : binary_function<T1, T2, T1>$/;"	s	namespace:cv::gpu::device
project2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ project2nd():binary_function<T1,T2,T2>(){}$/;"	f	struct:cv::gpu::device::project2nd
project2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ project2nd(const project2nd& other):binary_function<T1,T2,T2>(){}$/;"	f	struct:cv::gpu::device::project2nd
project2nd	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T1, typename T2> struct project2nd : binary_function<T1, T2, T2>$/;"	s	namespace:cv::gpu::device
projectionMatrix_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Mat projectionMatrix_;$/;"	m	class:cv::GlCamera
projector_	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    P projector_;$/;"	m	class:cv::detail::RotationWarperBase
proto2	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace proto2 { class Message; }$/;"	n
pruned_tree_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int pruned_tree_idx;$/;"	m	class:CvDTree
pt	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW Point2f pt; \/\/!< coordinates of the keypoints$/;"	m	class:cv::KeyPoint
pt	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        Point2f pt;$/;"	m	struct:cv::Subdiv2D::Vertex
pt	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        int pt[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
pt	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader
pt	/usr/local/include/opencv2/legacy/compat.hpp	/^    CvPoint pt;$/;"	m	struct:CvStarKeypoint
pt	/usr/local/include/opencv2/legacy/compat.hpp	/^    CvPoint2D32f pt;$/;"	m	struct:CvSURFPoint
ptemp_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    mutable unsigned short *ptemp_;$/;"	m	class:cv::RTreeClassifier
ptr	/usr/local/include/opencv2/core/core_c.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator
ptr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__       T* ptr(int y = 0)       { return (      T*)( (      char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::gpu::PtrStep
ptr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ T* ptr(int y = 0) { return PtrStep<T>::data + y * PtrStep<T>::step; }$/;"	f	struct:cv::gpu::PtrElemStep_
ptr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T* ptr(int y = 0) const { return (const T*)( (const char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::gpu::PtrStep
ptr	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T* ptr(int y = 0) const { return PtrStep<T>::data + y * PtrStep<T>::step; }$/;"	f	struct:cv::gpu::PtrElemStep_
ptr	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline const uchar* GpuMat::ptr(int y) const$/;"	f	class:cv::gpu::GpuMat
ptr	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline uchar* GpuMat::ptr(int y)$/;"	f	class:cv::gpu::GpuMat
ptr	/usr/local/include/opencv2/core/gpumat.hpp	/^    template<typename _Tp> inline _Tp* GpuMat::ptr(int y)$/;"	f	class:cv::gpu::GpuMat
ptr	/usr/local/include/opencv2/core/gpumat.hpp	/^    template<typename _Tp> inline const _Tp* GpuMat::ptr(int y) const$/;"	f	class:cv::gpu::GpuMat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline const uchar* Mat::ptr(const int* idx) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline const uchar* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline const uchar* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline const uchar* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* Mat::ptr(const int* idx)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^inline uchar* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Ptr<_Tp2> Ptr<_Tp>::ptr()$/;"	f	class:cv::Ptr
ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline const Ptr<_Tp2> Ptr<_Tp>::ptr() const$/;"	f	class:cv::Ptr
ptr	/usr/local/include/opencv2/core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon46
ptr	/usr/local/include/opencv2/core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon49
ptr	/usr/local/include/opencv2/core/types_c.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D
ptr	/usr/local/include/opencv2/core/types_c.h	/^    char* ptr;$/;"	m	struct:CvString
ptr	/usr/local/include/opencv2/core/types_c.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator
ptr	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const Ptr2D ptr;$/;"	m	struct:cv::gpu::device::BorderReader
ptr	/usr/local/include/opencv2/ml/ml.hpp	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon283
ptr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline const uchar *oclMat::ptr(int y) const$/;"	f	class:cv::ocl::oclMat
ptr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline uchar *oclMat::ptr(int y)$/;"	f	class:cv::ocl::oclMat
ptr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        template<typename _Tp> inline _Tp *oclMat::ptr(int y)$/;"	f	class:cv::ocl::oclMat
ptr	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        template<typename _Tp> inline const _Tp *oclMat::ptr(int y) const$/;"	f	class:cv::ocl::oclMat
ptrLeft	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* ptrLeft;$/;"	m	struct:CvStereoGCState
ptrRight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* ptrRight;$/;"	m	struct:CvStereoGCState
ptr_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
pushBack	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void pushBack(Ptr<InpainterBase> inpainter) { inpainters_.push_back(inpainter); }$/;"	f	class:cv::videostab::InpaintingPipeline
push_back	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline void Mat::push_back(const Mat_<_Tp>& m)$/;"	f	class:cv::Mat
push_back	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline void Mat::push_back(const _Tp& elem)$/;"	f	class:cv::Mat
push_back	/usr/local/include/opencv2/core/operations.hpp	/^    Vector<_Tp>& push_back(const _Tp& elem)$/;"	f	class:cv::Vector
push_back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp& elem)$/;"	f	class:cv::Seq
push_back	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
push_front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp& elem)$/;"	f	class:cv::Seq
push_front	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
pyrLevel_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyrScale	/usr/local/include/opencv2/contrib/contrib.hpp	/^        CV_PROP_RW double   pyrScale;$/;"	m	class:cv::StereoVar
pyrScale	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double pyrScale;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramid0_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid0_, pyramid1_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramid1_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid0_, pyramid1_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramidLevels	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int pyramidLevels() const { return pyramid_levels; }$/;"	f	class:cv::linemod::Detector
pyramid_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid_;$/;"	m	class:cv::gpu::ImagePyramid
pyramid_level	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int pyramid_level;$/;"	m	struct:cv::linemod::Template
pyramid_levels	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int pyramid_levels;$/;"	m	class:cv::linemod::Detector
q	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
q	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
q	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
q	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        int q;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
qangle	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
qangle	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat grad, qangle;$/;"	m	struct:cv::ocl::HOGDescriptor
qangle_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
qedges	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<QuadEdge> qedges;$/;"	m	class:cv::Subdiv2D
quad	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera
quality	/usr/local/include/opencv2/ml/ml.hpp	/^    float quality;$/;"	m	struct:CvDTreeSplit
qualityLevel	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double qualityLevel;$/;"	m	class:cv::GFTTDetector
qualityLevel	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double qualityLevel;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
quantizationLevels	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int quantizationLevels;$/;"	m	class:cv::gpu::GMG_GPU
quantizationLevels	/usr/local/include/opencv2/video/background_segm.hpp	/^    int     quantizationLevels;$/;"	m	class:cv::BackgroundSubtractorGMG
query	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float query( int* bin ) const$/;"	f	class:CvCamShiftTracker
queryIdx	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int queryIdx;    \/\/query index$/;"	m	struct:cv::of2::IMatch
queryIdx	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int queryIdx; \/\/ query descriptor index$/;"	m	struct:cv::DMatch
quiet_NaN	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type quiet_NaN() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
r	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
r	/usr/local/include/opencv2/ml/ml.hpp	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo
r	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon300
r	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
r2	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
r2	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
rSum_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
r_kinv	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float r_kinv[9];$/;"	m	struct:cv::detail::ProjectorBase
radius	/usr/local/include/opencv2/features2d/features2d.hpp	/^      double radius;$/;"	m	struct:cv::SimpleBlobDetector::Center
radius	/usr/local/include/opencv2/flann/kmeans_index.h	/^        DistanceType radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
radius	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType radius;$/;"	m	class:cvflann::RadiusResultSet
radius	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int radius;$/;"	m	class:cv::gpu::DisparityBilateralFilter
radius	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int radius;$/;"	m	class:cv::LDetector
radius	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int radius;            \/\/ R$/;"	m	class:cv::gpu::VIBE_GPU
radius	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::DeblurerBase
radius	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::InpainterBase
radius	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::MotionFilterBase
radius	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int radius() const { return radius_; }$/;"	f	class:cv::videostab::StabilizerBase
radiusSearch	/usr/local/include/opencv2/flann/flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	/usr/local/include/opencv2/flann/flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	/usr/local/include/opencv2/flann/flann.hpp	/^int Index_<T>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	/usr/local/include/opencv2/flann/flann.hpp	/^int Index_<T>::radiusSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	/usr/local/include/opencv2/flann/flann_base.hpp	/^    int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::Index
radiusSearch	/usr/local/include/opencv2/flann/nn_index.h	/^    virtual int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
radius_	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType radius_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
radius_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    int radius_;$/;"	m	class:cv::videostab::DeblurerBase
radius_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    double radius_;$/;"	m	class:cv::videostab::ColorInpainter
radius_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    int radius_;$/;"	m	class:cv::videostab::InpainterBase
radius_	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    int radius_;$/;"	m	class:cv::videostab::MotionFilterBase
radius_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    int radius_;$/;"	m	class:cv::videostab::StabilizerBase
randInt	/usr/local/include/opencv2/ts/ts.hpp	/^inline unsigned randInt( RNG& rng )$/;"	f	namespace:cvtest
randReal	/usr/local/include/opencv2/ts/ts.hpp	/^inline  double randReal( RNG& rng )$/;"	f	namespace:cvtest
randStates_	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat randStates_;$/;"	m	class:cv::gpu::VIBE_GPU
rand_double	/usr/local/include/opencv2/flann/random.h	/^inline double rand_double(double high = 1.0, double low = 0)$/;"	f	namespace:cvflann
rand_int	/usr/local/include/opencv2/flann/random.h	/^inline int rand_int(int high = RAND_MAX, int low = 0)$/;"	f	namespace:cvflann
randn	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randn(_Tp a, _Tp b)$/;"	f	class:cv::Matx
randomBlur	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool randomBlur;$/;"	m	class:cv::PatchGenerator
random_sample	/usr/local/include/opencv2/flann/sampling.h	/^Matrix<T> random_sample(Matrix<T>& srcMatrix, long size, bool remove = false)$/;"	f	namespace:cvflann
random_sample	/usr/local/include/opencv2/flann/sampling.h	/^Matrix<T> random_sample(const Matrix<T>& srcMatrix, size_t size)$/;"	f	namespace:cvflann
randu	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randu(_Tp a, _Tp b)$/;"	f	class:cv::Matx
rank_	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    std::vector<int> rank_;$/;"	m	class:cv::detail::DisjointSets
ransacParams	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    RansacParams ransacParams() const { return ransacParams_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
ransacParams_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    RansacParams ransacParams_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
read	/usr/local/include/opencv2/core/operations.hpp	/^    static void* read(CvFileStorage* fs, CvFileNode* n)$/;"	f	struct:cv::RTTIImpl
read	/usr/local/include/opencv2/core/operations.hpp	/^read( FileNodeIterator& it, vector<_Tp>& vec, size_t maxCount=(size_t)INT_MAX )$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^read( const FileNode& node, vector<_Tp>& vec, const vector<_Tp>& default_value=vector<_Tp>() )$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, bool& value, bool default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, double& value, double default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, float& value, float default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, int& value, int default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, schar& value, schar default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, short& value, short default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, string& value, const string& default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, uchar& value, uchar default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/operations.hpp	/^static inline void read(const FileNode& node, ushort& value, ushort default_value)$/;"	f	namespace:cv
read	/usr/local/include/opencv2/core/types_c.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo
read	/usr/local/include/opencv2/legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::read( const FileNode& )$/;"	f	class:cv::CalonderDescriptorExtractor
readRaw	/usr/local/include/opencv2/core/operations.hpp	/^inline void FileNode::readRaw( const string& fmt, uchar* vec, size_t len ) const$/;"	f	class:cv::FileNode
read_type	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T, shift>::vec_type read_type;$/;"	t	struct:cv::gpu::device::transform_detail::UnaryReadWriteTraits
read_type1	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T1, shift>::vec_type read_type1;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
read_type2	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T2, shift>::vec_type read_type2;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
reader	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	v
reader	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvPoint) cvReadChainPoint( CvChainPtReader* reader );$/;"	v
reader_	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    VideoCapture reader_;$/;"	m	class:cv::videostab::VideoFileSource
real_window_size	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade
realmaxdiff	/usr/local/include/opencv2/ts/ts.hpp	/^    double realmaxdiff;$/;"	m	struct:cvtest::MatComparator
rebind	/usr/local/include/opencv2/core/core.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	c	class:cv::Allocator
recentEdge	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int recentEdge;$/;"	m	class:cv::Subdiv2D
recordAssetWriter	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriter* recordAssetWriter;$/;"	v
recordAssetWriterInput	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInput* recordAssetWriterInput;$/;"	v
recordPixelBufferAdaptor	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInputPixelBufferAdaptor* recordPixelBufferAdaptor;$/;"	v
recordVideo	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL recordVideo;$/;"	v
rect	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp
rect	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        Rect rect;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
rect	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvRect rect;$/;"	m	struct:CvAvgComp
rect	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvRect rect;$/;"	m	struct:CvObjectDetection
rect	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon300
rectMap	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat*  rectMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter
reduce	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ T reduce(volatile T* buffer, T init, BinOp op)$/;"	f	struct:cv::gpu::device::Block
reduce	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void reduce(volatile T* buffer, BinOp op)$/;"	f	struct:cv::gpu::device::Block
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::gpu::device::reduce_detail::Generic
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::gpu::device::reduce_detail::GenericOptimized32
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            static __device__ void reduce(Pointer smem, Reference val, unsigned int tid, Op op)$/;"	f	struct:cv::gpu::device::reduce_detail::WarpOptimized
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::Generic
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::GenericOptimized32
reduce	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            static __device__ void reduce(KP skeys, KR key, VP svals, VR val, unsigned int tid, Cmp cmp)$/;"	f	struct:cv::gpu::device::reduce_key_val_detail::WarpOptimized
reduce	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    __device__ __forceinline__ void reduce(const thrust::tuple<P0, P1, P2, P3, P4, P5, P6, P7, P8, P9>& smem,$/;"	f	namespace:cv::gpu::device
reduce	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    __device__ __forceinline__ void reduce(volatile T* smem, T& val, unsigned int tid, const Op& op)$/;"	f	namespace:cv::gpu::device
reduce	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ T reduce(volatile T *ptr, BinOp op)$/;"	f	struct:cv::gpu::device::Warp
reduceAll	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::gpu::device::L1Dist
reduceAll	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::gpu::device::L2Dist
reduceAll	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::gpu::device::HammingDist
reduceAll	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::gpu::device::L1Dist
reduceIter	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::gpu::device::L1Dist
reduceIter	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::gpu::device::L2Dist
reduceIter	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::gpu::device::HammingDist
reduceIter	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::gpu::device::L1Dist
reduceKeyVal	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(const thrust::tuple<KP0, KP1, KP2, KP3, KP4, KP5, KP6, KP7, KP8, KP9>& skeys,$/;"	f	namespace:cv::gpu::device
reduceKeyVal	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(volatile K* skeys, K& key, volatile V* svals, V& val, unsigned int tid, const Cmp& cmp)$/;"	f	namespace:cv::gpu::device
reduceKeyVal	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    __device__ __forceinline__ void reduceKeyVal(volatile K* skeys, K& key,$/;"	f	namespace:cv::gpu::device
reduce_detail	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^    namespace reduce_detail$/;"	n	namespace:cv::gpu::device
reduce_key_val_detail	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^    namespace reduce_key_val_detail$/;"	n	namespace:cv::gpu::device
reduce_n	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void reduce_n(T* data, unsigned int n, BinOp op)$/;"	f	struct:cv::gpu::device::Block
ref	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	/usr/local/include/opencv2/core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat
refcount	/usr/local/include/opencv2/core/gpumat.hpp	/^        int* refcount;$/;"	m	class:cv::gpu::GpuMat
refcount	/usr/local/include/opencv2/core/operations.hpp	/^        int* refcount;$/;"	m	struct:cv::Vector::Hdr
refcount	/usr/local/include/opencv2/core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMat
refcount	/usr/local/include/opencv2/core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMatND
refcount	/usr/local/include/opencv2/core/types_c.h	/^    int* refcount;$/;"	m	struct:CvSparseMat
refcount	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int* refcount;$/;"	m	class:cv::gpu::CudaMem
refcount	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* refcount;$/;"	m	class:CvImage
refcount	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int *refcount;$/;"	m	class:cv::ocl::oclMat
reference	/usr/local/include/opencv2/core/core.hpp	/^    typedef value_type& reference;$/;"	t	class:cv::Allocator
reference	/usr/local/include/opencv2/core/operations.hpp	/^    typedef _Tp& reference;$/;"	t	class:cv::Vector
reference	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
refinementMask	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    const Mat refinementMask() const { return refinement_mask_.clone(); }$/;"	f	class:cv::detail::BundleAdjusterBase
refinement_mask_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    Mat refinement_mask_;$/;"	m	class:cv::detail::BundleAdjusterBase
regRNG	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    cv::RNG regRNG;\/\/own random numbers generator to make collection and verification work identical$/;"	m	class:perf::Regression
registered_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
registr_resol_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double registr_resol_;$/;"	m	class:cv::Stitcher
registrationResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double registrationResol() const { return registr_resol_; }$/;"	f	class:cv::Stitcher
regression	/usr/local/include/opencv2/ml/ml.hpp	/^    bool regression;$/;"	m	class:CvKNearest
regression_accuracy	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW float regression_accuracy;$/;"	m	struct:CvDTreeParams
rejectionThreshold	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double rejectionThreshold;$/;"	m	class:cv::of2::FabMapFBO
relation_to_source_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  RelationToSource relation_to_source_;$/;"	m	class:testing::internal::NativeArray
release	/usr/local/include/opencv2/core/mat.hpp	/^inline void Mat::release()$/;"	f	class:cv::Mat
release	/usr/local/include/opencv2/core/mat.hpp	/^inline void SparseMat::release()$/;"	f	class:cv::SparseMat
release	/usr/local/include/opencv2/core/operations.hpp	/^    static void release(void** dbptr)$/;"	f	struct:cv::RTTIImpl
release	/usr/local/include/opencv2/core/operations.hpp	/^    void release()$/;"	f	class:cv::Vector
release	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::release()$/;"	f	class:cv::Ptr
release	/usr/local/include/opencv2/core/types_c.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo
release	/usr/local/include/opencv2/gpu/gpu.hpp	/^    inline void release()$/;"	f	class:cv::gpu::ImagePyramid
release	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void release() { detach(); }$/;"	f	class:CvImage
release	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void release()$/;"	f	class:CvMatrix
release	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
releaseMemory	/usr/local/include/opencv2/gpu/gpu.hpp	/^    void releaseMemory()$/;"	f	class:cv::gpu::FarnebackOpticalFlow
releaseMemory	/usr/local/include/opencv2/gpu/gpu.hpp	/^    void releaseMemory()$/;"	f	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
releaseMemory	/usr/local/include/opencv2/ocl/ocl.hpp	/^            void releaseMemory()$/;"	f	class:cv::ocl::PyrLKOpticalFlow
remaining	/usr/local/include/opencv2/flann/allocator.h	/^    int     remaining;  \/* Number of bytes left in current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
remove	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::remove(const Range& r)$/;"	f	class:cv::Seq
remove	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::remove(int idx)$/;"	f	class:cv::Seq
reorder_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    bool reorder_;$/;"	m	class:cvflann::KDTreeSingleIndex
repeater_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
reqMatches	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int reqMatches;        \/\/ #_min$/;"	m	class:cv::gpu::VIBE_GPU
reserve	/usr/local/include/opencv2/core/operations.hpp	/^    void reserve(size_t newCapacity)$/;"	f	class:cv::Vector
reset	/usr/local/include/opencv2/flann/any.h	/^    void reset()$/;"	f	struct:cvflann::any
reset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void reset()$/;"	f	class:cvflann::DynamicBitset
reset	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void reset(size_t index)$/;"	f	class:cvflann::DynamicBitset
reset	/usr/local/include/opencv2/flann/timer.h	/^    void reset()$/;"	f	class:cvflann::StartStopTimer
reset	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    virtual void reset() {}$/;"	f	class:cv::videostab::NullFrameSource
reset	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    virtual void reset() { resetImpl(); }$/;"	f	class:cv::videostab::OnePassStabilizer
reset	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    virtual void reset() { resetImpl(); }$/;"	f	class:cv::videostab::TwoPassStabilizer
resetColorArray	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline void resetColorArray() { color_.release(); }$/;"	f	class:cv::GlArrays
resetNormalArray	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline void resetNormalArray() { normal_.release(); }$/;"	f	class:cv::GlArrays
resetTexCoordArray	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline void resetTexCoordArray() { texCoord_.release(); }$/;"	f	class:cv::GlArrays
resetVertexArray	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline void resetVertexArray() { vertex_.release(); }$/;"	f	class:cv::GlArrays
reset_block	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void reset_block(size_t index)$/;"	f	class:cvflann::DynamicBitset
reset_roi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void reset_roi() { cvResetImageROI(image); }$/;"	f	class:CvImage
reshape	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::reshape() const$/;"	f	class:cv::Matx
resize	/usr/local/include/opencv2/core/operations.hpp	/^    void resize(size_t newSize)$/;"	f	class:cv::Vector
resize	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void resize(size_t sz)$/;"	f	class:cvflann::DynamicBitset
resolution	/usr/local/include/opencv2/contrib/contrib.hpp	/^        float resolution;$/;"	m	class:cv::Mesh3D
response	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW float response; \/\/!< the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling$/;"	m	class:cv::KeyPoint
response	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float response;$/;"	m	struct:CvDetectedBlob
response	/usr/local/include/opencv2/legacy/compat.hpp	/^    float response;$/;"	m	struct:CvStarKeypoint
responseThreshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int responseThreshold;$/;"	m	class:cv::StarDetector
responseThreshold	/usr/local/include/opencv2/legacy/compat.hpp	/^    int responseThreshold;$/;"	m	struct:CvStarDetectorParams
response_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int response_idx;$/;"	m	class:CvMLData
response_out	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* response_out; \/\/ header$/;"	m	class:CvMLData
responses	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvMat* responses;$/;"	m	struct:CvDTreeTrainData
responses_copy	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* responses_copy; \/\/ used in Boosting$/;"	m	struct:CvDTreeTrainData
result	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
result_data	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
result_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size result_size;$/;"	m	struct:cv::gpu::ConvolveBuf
result_spect	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColConstant
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReflect
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReflect101
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReplicate
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColWrap
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdConstant
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReflect
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReflect101
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReplicate
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowConstant
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReflect
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReflect101
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReplicate
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowWrap
result_type	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdWrap
result_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::gpu::device::L1Dist
result_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::gpu::device::L2Dist
result_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::gpu::device::HammingDist
result_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::gpu::device::L1Dist
rho	/usr/local/include/opencv2/ml/ml.hpp	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc
rho	/usr/local/include/opencv2/ml/ml.hpp	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo
rho_c_buf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat rho_c_buf;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
riBuf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
riBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat minSSD, leBuf, riBuf;$/;"	m	class:cv::ocl::StereoBM_OCL
right	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
right	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
right	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
right	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
right	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* right;$/;"	m	struct:CvStereoGCState
right	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode
right	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            int right;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
right	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int* right;$/;"	m	struct:CvHaarClassifier
right_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double right_;$/;"	m	class:cv::GlCamera
ringBuf	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<uchar> ringBuf;$/;"	m	class:cv::FilterEngine
rinv	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
rmEdgeDensityFuzzy	/usr/local/include/opencv2/contrib/contrib.hpp	/^        rmEdgeDensityFuzzy      = 1,$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rmEdgeDensityLinear	/usr/local/include/opencv2/contrib/contrib.hpp	/^        rmEdgeDensityLinear     = 0,$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rmInnerDensity	/usr/local/include/opencv2/contrib/contrib.hpp	/^        rmInnerDensity          = 2$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rng	/usr/local/include/opencv2/ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvANN_MLP
rng	/usr/local/include/opencv2/ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvGBTrees
rng	/usr/local/include/opencv2/ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvMLData
rng	/usr/local/include/opencv2/ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvRTrees
rng	/usr/local/include/opencv2/ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	struct:CvDTreeTrainData
rng	/usr/local/include/opencv2/ts/ts.hpp	/^    RNG rng;$/;"	m	class:cvtest::TS
rngSeed_	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    unsigned long rngSeed_;$/;"	m	class:cv::gpu::VIBE_GPU
rng_seed	/usr/local/include/opencv2/ts/ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TSParams
rng_seed	/usr/local/include/opencv2/ts/ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TestInfo
rng_seed0	/usr/local/include/opencv2/ts/ts.hpp	/^    uint64 rng_seed0;$/;"	m	struct:cvtest::TestInfo
ro0	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
ro0	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
ro0	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
roi	/usr/local/include/opencv2/core/types_c.h	/^    struct _IplROI *roi;    \/* Image ROI. If NULL, the whole image is selected. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI
roi	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Rect roi;$/;"	m	class:cv::FilterEngine
roi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvRect roi() const$/;"	f	class:CvImage
roi1	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
roi2	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
roi_row	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const uchar* roi_row(int y) const$/;"	f	class:CvImage
roi_row	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar* roi_row(int y)$/;"	f	class:CvImage
roi_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize roi_size() const$/;"	f	class:CvImage
rois_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<std::vector<cv::Rect> > rois_;$/;"	m	class:cv::Stitcher
roll_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double roll_;$/;"	m	class:cv::GlCamera
romax	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
romax	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
romax	/usr/local/include/opencv2/contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
root	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    NodePtr* root;$/;"	m	class:cvflann::HierarchicalClusteringIndex
root	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeNode* root;$/;"	m	class:CvDTree
rootIn	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    cv::FileNode rootIn;$/;"	m	class:perf::Regression
root_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    KMeansNodePtr root_;$/;"	m	class:cvflann::KMeansIndex
root_bbox_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    BoundingBox root_bbox_;$/;"	m	class:cvflann::KDTreeSingleIndex
root_node_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    NodePtr root_node_;$/;"	m	class:cvflann::KDTreeSingleIndex
rotMatr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   rotMatr[9];$/;"	m	struct:CvCamera
rotMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera
round_error	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type round_error() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
row	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::row(int y) const$/;"	f	class:cv::gpu::GpuMat
row	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::row(int y) const { return Mat(*this, Range(y, y+1), Range::all()); }$/;"	f	class:cv::Mat
row	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::row(int y) const$/;"	f	class:cv::Mat_
row	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, 1, n> Matx<_Tp, m, n>::row(int i) const$/;"	f	class:cv::Matx
row	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const uchar* row(int i) const$/;"	f	class:CvMatrix
row	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar* row(int i) { return !matrix ? 0 : matrix->data.ptr + i*matrix->step; }$/;"	f	class:CvMatrix
row	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::row(int y) const$/;"	f	class:cv::ocl::oclMat
rowBorderType	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int rowBorderType, columnBorderType;$/;"	m	class:cv::FilterEngine
rowCount	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
rowFilter	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Ptr<BaseRowFilter> rowFilter;$/;"	m	class:cv::FilterEngine
rowRange	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::rowRange(Range r) const$/;"	f	class:cv::gpu::GpuMat
rowRange	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat GpuMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::gpu::GpuMat
rowRange	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::rowRange(const Range& r) const$/;"	f	class:cv::Mat
rowRange	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat Mat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::Mat
rowRange	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::rowRange(const Range &r) const$/;"	f	class:cv::ocl::oclMat
rowRange	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::ocl::oclMat
rows	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            int rows;$/;"	m	struct:cv::gpu::PtrStepSz
rows	/usr/local/include/opencv2/core/gpumat.hpp	/^        int rows, cols;$/;"	m	class:cv::gpu::GpuMat
rows	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int rows() const { return rows_; }$/;"	f	class:cv::ogl::Buffer
rows	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int rows() const { return rows_; }$/;"	f	class:cv::ogl::Texture2D
rows	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int rows() const { return rows_; }$/;"	f	class:cv::GlBuffer
rows	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int rows() const { return rows_; }$/;"	f	class:cv::GlTexture
rows	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int rows() const { return vertex_.rows(); }$/;"	f	class:cv::GlArrays
rows	/usr/local/include/opencv2/core/types_c.h	/^        int rows;$/;"	m	union:CvMat::__anon47
rows	/usr/local/include/opencv2/core/types_c.h	/^    int rows;$/;"	m	struct:CvMat
rows	/usr/local/include/opencv2/flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::Matrix
rows	/usr/local/include/opencv2/flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::UntypedMatrix
rows	/usr/local/include/opencv2/flann/saving.h	/^    size_t rows;$/;"	m	struct:cvflann::IndexHeader
rows	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int rows, cols;$/;"	m	class:cv::gpu::CudaMem
rows	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<uchar*> rows;$/;"	m	class:cv::FilterEngine
rows	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int rows() const { return matrix ? matrix->rows : 0; }$/;"	f	class:CvMatrix
rows	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMKernelRow* rows;$/;"	m	class:CvSVMSolver
rows	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int rows, cols;$/;"	m	class:cv::ocl::oclMat
rows_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int rows_;$/;"	m	class:cv::ogl::Buffer
rows_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int rows_;$/;"	m	class:cv::ogl::Texture2D
rows_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int rows_;$/;"	m	class:cv::GlBuffer
rows_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int rows_;$/;"	m	class:cv::GlTexture
rp_dw0	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_max	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_min	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_minus	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_plus	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rules	/usr/local/include/opencv2/contrib/contrib.hpp	/^    std::vector<CvFuzzyRule*> rules;$/;"	m	class:CvFuzzyController
run	/usr/local/include/opencv2/videostab/fast_marching_inl.hpp	/^Inpaint FastMarchingMethod::run(const cv::Mat &mask, Inpaint inpaint)$/;"	f	class:cv::videostab::FastMarchingMethod
run_test_case	/usr/local/include/opencv2/ts/ts.hpp	/^    int run_test_case( int expected_code, const string& _descr, F f)$/;"	f	class:cvtest::BadArgTest
running	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, readonly) BOOL running;$/;"	v
runsPerIteration	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    unsigned int runsPerIteration;$/;"	m	class:perf::TestBase
s	/usr/local/include/opencv2/core/mat.hpp	/^    Scalar s;$/;"	m	class:cv::MatExpr
s	/usr/local/include/opencv2/core/types_c.h	/^        short* s;$/;"	m	union:CvMat::__anon46
s	/usr/local/include/opencv2/core/types_c.h	/^        short* s;$/;"	m	union:CvMatND::__anon49
s	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder
sFactor	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    double sFactor;$/;"	m	class:cv::of2::FabMap
s_range	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    vector<float> s_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
sample_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
sample_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count;$/;"	m	class:CvSVMSolver
sample_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count;$/;"	m	struct:CvDTreeNode
sample_fraction_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float sample_fraction_;$/;"	m	class:cvflann::AutotunedIndex
sample_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* sample_idx;$/;"	m	class:CvGBTrees
sample_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int* sample_idx; \/\/ data of train_sample_idx and test_sample_idx$/;"	m	class:CvMLData
sample_weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* sample_weights;$/;"	m	class:CvANN_MLP
sampledDataset_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    Matrix<ElementType> sampledDataset_;$/;"	m	class:cvflann::AutotunedIndex
samples	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvMat* samples;$/;"	m	class:cv::CvHybridTracker
samples	/usr/local/include/opencv2/ml/ml.hpp	/^    CvVectors* samples;$/;"	m	class:CvKNearest
samples	/usr/local/include/opencv2/ml/ml.hpp	/^    const float** samples;$/;"	m	class:CvSVMSolver
samples	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    unsigned int samples;$/;"	m	struct:perf::performance_metrics
samples_	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat samples_;$/;"	m	class:cv::gpu::VIBE_GPU
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline int saturate_cast<int>(double v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline int saturate_cast<int>(float v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(double v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(float v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(int v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(short v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(unsigned v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline short saturate_cast<short>(double v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline short saturate_cast<short>(float v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline short saturate_cast<short>(int v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline short saturate_cast<short>(unsigned v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline short saturate_cast<short>(ushort v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(unsigned v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline unsigned saturate_cast<unsigned>(double v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline unsigned saturate_cast<unsigned>(float v){ return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(unsigned v)$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(double v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(float v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(int v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(schar v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(short v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(uchar v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(unsigned v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(ushort v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(schar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(double v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(float v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(int v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(schar v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(short v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uchar v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uint v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(ushort v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast_caller	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^        template <typename VecD, typename VecS> static __device__ __forceinline__ VecD saturate_cast_caller(const VecS& v)$/;"	f	namespace:cv::gpu::device::vec_math_detail
saturate_cast_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ saturate_cast_func():unary_function<T, D>(){}$/;"	f	struct:cv::gpu::device::saturate_cast_func
saturate_cast_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ saturate_cast_func(const saturate_cast_func& other):unary_function<T, D>(){}$/;"	f	struct:cv::gpu::device::saturate_cast_func
saturate_cast_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T, typename D> struct saturate_cast_func : unary_function<T, D>$/;"	s	namespace:cv::gpu::device
save	/usr/local/include/opencv2/flann/flann.hpp	/^        void save(std::string filename) { nnIndex->save(filename); }$/;"	f	class:cv::flann::GenericIndex
save	/usr/local/include/opencv2/flann/flann.hpp	/^    void save(std::string filename)$/;"	f	class:cv::flann::Index_
save	/usr/local/include/opencv2/flann/flann_base.hpp	/^    void save(std::string filename)$/;"	f	class:cvflann::Index
saveIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
saveIndex	/usr/local/include/opencv2/flann/composite_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
saveIndex	/usr/local/include/opencv2/flann/flann_base.hpp	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::Index
saveIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
saveIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
saveIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
saveIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
saveIndex	/usr/local/include/opencv2/flann/linear_index.h	/^    void saveIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
saveIndex	/usr/local/include/opencv2/flann/lsh_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
save_header	/usr/local/include/opencv2/flann/saving.h	/^void save_header(FILE* stream, const NNIndex<Distance>& index)$/;"	f	namespace:cvflann
save_to_file	/usr/local/include/opencv2/flann/hdf5.h	/^void save_to_file(const cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann
save_tree	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    void save_tree(FILE* stream, NodePtr node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
save_tree	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeIndex
save_tree	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeSingleIndex
save_tree	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void save_tree(FILE* stream, KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
save_value	/usr/local/include/opencv2/flann/saving.h	/^void save_value(FILE* stream, const T& value, size_t count = 1)$/;"	f	namespace:cvflann
save_value	/usr/local/include/opencv2/flann/saving.h	/^void save_value(FILE* stream, const cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
save_value	/usr/local/include/opencv2/flann/saving.h	/^void save_value(FILE* stream, const std::vector<T>& value)$/;"	f	namespace:cvflann
scale	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale	/usr/local/include/opencv2/gpu/gpu.hpp	/^   double scale;$/;"	m	struct:cv::gpu::HOGConfidence
scale	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade
scale	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^   double scale;$/;"	m	struct:cv::DetectionROI
scale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float scale;$/;"	m	struct:cv::detail::ProjectorBase
scaleAdd	/usr/local/include/opencv2/gpu/gpu.hpp	/^static inline void scaleAdd(const GpuMat& src1, double alpha, const GpuMat& src2, GpuMat& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::gpu
scaleFactor	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^            double scaleFactor;$/;"	m	struct:DetectionBasedTracker::Parameters
scaleFactor	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW double scaleFactor;$/;"	m	class:cv::ORB
scaleFactor_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float scaleFactor_;$/;"	m	class:cv::gpu::ORB_GPU
scaleList_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    float* scaleList_;                     \/\/ lists the scaling per scale index [scale]$/;"	m	class:cv::BRISK
scaleNormalized	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool scaleNormalized; \/\/true if the scale is normalized, false otherwise$/;"	m	class:cv::FREAK
scale_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Point3d scale_;$/;"	m	class:cv::GlCamera
scale_factor	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float scale_factor;$/;"	m	class:cv::gpu::BroxOpticalFlow
scale_max	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float scale_max;$/;"	m	class:cv::OneWayDescriptorBase
scale_min	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float scale_min;$/;"	m	class:cv::OneWayDescriptorBase
scale_step	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float scale_step;$/;"	m	class:cv::OneWayDescriptorBase
scale_x	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale_x	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::gpu::device::AreaFilter
scale_y	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale_y	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::gpu::device::AreaFilter
scalerange_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const float scalerange_;     \/\/ span of sizes 40->4 Octaves - else, this needs to be adjusted...$/;"	m	class:cv::BRISK
scales_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    static const unsigned int scales_;    \/\/ scales discretization$/;"	m	class:cv::BRISK
scanner	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	v
scanner	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	v
scanner	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	v
scanner	/usr/local/include/opencv2/imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	v
schar	/usr/local/include/opencv2/core/types_c.h	/^typedef signed char schar;$/;"	t
schar	/usr/local/include/opencv2/gpu/device/common.hpp	/^        typedef signed char schar;$/;"	t	namespace:cv::gpu::device
scn	/usr/local/include/opencv2/ts/gpu_perf.hpp	/^        int scn;$/;"	m	struct:perf::CvtColorInfo
score	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        float score;$/;"	m	struct:cv::of2::ChowLiuTree::info
score	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        float score;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
score	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float score;$/;"	m	struct:CvObjectDetection
score	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float score;$/;"	m	struct:cv::linemod::QuantizedPyramid::Candidate
scoreType	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int scoreType;$/;"	m	class:cv::ORB
scoreType_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int scoreType_;$/;"	m	class:cv::gpu::ORB_GPU
score_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat score_;$/;"	m	class:cv::gpu::FAST_GPU
score_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float score_threshold;$/;"	m	struct:CvLatentSvmDetector
seamEstimationResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double seamEstimationResol() const { return seam_est_resol_; }$/;"	f	class:cv::Stitcher
seamFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::SeamFinder> seamFinder() { return seam_finder_; }$/;"	f	class:cv::Stitcher
seamFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<detail::SeamFinder> seamFinder() const { return seam_finder_; }$/;"	f	class:cv::Stitcher
seam_est_imgs_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    std::vector<cv::Mat> seam_est_imgs_;$/;"	m	class:cv::Stitcher
seam_est_resol_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double seam_est_resol_;$/;"	m	class:cv::Stitcher
seam_finder_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<detail::SeamFinder> seam_finder_;$/;"	m	class:cv::Stitcher
seam_scale_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double seam_scale_;$/;"	m	class:cv::Stitcher
seam_work_aspect_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double seam_work_aspect_;$/;"	m	class:cv::Stitcher
searchLevel	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, NodePtr node, DistanceType mindist, int& checkCount, int maxCheck,$/;"	f	class:cvflann::KDTreeIndex
searchLevel	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindistsq,$/;"	f	class:cvflann::KDTreeSingleIndex
searchLevelExact	/usr/local/include/opencv2/flann/kdtree_index.h	/^    void searchLevelExact(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindist, const float epsError)$/;"	f	class:cvflann::KDTreeIndex
searchMode	/usr/local/include/opencv2/contrib/contrib.hpp	/^    int searchMode;$/;"	m	class:CvFuzzyMeanShiftTracker
searchParams	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Ptr<flann::SearchParams> searchParams;$/;"	m	class:cv::FlannBasedMatcher
searchTimeCost	/usr/local/include/opencv2/flann/autotuned_index.h	/^        float searchTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
search_modules	/usr/local/include/opencv2/core/types_c.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo
search_with_ground_truth	/usr/local/include/opencv2/flann/index_testing.h	/^float search_with_ground_truth(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
seed_random	/usr/local/include/opencv2/flann/random.h	/^inline void seed_random(unsigned int seed)$/;"	f	namespace:cvflann
seek	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void SeqIterator<_Tp>::seek(size_t pos)$/;"	f	class:cv::SeqIterator
seekEnd	/usr/local/include/opencv2/core/mat.hpp	/^inline void SparseMatConstIterator::seekEnd()$/;"	f	class:cv::SparseMatConstIterator
selectDivision	/usr/local/include/opencv2/flann/kdtree_index.h	/^    int selectDivision(DistanceType* v)$/;"	f	class:cvflann::KDTreeIndex
select_working_set_func	/usr/local/include/opencv2/ml/ml.hpp	/^    SelectWorkingSet select_working_set_func;$/;"	m	class:CvSVMSolver
selectedPairs0	/usr/local/include/opencv2/features2d/features2d.hpp	/^    vector<int> selectedPairs0;$/;"	m	class:cv::FREAK
sensitivity	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    float sensitivity() const { return sensitivity_; }$/;"	f	class:cv::videostab::WeightingDeblurer
sensitivity_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    float sensitivity_;$/;"	m	class:cv::videostab::WeightingDeblurer
separateDetectionWork	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        cv::Ptr<SeparateDetectionWork> separateDetectionWork;$/;"	m	class:DetectionBasedTracker
seq	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	v
seq	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	v
seq	/usr/local/include/opencv2/core/types_c.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon51
set	/usr/local/include/opencv2/core/operations.hpp	/^    void set(_Tp* _data, size_t _size, bool _copyData=false)$/;"	f	class:cv::Vector
set	/usr/local/include/opencv2/core/operations.hpp	/^inline void Algorithm::set(const char* _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
set	/usr/local/include/opencv2/core/operations.hpp	/^inline void Algorithm::set(const string& _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
set	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    void set(size_t index)$/;"	f	class:cvflann::DynamicBitset
set	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void set( CvMat* m, bool add_ref )$/;"	f	class:CvMatrix
set	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
setAlgorithm	/usr/local/include/opencv2/core/operations.hpp	/^inline void Algorithm::setAlgorithm(const char* _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
setAlgorithm	/usr/local/include/opencv2/core/operations.hpp	/^inline void Algorithm::setAlgorithm(const string& _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
setAlpha	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 3>::vec_type& vec, T val)$/;"	f	namespace:cv::gpu::device::color_detail
setAlpha	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 4>::vec_type& vec, T val)$/;"	f	namespace:cv::gpu::device::color_detail
setBlender	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setBlender(Ptr<detail::Blender> b) { blender_ = b; }$/;"	f	class:cv::Stitcher
setBlurrinessRates	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void setBlurrinessRates(const std::vector<float> &val) { blurrinessRates_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setBorderMode	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setBorderMode	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setBundleAdjuster	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setBundleAdjuster(Ptr<detail::BundleAdjusterBase> bundle_adjuster)$/;"	f	class:cv::Stitcher
setCompositingResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setCompositingResol(double resol_mpx) { compose_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setConfThresh	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    void setConfThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::detail::BundleAdjusterBase
setCorrectionForInclusion	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setCorrectionForInclusion(bool val) { doCorrectionForInclusion_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setCostFunction	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    void setCostFunction(CostFunction val) { costFunc_ = val; }$/;"	f	class:cv::detail::DpSeamFinder
setDeblurer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setDeblurer(Ptr<DeblurerBase> val) { deblurer_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setDestination	/usr/local/include/opencv2/flann/logger.h	/^    static void setDestination(const char* name) { instance()._setDestination(name); }$/;"	f	class:cvflann::Logger
setDetector	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setDetector(Ptr<FeatureDetector> val) { detector_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setDistThreshold	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void setDistThreshold(float val) { distThresh_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setEstimateTrimRatio	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setEstimateTrimRatio(bool val) { mustEstTrimRatio_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setExposureCompensator	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setExposureCompensator(Ptr<detail::ExposureCompensator> exposure_comp)$/;"	f	class:cv::Stitcher
setFastParams	/usr/local/include/opencv2/gpu/gpu.hpp	/^    inline void setFastParams(int threshold, bool nonmaxSupression = true)$/;"	f	class:cv::gpu::ORB_GPU
setFeaturesFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setFeaturesFinder(Ptr<detail::FeaturesFinder> features_finder)$/;"	f	class:cv::Stitcher
setFeaturesMatcher	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setFeaturesMatcher(Ptr<detail::FeaturesMatcher> features_matcher)$/;"	f	class:cv::Stitcher
setFlowErrorThreshold	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void setFlowErrorThreshold(float val) { flowErrorThreshold_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setFrameQueue	/usr/local/include/opencv2/gpu/gpu.hpp	/^        void setFrameQueue(detail::FrameQueue* frameQueue) { frameQueue_ = frameQueue; }$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
setFrameSource	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setFrameSource(Ptr<IFrameSource> val) { frameSource_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setFrames	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setFrames	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setInpainter	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setInpainter(Ptr<InpainterBase> val) { inpainter_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setLevel	/usr/local/include/opencv2/flann/logger.h	/^    static void setLevel(int level) { instance().logLevel = level; }$/;"	f	class:cvflann::Logger
setLog	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setLog(Ptr<ILog> _log) { log_ = _log; }$/;"	f	class:cv::videostab::StabilizerBase
setMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ void setMask(int z)$/;"	f	struct:cv::gpu::device::MaskCollection
setMask	/usr/local/include/opencv2/gpu/device/utility.hpp	/^        __device__ __forceinline__ void setMask(int) const$/;"	f	struct:cv::gpu::device::WithOutMask
setMatchingMask	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setMatchingMask(const cv::Mat &mask)$/;"	f	class:cv::Stitcher
setMaxLevel	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    void setMaxLevel(int val) { maxLevel_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
setMaxRmse	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setMaxRmse(float val) { maxRmse_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMinInlierRatio	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setMinInlierRatio(float val) { minInlierRatio_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMotionEstimator	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setMotionEstimator(Ptr<IGlobalMotionEstimator> val) { motionEstimator_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setMotionFilter	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setMotionFilter(Ptr<MotionFilterBase> val) { motionFilter_ = val; }$/;"	f	class:cv::videostab::OnePassStabilizer
setMotionModel	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setMotionModel(MotionModel val) { motionModel_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMotionStabilizer	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setMotionStabilizer(Ptr<IMotionStabilizer> val) { motionStabilizer_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setMotions	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setMotions	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setNumBands	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    void setNumBands(int val) { actual_num_bands_ = val; }$/;"	f	class:cv::detail::MultiBandBlender
setOptFlowEstimator	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setOptFlowEstimator(Ptr<ISparseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setOptFlowEstimator	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void setOptFlowEstimator(Ptr<IDenseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setPanoConfidenceThresh	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setPanoConfidenceThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::Stitcher
setRadius	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::DeblurerBase
setRadius	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::InpainterBase
setRadius	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::MotionFilterBase
setRadius	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setRansacParams	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    void setRansacParams(const RansacParams &val) { ransacParams_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setRefinementMask	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    void setRefinementMask(const Mat &mask)$/;"	f	class:cv::detail::BundleAdjusterBase
setRegistrationResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setRegistrationResol(double resol_mpx) { registr_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setScale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void setScale(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlaneWarper
setScale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void setScale(float val) { projector_.scale = val; }$/;"	f	class:cv::detail::RotationWarperBase
setScale	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    void setScale(float) {}$/;"	f	class:cv::detail::RotationWarper
setSeamEstimationResol	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setSeamEstimationResol(double resol_mpx) { seam_est_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setSeamFinder	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setSeamFinder(Ptr<detail::SeamFinder> seam_finder) { seam_finder_ = seam_finder; }$/;"	f	class:cv::Stitcher
setSensitivity	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    void setSensitivity(float val) { sensitivity_ = val; }$/;"	f	class:cv::videostab::WeightingDeblurer
setSharpness	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    void setSharpness(float val) { sharpness_ = val; }$/;"	f	class:cv::detail::FeatherBlender
setStabilizationMotions	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void setStabilizationMotions(const std::vector<Mat> &val) { stabilizationMotions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStabilizedFrames	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void setStabilizedFrames(const std::vector<Mat> &val) { stabilizedFrames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStdev	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    void setStdev(float val) { stdev_ = val; }$/;"	f	class:cv::videostab::GaussianMotionFilter
setStdevThresh	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    void setStdevThresh(float val) { stdevThresh_ = val; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
setTermCriteria	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    void setTermCriteria(const CvTermCriteria& term_criteria) { term_criteria_ = term_criteria; }$/;"	f	class:cv::detail::BundleAdjusterBase
setTrimRatio	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    void setTrimRatio(float val) { trimRatio_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setVideoParser	/usr/local/include/opencv2/gpu/gpu.hpp	/^        void setVideoParser(detail::VideoParser* videoParser) { videoParser_ = videoParser; }$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
setWarper	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setWarper(Ptr<WarperCreator> creator) { warper_ = creator; }$/;"	f	class:cv::Stitcher
setWaveCorrectKind	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setWaveCorrectKind(detail::WaveCorrectKind kind) { wave_correct_kind_ = kind; }$/;"	f	class:cv::Stitcher
setWaveCorrection	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    void setWaveCorrection(bool flag) { do_wave_correct_ = flag; }$/;"	f	class:cv::Stitcher
setWinSize	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    void setWinSize(Size val) { winSize_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
set_cb_index	/usr/local/include/opencv2/flann/kmeans_index.h	/^    void set_cb_index( float index)$/;"	f	class:cvflann::KMeansIndex
set_coi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void set_coi(int _coi) { cvSetImageCOI(image,_coi); }$/;"	f	class:CvImage
set_data	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void set_data( void* _data, int _step=CV_AUTOSTEP )$/;"	f	class:CvMatrix
set_elapsed_time	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_header	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	v
set_max_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool    set_max_ch_val( int channel, int val ) \/\/ set the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
set_min_ch_val	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool    set_min_ch_val( int channel, int val ) \/\/ set the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
set_num_valid	/usr/local/include/opencv2/ml/ml.hpp	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode
set_postprocess_func	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define set_postprocess_func /;"	d
set_preprocess_func	/usr/local/include/opencv2/highgui/highgui_c.h	/^#define set_preprocess_func /;"	d
set_roi	/usr/local/include/opencv2/legacy/legacy.hpp	/^    void set_roi(CvRect _roi) { cvSetImageROI(image,_roi); }$/;"	f	class:CvImage
set_should_run	/usr/local/include/opencv2/ts/ts_gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool    set_threshold( int threshold ) \/\/ threshold applied to the histogram bins$/;"	f	class:CvCamShiftTracker
set_up_tc_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_window	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool    set_window( CvRect window)$/;"	f	class:CvCamShiftTracker
severity_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
shape	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon271
shared	/usr/local/include/opencv2/ml/ml.hpp	/^    bool shared;$/;"	m	struct:CvDTreeTrainData
sharpness	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    float sharpness() const { return sharpness_; }$/;"	f	class:cv::detail::FeatherBlender
sharpness_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    float sharpness_;$/;"	m	class:cv::detail::FeatherBlender
shear	/usr/local/include/opencv2/core/core_c.h	/^    float       shear;      \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont
shfl	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl(T val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl(double val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl(unsigned int val, int srcLane, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_down	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl_down(T val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_down	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl_down(double val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_down	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl_down(unsigned int val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_up	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ T shfl_up(T val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_up	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ double shfl_up(double val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shfl_up	/usr/local/include/opencv2/gpu/device/warp_shuffle.hpp	/^    __device__ __forceinline__ unsigned int shfl_up(unsigned int val, unsigned int delta, int width = warpSize)$/;"	f	namespace:cv::gpu::device
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^            enum { shift = BinOpShift<sizeof(T1), sizeof(T2), sizeof(D)>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::DefaultBinaryShift::__anon155
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^            enum { shift = DefaultBinaryShift<typename Func::first_argument_type, typename Func::second_argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::ShiftDispatcher::__anon157
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^            enum { shift = DefaultUnaryShift<typename Func::argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::ShiftDispatcher::__anon156
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^            enum { shift = UnOpShift<sizeof(T), sizeof(D)>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::DefaultUnaryShift::__anon151
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { shift = functional_detail::ShiftDispatcher<Func>::shift };$/;"	e	enum:cv::gpu::device::DefaultTransformShift::__anon158
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon148
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon152
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon153
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon154
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon149
shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon150
shift1	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos
shift2	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos
shortPairs_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    BriskShortPair* shortPairs_;         \/\/ d<_dMax$/;"	m	class:cv::BRISK
should_run	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
shrinkage	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW float shrinkage;$/;"	m	struct:CvGBTreesParams
sigma	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float sigma;     \/\/ Gaussian smoothing sigma$/;"	m	struct:cv::BRISK::BriskPatternPoint
sigma	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float sigma; \/\/ Gaussian smoothing sigma$/;"	m	struct:cv::FREAK::PatternPoint
sigma	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS
sigma	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW double sigma;$/;"	m	class:cv::SIFT
sigma_range	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float sigma_range;$/;"	m	class:cv::gpu::DisparityBilateralFilter
sign_bit	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signaling_NaN	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        __device__ __forceinline__ static type signaling_NaN() { return T(); }$/;"	f	struct:cv::gpu::device::numeric_limits
signature	/usr/local/include/opencv2/core/types_c.h	/^    int signature;$/;"	m	struct:CvMemStorage
signature	/usr/local/include/opencv2/flann/saving.h	/^    char signature[16];$/;"	m	struct:cvflann::IndexHeader
signatureSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int signatureSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
signatureSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int signatureSize;$/;"	m	class:cv::FernClassifier
signum_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
similarity	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  float similarity;$/;"	m	struct:cv::linemod::Match
simple_block_dim_x	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { simple_block_dim_x = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon159
simple_block_dim_y	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { simple_block_dim_y = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon160
size	/usr/local/include/opencv2/core/core_c.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator
size	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	v
size	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            size_t size;$/;"	m	struct:cv::gpu::PtrSz
size	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline Size GpuMat::size() const$/;"	f	class:cv::gpu::GpuMat
size	/usr/local/include/opencv2/core/mat.hpp	/^inline const int* SparseMat::size() const$/;"	f	class:cv::SparseMat
size	/usr/local/include/opencv2/core/mat.hpp	/^inline int SparseMat::size(int i) const$/;"	f	class:cv::SparseMat
size	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::ogl::Buffer
size	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::ogl::Texture2D
size	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int size() const { return size_; }$/;"	f	class:cv::ogl::Arrays
size	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::GlBuffer
size	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::GlTexture
size	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Size size() const { return vertex_.size(); }$/;"	f	class:cv::GlArrays
size	/usr/local/include/opencv2/core/operations.hpp	/^        size_t size;$/;"	m	struct:cv::Vector::Hdr
size	/usr/local/include/opencv2/core/operations.hpp	/^    size_t size() const { return hdr.size; }$/;"	f	class:cv::Vector
size	/usr/local/include/opencv2/core/operations.hpp	/^inline int Range::size() const { return end - start; }$/;"	f	class:cv::Range
size	/usr/local/include/opencv2/core/operations.hpp	/^inline size_t FileNode::size() const$/;"	f	class:cv::FileNode
size	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp> Rect_<_Tp>::size() const { return Size_<_Tp>(width, height); }$/;"	f	class:cv::Rect_
size	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::size() const$/;"	f	class:cv::Seq
size	/usr/local/include/opencv2/core/types_c.h	/^        int size;$/;"	m	struct:CvMatND::__anon50
size	/usr/local/include/opencv2/core/types_c.h	/^    CvSize2D32f  size;    \/* Box width and length.                       *\/$/;"	m	struct:CvBox2D
size	/usr/local/include/opencv2/core/types_c.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat
size	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW float size; \/\/!< diameter of the meaningful keypoint neighborhood$/;"	m	class:cv::KeyPoint
size	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int size;$/;"	m	class:cv::BOWTrainer
size	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual size_t size() const$/;"	f	class:cvflann::AutotunedIndex
size	/usr/local/include/opencv2/flann/composite_index.h	/^    size_t size() const$/;"	f	class:cvflann::CompositeIndex
size	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    size_t size() const$/;"	f	class:cvflann::DynamicBitset
size	/usr/local/include/opencv2/flann/flann.hpp	/^        int size() const { return nnIndex->size(); }$/;"	f	class:cv::flann::GenericIndex
size	/usr/local/include/opencv2/flann/flann.hpp	/^    int size() const$/;"	f	class:cv::flann::Index_
size	/usr/local/include/opencv2/flann/flann_base.hpp	/^    size_t size() const$/;"	f	class:cvflann::Index
size	/usr/local/include/opencv2/flann/heap.h	/^    int size()$/;"	f	class:cvflann::Heap
size	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^        int size;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
size	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    size_t size() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
size	/usr/local/include/opencv2/flann/kdtree_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeIndex
size	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeSingleIndex
size	/usr/local/include/opencv2/flann/kmeans_index.h	/^        int size;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
size	/usr/local/include/opencv2/flann/kmeans_index.h	/^    size_t size() const$/;"	f	class:cvflann::KMeansIndex
size	/usr/local/include/opencv2/flann/linear_index.h	/^    size_t size() const$/;"	f	class:cvflann::LinearIndex
size	/usr/local/include/opencv2/flann/lsh_index.h	/^    size_t size() const$/;"	f	class:cvflann::LshIndex
size	/usr/local/include/opencv2/flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNResultSet
size	/usr/local/include/opencv2/flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNSimpleResultSet
size	/usr/local/include/opencv2/flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::RadiusResultSet
size	/usr/local/include/opencv2/flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::UniqueResultSet
size	/usr/local/include/opencv2/legacy/compat.hpp	/^    int          size;$/;"	m	struct:CvSURFPoint
size	/usr/local/include/opencv2/legacy/compat.hpp	/^    int size;$/;"	m	struct:CvStarKeypoint
size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize size() const { return image ? cvSize(image->width, image->height) : cvSize(0,0); }$/;"	f	class:CvImage
size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize size() const$/;"	f	class:CvMatrix
size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize size;$/;"	m	struct:CvBGCodeBookModel
size	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline Size oclMat::size() const$/;"	f	class:cv::ocl::oclMat
size	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    std::vector<int> size;$/;"	m	class:cv::detail::DisjointSets
size	/usr/local/include/opencv2/ts/ts_gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    int size; \/\/ subset size$/;"	m	struct:cv::videostab::RansacParams
sizeList_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    unsigned int* sizeList_;             \/\/ lists the total pattern size per scale index [scale]$/;"	m	class:cv::BRISK
sizeX	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int sizeX;$/;"	m	struct:CvLSVMFilterObject
sizeY	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int sizeY;$/;"	m	struct:CvLSVMFilterObject
size_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int size_;$/;"	m	class:cv::ogl::Arrays
size_	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    size_t size_;$/;"	m	class:cvflann::DynamicBitset
size_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    size_t size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
size_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeIndex
size_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeSingleIndex
size_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    size_t size_;$/;"	m	class:cvflann::KMeansIndex
size_	/usr/local/include/opencv2/flann/random.h	/^    int size_;$/;"	m	class:cvflann::UniqueRandom
size_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^    int size_; \/\/ narrow band size$/;"	m	class:cv::videostab::FastMarchingMethod
size_histogram_	/usr/local/include/opencv2/flann/lsh_table.h	/^    std::vector<std::vector<unsigned int> > size_histogram_;$/;"	m	struct:cvflann::lsh::LshStats
size_type	/usr/local/include/opencv2/core/core.hpp	/^    typedef size_t size_type;$/;"	t	class:cv::Allocator
sizes_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Size> sizes_;$/;"	m	class:cv::detail::PairwiseSeamFinder
skinHueHistogram	/usr/local/include/opencv2/contrib/contrib.hpp	/^    Histogram histogramHueMotion, skinHueHistogram;$/;"	m	class:CvAdaptiveSkinDetector
slidingSumBuf	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CvMat* slidingSumBuf;$/;"	m	struct:CvStereoBMState
smallSize	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int smallSize;$/;"	m	class:cv::SelfSimDescriptor
small_any_policy	/usr/local/include/opencv2/flann/any.h	/^struct small_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
smart_block_dim_x	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { smart_block_dim_x = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon161
smart_block_dim_y	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { smart_block_dim_y = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon162
smart_shift	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { smart_shift = DefaultTransformShift<Func>::shift };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon163
smem	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^        struct smem$/;"	s	struct:cv::gpu::device::Emulation
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8)$/;"	f	namespace:cv::gpu::device
smem_tuple	/usr/local/include/opencv2/gpu/device/reduce.hpp	/^    smem_tuple(T0* t0, T1* t1, T2* t2, T3* t3, T4* t4, T5* t5, T6* t6, T7* t7, T8* t8, T9* t9)$/;"	f	namespace:cv::gpu::device
smoothingRadius	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int smoothingRadius;$/;"	m	class:cv::gpu::GMG_GPU
smoothingRadius	/usr/local/include/opencv2/video/background_segm.hpp	/^    int     smoothingRadius;$/;"	m	class:cv::BackgroundSubtractorGMG
solve	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, n, l> Matx<_Tp, m, n>::solve(const Matx<_Tp, m, l>& rhs, int method) const$/;"	f	class:cv::Matx
solve	/usr/local/include/opencv2/core/operations.hpp	/^Vec<_Tp, n> Matx<_Tp, m, n>::solve(const Vec<_Tp, m>& rhs, int method) const$/;"	f	class:cv::Matx
solve2x2	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve2x2(const T A[2][2], const T b[2], T x[2])$/;"	f	namespace:cv::gpu::device
solve3x3	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve3x3(const T A[3][3], const T b[3], T x[3])$/;"	f	namespace:cv::gpu::device
solveZ	/usr/local/include/opencv2/core/mat.hpp	/^inline void SVD::solveZ( InputArray m, OutputArray _dst )$/;"	f	class:cv::SVD
solver	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSVMSolver* solver;$/;"	m	class:CvSVM
solver_iterations	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int solver_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
sort	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, class _LT> void sort( vector<_Tp>& vec, _LT LT=_LT() )$/;"	f	namespace:cv
sortAndCopy	/usr/local/include/opencv2/flann/result_set.h	/^    virtual void sortAndCopy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
sortKey_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat sortKey_;$/;"	m	class:cv::gpu::MOG_GPU
speckleRange	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int speckleRange;$/;"	m	class:cv::StereoSGBM
speckleRange	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int speckleRange; \/\/ acceptable range of variation in window$/;"	m	struct:CvStereoBMState
speckleWindowSize	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int speckleWindowSize;$/;"	m	class:cv::StereoSGBM
speckleWindowSize	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int speckleWindowSize; \/\/ disparity variation window$/;"	m	struct:CvStereoBMState
spect_len	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int spect_len;$/;"	m	struct:cv::gpu::ConvolveBuf
speed_level_	/usr/local/include/opencv2/flann/lsh_table.h	/^    SpeedLevel speed_level_;$/;"	m	class:cvflann::lsh::LshTable
speedup_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float speedup_;$/;"	m	class:cvflann::AutotunedIndex
spinImages	/usr/local/include/opencv2/contrib/contrib.hpp	/^        Mat spinImages;$/;"	m	class:cv::SpinImageModel
splineInterpolate	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^        __device__ __forceinline__ float splineInterpolate(float x, const float* tab, int n)$/;"	f	namespace:cv::gpu::device::color_detail
split	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> void split(const Mat& src, vector<Mat_<_Tp> >& mv)$/;"	f	namespace:cv
split	/usr/local/include/opencv2/ml/ml.hpp	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode
split_buf	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData
split_criteria	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int split_criteria;$/;"	m	struct:CvBoostParams
split_heap	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData
split_point	/usr/local/include/opencv2/ml/ml.hpp	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon291::__anon292
sqr	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^static inline double sqr(double x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^static inline float sqr(float x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^static inline int sqr(int x) { return x * x; }$/;"	f	namespace:cv::detail
src	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::BorderReader
src	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::AreaFilter
src	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::CubicFilter
src	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
src	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::LinearFilter
src	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::PointFilter
srcRow	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<uchar> srcRow;$/;"	m	class:cv::FilterEngine
srcType	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
src_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^        const Mat *src_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
src_img_idx	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/ Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
ss_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
st1	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat st1, st2;$/;"	m	struct:cv::gpu::CannyBuf
st2	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat st1, st2;$/;"	m	struct:cv::gpu::CannyBuf
stabilizationMotions	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizationMotions() const { return *stabilizationMotions_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizationMotions_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizationMotions_;$/;"	m	class:cv::videostab::InpainterBase
stabilizationMotions_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizationMotions_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizedFrames	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizedFrames() const { return *stabilizedFrames_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizedFrames_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizedFrames_;$/;"	m	class:cv::videostab::InpainterBase
stabilizedFrames_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedFrames_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizedMasks_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedMasks_;$/;"	m	class:cv::videostab::StabilizerBase
stack	/usr/local/include/opencv2/core/core_c.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner
stack	/usr/local/include/opencv2/core/core_c.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator
stageType	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        int stageType;$/;"	m	class:cv::CascadeClassifier::Data
stage_classifier	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade
stages	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        vector<Stage> stages;$/;"	m	class:cv::CascadeClassifier::Data
stale	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int stale;$/;"	m	struct:CvBGCodeBookElem
start	/usr/local/include/opencv2/flann/timer.h	/^    void start()$/;"	f	class:cvflann::StartStopTimer
start	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect
startDistanceBucket	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int startDistanceBucket;$/;"	m	class:cv::SelfSimDescriptor
startIdxs	/usr/local/include/opencv2/features2d/features2d.hpp	/^        vector<int> startIdxs;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
startIndices	/usr/local/include/opencv2/features2d/features2d.hpp	/^        vector<int> startIndices;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
startTime	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int64 startTime;$/;"	m	class:cv::TickMeter
startTime	/usr/local/include/opencv2/flann/timer.h	/^    clock_t startTime;$/;"	m	class:cvflann::StartStopTimer
startY	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
startY0	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
start_index	/usr/local/include/opencv2/core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
start_index	/usr/local/include/opencv2/core/types_c.h	/^  int    start_index;         \/* Index of the first element in the block +  *\/$/;"	m	struct:CvSeqBlock
start_step	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_PROP_RW int start_step;$/;"	m	struct:CvEMParams
state	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    Ptr<CvStereoBMState> state;$/;"	m	class:cv::StereoBM
state	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int state;$/;"	m	class:CvLevMarq
state	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^CVAPI(void) cvReleaseStereoBMState( CvStereoBMState** state );$/;"	v
state	/usr/local/include/opencv2/legacy/compat.hpp	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState
state	/usr/local/include/opencv2/legacy/legacy.hpp	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon277
state	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo
state	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) cvReleaseStereoGCState( CvStereoGCState** state );$/;"	v
statePost	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat statePost;          \/\/!< corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))$/;"	m	class:cv::KalmanFilter
statePre	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat statePre;           \/\/!< predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)$/;"	m	class:cv::KalmanFilter
state_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
state_post	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman
state_pre	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman
states_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<ComponentState> states_;$/;"	m	class:cv::detail::DpSeamFinder
static_delete	/usr/local/include/opencv2/flann/any.h	/^    virtual void static_delete(void** x)$/;"	f	struct:cvflann::anyimpl::big_any_policy
static_delete	/usr/local/include/opencv2/flann/any.h	/^    virtual void static_delete(void**) { }$/;"	f	struct:cvflann::anyimpl::small_any_policy
status	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int status;$/;"	m	struct:CvCliqueFinder
status_	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    std::vector<uchar> status_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
std	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace std {$/;"	n
std_threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
stddev	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    double stddev;$/;"	m	struct:perf::performance_metrics
stdev	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    float stdev() const { return stdev_; }$/;"	f	class:cv::videostab::GaussianMotionFilter
stdevThresh	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float stdevThresh() const { return stdevThresh_; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
stdevThresh_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    float stdevThresh_;$/;"	m	class:cv::videostab::ConsistentMosaicInpainter
stdev_	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    float stdev_;$/;"	m	class:cv::videostab::GaussianMotionFilter
step	/usr/local/include/opencv2/core/cuda_devptrs.hpp	/^            size_t step;$/;"	m	struct:cv::gpu::PtrStep
step	/usr/local/include/opencv2/core/gpumat.hpp	/^        size_t step;$/;"	m	class:cv::gpu::GpuMat
step	/usr/local/include/opencv2/core/types_c.h	/^        int step;$/;"	m	struct:CvMatND::__anon50
step	/usr/local/include/opencv2/core/types_c.h	/^    int step;$/;"	m	struct:CvMat
step	/usr/local/include/opencv2/gpu/gpu.hpp	/^    size_t step;$/;"	m	class:cv::gpu::CudaMem
step	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u
step	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step;$/;"	m	struct:_CvPixelPosition32f
step	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step;$/;"	m	struct:_CvPixelPosition8s
step	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int step() const { return image ? image->widthStep : 0; }$/;"	f	class:CvImage
step	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int step() const { return matrix ? matrix->step : 0; }$/;"	f	class:CvMatrix
step	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double step;$/;"	m	struct:CvParamGrid
step	/usr/local/include/opencv2/ocl/ocl.hpp	/^            size_t step;$/;"	m	class:cv::ocl::oclMat
step1	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline size_t GpuMat::step1() const$/;"	f	class:cv::gpu::GpuMat
step1	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t Mat::step1(int i) const { return step.p[i]\/elemSize1(); }$/;"	f	class:cv::Mat
step1	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::step1(int i) const { return step.p[i]\/elemSize1(); }$/;"	f	class:cv::Mat_
step1	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline size_t oclMat::step1() const$/;"	f	class:cv::ocl::oclMat
stepScale	/usr/local/include/opencv2/legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
stepT	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::stepT(int i) const { return step.p[i]\/elemSize(); }$/;"	f	class:cv::Mat_
step_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
step_arr	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u
step_arr	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f
step_arr	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s
stereo	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvStereoCamera stereo;$/;"	m	class:CvCalibFilter
stereoCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvComputeStereoParamsForCameras(CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void) icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera);$/;"	v
stereoparams	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int) icvComputeRestStereoParams(CvStereoCamera *stereoparams);$/;"	v
stop	/usr/local/include/opencv2/flann/timer.h	/^    void stop()$/;"	f	class:cvflann::StartStopTimer
storage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	v
storage	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	v
storage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvCalibFilter
storage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMemStorage* storage;$/;"	m	struct:CvBGCodeBookModel
storage	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvSVM
storage	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvSVMSolver
storageIn	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    cv::FileStorage storageIn;$/;"	m	class:perf::Regression
storageInPath	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    std::string storageInPath;$/;"	m	class:perf::Regression
storageOut	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    cv::FileStorage storageOut;$/;"	m	class:perf::Regression
storageOutPath	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    std::string storageOutPath;$/;"	m	class:perf::Regression
str	/usr/local/include/opencv2/core/types_c.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon51
str	/usr/local/include/opencv2/core/types_c.h	/^    CvString str;$/;"	m	struct:CvStringHashNode
strdup	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define strdup /;"	d
stream	/usr/local/include/opencv2/flann/logger.h	/^    FILE* stream;$/;"	m	class:cvflann::Logger
stricmp	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^#define stricmp /;"	d
stride	/usr/local/include/opencv2/flann/matrix.h	/^    size_t stride;$/;"	m	class:cvflann::Matrix
stride	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ unsigned int stride()$/;"	f	struct:cv::gpu::device::Block
string	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::string& string() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
strings_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int strings_;                        \/\/ number of uchars the descriptor consists of$/;"	m	class:cv::BRISK
strong_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  float strong_threshold;$/;"	m	class:cv::linemod::ColorGradient
structSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^        int structSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
structSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int structSize;$/;"	m	class:cv::FernClassifier
style	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Style style() const { return style_; }$/;"	f	class:cv::GlFont
style_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Style style_;$/;"	m	class:cv::GlFont
subdiv	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(int)   icvSubdiv2DCheck( CvSubdiv2D* subdiv );$/;"	v
subdiv	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvCalcSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
subdiv	/usr/local/include/opencv2/legacy/legacy.hpp	/^CVAPI(void)  cvClearSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
subsample_mask	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* subsample_mask;$/;"	m	class:CvBoost
subsample_portion	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW float subsample_portion;$/;"	m	struct:CvGBTreesParams
subsample_test	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* subsample_test;$/;"	m	class:CvGBTrees
subsample_train	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* subsample_train;$/;"	m	class:CvGBTrees
subsamplingFactor	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    int subsamplingFactor; \/\/ amount of random subsampling$/;"	m	class:cv::gpu::VIBE_GPU
subscribe	/usr/local/include/opencv2/flann/object_factory.h	/^    bool subscribe(UniqueIdType id, ObjectCreator creator)$/;"	f	class:cvflann::ObjectFactory
subset	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<int> subset;$/;"	m	class:cv::SpinImageModel
subset	/usr/local/include/opencv2/ml/ml.hpp	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon291
subsets	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        vector<int> subsets;$/;"	m	class:cv::CascadeClassifier::Data
subtree_weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* subtree_weights;$/;"	m	class:CvBoost
success_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
suiteName	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    std::string suiteName;$/;"	m	class:perf::Regression
sum	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat** sum;$/;"	m	class:CvNormalBayesClassifier
sum	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
sum	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
sumTime	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int64 sumTime;$/;"	m	class:cv::TickMeter
sum_response	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* sum_response;$/;"	m	class:CvBoost
sum_response	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* sum_response;$/;"	m	class:CvGBTrees
sum_response_tmp	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* sum_response_tmp;$/;"	m	class:CvGBTrees
summary	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
superres	/usr/local/include/opencv2/superres/optical_flow.hpp	/^    namespace superres$/;"	n	namespace:cv
superres	/usr/local/include/opencv2/superres/superres.hpp	/^    namespace superres$/;"	n	namespace:cv
suppressNonmaxSize	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int suppressNonmaxSize;$/;"	m	class:cv::StarDetector
suppressNonmaxSize	/usr/local/include/opencv2/legacy/compat.hpp	/^    int suppressNonmaxSize;$/;"	m	struct:CvStarDetectorParams
surf	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    Ptr<Feature2D> surf;$/;"	m	class:cv::detail::SurfFeaturesFinder
surf_	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    gpu::SURF_GPU surf_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
sv	/usr/local/include/opencv2/ml/ml.hpp	/^    float** sv;$/;"	m	class:CvSVM
sv_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc
sv_index	/usr/local/include/opencv2/ml/ml.hpp	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc
sv_total	/usr/local/include/opencv2/ml/ml.hpp	/^    int sv_total;$/;"	m	class:CvSVM
svmDetector	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP vector<float> svmDetector;$/;"	m	struct:cv::HOGDescriptor
svm_type	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int         svm_type;$/;"	m	struct:CvSVMParams
swap	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline void swap(GpuMat& a, GpuMat& b)$/;"	f	namespace:cv::gpu
swap	/usr/local/include/opencv2/flann/any.h	/^    any& swap(any& x)$/;"	f	struct:cvflann::any
swap	/usr/local/include/opencv2/gpu/device/utility.hpp	/^    template <typename T> void __device__ __host__ __forceinline__ swap(T& a, T& b)$/;"	f	namespace:cv::gpu::device
swap	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline void oclMat::swap(oclMat &b)$/;"	f	class:cv::ocl::oclMat
swap	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        static inline void swap( oclMat &a, oclMat &b )$/;"	f	namespace:cv::ocl
sync	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void sync()$/;"	f	struct:cv::gpu::device::Block
syncthreadsOr	/usr/local/include/opencv2/gpu/device/emulation.hpp	/^        static __device__ __forceinline__ int syncthreadsOr(int pred)$/;"	f	struct:cv::gpu::device::Emulation
sz1080p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz1080p = cv::Size(1920, 1080);$/;"	m	namespace:perf
sz1440p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz1440p = szWQHD;$/;"	m	namespace:perf
sz2160p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz2160p = cv::Size(3840, 2160);\/\/UHDTV1 4K$/;"	m	namespace:perf
sz240p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz240p = szQVGA;$/;"	m	namespace:perf
sz2K	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz2K = cv::Size(2048, 2048);$/;"	m	namespace:perf
sz3MP	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz3MP = cv::Size(2048, 1536);$/;"	m	namespace:perf
sz4320p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz4320p = cv::Size(7680, 4320);\/\/UHDTV2 8K$/;"	m	namespace:perf
sz5MP	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz5MP = cv::Size(2592, 1944);$/;"	m	namespace:perf
sz720p	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sz720p = cv::Size(1280, 720);$/;"	m	namespace:perf
szODD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szODD = cv::Size(127, 61);$/;"	m	namespace:perf
szQVGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szQVGA = cv::Size(320, 240);$/;"	m	namespace:perf
szSVGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSVGA = cv::Size(800, 600);$/;"	m	namespace:perf
szSXGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSXGA = cv::Size(1280, 1024);$/;"	m	namespace:perf
szSmall128	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSmall128 = cv::Size(128, 128);$/;"	m	namespace:perf
szSmall24	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSmall24 = cv::Size(24, 24);$/;"	m	namespace:perf
szSmall32	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSmall32 = cv::Size(32, 32);$/;"	m	namespace:perf
szSmall64	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szSmall64 = cv::Size(64, 64);$/;"	m	namespace:perf
szVGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szVGA = cv::Size(640, 480);$/;"	m	namespace:perf
szWQHD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szWQHD = cv::Size(2560, 1440);$/;"	m	namespace:perf
szXGA	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szXGA = cv::Size(1024, 768);$/;"	m	namespace:perf
sznHD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size sznHD = cv::Size(640, 360);$/;"	m	namespace:perf
szqHD	/usr/local/include/opencv2/ts/ts_perf.hpp	/^const cv::Size szqHD = cv::Size(960, 540);$/;"	m	namespace:perf
t	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::t() const$/;"	f	class:cv::Matx
t	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int t;$/;"	m	struct:CvBGCodeBookModel
t	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat oclMat::t() const$/;"	f	class:cv::ocl::oclMat
t	/usr/local/include/opencv2/stitching/detail/camera.hpp	/^    Mat t; \/\/ Translation$/;"	m	struct:cv::detail::CameraParams
t	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    float t[3];$/;"	m	struct:cv::detail::ProjectorBase
t	/usr/local/include/opencv2/ts/ts.hpp	/^    double t, freq;$/;"	m	class:cvtest::BadArgTest
tLastUpdate	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int tLastUpdate;$/;"	m	struct:CvBGCodeBookElem
table	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    int (*table)[8];$/;"	m	class:cv::of2::FabMapLUT
table_color	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat table_color;$/;"	m	class:cv::gpu::DisparityBilateralFilter
table_number_	/usr/local/include/opencv2/flann/lsh_index.h	/^    unsigned int table_number_;$/;"	m	class:cvflann::LshIndex
table_space	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat table_space;$/;"	m	class:cv::gpu::DisparityBilateralFilter
tables_	/usr/local/include/opencv2/flann/lsh_index.h	/^    std::vector<lsh::LshTable<ElementType> > tables_;$/;"	m	class:cvflann::LshIndex
tag	/usr/local/include/opencv2/core/types_c.h	/^    int tag;$/;"	m	struct:CvFileNode
target_precision_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    float target_precision_;$/;"	m	class:cvflann::AutotunedIndex
tau	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double tau;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
tear_down_tc_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tell	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline size_t SeqIterator<_Tp>::tell() const$/;"	f	class:cv::SeqIterator
temp	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat temp;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
temp1	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman
temp1	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat temp1;$/;"	m	class:cv::KalmanFilter
temp2	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* temp2;$/;"	m	struct:CvKalman
temp2	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat temp2;$/;"	m	class:cv::KalmanFilter
temp3	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* temp3;$/;"	m	struct:CvKalman
temp3	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat temp3;$/;"	m	class:cv::KalmanFilter
temp4	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* temp4;$/;"	m	struct:CvKalman
temp4	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat temp4;$/;"	m	class:cv::KalmanFilter
temp5	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* temp5;$/;"	m	struct:CvKalman
temp5	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat temp5;$/;"	m	class:cv::KalmanFilter
tempImg	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat*  tempImg;$/;"	m	class:CvCalibFilter
temp_storage	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData
templ_block	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
templ_spect	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
template_id	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int template_id;$/;"	m	struct:cv::linemod::Match
templf	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat imagef, templf;$/;"	m	struct:cv::gpu::MatchTemplateBuf
templf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat imagef, templf;$/;"	m	struct:cv::ocl::MatchTemplateBuf
termCriteria	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    CvTermCriteria termCriteria() { return term_criteria_; }$/;"	f	class:cv::detail::BundleAdjusterBase
term_crit	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    CvTermCriteria term_crit;$/;"	m	struct:cv::CvMeanShiftTrackerParams
term_crit	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvEMParams
term_crit	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams
term_crit	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams
term_crit	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvRTParams
term_criteria_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    CvTermCriteria term_criteria_;$/;"	m	class:cv::detail::BundleAdjusterBase
termcrit	/usr/local/include/opencv2/features2d/features2d.hpp	/^    TermCriteria termcrit;$/;"	m	class:cv::BOWKMeansTrainer
terminal_cost_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    float terminal_cost_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
terminationReason	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    int terminationReason;$/;"	m	struct:perf::performance_metrics
test	/usr/local/include/opencv2/flann/dynamic_bitset.h	/^    bool test(size_t index) const$/;"	f	class:cvflann::DynamicBitset
test	/usr/local/include/opencv2/ts/ts.hpp	/^    BaseTest* test;$/;"	m	struct:cvtest::TestInfo
test	/usr/local/include/opencv2/ts/ts_perf.hpp	/^        TestBase* test;$/;"	m	class:perf::TestBase::_declareHelper
testDataset_	/usr/local/include/opencv2/flann/autotuned_index.h	/^    Matrix<ElementType> testDataset_;$/;"	m	class:cvflann::AutotunedIndex
testDefaults	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> testDefaults;$/;"	m	class:cv::of2::FabMap2
testImgDescriptors	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<Mat> testImgDescriptors;$/;"	m	class:cv::of2::FabMap
testInvertedMap	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    map<int, vector<int> > testInvertedMap;$/;"	m	class:cv::of2::FabMap2
test_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_array	/usr/local/include/opencv2/ts/ts.hpp	/^    vector<vector<void*> > test_array;$/;"	m	class:cvtest::ArrayTest
test_base_name	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_base_name	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_count	/usr/local/include/opencv2/ts/ts.hpp	/^    int test_case_count; \/\/ the total number of test cases$/;"	m	class:cvtest::BaseTest
test_case_count_scale	/usr/local/include/opencv2/ts/ts.hpp	/^    double test_case_count_scale;$/;"	m	struct:cvtest::TSParams
test_case_idx	/usr/local/include/opencv2/ts/ts.hpp	/^    int test_case_idx;$/;"	m	class:cvtest::BadArgTest
test_case_idx	/usr/local/include/opencv2/ts/ts.hpp	/^    int test_case_idx;$/;"	m	struct:cvtest::TestInfo
test_case_infos_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_fn_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    PixelTestFn test_fn_;$/;"	m	class:cv::BriefDescriptorExtractor
test_index_checks	/usr/local/include/opencv2/flann/index_testing.h	/^float test_index_checks(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precision	/usr/local/include/opencv2/flann/index_testing.h	/^float test_index_precision(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precisions	/usr/local/include/opencv2/flann/index_testing.h	/^void test_index_precisions(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_indices_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_mat	/usr/local/include/opencv2/ts/ts.hpp	/^    vector<vector<Mat> > test_mat;$/;"	m	class:cvtest::ArrayTest
test_meta_factory	/usr/local/include/opencv2/ts/ts_gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_part_results	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_properites_mutex_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_sample_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* test_sample_idx;$/;"	m	class:CvMLData
testing	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace testing {$/;"	n
testing_internal	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace testing_internal {$/;"	n
tests_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
texCoord_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Buffer texCoord_;$/;"	m	class:cv::ogl::Arrays
texCoord_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    GlBuffer texCoord_;$/;"	m	class:cv::GlArrays
textureThreshold	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int textureThreshold;  \/\/ the disparity is only computed for pixels$/;"	m	struct:CvStereoBMState
tflag	/usr/local/include/opencv2/ml/ml.hpp	/^    int tflag;$/;"	m	struct:CvDTreeTrainData
theta	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double theta;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
theta	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float theta;$/;"	m	class:cv::CvAffinePose
thetaMax	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double thetaMin, thetaMax;$/;"	m	class:cv::PatchGenerator
thetaMin	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double thetaMin, thetaMax;$/;"	m	class:cv::PatchGenerator
thickness	/usr/local/include/opencv2/core/core_c.h	/^    int         thickness;    \/\/Qt: weight               \/* letters thickness *\/$/;"	m	struct:CvFont
thread_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thresh	/usr/local/include/opencv2/core/types_c.h	/^    float   thresh[CV_MAX_DIM][2];  \/* For uniform histograms.                      *\/$/;"	m	struct:CvHistogram
thresh	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_binary_func
thresh	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_binary_inv_func
thresh	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_to_zero_func
thresh	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_trunc_func
thresh	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    float thresh; \/\/ max error to classify as inlier$/;"	m	struct:cv::videostab::RansacParams
thresh2	/usr/local/include/opencv2/core/types_c.h	/^    float** thresh2;                \/* For non-uniform histograms.                  *\/$/;"	m	struct:CvHistogram
thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
thresh_	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int thresh_;$/;"	m	class:cv::FastAdjuster
thresh_binary_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_func(const thresh_binary_func& other)$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct thresh_binary_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_binary_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_inv_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_inv_func(const thresh_binary_inv_func& other)$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_inv_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct thresh_binary_inv_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_to_zero_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_func(const thresh_to_zero_func& other)$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct thresh_to_zero_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_to_zero_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_inv_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_inv_func(const thresh_to_zero_inv_func& other)$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_inv_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct thresh_to_zero_inv_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_trunc_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_trunc_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_trunc_func(const thresh_trunc_func& other)$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_trunc_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename T> struct thresh_trunc_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
threshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int threshold;$/;"	m	class:cv::BRISK
threshold	/usr/local/include/opencv2/features2d/features2d.hpp	/^    int threshold;$/;"	m	class:cv::FastFeatureDetector
threshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int threshold;$/;"	m	class:cv::gpu::FAST_GPU
threshold	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int threshold;$/;"	m	class:cv::LDetector
threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            float threshold; \/\/ for ordered features only$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^            float threshold;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier
threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    float* threshold;$/;"	m	struct:CvHaarClassifier
thresholdStep	/usr/local/include/opencv2/features2d/features2d.hpp	/^      CV_PROP_RW float thresholdStep;$/;"	m	struct:cv::SimpleBlobDetector::Params
threshold_L2hys	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double threshold_L2hys;$/;"	m	struct:cv::gpu::HOGDescriptor
threshold_L2hys	/usr/local/include/opencv2/ocl/ocl.hpp	/^            double threshold_L2hys;$/;"	m	struct:cv::ocl::HOGDescriptor
tileInfo	/usr/local/include/opencv2/core/types_c.h	/^    struct _IplTileInfo *tileInfo;  \/* "           " *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo
tilted	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int tilted;$/;"	m	struct:CvHaarFeature
timeLimit	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    int64 timeLimit;$/;"	m	class:perf::TestBase
timeLimitDefault	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    static int64 timeLimitDefault;$/;"	m	class:perf::TestBase
times	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    TimeVector times;$/;"	m	class:perf::TestBase
tl	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp> Rect_<_Tp>::tl() const { return Point_<_Tp>(x,y); }$/;"	f	class:cv::Rect_
tls_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
tmpCorners_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat tmpCorners_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
to	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
top	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
top	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
top	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
top	/usr/local/include/opencv2/core/types_c.h	/^    CvMemBlock* top;              \/* Current memory block - top of the stack. *\/$/;"	m	struct:CvMemStorage
top	/usr/local/include/opencv2/core/types_c.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos
topLeft	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Point2f topLeft;$/;"	m	class:cv::Subdiv2D
top_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double top_;$/;"	m	class:cv::GlCamera
topline	/usr/local/include/opencv2/legacy/compat.hpp	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f
topline	/usr/local/include/opencv2/legacy/compat.hpp	/^    schar*  topline;$/;"	m	struct:_CvPixelPosition8s
topline	/usr/local/include/opencv2/legacy/compat.hpp	/^    uchar*  topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u
total	/usr/local/include/opencv2/core/mat.hpp	/^inline size_t Mat::total() const$/;"	f	class:cv::Mat
total	/usr/local/include/opencv2/ml/ml.hpp	/^    int total;$/;"	m	class:CvKNearest
totalCost	/usr/local/include/opencv2/flann/autotuned_index.h	/^        float totalCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
totalTime	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    int64 totalTime;$/;"	m	class:perf::TestBase
total_class_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int total_class_count;$/;"	m	class:CvMLData
total_num_matches_	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    int total_num_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
tr1	/usr/local/include/opencv2/ts/ts_gtest.h	/^namespace tr1 {$/;"	n	namespace:std
trace	/usr/local/include/opencv2/core/operations.hpp	/^double trace(const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
trace	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    GpuMat det, trace;$/;"	m	class:cv::gpu::SURF_GPU
trace	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            oclMat det, trace;$/;"	m	class:cv::ocl::SURF_OCL
trackBuf1	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat trackBuf1, trackBuf2;$/;"	m	struct:cv::ocl::CannyBuf
trackBuf2	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat trackBuf1, trackBuf2;$/;"	m	struct:cv::ocl::CannyBuf
trackbox	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    RotatedRect trackbox;$/;"	m	class:cv::CvHybridTracker
trackedObjects	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        std::vector<TrackedObject> trackedObjects;$/;"	m	class:DetectionBasedTracker
tracking_type	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int tracking_type;$/;"	m	struct:cv::CvMeanShiftTrackerParams
trainDescCollection	/usr/local/include/opencv2/features2d/features2d.hpp	/^    vector<Mat> trainDescCollection;$/;"	m	class:cv::DescriptorMatcher
trainDescCollection	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> trainDescCollection;$/;"	m	class:cv::gpu::BruteForceMatcher_GPU_base
trainDescCollection	/usr/local/include/opencv2/ocl/ocl.hpp	/^            std::vector<oclMat> trainDescCollection;$/;"	m	class:cv::ocl::BruteForceMatcher_OCL_base
trainIdx	/usr/local/include/opencv2/features2d/features2d.hpp	/^    CV_PROP_RW int trainIdx; \/\/ train descriptor index$/;"	m	struct:cv::DMatch
trainImagesList	/usr/local/include/opencv2/legacy/legacy.hpp	/^        string trainImagesList;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
trainLabels	/usr/local/include/opencv2/ml/ml.hpp	/^    Mat trainLabels;$/;"	m	class:cv::EM
trainLogLikelihoods	/usr/local/include/opencv2/ml/ml.hpp	/^    Mat trainLogLikelihoods;$/;"	m	class:cv::EM
trainPath	/usr/local/include/opencv2/legacy/legacy.hpp	/^        string trainPath;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
trainPointCollection	/usr/local/include/opencv2/features2d/features2d.hpp	/^    KeyPointCollection trainPointCollection;$/;"	m	class:cv::GenericDescriptorMatcher
trainProbs	/usr/local/include/opencv2/ml/ml.hpp	/^    Mat trainProbs;$/;"	m	class:cv::EM
trainSamples	/usr/local/include/opencv2/ml/ml.hpp	/^    Mat trainSamples;$/;"	m	class:cv::EM
train_data	/usr/local/include/opencv2/ml/ml.hpp	/^    const CvMat* train_data;$/;"	m	struct:CvDTreeTrainData
train_method	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int train_method;$/;"	m	struct:CvANN_MLP_TrainParams
train_sample_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int train_sample_count;$/;"	m	class:CvMLData
train_sample_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* train_sample_idx;$/;"	m	class:CvMLData
train_sample_part	/usr/local/include/opencv2/ml/ml.hpp	/^    } train_sample_part;$/;"	m	struct:CvTrainTestSplit	typeref:union:CvTrainTestSplit::__anon299
train_sample_part_mode	/usr/local/include/opencv2/ml/ml.hpp	/^    int train_sample_part_mode;$/;"	m	struct:CvTrainTestSplit
trainingDefaults	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<double> trainingDefaults;$/;"	m	class:cv::of2::FabMap2
trainingImgDescriptors	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    vector<Mat> trainingImgDescriptors;$/;"	m	class:cv::of2::FabMap
trainingInvertedMap	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^    map<int, vector<int> > trainingInvertedMap;$/;"	m	class:cv::of2::FabMap2
transP	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM
transVect	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera
transVector	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float transVector[3];$/;"	m	struct:CvStereoCamera
transform	/usr/local/include/opencv2/gpu/device/transform.hpp	/^    static inline void transform(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::gpu::device
transform	/usr/local/include/opencv2/gpu/device/transform.hpp	/^    static inline void transform(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::gpu::device
transform	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt beg, InIt end, OutIt out, UnOp op)$/;"	f	struct:cv::gpu::device::Warp
transform	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)$/;"	f	struct:cv::gpu::device::Warp
transformSimple	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        __global__ static void transformSimple(const PtrStepSz<T> src, PtrStep<D> dst, const Mask mask, const UnOp op)$/;"	f	namespace:cv::gpu::device::transform_detail
transformSimple	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSimple(const PtrStepSz<T1> src1, const PtrStep<T2> src2, PtrStep<D> dst,$/;"	f	namespace:cv::gpu::device::transform_detail
transformSmart	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T1> src1_, const PtrStep<T2> src2_, PtrStep<D> dst_,$/;"	f	namespace:cv::gpu::device::transform_detail
transformSmart	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T> src_, PtrStep<D> dst_, const Mask mask, const UnOp op)$/;"	f	namespace:cv::gpu::device::transform_detail
transform_detail	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^    namespace transform_detail$/;"	n	namespace:cv::gpu::device
transformedFrame1_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedGrayFrame1_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedMask1_	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
transfrom	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void transfrom(InIt beg, InIt end, OutIt out, UnOp op)$/;"	f	struct:cv::gpu::device::Block
transfrom	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void transfrom(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)$/;"	f	struct:cv::gpu::device::Block
transitionMatrix	/usr/local/include/opencv2/video/tracking.hpp	/^    Mat transitionMatrix;   \/\/!< state transition matrix (A)$/;"	m	class:cv::KalmanFilter
transition_matrix	/usr/local/include/opencv2/video/tracking.hpp	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman
translationAndScale2dMotionStd	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    static RansacParams translationAndScale2dMotionStd() { return RansacParams(3, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
translationMotionStd	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    static RansacParams translationMotionStd() { return RansacParams(2, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
tree_error	/usr/local/include/opencv2/ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
tree_iterator	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_iterator	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_risk	/usr/local/include/opencv2/ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
tree_roots_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    NodePtr* tree_roots_;$/;"	m	class:cvflann::KDTreeIndex
tree_storage	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData
trees	/usr/local/include/opencv2/ml/ml.hpp	/^    CvForestTree** trees;$/;"	m	class:CvRTrees
trees_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int trees_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
trees_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    int trees_;$/;"	m	class:cvflann::KDTreeIndex
trees_	/usr/local/include/opencv2/legacy/legacy.hpp	/^    vector<RandomizedTree> trees_;$/;"	m	class:cv::RTreeClassifier
trimRatio	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    float trimRatio() const { return trimRatio_; }$/;"	f	class:cv::videostab::StabilizerBase
trimRatio_	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    float trimRatio_;$/;"	m	class:cv::videostab::StabilizerBase
true_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
truncate_pruned_tree	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams
trySmallerWindows	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int trySmallerWindows; \/\/ if 1, the results may be more accurate,$/;"	m	struct:CvStereoBMState
ts	/usr/local/include/opencv2/ts/ts.hpp	/^    TS* ts;$/;"	m	class:cvtest::BaseTest
tsDisabled	/usr/local/include/opencv2/contrib/contrib.hpp	/^        tsDisabled      = 10$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsNone	/usr/local/include/opencv2/contrib/contrib.hpp	/^        tsNone          = 0,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsSearching	/usr/local/include/opencv2/contrib/contrib.hpp	/^        tsSearching     = 1,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsSetWindow	/usr/local/include/opencv2/contrib/contrib.hpp	/^        tsSetWindow     = 3,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsTracking	/usr/local/include/opencv2/contrib/contrib.hpp	/^        tsTracking      = 2,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	/usr/local/include/opencv2/ts/ts_gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_element	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T)> {$/;"	s	namespace:std::tr1
type	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline int GpuMat::type() const$/;"	f	class:cv::gpu::GpuMat
type	/usr/local/include/opencv2/core/mat.hpp	/^inline int Mat::type() const { return CV_MAT_TYPE(flags); }$/;"	f	class:cv::Mat
type	/usr/local/include/opencv2/core/mat.hpp	/^inline int SparseMat::type() const$/;"	f	class:cv::SparseMat
type	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::type() const$/;"	f	class:cv::Mat_
type	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::type() const$/;"	f	class:cv::SparseMat_
type	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int type() const { return type_; }$/;"	f	class:cv::ogl::Buffer
type	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int type() const { return type_; }$/;"	f	class:cv::GlBuffer
type	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline int type() const { return type_; }$/;"	f	class:cv::GlTexture
type	/usr/local/include/opencv2/core/operations.hpp	/^    int type() const { return DataType<_Tp>::type; }$/;"	f	class:cv::Vector
type	/usr/local/include/opencv2/core/operations.hpp	/^inline int FileNode::type() const { return !node ? NONE : (node->tag & TYPE_MASK); }$/;"	f	class:cv::FileNode
type	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::type() const$/;"	f	class:cv::Seq
type	/usr/local/include/opencv2/core/types_c.h	/^    int     type;$/;"	m	struct:CvHistogram
type	/usr/local/include/opencv2/core/types_c.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria
type	/usr/local/include/opencv2/core/types_c.h	/^    int type;$/;"	m	struct:CvMat
type	/usr/local/include/opencv2/core/types_c.h	/^    int type;$/;"	m	struct:CvMatND
type	/usr/local/include/opencv2/core/types_c.h	/^    int type;$/;"	m	struct:CvSparseMat
type	/usr/local/include/opencv2/flann/any.h	/^    const std::type_info& type() const$/;"	f	struct:cvflann::any
type	/usr/local/include/opencv2/flann/any.h	/^    typedef big_any_policy<T> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	/usr/local/include/opencv2/flann/any.h	/^    typedef small_any_policy<T*> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	/usr/local/include/opencv2/flann/any.h	/^    typedef void type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	/usr/local/include/opencv2/flann/any.h	/^    virtual const std::type_info& type() { return typeid(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	f	struct:cv::flann::CvType
type	/usr/local/include/opencv2/flann/matrix.h	/^    flann_datatype_t type;$/;"	m	class:cvflann::UntypedMatrix
type	/usr/local/include/opencv2/flann/matrix.h	/^    typedef T type;$/;"	t	class:cvflann::Matrix
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	f	struct:cvflann::Datatype
type	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            typedef T type;$/;"	t	struct:cv::gpu::device::reduce_detail::GetType
type	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            typedef T1 type;$/;"	t	struct:cv::gpu::device::reduce_detail::StaticIf
type	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            typedef T2 type;$/;"	t	struct:cv::gpu::device::reduce_detail::StaticIf
type	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            typedef T type;$/;"	t	struct:cv::gpu::device::reduce_key_val_detail::GetType
type	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            typedef T1 type;$/;"	t	struct:cv::gpu::device::reduce_key_val_detail::StaticIf
type	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            typedef T2 type;$/;"	t	struct:cv::gpu::device::reduce_key_val_detail::StaticIf
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::PointerTraits
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::ReferenceTraits
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnConst
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnVolatile
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnConst
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnVolatile
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            typedef void type;$/;"	t	struct:cv::gpu::device::type_traits_detail::PointerTraits
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::Select
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::Select
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef T type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef bool type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef char type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef double type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef float type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef int type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef long type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef short type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef unsigned char type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef unsigned int type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef unsigned long type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/gpu/device/limits.hpp	/^        typedef unsigned short type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^        int type;$/;"	m	struct:cv::Subdiv2D::Vertex
type	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int type() const { return matrix ? CV_MAT_TYPE(matrix->type) : 0; }$/;"	f	class:CvMatrix
type	/usr/local/include/opencv2/ml/ml.hpp	/^    int type;$/;"	m	struct:CvVectors
type	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline int oclMat::type() const$/;"	f	class:cv::ocl::oclMat
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	/usr/local/include/opencv2/ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    int type_;$/;"	m	class:cv::ogl::Buffer
type_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int type_;$/;"	m	class:cv::GlBuffer
type_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    int type_;$/;"	m	class:cv::GlTexture
type_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_name	/usr/local/include/opencv2/core/types_c.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo
type_param	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
type_traits_detail	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^    namespace type_traits_detail$/;"	n	namespace:cv::gpu::device
typed_base_any_policy	/usr/local/include/opencv2/flann/any.h	/^struct typed_base_any_policy : base_any_policy$/;"	s	namespace:cvflann::anyimpl
u	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int u;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
u	/usr/local/include/opencv2/core/types_c.h	/^    uint64 u;$/;"	m	union:Cv64suf
u	/usr/local/include/opencv2/core/types_c.h	/^    unsigned u;$/;"	m	union:Cv32suf
u	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
u	/usr/local/include/opencv2/legacy/legacy.hpp	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon277
u	/usr/local/include/opencv2/ml/ml.hpp	/^    unsigned short* u;$/;"	m	struct:CvPair16u32s
u	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
u1s	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> u1s;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
u2	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
u2	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::ocl::StereoBeliefPropagation
u2s	/usr/local/include/opencv2/gpu/gpu.hpp	/^    std::vector<GpuMat> u2s;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
uPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat uPyr_[2];$/;"	m	class:cv::gpu::PyrLKOpticalFlow
uPyr_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat uPyr_[2];$/;"	m	class:cv::ocl::PyrLKOpticalFlow
u_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uchar	/usr/local/include/opencv2/core/types_c.h	/^   typedef unsigned char uchar;$/;"	t
uchar	/usr/local/include/opencv2/gpu/device/common.hpp	/^        typedef unsigned char uchar;$/;"	t	namespace:cv::gpu::device
uint	/usr/local/include/opencv2/gpu/device/common.hpp	/^            typedef unsigned int uint;$/;"	t	namespace:cv::gpu::device
uint32_t	/usr/local/include/opencv2/flann/dist.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64	/usr/local/include/opencv2/core/types_c.h	/^   typedef uint64_t uint64;$/;"	t
uint64	/usr/local/include/opencv2/core/types_c.h	/^   typedef unsigned __int64 uint64;$/;"	t
uint64_t	/usr/local/include/opencv2/flann/dist.h	/^typedef unsigned __int64 uint64_t;$/;"	t
unary_function	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template<typename Argument, typename Result> struct unary_function : public std::unary_function<Argument, Result> {};$/;"	s	namespace:cv::gpu::device
unary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ unary_negate() : unary_function<typename Predicate::argument_type, bool>(){}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        __device__ __forceinline__ unary_negate(const unary_negate& other) : unary_function<typename Predicate::argument_type, bool>(){}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^      explicit __host__ __device__ __forceinline__ unary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	/usr/local/include/opencv2/gpu/device/functional.hpp	/^    template <typename Predicate> struct unary_negate : unary_function<typename Predicate::argument_type, bool>$/;"	s	namespace:cv::gpu::device
undistImg	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat*  undistImg;$/;"	m	class:CvCalibFilter
undistMap	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat*  undistMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter
uniform	/usr/local/include/opencv2/core/operations.hpp	/^inline double RNG::uniform(double a, double b) { return ((double)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	/usr/local/include/opencv2/core/operations.hpp	/^inline float RNG::uniform(float a, float b) { return ((float)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	/usr/local/include/opencv2/core/operations.hpp	/^inline int RNG::uniform(int a, int b) { return a == b ? a : (int)(next()%(b - a) + a); }$/;"	f	class:cv::RNG
unionBr_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
unionSize_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Size unionSize_;$/;"	m	class:cv::detail::DpSeamFinder
unionTl_	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
uniquenessRatio	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    CV_PROP_RW int uniquenessRatio;$/;"	m	class:cv::StereoSGBM
uniquenessRatio	/usr/local/include/opencv2/calib3d/calib3d.hpp	/^    int uniquenessRatio;   \/\/ accept the computed disparity d* only if$/;"	m	struct:CvStereoBMState
unregister	/usr/local/include/opencv2/flann/object_factory.h	/^    bool unregister(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
unroll	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, const UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, const BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unused	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat unused;$/;"	m	struct:cv::gpu::CannyBuf
unused	/usr/local/include/opencv2/gpu/gpu.hpp	/^    vector<GpuMat> unused;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
up_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Point3d up_;$/;"	m	class:cv::GlCamera
update	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::DeblurerBase
update	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::InpainterBase
update	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::MotionFilterBase
updateBackgroundModel	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool updateBackgroundModel;$/;"	m	class:cv::gpu::GMG_GPU
updateBackgroundModel	/usr/local/include/opencv2/video/background_segm.hpp	/^    bool updateBackgroundModel;$/;"	m	class:cv::BackgroundSubtractorGMG
upper_bound_n	/usr/local/include/opencv2/ml/ml.hpp	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo
upper_bound_p	/usr/local/include/opencv2/ml/ml.hpp	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo
upright	/usr/local/include/opencv2/legacy/compat.hpp	/^    int    upright;$/;"	m	struct:CvSURFParams
upright	/usr/local/include/opencv2/nonfree/features2d.hpp	/^    CV_PROP_RW bool upright;$/;"	m	class:cv::SURF
upright	/usr/local/include/opencv2/nonfree/gpu.hpp	/^    bool upright;$/;"	m	class:cv::gpu::SURF_GPU
upright	/usr/local/include/opencv2/nonfree/ocl.hpp	/^            bool upright;$/;"	m	class:cv::ocl::SURF_OCL
usage	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Usage usage() const { return usage_; }$/;"	f	class:cv::GlBuffer
usage_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Usage usage_;$/;"	m	class:cv::GlBuffer
useAVCaptureVideoPreviewLayer	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL useAVCaptureVideoPreviewLayer;$/;"	v
useHarrisDetector	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool useHarrisDetector;$/;"	m	class:cv::GFTTDetector
useHarrisDetector	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool useHarrisDetector;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
useInitialFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool useInitialFlow;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
useInitialFlow	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool useInitialFlow;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
useInitialFlow	/usr/local/include/opencv2/ocl/ocl.hpp	/^            bool useInitialFlow;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
useLookAtParams_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    bool useLookAtParams_;$/;"	m	class:cv::GlCamera
use_1se_rule	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW bool  use_1se_rule;$/;"	m	struct:CvDTreeParams
use_local_init_data_cost	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool use_local_init_data_cost;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
use_optimized	/usr/local/include/opencv2/ts/ts.hpp	/^    bool use_optimized;$/;"	m	struct:cvtest::TSParams
use_surrogates	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW bool  use_surrogates;$/;"	m	struct:CvDTreeParams
usedMemory	/usr/local/include/opencv2/flann/allocator.h	/^    int     usedMemory;$/;"	m	class:cvflann::PooledAllocator
usedMemory	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual int usedMemory() const$/;"	f	class:cvflann::AutotunedIndex
usedMemory	/usr/local/include/opencv2/flann/composite_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::CompositeIndex
usedMemory	/usr/local/include/opencv2/flann/flann_base.hpp	/^    virtual int usedMemory() const$/;"	f	class:cvflann::Index
usedMemory	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
usedMemory	/usr/local/include/opencv2/flann/kdtree_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeIndex
usedMemory	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeSingleIndex
usedMemory	/usr/local/include/opencv2/flann/kmeans_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KMeansIndex
usedMemory	/usr/local/include/opencv2/flann/linear_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LinearIndex
usedMemory	/usr/local/include/opencv2/flann/lsh_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LshIndex
user_block_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size user_block_size;$/;"	m	struct:cv::gpu::ConvolveBuf
user_block_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size user_block_size;$/;"	m	struct:cv::gpu::MatchTemplateBuf
user_block_size	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size user_block_size;$/;"	m	struct:cv::ocl::MatchTemplateBuf
user_data	/usr/local/include/opencv2/contrib/contrib.hpp	/^        void* user_data;$/;"	m	class:cv::LevMarqSparse
ushort	/usr/local/include/opencv2/core/types_c.h	/^   typedef unsigned short ushort;$/;"	t
ushort	/usr/local/include/opencv2/gpu/device/common.hpp	/^        typedef unsigned short ushort;$/;"	t	namespace:cv::gpu::device
v	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int v;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
v	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable
v	/usr/local/include/opencv2/legacy/legacy.hpp	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
vPyr_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat vPyr_[2];$/;"	m	class:cv::gpu::PyrLKOpticalFlow
vPyr_	/usr/local/include/opencv2/ocl/ocl.hpp	/^            oclMat vPyr_[2];$/;"	m	class:cv::ocl::PyrLKOpticalFlow
v_range	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    vector<float> v_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
vabsdiff2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vabsdiff2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vabsdiff4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vabsdiff4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vadd2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vadd2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vadd4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vadd4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
val	/usr/local/include/opencv2/core/types_c.h	/^    double val[4];$/;"	m	struct:CvScalar
val	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BorderReader
val	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdColConstant
val	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdConstant
val	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdRowConstant
val	/usr/local/include/opencv2/ocl/ocl.hpp	/^            static int val;$/;"	m	class:cv::ocl::Context
val_	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        bool val_;$/;"	m	class:cvtest::Inverse
val_	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        bool val_;$/;"	m	class:cvtest::UseRoi
valid	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvBool valid;$/;"	m	struct:Cv3dTrackerCameraInfo
validGeometry	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    bool validGeometry;$/;"	m	class:cv::Subdiv2D
valoffset	/usr/local/include/opencv2/core/types_c.h	/^    int valoffset;$/;"	m	struct:CvSparseMat
vals_	/usr/local/include/opencv2/flann/random.h	/^    std::vector<int> vals_;$/;"	m	class:cvflann::UniqueRandom
value	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double value, centre;$/;"	m	class:CvFuzzyCurve
value	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon31
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon34
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	e	enum:cv::DataDepth::__anon40
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	e	enum:cv::DataDepth::__anon39
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon37
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon33
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	e	enum:cv::DataDepth::__anon36
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon32
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon38
value	/usr/local/include/opencv2/core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	e	enum:cv::DataDepth::__anon35
value	/usr/local/include/opencv2/core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	e	enum:cv::DataDepth::__anon41
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::value(Node* n)$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMatIterator::value() const$/;"	f	class:cv::SparseMatIterator
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& SparseMat::value(const Node* n) const$/;"	f	class:cv::SparseMat
value	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline const _Tp& SparseMatConstIterator::value() const$/;"	f	class:cv::SparseMatConstIterator
value	/usr/local/include/opencv2/flann/timer.h	/^    double value;$/;"	m	class:cvflann::StartStopTimer
value	/usr/local/include/opencv2/gpu/device/detail/reduce.hpp	/^            enum { value = ((N != 0) && !(N & (N - 1))) };$/;"	e	enum:cv::gpu::device::reduce_detail::IsPowerOf2::__anon70
value	/usr/local/include/opencv2/gpu/device/detail/reduce_key_val.hpp	/^            enum { value = ((N != 0) && !(N & (N - 1))) };$/;"	e	enum:cv::gpu::device::reduce_key_val_detail::IsPowerOf2::__anon72
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon139
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon142
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon140
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon141
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon143
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon144
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon136
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::gpu::device::type_traits_detail::ReferenceTraits::__anon134
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon137
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon138
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::ReferenceTraits::__anon135
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon92
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon91
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon89
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon88
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon75
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon79
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon78
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon74
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon77
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon76
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon82
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon81
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon86
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon85
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon84
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon83
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon99
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon100
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon101
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon102
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon103
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon129
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon130
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon131
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon132
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon133
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon124
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon125
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon126
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon127
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon128
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon119
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon120
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon121
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon122
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon123
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon109
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon110
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon111
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon112
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon113
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon94
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon95
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon96
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon97
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon98
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon114
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon115
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon116
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon117
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon118
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon104
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon105
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon106
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon107
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon108
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon90
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon87
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon73
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon80
value	/usr/local/include/opencv2/gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon93
value	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::gpu::device::IsBinaryFunction::__anon147
value	/usr/local/include/opencv2/gpu/device/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::gpu::device::IsUnaryFunction::__anon146
value	/usr/local/include/opencv2/gpu/device/type_traits.hpp	/^        enum {value = type_traits_detail::IsIntegral<T>::value || type_traits_detail::IsFloat<T>::value ||$/;"	e	enum:cv::gpu::device::IsSimpleParameter::__anon164
value	/usr/local/include/opencv2/imgproc/types_c.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp
value	/usr/local/include/opencv2/ml/ml.hpp	/^    double value;$/;"	m	struct:CvDTreeNode
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	/usr/local/include/opencv2/ts/ts_gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  std::string value_;$/;"	m	class:testing::TestProperty
value_param	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_type	/usr/local/include/opencv2/core/core.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Allocator
value_type	/usr/local/include/opencv2/core/core.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Matx
value_type	/usr/local/include/opencv2/core/operations.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Vector
value_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::gpu::device::L1Dist
value_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::gpu::device::L2Dist
value_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::gpu::device::HammingDist
value_type	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::gpu::device::L1Dist
value_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	/usr/local/include/opencv2/ts/ts_gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
values	/usr/local/include/opencv2/core/types_c.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP
values	/usr/local/include/opencv2/core/types_c.h	/^    int *values;$/;"	m	struct:_IplConvKernel
values	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* values;$/;"	m	class:CvMLData
values	/usr/local/include/opencv2/ts/gpu_test.hpp	/^        const std::vector<cv::gpu::DeviceInfo>& values() const { return devices_; }$/;"	f	class:cvtest::DeviceManager
varThreshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float varThreshold;$/;"	m	class:cv::gpu::MOG2_GPU
varThreshold	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float varThreshold;$/;"	m	class:cv::gpu::MOG_GPU
varThreshold	/usr/local/include/opencv2/video/background_segm.hpp	/^    double varThreshold;$/;"	m	class:cv::BackgroundSubtractorMOG
varThreshold	/usr/local/include/opencv2/video/background_segm.hpp	/^    double varThreshold;$/;"	m	class:cv::BackgroundSubtractorMOG2
varThresholdGen	/usr/local/include/opencv2/gpu/gpu.hpp	/^    float varThresholdGen;$/;"	m	class:cv::gpu::MOG2_GPU
varThresholdGen	/usr/local/include/opencv2/video/background_segm.hpp	/^    float varThresholdGen;$/;"	m	class:cv::BackgroundSubtractorMOG2
var_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    DistanceType* var_;$/;"	m	class:cvflann::KDTreeIndex
var_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat var_;$/;"	m	class:cv::gpu::MOG_GPU
var_all	/usr/local/include/opencv2/ml/ml.hpp	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier
var_all	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
var_all	/usr/local/include/opencv2/ml/ml.hpp	/^    int var_all;$/;"	m	class:CvSVM
var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier
var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int max_k, var_count;$/;"	m	class:CvKNearest
var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int var_count;$/;"	m	class:CvSVMSolver
var_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat*  var_idx;$/;"	m	class:CvNormalBayesClassifier
var_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_idx;$/;"	m	class:CvSVM
var_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData
var_idx	/usr/local/include/opencv2/ml/ml.hpp	/^    int var_idx;$/;"	m	struct:CvDTreeSplit
var_idx_mask	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_idx_mask;$/;"	m	class:CvMLData
var_idx_out	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_idx_out; \/\/ mat$/;"	m	class:CvMLData
var_importance	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_importance;$/;"	m	class:CvDTree
var_importance	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_importance;$/;"	m	class:CvRTrees
var_type	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData
var_types	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_types;$/;"	m	class:CvMLData
var_types_out	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* var_types_out; \/\/ mat$/;"	m	class:CvMLData
variance	/usr/local/include/opencv2/flann/kmeans_index.h	/^        DistanceType variance;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
variance	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues
variance_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat variance_;$/;"	m	class:cv::gpu::MOG2_GPU
variance_init	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams
varyImgBoundWithScale	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool varyImgBoundWithScale;$/;"	m	class:cv::DenseFeatureDetector
varyXyStepWithScale	/usr/local/include/opencv2/features2d/features2d.hpp	/^    bool varyXyStepWithScale;$/;"	m	class:cv::DenseFeatureDetector
vavg2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavg2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vavg4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavg4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vavrg2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavrg2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vavrg4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vavrg4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpeq2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpeq2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpeq4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpeq4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpge2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpge2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpge4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpge4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpgt2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpgt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpgt4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpgt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmple2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmple2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmple4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmple4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmplt2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmplt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmplt4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmplt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpne2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpne2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vcmpne4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vcmpne4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vec1	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        const T1* vec1;$/;"	m	struct:cv::gpu::device::VecDiffGlobal
vec1Vals	/usr/local/include/opencv2/gpu/device/vec_distance.hpp	/^        U vec1Vals[MAX_LEN \/ THREAD_DIM];$/;"	m	struct:cv::gpu::device::VecDiffCachedRegister
vec_distance_detail	/usr/local/include/opencv2/gpu/device/detail/vec_distance_detail.hpp	/^    namespace vec_distance_detail$/;"	n	namespace:cv::gpu::device
vec_math_detail	/usr/local/include/opencv2/gpu/device/vec_math.hpp	/^    namespace vec_math_detail$/;"	n	namespace:cv::gpu::device
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	/usr/local/include/opencv2/gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
veclen	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual size_t veclen() const$/;"	f	class:cvflann::AutotunedIndex
veclen	/usr/local/include/opencv2/flann/composite_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::CompositeIndex
veclen	/usr/local/include/opencv2/flann/flann.hpp	/^        int veclen() const { return nnIndex->veclen(); }$/;"	f	class:cv::flann::GenericIndex
veclen	/usr/local/include/opencv2/flann/flann.hpp	/^    int veclen() const$/;"	f	class:cv::flann::Index_
veclen	/usr/local/include/opencv2/flann/flann_base.hpp	/^    size_t veclen() const$/;"	f	class:cvflann::Index
veclen	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
veclen	/usr/local/include/opencv2/flann/kdtree_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeIndex
veclen	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeSingleIndex
veclen	/usr/local/include/opencv2/flann/kmeans_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KMeansIndex
veclen	/usr/local/include/opencv2/flann/linear_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LinearIndex
veclen	/usr/local/include/opencv2/flann/lsh_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LshIndex
veclen_	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
veclen_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KDTreeIndex
veclen_	/usr/local/include/opencv2/flann/kmeans_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KMeansIndex
verbose	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::FernClassifier
verbose	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::LDetector
verbose	/usr/local/include/opencv2/legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::PlanarObjectDetector
verified	/usr/local/include/opencv2/ts/ts_perf.hpp	/^    bool verified;$/;"	m	class:perf::TestBase
version	/usr/local/include/opencv2/core/types_c.h	/^    const char* version;$/;"	m	struct:CvModuleInfo
version	/usr/local/include/opencv2/flann/saving.h	/^    char version[16];$/;"	m	struct:cvflann::IndexHeader
vertex_	/usr/local/include/opencv2/core/opengl_interop.hpp	/^    Buffer vertex_;$/;"	m	class:cv::ogl::Arrays
vertex_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    GlBuffer vertex_;$/;"	m	class:cv::GlArrays
vertex_weights	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder
verticalEdgeLeft	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
verticalEdgeRight	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
videoCaptureConnection	/usr/local/include/opencv2/highgui/cap_ios.h	/^@property (nonatomic, retain) AVCaptureConnection* videoCaptureConnection;$/;"	v
videoParser_	/usr/local/include/opencv2/gpu/gpu.hpp	/^        detail::VideoParser* videoParser_;$/;"	m	class:cv::gpu::VideoReader_GPU::VideoSource
videostab	/usr/local/include/opencv2/videostab/deblurring.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/fast_marching_inl.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/frame_source.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/global_motion.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/inpainting.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/log.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^namespace videostab$/;"	n	namespace:cv
vind_	/usr/local/include/opencv2/flann/kdtree_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeIndex
vind_	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeSingleIndex
visualizeInPlace	/usr/local/include/opencv2/gpu/gpu.hpp	/^    bool visualizeInPlace;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
vmax2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmax2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vmax4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmax4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vmin2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmin2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vmin4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vmin4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vocabulary	/usr/local/include/opencv2/features2d/features2d.hpp	/^    Mat vocabulary;$/;"	m	class:cv::BOWImgDescriptorExtractor
volatileFrame_	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    bool volatileFrame_;$/;"	m	class:cv::videostab::VideoFileSource
vscale	/usr/local/include/opencv2/core/core_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
vseteq2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vseteq2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vseteq4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vseteq4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetge2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetge2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetge4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetge4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetgt2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetgt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetgt4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetgt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetle2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetle2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetle4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetle4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetlt2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetlt2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetlt4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetlt4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetne2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetne2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsetne4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsetne4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsub2	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsub2(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vsub4	/usr/local/include/opencv2/gpu/device/simd_functions.hpp	/^    static __device__ __forceinline__ unsigned int vsub4(unsigned int a, unsigned int b)$/;"	f	namespace:cv::gpu::device
vtx	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<Point3f> vtx;$/;"	m	class:cv::Mesh3D
vtx	/usr/local/include/opencv2/core/core_c.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner
vtx	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    vector<Vertex> vtx;$/;"	m	class:cv::Subdiv2D
vtxBuf	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat* vtxBuf;$/;"	m	struct:CvStereoGCState
w	/usr/local/include/opencv2/contrib/contrib.hpp	/^            int w;$/;"	m	struct:cv::LogPolar_Overlapping::kernel
w	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob
wSum_	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
w_ker_2D	/usr/local/include/opencv2/contrib/contrib.hpp	/^        vector<kernel> w_ker_2D;$/;"	m	class:cv::LogPolar_Overlapping
walkBreadthFirst	/usr/local/include/opencv2/stitching/detail/util_inl.hpp	/^B Graph::walkBreadthFirst(int from, B body) const$/;"	f	class:cv::detail::Graph
warp	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, const Mat &T, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::CylindricalWarperGpu
warp	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::SphericalWarperGpu
warp	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^Point RotationWarperBase<P>::warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpBackward	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::warpBackward(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpPoint	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^Point2f RotationWarperBase<P>::warpPoint(const Point2f &pt, const Mat &K, const Mat &R)$/;"	f	class:cv::detail::RotationWarperBase
warpRoi	/usr/local/include/opencv2/stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::warpRoi(Size src_size, const Mat &K, const Mat &R)$/;"	f	class:cv::detail::RotationWarperBase
warpScanExclusive	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    __device__ __forceinline__ T warpScanExclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::gpu::device
warpScanInclusive	/usr/local/include/opencv2/gpu/device/scan.hpp	/^    __device__ T warpScanInclusive(T idata, volatile T* s_Data, unsigned int tid)$/;"	f	namespace:cv::gpu::device
warpSize	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera
warp_log	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_log         = 5;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_log	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_log  = 5;$/;"	m	struct:cv::gpu::device::BlockScan
warp_mask	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_mask        = 31;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_mask	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_mask = 31;$/;"	m	struct:cv::gpu::device::BlockScan
warp_offset	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_offset      = 0;$/;"	m	struct:cv::gpu::device::WarpScan
warp_offset	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_offset      = 16;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_reduce	/usr/local/include/opencv2/gpu/device/warp_reduce.hpp	/^    __device__ __forceinline__ T warp_reduce(volatile T *ptr , const unsigned int tid = threadIdx.x)$/;"	f	namespace:cv::gpu::device
warp_smem_stride	/usr/local/include/opencv2/gpu/device/scan.hpp	/^        static const int warp_smem_stride = 32 + 16 + 1;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warped_image_scale_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double warped_image_scale_;$/;"	m	class:cv::Stitcher
warper	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<WarperCreator> warper() { return warper_; }$/;"	f	class:cv::Stitcher
warper	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    const Ptr<WarperCreator> warper() const { return warper_; }$/;"	f	class:cv::Stitcher
warper_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    Ptr<WarperCreator> warper_;$/;"	m	class:cv::Stitcher
warps	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int warps;$/;"	m	class:cv::gpu::OpticalFlowDual_TVL1_GPU
wastedMemory	/usr/local/include/opencv2/flann/allocator.h	/^    int     wastedMemory;$/;"	m	class:cvflann::PooledAllocator
waveCorrectKind	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    detail::WaveCorrectKind waveCorrectKind() const { return wave_correct_kind_; }$/;"	f	class:cv::Stitcher
waveCorrection	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    bool waveCorrection() const { return do_wave_correct_; }$/;"	f	class:cv::Stitcher
wave_correct_kind_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    detail::WaveCorrectKind wave_correct_kind_;$/;"	m	class:cv::Stitcher
wbuf	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* wbuf;$/;"	m	class:CvANN_MLP
weak	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSeq* weak;$/;"	m	class:CvBoost
weak	/usr/local/include/opencv2/ml/ml.hpp	/^    CvSeq** weak;$/;"	m	class:CvGBTrees
weak_count	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int weak_count;$/;"	m	struct:CvBoostParams
weak_count	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW int weak_count;$/;"	m	struct:CvGBTreesParams
weak_eval	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* weak_eval;$/;"	m	class:CvBoost
weak_threshold	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  float weak_threshold;$/;"	m	class:cv::linemod::ColorGradient
weight	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    inline Weight weight() const { return weight_; }$/;"	f	class:cv::GlFont
weight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double      weight;$/;"	m	struct:CvGaussBGValues
weight	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState
weight	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon300
weight	/usr/local/include/opencv2/stitching/detail/util.hpp	/^    float weight;$/;"	m	struct:cv::detail::GraphEdge
weight_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    Weight weight_;$/;"	m	class:cv::GlFont
weight_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat weight_;$/;"	m	class:cv::gpu::MOG2_GPU
weight_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat weight_;$/;"	m	class:cv::gpu::MOG_GPU
weight_	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    std::vector<float> weight_;$/;"	m	class:cv::videostab::GaussianMotionFilter
weight_dx	/usr/local/include/opencv2/features2d/features2d.hpp	/^        int weight_dx; \/\/ dx\/(norm_sq))*4096$/;"	m	struct:cv::FREAK::OrientationPair
weight_dy	/usr/local/include/opencv2/features2d/features2d.hpp	/^        int weight_dy; \/\/ dy\/(norm_sq))*4096$/;"	m	struct:cv::FREAK::OrientationPair
weight_init	/usr/local/include/opencv2/legacy/legacy.hpp	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams
weight_map_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    Mat weight_map_;$/;"	m	class:cv::detail::FeatherBlender
weight_trim_rate	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP_RW double weight_trim_rate;$/;"	m	struct:CvBoostParams
weight_type_	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    int weight_type_; \/\/CV_32F or CV_16S$/;"	m	class:cv::detail::MultiBandBlender
weighted	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int weighted;$/;"	m	struct:CvCliqueFinder
weighted_dx	/usr/local/include/opencv2/features2d/features2d.hpp	/^        int weighted_dx; \/\/ 1024.0\/dx$/;"	m	struct:cv::BRISK::BriskLongPair
weighted_dy	/usr/local/include/opencv2/features2d/features2d.hpp	/^        int weighted_dy; \/\/ 1024.0\/dy$/;"	m	struct:cv::BRISK::BriskLongPair
weighted_edges	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int weighted_edges;$/;"	m	struct:CvCliqueFinder
weights	/usr/local/include/opencv2/contrib/contrib.hpp	/^            vector<double> weights;$/;"	m	struct:cv::LogPolar_Overlapping::kernel
weights	/usr/local/include/opencv2/legacy/legacy.hpp	/^    const CvMat* weights;$/;"	m	struct:CvEMParams
weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CV_PROP Mat weights;$/;"	m	class:cv::EM
weights	/usr/local/include/opencv2/ml/ml.hpp	/^    CvMat* weights;$/;"	m	class:CvBoost
weights	/usr/local/include/opencv2/ml/ml.hpp	/^    double** weights;$/;"	m	class:CvANN_MLP
weightsHdr	/usr/local/include/opencv2/legacy/legacy.hpp	/^    CvMat weightsHdr;$/;"	m	class:CvEM
weightsPositionsSmoothing	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        std::vector<float> weightsPositionsSmoothing;$/;"	m	class:DetectionBasedTracker
weightsSizesSmoothing	/usr/local/include/opencv2/contrib/detection_based_tracker.hpp	/^        std::vector<float> weightsSizesSmoothing;$/;"	m	class:DetectionBasedTracker
weights_	/usr/local/include/opencv2/gpu/gpu.hpp	/^    GpuMat weights_;$/;"	m	class:cv::gpu::GMG_GPU
weights_	/usr/local/include/opencv2/video/background_segm.hpp	/^    cv::Mat_<float> weights_;$/;"	m	class:cv::BackgroundSubtractorGMG
wholeSize	/usr/local/include/opencv2/imgproc/imgproc.hpp	/^    Size wholeSize;$/;"	m	class:cv::FilterEngine
wholecols	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int wholecols;$/;"	m	class:cv::ocl::oclMat
wholerows	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int wholerows;$/;"	m	class:cv::ocl::oclMat
width	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
width	/usr/local/include/opencv2/core/types_c.h	/^        int width;$/;"	m	union:CvMat::__anon48
width	/usr/local/include/opencv2/core/types_c.h	/^    float width;$/;"	m	struct:CvSize2D32f
width	/usr/local/include/opencv2/core/types_c.h	/^    int  width;             \/* Image width in pixels.                           *\/$/;"	m	struct:_IplImage
width	/usr/local/include/opencv2/core/types_c.h	/^    int  width;$/;"	m	struct:_IplROI
width	/usr/local/include/opencv2/core/types_c.h	/^    int width;$/;"	m	struct:CvRect
width	/usr/local/include/opencv2/core/types_c.h	/^    int width;$/;"	m	struct:CvSize
width	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BorderReader
width	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdConstant
width	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdRowConstant
width	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdRowWrap
width	/usr/local/include/opencv2/gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdWrap
width	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::gpu::device::AreaFilter
width	/usr/local/include/opencv2/gpu/gpu.hpp	/^        int width;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
width	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u
width	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     width;$/;"	m	struct:_CvPixelPosition32f
width	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     width;$/;"	m	struct:_CvPixelPosition8s
width	/usr/local/include/opencv2/legacy/legacy.hpp	/^    float width;$/;"	m	struct:CvLCMEdge
width	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int width() const { return image ? image->width : 0; }$/;"	f	class:CvImage
width	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int width;$/;"	m	struct:cv::linemod::Template
widthStep	/usr/local/include/opencv2/core/types_c.h	/^    int  widthStep;         \/* Size of aligned image row in bytes.    *\/$/;"	m	struct:_IplImage
winSigma	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP double winSigma;$/;"	m	struct:cv::HOGDescriptor
winSize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size winSize;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
winSize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int winSize;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
winSize	/usr/local/include/opencv2/gpu/gpu.hpp	/^    int winSize;$/;"	m	class:cv::gpu::StereoBM_GPU
winSize	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    CV_PROP Size winSize;$/;"	m	struct:cv::HOGDescriptor
winSize	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size winSize;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
winSize	/usr/local/include/opencv2/ocl/ocl.hpp	/^            int winSize;$/;"	m	class:cv::ocl::StereoBM_OCL
winSize	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    Size winSize() const { return winSize_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
winSize_	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    Size winSize_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
win_sigma	/usr/local/include/opencv2/gpu/gpu.hpp	/^    double win_sigma;$/;"	m	struct:cv::gpu::HOGDescriptor
win_sigma	/usr/local/include/opencv2/ocl/ocl.hpp	/^            double win_sigma;$/;"	m	struct:cv::ocl::HOGDescriptor
win_size	/usr/local/include/opencv2/gpu/gpu.hpp	/^    Size win_size;$/;"	m	struct:cv::gpu::HOGDescriptor
win_size	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams
win_size	/usr/local/include/opencv2/ocl/ocl.hpp	/^            Size win_size;$/;"	m	struct:cv::ocl::HOGDescriptor
window_size	/usr/local/include/opencv2/contrib/hybridtracker.hpp	/^    int window_size; \/\/ Window size in pixels around which to search for new window$/;"	m	struct:cv::CvFeatureTrackerParams
word1	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        short word1;$/;"	m	struct:cv::of2::ChowLiuTree::info
word2	/usr/local/include/opencv2/contrib/openfabmap.hpp	/^        short word2;$/;"	m	struct:cv::of2::ChowLiuTree::info
workScale	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double workScale() const { return work_scale_; }$/;"	f	class:cv::Stitcher
work_scale_	/usr/local/include/opencv2/stitching/stitcher.hpp	/^    double work_scale_;$/;"	m	class:cv::Stitcher
work_type	/usr/local/include/opencv2/gpu/device/filters.hpp	/^        typedef typename TypeVec<float, VecTraits<elem_type>::cn>::vec_type work_type;$/;"	t	struct:cv::gpu::device::CubicFilter
work_var_count	/usr/local/include/opencv2/ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
worktype_f	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            typedef float worktype_f;$/;"	t	struct:cv::gpu::device::color_detail::ColorChannel
worstDist	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNResultSet
worstDist	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNSimpleResultSet
worstDist	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::RadiusResultSet
worstDist	/usr/local/include/opencv2/flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::RadiusUniqueResultSet
worstDist	/usr/local/include/opencv2/flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::UniqueResultSet
worst_distance_	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNResultSet
worst_distance_	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNSimpleResultSet
worst_distance_	/usr/local/include/opencv2/flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::UniqueResultSet
write	/usr/local/include/opencv2/core/operations.hpp	/^    static void write(CvFileStorage* _fs, const char* name, const void* ptr, CvAttrList)$/;"	f	struct:cv::RTTIImpl
write	/usr/local/include/opencv2/core/operations.hpp	/^inline void write(FileStorage& fs, const Range& r )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^inline void write(FileStorage& fs, const string& name, const Range& r )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline void write( FileStorage& fs, const double& value )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline void write( FileStorage& fs, const float& value )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline void write( FileStorage& fs, const int& value )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<> inline void write( FileStorage& fs, const string& value )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline void write(FileStorage& fs, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, int cn> inline void write(FileStorage& fs, const string& name, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline void write( FileStorage& fs, const string& name,$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> static inline void write( FileStorage& fs, const vector<_Tp>& vec )$/;"	f	namespace:cv
write	/usr/local/include/opencv2/core/types_c.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo
write	/usr/local/include/opencv2/legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::write( FileStorage& ) const$/;"	f	class:cv::CalonderDescriptorExtractor
write_fd	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	/usr/local/include/opencv2/ts/ts_gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_type	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
write_type	/usr/local/include/opencv2/gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::gpu::device::transform_detail::UnaryReadWriteTraits
writer	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	v
writer	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	v
writer	/usr/local/include/opencv2/core/core_c.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	v
writer	/usr/local/include/opencv2/highgui/highgui.hpp	/^    Ptr<CvVideoWriter> writer;$/;"	m	class:cv::VideoWriter
writer	/usr/local/include/opencv2/highgui/highgui_c.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	v
x	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int x, y;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
x	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
x	/usr/local/include/opencv2/core/types_c.h	/^    double x;$/;"	m	struct:CvPoint2D64f
x	/usr/local/include/opencv2/core/types_c.h	/^    double x;$/;"	m	struct:CvPoint3D64f
x	/usr/local/include/opencv2/core/types_c.h	/^    float x;$/;"	m	struct:CvPoint2D32f
x	/usr/local/include/opencv2/core/types_c.h	/^    float x;$/;"	m	struct:CvPoint3D32f
x	/usr/local/include/opencv2/core/types_c.h	/^    int x;$/;"	m	struct:CvPoint
x	/usr/local/include/opencv2/core/types_c.h	/^    int x;$/;"	m	struct:CvRect
x	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float x;         \/\/ x coordinate relative to center$/;"	m	struct:cv::BRISK::BriskPatternPoint
x	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float x; \/\/ x coordinate relative to center$/;"	m	struct:cv::FREAK::PatternPoint
x	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob
x	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u
x	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     x;$/;"	m	struct:_CvPixelPosition32f
x	/usr/local/include/opencv2/legacy/compat.hpp	/^    int     x;$/;"	m	struct:_CvPixelPosition8s
x	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int x;$/;"	m	struct:cv::BaseKeypoint
x	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int x;$/;"	m	struct:CvLSVMFilterPosition
x	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int x; \/\/\/< x offset$/;"	m	struct:cv::linemod::Feature
x	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int x;$/;"	m	struct:cv::linemod::Match
x	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
x1	/usr/local/include/opencv2/legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
x2	/usr/local/include/opencv2/legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
xGc	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int xGc, yGc;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
xOffset	/usr/local/include/opencv2/core/types_c.h	/^    int  xOffset;$/;"	m	struct:_IplROI
x_max	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
x_min	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
xor_masks_	/usr/local/include/opencv2/flann/lsh_index.h	/^    std::vector<lsh::BucketKey> xor_masks_;$/;"	m	class:cvflann::LshIndex
xyz_shift	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            xyz_shift  = 12,$/;"	e	enum:cv::gpu::device::color_detail::__anon67
y	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int x, y;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
y	/usr/local/include/opencv2/contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
y	/usr/local/include/opencv2/core/types_c.h	/^    double y;$/;"	m	struct:CvPoint2D64f
y	/usr/local/include/opencv2/core/types_c.h	/^    double y;$/;"	m	struct:CvPoint3D64f
y	/usr/local/include/opencv2/core/types_c.h	/^    float y;$/;"	m	struct:CvPoint2D32f
y	/usr/local/include/opencv2/core/types_c.h	/^    float y;$/;"	m	struct:CvPoint3D32f
y	/usr/local/include/opencv2/core/types_c.h	/^    int y;$/;"	m	struct:CvPoint
y	/usr/local/include/opencv2/core/types_c.h	/^    int y;$/;"	m	struct:CvRect
y	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float y;         \/\/ x coordinate relative to center$/;"	m	struct:cv::BRISK::BriskPatternPoint
y	/usr/local/include/opencv2/features2d/features2d.hpp	/^        float y; \/\/ x coordinate relative to center$/;"	m	struct:cv::FREAK::PatternPoint
y	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob
y	/usr/local/include/opencv2/legacy/legacy.hpp	/^    int y;$/;"	m	struct:cv::BaseKeypoint
y	/usr/local/include/opencv2/ml/ml.hpp	/^    schar* y;$/;"	m	class:CvSVMSolver
y	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    int y;$/;"	m	struct:CvLSVMFilterPosition
y	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int y; \/\/\/< y offset$/;"	m	struct:cv::linemod::Feature
y	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  int y;$/;"	m	struct:cv::linemod::Match
y	/usr/local/include/opencv2/videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
y1	/usr/local/include/opencv2/legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
y2	/usr/local/include/opencv2/legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
yGc	/usr/local/include/opencv2/contrib/contrib.hpp	/^        int xGc, yGc;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
yOffset	/usr/local/include/opencv2/core/types_c.h	/^    int  yOffset;$/;"	m	struct:_IplROI
y_max	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
y_min	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
yaw_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double yaw_;$/;"	m	class:cv::GlCamera
yota	/usr/local/include/opencv2/gpu/device/block.hpp	/^        static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)$/;"	f	struct:cv::gpu::device::Block
yota	/usr/local/include/opencv2/gpu/device/warp.hpp	/^        static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)$/;"	f	struct:cv::gpu::device::Warp
yuv_shift	/usr/local/include/opencv2/gpu/device/detail/color_detail.hpp	/^            yuv_shift  = 14,$/;"	e	enum:cv::gpu::device::color_detail::__anon67
z	/usr/local/include/opencv2/core/types_c.h	/^    double z;$/;"	m	struct:CvPoint3D64f
z	/usr/local/include/opencv2/core/types_c.h	/^    float z;$/;"	m	struct:CvPoint3D32f
zFar_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double zFar_;$/;"	m	class:cv::GlCamera
zNear_	/usr/local/include/opencv2/core/opengl_interop_deprecated.hpp	/^    double zNear_;$/;"	m	class:cv::GlCamera
z_max	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
z_min	/usr/local/include/opencv2/contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
zeros	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::zeros(Size sz)$/;"	f	class:cv::Mat_
zeros	/usr/local/include/opencv2/core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::zeros(int rows, int cols)$/;"	f	class:cv::Mat_
zeros	/usr/local/include/opencv2/core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::zeros()$/;"	f	class:cv::Matx
~AdjusterAdapter	/usr/local/include/opencv2/features2d/features2d.hpp	/^    virtual ~AdjusterAdapter() {}$/;"	f	class:cv::AdjusterAdapter
~Allocator	/usr/local/include/opencv2/core/core.hpp	/^    ~Allocator() {}$/;"	f	class:cv::Allocator
~AutoBuffer	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::~AutoBuffer()$/;"	f	class:cv::AutoBuffer
~AutotunedIndex	/usr/local/include/opencv2/flann/autotuned_index.h	/^    virtual ~AutotunedIndex()$/;"	f	class:cvflann::AutotunedIndex
~BFMatcher	/usr/local/include/opencv2/features2d/features2d.hpp	/^    virtual ~BFMatcher() {}$/;"	f	class:cv::BFMatcher
~BaseColumnFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    virtual ~BaseColumnFilter_GPU() {}$/;"	f	class:cv::gpu::BaseColumnFilter_GPU
~BaseColumnFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            virtual ~BaseColumnFilter_GPU() {}$/;"	f	class:cv::ocl::BaseColumnFilter_GPU
~BaseFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    virtual ~BaseFilter_GPU() {}$/;"	f	class:cv::gpu::BaseFilter_GPU
~BaseFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            virtual ~BaseFilter_GPU() {}$/;"	f	class:cv::ocl::BaseFilter_GPU
~BaseRowFilter_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    virtual ~BaseRowFilter_GPU() {}$/;"	f	class:cv::gpu::BaseRowFilter_GPU
~BaseRowFilter_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            virtual ~BaseRowFilter_GPU() {}$/;"	f	class:cv::ocl::BaseRowFilter_GPU
~Blender	/usr/local/include/opencv2/stitching/detail/blenders.hpp	/^    virtual ~Blender() {}$/;"	f	class:cv::detail::Blender
~BruteForceMatcher	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual ~BruteForceMatcher() {}$/;"	f	class:cv::BruteForceMatcher
~CannyBuf	/usr/local/include/opencv2/ocl/ocl.hpp	/^            ~CannyBuf()$/;"	f	struct:cv::ocl::CannyBuf
~CartesianProductGenerator10	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~CompositeIndex	/usr/local/include/opencv2/flann/composite_index.h	/^    virtual ~CompositeIndex()$/;"	f	class:cvflann::CompositeIndex
~CvBlobSeq	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual ~CvBlobSeq()$/;"	f	class:CvBlobSeq
~CvBlobTrackAnalysisOne	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual ~CvBlobTrackAnalysisOne() {};$/;"	f	class:CvBlobTrackAnalysisOne
~CvImage	/usr/local/include/opencv2/legacy/legacy.hpp	/^    ~CvImage()$/;"	f	class:CvImage
~CvImageDrawer	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    ~CvImageDrawer() { cvReleaseImage( &m_image ); }$/;"	f	class:CvImageDrawer
~CvLSHOperations	/usr/local/include/opencv2/legacy/legacy.hpp	/^    virtual ~CvLSHOperations() {}$/;"	f	struct:CvLSHOperations
~CvMatrix	/usr/local/include/opencv2/legacy/legacy.hpp	/^    ~CvMatrix()$/;"	f	class:CvMatrix
~CvProb	/usr/local/include/opencv2/legacy/blobtrack.hpp	/^    virtual ~CvProb() {};$/;"	f	class:CvProb
~DeathTest	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeblurerBase	/usr/local/include/opencv2/videostab/deblurring.hpp	/^    virtual ~DeblurerBase() {}$/;"	f	class:cv::videostab::DeblurerBase
~DefaultRngAuto	/usr/local/include/opencv2/ts/ts.hpp	/^    ~DefaultRngAuto() { cv::theRNG().state = old_state; }$/;"	f	struct:cvtest::DefaultRngAuto
~EncoderCallBack	/usr/local/include/opencv2/gpu/gpu.hpp	/^        virtual ~EncoderCallBack() {}$/;"	f	class:cv::gpu::VideoWriter_GPU::EncoderCallBack
~Environment	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~Estimator	/usr/local/include/opencv2/stitching/detail/motion_estimators.hpp	/^    virtual ~Estimator() {}$/;"	f	class:cv::detail::Estimator
~ExposureCompensator	/usr/local/include/opencv2/stitching/detail/exposure_compensate.hpp	/^    virtual ~ExposureCompensator() {}$/;"	f	class:cv::detail::ExposureCompensator
~FaceRecognizer	/usr/local/include/opencv2/contrib/contrib.hpp	/^        virtual ~FaceRecognizer() {}$/;"	f	class:cv::FaceRecognizer
~FeaturesFinder	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    virtual ~FeaturesFinder() {}$/;"	f	class:cv::detail::FeaturesFinder
~FeaturesMatcher	/usr/local/include/opencv2/stitching/detail/matchers.hpp	/^    virtual ~FeaturesMatcher() {}$/;"	f	class:cv::detail::FeaturesMatcher
~FilterEngine_GPU	/usr/local/include/opencv2/gpu/gpu.hpp	/^    virtual ~FilterEngine_GPU() {}$/;"	f	class:cv::gpu::FilterEngine_GPU
~FilterEngine_GPU	/usr/local/include/opencv2/ocl/ocl.hpp	/^            virtual ~FilterEngine_GPU() {}$/;"	f	class:cv::ocl::FilterEngine_GPU
~Formatter	/usr/local/include/opencv2/core/operations.hpp	/^    virtual ~Formatter() {}$/;"	f	class:cv::Formatter
~GTestMutexLock	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~GenericIndex	/usr/local/include/opencv2/flann/flann.hpp	/^GenericIndex<Distance>::~GenericIndex()$/;"	f	class:cv::flann::GenericIndex
~GpuMat	/usr/local/include/opencv2/core/gpumat.hpp	/^    inline GpuMat::~GpuMat()$/;"	f	class:cv::gpu::GpuMat
~HOGDescriptor	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^    virtual ~HOGDescriptor() {}$/;"	f	struct:cv::HOGDescriptor
~HierarchicalClusteringIndex	/usr/local/include/opencv2/flann/hierarchical_clustering_index.h	/^    virtual ~HierarchicalClusteringIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
~IDenseOptFlowEstimator	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    virtual ~IDenseOptFlowEstimator() {}$/;"	f	class:cv::videostab::IDenseOptFlowEstimator
~IFrameSource	/usr/local/include/opencv2/videostab/frame_source.hpp	/^    virtual ~IFrameSource() {}$/;"	f	class:cv::videostab::IFrameSource
~IGlobalMotionEstimator	/usr/local/include/opencv2/videostab/global_motion.hpp	/^    virtual ~IGlobalMotionEstimator() {}$/;"	f	class:cv::videostab::IGlobalMotionEstimator
~ILog	/usr/local/include/opencv2/videostab/log.hpp	/^    virtual ~ILog() {}$/;"	f	class:cv::videostab::ILog
~IMotionStabilizer	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    virtual ~IMotionStabilizer() {}$/;"	f	class:cv::videostab::IMotionStabilizer
~ISparseOptFlowEstimator	/usr/local/include/opencv2/videostab/optical_flow.hpp	/^    virtual ~ISparseOptFlowEstimator() {}$/;"	f	class:cv::videostab::ISparseOptFlowEstimator
~Index	/usr/local/include/opencv2/flann/flann_base.hpp	/^    ~Index()$/;"	f	class:cvflann::Index
~Index_	/usr/local/include/opencv2/flann/flann.hpp	/^Index_<T>::~Index_()$/;"	f	class:cv::flann::Index_
~InpainterBase	/usr/local/include/opencv2/videostab/inpainting.hpp	/^    virtual ~InpainterBase() {}$/;"	f	class:cv::videostab::InpainterBase
~InternalRunDeathTestFlag	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	/usr/local/include/opencv2/ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~KDTreeIndex	/usr/local/include/opencv2/flann/kdtree_index.h	/^    ~KDTreeIndex()$/;"	f	class:cvflann::KDTreeIndex
~KDTreeSingleIndex	/usr/local/include/opencv2/flann/kdtree_single_index.h	/^    ~KDTreeSingleIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
~KMeansIndex	/usr/local/include/opencv2/flann/kmeans_index.h	/^    virtual ~KMeansIndex()$/;"	f	class:cvflann::KMeansIndex
~LDA	/usr/local/include/opencv2/contrib/contrib.hpp	/^        ~LDA() {}$/;"	f	class:cv::LDA
~Logger	/usr/local/include/opencv2/flann/logger.h	/^    ~Logger()$/;"	f	class:cvflann::Logger
~MaskGenerator	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^        virtual ~MaskGenerator() {}$/;"	f	class:cv::CascadeClassifier::MaskGenerator
~Mat	/usr/local/include/opencv2/core/mat.hpp	/^inline Mat::~Mat()$/;"	f	class:cv::Mat
~MatOp	/usr/local/include/opencv2/core/mat.hpp	/^    virtual ~MatOp() {};$/;"	f	class:cv::MatOp
~Modality	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  virtual ~Modality() {}$/;"	f	class:cv::linemod::Modality
~MotionFilterBase	/usr/local/include/opencv2/videostab/motion_stabilizing.hpp	/^    virtual ~MotionFilterBase() {}$/;"	f	class:cv::videostab::MotionFilterBase
~Mutex	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~NNIndex	/usr/local/include/opencv2/flann/nn_index.h	/^    virtual ~NNIndex() {}$/;"	f	class:cvflann::NNIndex
~NativeArray	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Notification	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~Notification() {$/;"	f	class:std::tr1::Notification
~OclCascadeClassifier	/usr/local/include/opencv2/ocl/ocl.hpp	/^            ~OclCascadeClassifier() {};$/;"	f	class:cv::ocl::OclCascadeClassifier
~ParamGeneratorInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~PooledAllocator	/usr/local/include/opencv2/flann/allocator.h	/^    ~PooledAllocator()$/;"	f	class:cvflann::PooledAllocator
~Ptr	/usr/local/include/opencv2/core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::~Ptr() { release(); }$/;"	f	class:cv::Ptr
~QuantizedPyramid	/usr/local/include/opencv2/objdetect/objdetect.hpp	/^  virtual ~QuantizedPyramid() {}$/;"	f	class:cv::linemod::QuantizedPyramid
~RadiusResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    ~RadiusResultSet()$/;"	f	class:cvflann::RadiusResultSet
~RangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~ResultSet	/usr/local/include/opencv2/flann/result_set.h	/^    virtual ~ResultSet() {}$/;"	f	class:cvflann::ResultSet
~ReturnSentinel	/usr/local/include/opencv2/ts/ts_gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~RotationWarper	/usr/local/include/opencv2/stitching/detail/warpers.hpp	/^    virtual ~RotationWarper() {}$/;"	f	class:cv::detail::RotationWarper
~SeamFinder	/usr/local/include/opencv2/stitching/detail/seam_finders.hpp	/^    virtual ~SeamFinder() {}$/;"	f	class:cv::detail::SeamFinder
~SparseMat	/usr/local/include/opencv2/core/mat.hpp	/^inline SparseMat::~SparseMat()$/;"	f	class:cv::SparseMat
~StabilizerBase	/usr/local/include/opencv2/videostab/stabilizer.hpp	/^    virtual ~StabilizerBase() {}$/;"	f	class:cv::videostab::StabilizerBase
~TestEventListener	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestFactoryBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestMetaFactoryBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~ThreadLocal	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalValueHolderBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~UntypedMatrix	/usr/local/include/opencv2/flann/matrix.h	/^    ~UntypedMatrix()$/;"	f	class:cvflann::UntypedMatrix
~ValuesInIteratorRangeGenerator	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~Vector	/usr/local/include/opencv2/core/operations.hpp	/^    ~Vector()  { release(); }$/;"	f	class:cv::Vector
~VideoSource	/usr/local/include/opencv2/gpu/gpu.hpp	/^        virtual ~VideoSource() {}$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
~WImage	/usr/local/include/opencv2/core/wimage.hpp	/^template<typename T> inline WImage<T>::~WImage() {}$/;"	f	class:cv::WImage
~WImageBuffer	/usr/local/include/opencv2/core/wimage.hpp	/^    ~WImageBuffer() {$/;"	f	class:cv::WImageBuffer
~WImageBufferC	/usr/local/include/opencv2/core/wimage.hpp	/^    ~WImageBufferC() {$/;"	f	class:cv::WImageBufferC
~WImageC	/usr/local/include/opencv2/core/wimage.hpp	/^template<typename T, int C> inline WImageC<T, C>::~WImageC() {}$/;"	f	class:cv::WImageC
~WImageViewC	/usr/local/include/opencv2/core/wimage.hpp	/^    virtual ~WImageViewC() {}$/;"	f	class:cv::WImageViewC
~WarperCreator	/usr/local/include/opencv2/stitching/warpers.hpp	/^    virtual ~WarperCreator() {}$/;"	f	class:cv::WarperCreator
~WithParamInterface	/usr/local/include/opencv2/ts/ts_gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~any	/usr/local/include/opencv2/flann/any.h	/^    ~any()$/;"	f	struct:cvflann::any
~base_any_policy	/usr/local/include/opencv2/flann/any.h	/^    virtual ~base_any_policy() {}$/;"	f	struct:cvflann::anyimpl::base_any_policy
~linked_ptr	/usr/local/include/opencv2/ts/ts_gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
~oclMat	/usr/local/include/opencv2/ocl/matrix_operations.hpp	/^        inline oclMat::~oclMat()$/;"	f	class:cv::ocl::oclMat
