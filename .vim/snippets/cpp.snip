snippet    main
alias      main
abbr       int main
	int main(int argc, char* argv[])
	{
		${1}
		return 0;
	}

snippet    android_define_export
alias      android_define_export
abbr       EXPORT
	#define EXPORT __attribute__((visibility("default")))

snippet    android_define_log
alias      android_define_log
abbr       LOG
	#define LOG_TAG ("${0:TagName}")
	#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO,  LOG_TAG, __VA_ARGS__))
	#define LOGD(...) ((void)__android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__))
	#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN,  LOG_TAG, __VA_ARGS__))
	#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__))

snippet    android_define_nelem
alias      android_define_nelem
abbr       NELEM
	#define NELEM(a)  (sizeof(a) / sizeof(a)[0])

snippet    android_jni_register_native_methods
alias      android_jni_register_native_methods
abbr       jniRegisterNativeMethods
	int jniRegisterNativeMethods(JNIEnv* env, const char* className,
			const JNINativeMethod* gMethods, int numMethods)
	{
		jclass clazz;
		LOGD("Registering %s natives\n", className);
		clazz = env->FindClass(className);
		if (clazz == NULL) {
			LOGD("Native registration unable to find class '%s'\n", className);
			return -1;
		}
		if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
			LOGD("RegisterNatives failed for '%s'\n", className);
			return -1;
		}
		return 0;
	}

snippet    android_jni_native_method_template
alias      android_jni_native_method_template
abbr       JNINativeMethodTemplate
	static JNINativeMethod sMethods[] = {
		{"${1:FuncName}", "(${2:ArgsType})${3:RetType}", (void *)&${4:FuncPtr}},
	};

snippet    android_jni_onload
alias      android_jni_onload
abbr       JNI_OnLoad
	EXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)
	{
		JNIEnv* env = NULL;
		jint result = -1;
		if (vm->GetEnv((void**) &env, JNI_VERSION_1_6) != JNI_OK) {
			return result;
		}
		jniRegisterNativeMethods(env, "${0:com/hecomi/hoge}", sMethods, NELEM(sMethods));
		return JNI_VERSION_1_6;
	}
