names=to_s
visibility=public
kind=defined

--- to_s([n])
@todo

文字列に変換します (デフォルトは "0.xxxxxEn" の形になります)。

    BigDecimal("1.23456").to_s  #  ==> "0.123456E1"

引数 n に正の整数が指定されたときは、小数点で分けられる左右部分を、
それぞれ n 桁毎に空白で区切ります。

    BigDecimal("0.1234567890123456789").to_s(10)   # => "0.1234567890 123456789E0"

引数 n に正の整数を表す文字列を指定することもできます。

    BigDecimal("0.1234567890123456789").to_s("10") # => "0.1234567890 123456789E0"

文字列の最初に '+' (または ' ') を付けると、値が正の場合、
先頭に '+' (または ' ')が付きます。負の場合は常に '-' が付きます。

    BigDecimal("0.1234567890123456789").to_s(" 10") # => " 0.1234567890 123456789E0"
    BigDecimal("0.1234567890123456789").to_s("+10") # => "+0.1234567890 123456789E0"
    BigDecimal("-0.1234567890123456789").to_s("10") # => "-0.1234567890 123456789E0"

さらに文字列の最後に E (または e) か F (または f) を指定することで、
以下のように表示形式を変更することができます。

    BigDecimal("1234567890.123456789").to_s("E")  # => "0.1234567890123456789E10"
    BigDecimal("1234567890.123456789").to_s("F")  # => "1234567890.123456789"
    BigDecimal("1234567890.123456789").to_s("5E") # => "0.12345 67890 12345 6789E10"
    BigDecimal("1234567890.123456789").to_s("5F") # => "12345 67890.12345 6789"

