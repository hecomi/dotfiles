names=recvmsg
visibility=public
kind=defined

--- recvmsg(maxmesglen=nil, flags=0, maxcontrollen=nil, opts={}) -> [String, Addrinfo, Integer, *Socket::AncillaryData]

[[man:recvmsg(2)]] を用いてメッセージを受け取ります。

このメソッドはブロックします。ノンブロッキング方式で通信したい
場合は [[m:BasicSocket#recvmsg_nonblock]] を用います。

maxmesglen, maxcontrollen で受け取るメッセージおよび補助データ
([[c:Socket::AncillaryData]])の最大長をバイト単位で指定します。
省略した場合は必要なだけ内部バッファを拡大して
データが切れないようにします。

flags では Socket::MSG_* という名前の定数の biwsise OR を取った
ものを渡します。

opts にはその他のオプションを渡します。今のところ :scm_right => bool
というオプションのみ利用できます。このオプションに
真を渡すと、 SCM_RIGHTS 制御メッセージを受け取ったときに、メッセージに含まれる
IO オブジェクトを生成します。詳しくは [[m:Socket::AncillaryData#unix_rights]]
を参照してください。

返り値は配列で得られます。

返り値の配列の最初の要素は受け取ったメッセージを表す文字列です。

2番目の要素は connection-less socket の場合には送り元の
アドレスが [[c:Addrinfo]] オブジェクトとして含まれています。
TCP のような connection-oriented socket の場合は
何が含まれているかはプラットフォーム依存です。

3番目の要素は受け取ったメッセージに付加されているフラグで、
Socket::MSG_* 定数の bitwise OR で表現されています。

残りの要素は補助データ([[c:Socket::AncillaryData]] オブジェクト)です。

  # UnixSocket#recv_io を recvmsg で実装する例
  mesg, sender_sockaddr, rflags, *controls = sock.recvmsg(:scm_rights=>true)
  controls.each {|ancdata|
    if ancdata.cmsg_is?(:SOCKET, :RIGHTS)
      return ancdata.unix_rights[0]
    end
  }

@param maxmesglen 受け取るメッセージの最大長
@param flags フラグ
@param maxcontrollen 受け取る補助データの最大長
@param opts ハッシュオプション

