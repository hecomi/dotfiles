names=byteslice
visibility=public
kind=defined

--- byteslice(nth)         -> String | nil

nth バイト目の文字を返します。nth が負の場合は文字列の末尾から数えます。
引数が範囲外を指定した場合は nil を返します。

@param nth 文字の位置を表す整数を指定します。

@return 切り出した文字列を返します。戻り値の文字エンコーディングは自身
        と同じです。

  "hello".byteslice(1)  # => "e"
  "hello".byteslice(-1) # => "o"
  "\u3042".byteslice(0) # => "\xE3"
  "\u3042".byteslice(1) # => "\x81"

@see [[m:String#slice]]

--- byteslice(nth, len) -> String | nil

nth バイト目から長さ len バイトの部分文字列を新しく作って返します。
nth が負の場合は文字列の末尾から数えます。引数が範囲外を指定した場合は
nil を返します。

@param nth 取得したい文字列の開始バイトを整数で指定します。

@param len 取得したい文字列の長さを正の整数で指定します。

@return 切り出した文字列を返します。戻り値の文字エンコーディングは自身
        と同じです。

  "hello".byteslice(1, 2)              # => "el"
  "\u3042\u3044\u3046".byteslice(0, 3) # => "\u3042"

@see [[m:String#slice]]

--- byteslice(range)          -> String | nil

range で指定したバイトの範囲に含まれる部分文字列を返します。引数が範囲
外を指定した場合は nil を返します。

@param range 取得したい文字列の範囲を示す Range オブジェクト

@return 切り出した文字列を返します。戻り値の文字エンコーディングは自身
        と同じです。

  "hello".byteslice(1..2)          # => "el"
  "\x03\u3042\xff".byteslice(1..3) # => "\u3042"

@see [[m:String#slice]]

