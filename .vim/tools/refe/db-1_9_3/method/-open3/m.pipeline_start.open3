names=pipeline_start
visibility=public
kind=defined

--- pipeline_start(*cmds) -> [Thread]
--- pipeline_start(*cmds) {|wait_thrs| ... } -> ()

指定したコマンドのリストをパイプで繋いで順番に実行します。

@param cmds 実行するコマンドのリストを指定します。それぞれのコマンドは
            以下のように [[c:String]] か [[c:Array]] で指定します。
            commandline にはコマンド全体(例. "nroff -man")を表す
            [[c:String]] を指定します。
            options には [[c:Hash]] で指定します。
            env には環境変数を [[c:Hash]] で指定します。
            cmdname にはコマンド名を表す [[c:String]] を指定します。
            1、2、3 は shell 経由で実行されます。

 (1) commandline
 (2) [commandline, options]
 (3) [env, commandline, options]
 (4) [env, cmdname, arg1, arg2, ..., options]
 (5) [env, [cmdname, argv0], arg1, ..., options]

@return ブロックを指定した場合はブロックの最後に評価された値を返します。
        ブロックを指定しなかった場合は実行したプロセスを待つためのスレッ
        ドの配列を返します。

例:

  require "open3"
  
  # xeyesを10秒だけ実行する。
  Open3.pipeline_start("xeyes") {|ts|
    sleep 10
    t = ts[0]
    Process.kill("TERM", t.pid)
    p t.value #=> #<Process::Status: pid 911 SIGTERM (signal 15)>
  }

@see [[m:Open3.#popen3]]

