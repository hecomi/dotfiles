requires=psych.nodes,psych.nodes.node,stringio,psych.nodes.stream,psych.nodes.document,psych.nodes.sequence,psych.nodes.scalar,psych.nodes.mapping,psych.nodes.alias,psych.streaming,psych.visitors,psych.visitors.visitor,psych.visitors.to_ruby,psych.scalar_scanner,strscan,psych.visitors.emitter,psych.visitors.yaml_tree,psych.visitors.json_tree,psych.visitors.depth_first,psych.handler,psych.tree_builder,psych.parser,psych.omap,psych.set,psych.coder,psych.core_ext,psych.deprecated,date,psych.json,psych.json.tree_builder,psych.json.stream,psych.stream
classes=Psych,Psych=Exception,Psych=Parser,Psych=Handler,Psych=Emitter
methods=
sublibraries=psych.nodes,psych.streaming,psych.visitors,psych.handler,psych.tree_builder,psych.parser,psych.omap,psych.set,psych.coder,psych.core_ext,psych.deprecated,psych.json,psych.stream,psych.json.tree_builder,psych.json.stream,psych.nodes.node,psych.nodes.stream,psych.nodes.document,psych.nodes.sequence,psych.nodes.scalar,psych.nodes.mapping,psych.nodes.alias,psych.scalar_scanner,psych.visitors.visitor,psych.visitors.to_ruby,psych.visitors.emitter,psych.visitors.yaml_tree,psych.visitors.json_tree,psych.visitors.depth_first
is_sublibrary=false
category=FileFormat

[[lib:yaml]] のバックエンドライブラリです。libyaml ベースで作成されてお
り、YAML バージョン 1.1 を扱う事ができます。


=== Overview

Psych is a YAML parser and emitter.  Psych leverages
libyaml[http://libyaml.org] for it's YAML parsing and emitting capabilities.
In addition to wrapping libyaml, Psych also knows how to serialize and
de-serialize most Ruby objects to and from the YAML format.

=== I NEED TO PARSE OR EMIT YAML RIGHT NOW!

  # Parse some YAML
  Psych.load("--- foo") # => "foo"

  # Emit some YAML
  Psych.dump("foo")     # => "--- foo\n...\n"
  { :a => 'b'}.to_yaml  # => "---\n:a: b\n"

Got more time on your hands?  Keep on reading!

==== YAML Parsing

Psych provides a range of interfaces for parsing a YAML document ranging from
low level to high level, depending on your parsing needs.  At the lowest
level, is an event based parser.  Mid level is access to the raw YAML AST,
and at the highest level is the ability to unmarshal YAML to ruby objects.

===== Low level parsing

The lowest level parser should be used when the YAML input is already known,
and the developer does not want to pay the price of building an AST or
automatic detection and conversion to ruby objects.  See Psych::Parser for
more information on using the event based parser.

===== Mid level parsing

Psych provides access to an AST produced from parsing a YAML document.  This
tree is built using the Psych::Parser and Psych::TreeBuilder.  The AST can
be examined and manipulated freely.  Please see Psych::parse_stream,
Psych::Nodes, and Psych::Nodes::Node for more information on dealing with
YAML syntax trees.

===== High level parsing

The high level YAML parser provided by Psych simply takes YAML as input and
returns a Ruby data structure.  For information on using the high level parser
see Psych.load

==== YAML Emitting

Psych provides a range of interfaces ranging from low to high level for
producing YAML documents.  Very similar to the YAML parsing interfaces, Psych
provides at the lowest level, an event based system, mid-level is building
a YAML AST, and the highest level is converting a Ruby object straight to
a YAML document.

===== Low level emitting

The lowest level emitter is an event based system.  Events are sent to a
Psych::Emitter object.  That object knows how to convert the events to a YAML
document.  This interface should be used when document format is known in
advance or speed is a concern.  See Psych::Emitter for more information.

===== Mid level emitting

At the mid level is building an AST.  This AST is exactly the same as the AST
used when parsing a YAML document.  Users can build an AST by hand and the
AST knows how to emit itself as a YAML document.  See Psych::Nodes,
Psych::Nodes::Node, and Psych::TreeBuilder for more information on building
a YAML AST.

===== High level emitting

The high level emitter has the easiest interface.  Psych simply takes a Ruby
data structure and converts it to a YAML document.  See Psych.dump for more
information on dumping a Ruby data structure.
